/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb; var common = require("../common");















var fs = require("fs");
var path = require("path");
var url = require("url");
var crypto = require("crypto");
var pfx2pem = require("../../util/certificates/pkcs").pfx2pem;
var Channel = require("../channel");
var async = require("async");
var utils = require("../utils");
var constants = require("../constants");
var cacheUtils = require("../cacheUtils");

var linkedRevisionControl = require("../linkedrevisioncontrol");

exports.init = function(cli) {

  var log = cli.output;
  var site = cli.category("site");
  var siteConfig = site.category("config").description("Commands to manage your site configurations");


  function getChannel() {
    var account = cli.category("account");
    var managementEndpoint = url.parse(utils.getManagementEndpointUrl(account.managementEndpointUrl()));
    var pem = account.managementCertificate();
    var host = managementEndpoint.hostname;
    var port = managementEndpoint.port;

    var channel = new Channel({
      host: host,
      port: port,
      key: pem.key,
      cert: pem.cert
    }).header("x-ms-version", "2011-02-25");

    var proxyString = (((process.env.HTTPS_PROXY || process.env.https_proxy) || process.env.ALL_PROXY) || process.env.all_proxy);





    if ((proxyString !== undefined)) {
      var proxyUrl = url.parse(proxyString);
      if (((proxyUrl.protocol !== "http:") && (proxyUrl.protocol !== "https:"))) {


        proxyUrl = url.parse(("http://" + proxyString)); } ;


      channel = channel.add({ proxy: proxyUrl }); } ;


    return channel; };


  siteConfig.command("list [name]").usage("[options] [name]").description("Show your site application settings").option("-s, --subscription <id>", "use the subscription id").execute(function __1(name, options, _) { var context, siteConfigurations; var __frame = { name: "__1", line: 75 }; return __func(_, this, arguments, __1, 2, __frame, function __$__1() {




      context = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription),
        site: {
          name: name } };



      return site.lookupSiteNameAndWebSpace(context, __cb(_, __frame, 8, 6, function __$__1() {

        return site.doSiteConfigGet(context, __cb(_, __frame, 10, 31, function ___(__0, __1) { siteConfigurations = __1;
          if ((siteConfigurations.AppSettings.length > 0)) {
            log.table(siteConfigurations.AppSettings, function(row, item) {
              row.cell("Name", item.GeoRegion); }); }

           else {
            log.info("No app settings defined yet. You can define app settings using \"azure site config set <name>=<value>."); } ; _(); }, true)); }, true)); }); });



  siteConfig.command("set <keyvaluepair> [name]").usage("[options] <keyvaluepair> [name]").description("Sets an application setting for your site").option("-s, --subscription <id>", "use the subscription id").execute(function __2(keyvaluepair, name, options, _) { var context, setting, siteConfigurations, siteConfig; var __frame = { name: "__2", line: 99 }; return __func(_, this, arguments, __2, 3, __frame, function __$__2() {




      context = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription),
        site: {
          name: name },

        keyvaluepair: options.keyvaluepair };


      console.log(context);
      setting = context.keyvaluepair.split("=");

      return site.lookupSiteNameAndWebSpace(context, __cb(_, __frame, 12, 6, function __$__2() {
        return site.doSiteConfigGet(context, __cb(_, __frame, 13, 31, function ___(__0, __1) { siteConfigurations = __1;
          siteConfigurations.AppSettings[setting[0]] = setting[1];

          console.log(siteConfigurations);

          siteConfig = {
            SiteConfig: siteConfigurations };


          return site.doSiteConfigPUT(siteConfig, context, __cb(_, __frame, 22, 6, _, true)); }, true)); }, true)); }); });


  siteConfig.command("unset <key> [name]").usage("[options] <keyvaluepair> [name]").description("Unsets an application setting for your site").option("-s, --subscription <id>", "use the subscription id").execute(function __3(keyvaluepair, name, options, _) { var context; var __frame = { name: "__3", line: 128 }; return __func(_, this, arguments, __3, 3, __frame, function __$__3() {




      context = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription),
        site: {
          name: name },

        keyvaluepair: options.keyvaluepair };


      return site.lookupSiteNameAndWebSpace(context, __cb(_, __frame, 9, 6, _, true)); }); });};