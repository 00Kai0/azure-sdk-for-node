/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb; var common = require("../common");















var fs = require("fs");
var path = require("path");
var url = require("url");
var crypto = require("crypto");
var pfx2pem = require("../../util/certificates/pkcs").pfx2pem;
var Channel = require("../channel");
var async = require("async");
var utils = require("../utils");
var constants = require("../constants");
var cacheUtils = require("../cacheUtils");

var connectionStringParser = require("../../services/core/connectionstringparser");
var linkedRevisionControl = require("../linkedrevisioncontrol");

exports.init = function(cli) {

  var log = cli.output;
  var site = cli.category("site");
  var siteConfig = site.category("config").description("Commands to manage your site configurations");


  function getChannel() {
    var account = cli.category("account");
    var managementEndpoint = url.parse(utils.getManagementEndpointUrl(account.managementEndpointUrl()));
    var pem = account.managementCertificate();
    var host = managementEndpoint.hostname;
    var port = managementEndpoint.port;

    var channel = new Channel({
      host: host,
      port: port,
      key: pem.key,
      cert: pem.cert
    }).header("x-ms-version", "2011-02-25");

    var proxyString = (((process.env.HTTPS_PROXY || process.env.https_proxy) || process.env.ALL_PROXY) || process.env.all_proxy);





    if ((proxyString !== undefined)) {
      var proxyUrl = url.parse(proxyString);
      if (((proxyUrl.protocol !== "http:") && (proxyUrl.protocol !== "https:"))) {


        proxyUrl = url.parse(("http://" + proxyString)); } ;


      channel = channel.add({ proxy: proxyUrl }); } ;


    return channel; };


  siteConfig.command("list [name]").usage("[options] [name]").description("Show your site application settings").option("-s, --subscription <id>", "use the subscription id").execute(function __1(name, options, _) { var context, siteConfigurations; var __frame = { name: "__1", line: 76 }; return __func(_, this, arguments, __1, 2, __frame, function __$__1() {




      context = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription),
        site: {
          name: name } };



      return site.lookupSiteNameAndWebSpace(context, __cb(_, __frame, 8, 6, function __$__1() {

        return site.doSiteConfigGet(context, __cb(_, __frame, 10, 31, function ___(__0, __1) { siteConfigurations = __1;
          if (siteConfigurations.AppSettings.NameValuePair) {
            if (siteConfigurations.AppSettings.NameValuePair.Name) {
              siteConfigurations.AppSettings.NameValuePair = [siteConfigurations.AppSettings.NameValuePair,]; } ;


            log.table(siteConfigurations.AppSettings.NameValuePair, function(row, item) {
              row.cell("Name", item.Name);
              row.cell("Value", item.Value); }); }

           else {
            log.info("No app settings defined yet. You can define app settings using \"azure site config set <name>=<value>."); } ; _(); }, true)); }, true)); }); });



  siteConfig.command("add <keyvaluepair> [name]").usage("[options] <keyvaluepair> [name]").description("Adds an application setting for your site").option("-s, --subscription <id>", "use the subscription id").execute(function __2(keyvaluepair, name, options, _) { var context, settings, siteConfigurations, setting; var __frame = { name: "__2", line: 105 }; return __func(_, this, arguments, __2, 3, __frame, function __$__2() {




      context = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription),
        site: {
          name: name },

        keyvaluepair: keyvaluepair };


      settings = connectionStringParser.parse(context.keyvaluepair);

      return site.lookupSiteNameAndWebSpace(context, __cb(_, __frame, 11, 6, function __$__2() {
        return site.doSiteConfigGet(context, __cb(_, __frame, 12, 31, function ___(__0, __1) { siteConfigurations = __1;

          if ((Object.keys(settings).length > 0)) {
            if (!siteConfigurations.AppSettings.NameValuePair) {
              siteConfigurations.AppSettings.NameValuePair = []; } else {
              if (siteConfigurations.AppSettings.NameValuePair.Name) {
                siteConfigurations.AppSettings.NamevaluePair = [siteConfigurations.AppSettings.NamevaluePair,]; } ; } ;


            for (setting in settings) {
              if (settings.hasOwnProperty(setting)) {
                if (siteConfigurations.AppSettings.NameValuePair.some(function(kvp) {
                  return (kvp.Name === setting);
                })) {

                  return _(new Error((("Application setting with key \"" + setting) + "\" already exists."))); } ;


                siteConfigurations.AppSettings.NameValuePair.push({
                  Name: setting,
                  Value: settings[setting] }); } ; }; } ;





          return site.doSiteConfigPUT(siteConfigurations, context, __cb(_, __frame, 38, 6, _, true)); }, true)); }, true)); }); });


  siteConfig.command("clear <key> [name]").usage("[options] <key> [name]").description("Clears an application setting for your site").option("-s, --subscription <id>", "use the subscription id").execute(function __3(key, name, options, _) { var context, siteConfigurations, found, settings, i; var __frame = { name: "__3", line: 150 }; return __func(_, this, arguments, __3, 3, __frame, function __$__3() {




      context = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription),
        site: {
          name: name },

        key: key };


      return site.lookupSiteNameAndWebSpace(context, __cb(_, __frame, 9, 6, function __$__3() {
        return site.doSiteConfigGet(context, __cb(_, __frame, 10, 31, function ___(__0, __1) { siteConfigurations = __1;

          found = false; return (function __$__3(__then) {
            if (siteConfigurations.AppSettings.NameValuePair) {
              settings = siteConfigurations.AppSettings.NameValuePair;
              if (settings.Name) {
                settings = [settings,]; } ;


              for (i = 0; (i < settings.length); i++) {
                if ((settings[i].Name === key)) {
                  settings.splice(i, 1);
                  found = true;
                  i--; } ; }; return (function __$__3(__then) {



                if (found) {
                  siteConfigurations.AppSettings.NameValuePair = settings;
                  return site.doSiteConfigPUT(siteConfigurations, context, __cb(_, __frame, 29, 10, __then, true)); } else { __then(); } ; })(__then); } else { __then(); } ; })(function __$__3() {



            if (!found) {
              return _(Error((("Application setting with key \"" + key) + "\" does not exist."))); } ; _(); }); }, true)); }, true)); }); });



  siteConfig.command("get <key> [name]").usage("[options] <key> [name]").description("Gets an application setting for your site").option("-s, --subscription <id>", "use the subscription id").execute(function __4(key, name, options, _) { var context, siteConfigurations, found, settings, i; var __frame = { name: "__4", line: 192 }; return __func(_, this, arguments, __4, 3, __frame, function __$__4() {




      context = {
        subscription: cli.category("account").lookupSubscriptionId(options.subscription),
        site: {
          name: name },

        key: key };


      return site.lookupSiteNameAndWebSpace(context, __cb(_, __frame, 9, 6, function __$__4() {
        return site.doSiteConfigGet(context, __cb(_, __frame, 10, 31, function ___(__0, __1) { siteConfigurations = __1;

          found = false;
          if (siteConfigurations.AppSettings.NameValuePair) {
            settings = siteConfigurations.AppSettings.NameValuePair;
            if (settings.Name) {
              settings = [settings,]; } ;


            for (i = 0; (i < settings.length); i++) {
              if ((settings[i].Name === key)) {
                log.data("Value: ", settings[i].Value); return _(null); } ; }; } ;





          if (!found) {
            return _(Error((("Application setting with key \"" + key) + "\" does not exist."))); } ; _(); }, true)); }, true)); }); });};