/*** Generated by streamline 0.3.6 (callbacks) - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch,__trap=__rt.__trap,__propagate=__rt.__propagate,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g;
            (function main(_) {
              var common, fs, path, url, crypto, pfx2pem, Channel, async, child_process, utils, constants, cacheUtils, _;
              var __frame = {
                name: "main",
                line: 1
              };
              return __func(_, this, arguments, main, 0, __frame, function __$main() {
/*    19 */     common = require("../common");
/*    20 */     fs = require("fs");
/*    21 */     path = require("path");
/*    22 */     url = require("url");
/*    23 */     crypto = require("crypto");
/*    24 */     pfx2pem = require("../../util/certificates/pkcs").pfx2pem;
/*    25 */     Channel = require("../channel");
/*    26 */     async = require("async");
/*    27 */     child_process = require("child_process");
/*    28 */     utils = require("../utils");
/*    29 */     constants = require("../constants");
/*    30 */     cacheUtils = require("../cacheUtils");
/*    31 */     _ = require("underscore");
/*    32 */     _.mixin(require("underscore.string"));
/*    34 */     exports.init = function(cli) {
/*    36 */       var log = cli.output;
/*    37 */       var site = cli.category("site");
/*    38 */       var scm = site.category("deployment").description("Commands to manage your git deployments");
/*    41 */       function getScmChannel(context) {
/*    42 */         var parts = url.parse(context.repositoryUri);
/*    43 */         var channel = new Channel({
/*    44 */           host: parts.hostname,
/*    45 */           port: (((parts.port && parseInt(parts.port, 10))) || ((/https/i.test(parts.protocol) ? 443 : 80))),
/*    46 */           auth: context.repositoryAuth
                    });
/*    49 */         var proxyString = (((process.env.HTTPS_PROXY || process.env.https_proxy) || process.env.ALL_PROXY) || process.env.all_proxy);
/*    55 */         if ((proxyString !== undefined)) {
/*    56 */           var proxyUrl = url.parse(proxyString);
/*    57 */           if (((proxyUrl.protocol !== "http:") && (proxyUrl.protocol !== "https:"))) {
/*    60 */             proxyUrl = url.parse(("http://" + proxyString));
                      }
                    ;
/*    63 */           channel = channel.add({
/*    63 */             proxy: proxyUrl
                      });
                    }
                  ;
/*    66 */         return channel;
                  };
/*    68 */       scm.getScmChannel = getScmChannel;
/*    70 */       scm.command("list [name]").whiteListPowershell().usage("[options] [name]").description("List your git deployments").option("-s, --subscription <id>", "use the subscription id").option("-m, --max <count>", "limit the maximum number of results").execute(function __1(name, options, _) {
                    var context, repositoryUri;
                    var __frame = {
                      name: "__1",
                      line: 76
                    };
                    return __func(_, this, arguments, __1, 2, __frame, function __$__1() {
/*    77 */           context = {
/*    78 */             subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*    79 */             maxItems: options.max,
/*    80 */             site: {
/*    81 */               name: name
                        }
                      };
/*    85 */           return ensureRepositoryUri(context, __cb(_, __frame, 9, 26, function ___(__0, __1) {
                        repositoryUri = __1;
                        return (function __$__1(__then) {
/*    86 */               if (repositoryUri) {
/*    87 */                 return listDeployments(context, __cb(_, __frame, 11, 8, __then, true));
                          }
                           else {
/*    89 */                 log.error("Repository is not setup");
                            __then();
                          }
                        ;
                        })(_);
                      }, true));
                    });
                  });
/*    93 */       scm.command("show <commitId> [name]").whiteListPowershell().usage("[options] <commitId> [name]").description("Show your git deployment").option("-s, --subscription <id>", "use the subscription id").option("-d, --details", "display log details").execute(function __2(commitId, name, options, _) {
                    var context, repositoryUri, deployment, data, logs, i, details, j;
                    var __frame = {
                      name: "__2",
                      line: 99
                    };
                    return __func(_, this, arguments, __2, 3, __frame, function __$__2() {
/*   100 */           context = {
/*   101 */             subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   102 */             shortId: commitId,
/*   103 */             site: {
/*   104 */               name: name
                        }
                      };
/*   108 */           return cacheUtils.readCommitId(context, __cb(_, __frame, 9, 25, function ___(__0, __2) {
/*   108 */             var __1 = !(context.id = __2);
                        return (function __$__2(__then) {
                          if (__1) {
/*   109 */                 return _(null, log.error((("deployment with " + commitId) + " does not exist")));
                          }
                           else {
                            __then();
                          }
                        ;
                        })(function __$__2() {
/*   112 */               return ensureRepositoryUri(context, __cb(_, __frame, 13, 26, function ___(__0, __3) {
                            repositoryUri = __3;
                            return (function __$__2(__then) {
/*   113 */                   if (repositoryUri) {
/*   114 */                     return scm.doDeploymentGet(context, __cb(_, __frame, 15, 25, function ___(__0, __4) {
                                  deployment = __4;
                                  return (function __$__2(__then) {
/*   116 */                         if (log.format().json) {
/*   117 */                           data = deployment;
                                      return (function __$__2(__then) {
/*   118 */                             if (options.details) {
/*   119 */                               return getLogDetails(context, __cb(_, __frame, 20, 24, function ___(__0, __5) {
/*   119 */                                 data.logs = __5;
                                            __then();
                                          }, true));
                                        }
                                         else {
                                          __then();
                                        }
                                      ;
                                      })(function __$__2() {
/*   122 */                             log.json(data);
                                        __then();
                                      });
                                    }
                                     else {
/*   124 */                           site.logEachData("info", deployment);
                                      return (function __$__2(__then) {
/*   125 */                             if (options.details) {
/*   126 */                               return getLogDetails(context, __cb(_, __frame, 27, 23, function ___(__0, __6) {
                                            logs = __6;
/*   127 */                                 for (i = 0; (i < logs.length); ++i) {
/*   128 */                                   displayLog(logs[i]);
/*   129 */                                   if (logs[i].details) {
/*   130 */                                     details = logs[i].details;
/*   131 */                                     for (j = 0; (j < details.length); ++j) {
/*   132 */                                       displayLog(details[j]);
                                                };
                                              }
                                            ;
                                            };
                                            __then();
                                          }, true));
                                        }
                                         else {
/*   137 */                               log.help("To see more details, specify -d or --details option");
                                          __then();
                                        }
                                      ;
                                      })(__then);
                                    }
                                  ;
                                  })(__then);
                                }, true));
                              }
                               else {
/*   141 */                     log.error("Repository is not setup");
                                __then();
                              }
                            ;
                            })(_);
                          }, true));
                        });
                      }, true));
                    });
                  });
/*   145 */       scm.command("redeploy <commitId> [name]").whiteListPowershell().usage("[options] <commitId> [name]").description("Redeploy your git deployment").option("-s, --subscription <id>", "use the subscription id").option("-q, --quiet", "quiet mode, do not ask for redeploy confirmation").execute(function __3(commitId, name, options, _) {
                    var context, repositoryUri;
                    var __frame = {
                      name: "__3",
                      line: 151
                    };
                    return __func(_, this, arguments, __3, 3, __frame, function __$__3() {
/*   152 */           context = {
/*   153 */             subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   154 */             shortId: commitId,
/*   155 */             site: {
/*   156 */               name: name
                        }
                      };
/*   160 */           return cacheUtils.readCommitId(context, __cb(_, __frame, 9, 25, function ___(__0, __3) {
/*   160 */             var __2 = !(context.id = __3);
                        return (function __$__3(__then) {
                          if (__2) {
/*   161 */                 return _(null, log.error((("deployment with " + commitId) + " does not exist")));
                          }
                           else {
                            __then();
                          }
                        ;
                        })(function __$__3() {
/*   164 */               return ensureRepositoryUri(context, __cb(_, __frame, 13, 26, function ___(__0, __4) {
                            repositoryUri = __4;
                            return (function __$__3(__then) {
/*   165 */                   if (repositoryUri) {
                                return (function __$__3(_) {
/*   166 */                       var __1 = !options.quiet;
                                  if (!__1) {
                                    return _(null, __1);
                                  }
                                ;
/*   166 */                       return site.confirm((("Reploy deployment with " + context.shortId) + " id?  (y/n) "), __cb(_, __frame, 15, 31, function ___(__0, __3) {
/*   166 */                         var __2 = !__3;
                                    return _(null, __2);
                                  }, true));
                                })(__cb(_, __frame, -150, 17, function ___(__0, __5) {
                                  return (function __$__3(__then) {
                                    if (__5) {
                                      return _(null);
                                    }
                                     else {
                                      __then();
                                    }
                                  ;
                                  })(function __$__3() {
/*   169 */                         return scm.doDeploymentPut(context, __cb(_, __frame, 18, 8, function __$__3() {
/*   170 */                           return listDeployments(context, __cb(_, __frame, 19, 8, __then, true));
                                    }, true));
                                  });
                                }, true));
                              }
                               else {
/*   172 */                     log.error("Repository is not setup");
                                __then();
                              }
                            ;
                            })(_);
                          }, true));
                        });
                      }, true));
                    });
                  });
/*   176 */       scm.doDeploymentsGet = function scm_doDeploymentsGet__4(context, _) {
                    var maxItems, channel, progress, deployments;
                    var __frame = {
                      name: "scm_doDeploymentsGet__4",
                      line: 176
                    };
                    return __func(_, this, arguments, scm_doDeploymentsGet__4, 1, __frame, function __$scm_doDeploymentsGet__4() {
/*   177 */           maxItems = parseInt(context.maxItems, 10);
/*   178 */           if ((!maxItems || (maxItems <= 0))) {
/*   179 */             maxItems = 20;
                      }
                    ;
/*   185 */           channel = getScmChannel(context).path("deployments").query("$orderby", "ReceivedTime desc").query("$top", maxItems);
/*   187 */           progress = cli.progress("Enumerating deployments");
                      return (function ___(__then) {
                        (function ___(_) {
                          __tryCatch(_, function __$scm_doDeploymentsGet__4() {
/*   189 */                 return channel.GET(__cb(_, __frame, 13, 44, function ___(__0, __1) {
/*   189 */                   deployments = ensureShortCommitId(__1);
/*   190 */                   return cacheUtils.saveCommitIds(context, deployments, __cb(_, __frame, 14, 6, function __$scm_doDeploymentsGet__4() {
/*   191 */                     return _(null, deployments.map(formatDeployment));
                              }, true));
                            }, true));
                          });
                        })(function ___(__e, __r, __cont) {
                          (function ___(__then) {
                            __tryCatch(_, function __$scm_doDeploymentsGet__4() {
/*   193 */                   progress.end();
                              __then();
                            });
                          })(function ___() {
                            __tryCatch(_, function ___() {
                              if (__cont) {
                                __then();
                              } else {
                                _(__e, __r);
                              };
                            });
                          });
                        });
                      })(function ___() {
                        __tryCatch(_, _);
                      });
                    });
                  };
/*   197 */       scm.doDeploymentGet = function scm_doDeploymentGet__5(context, _) {
                    var channel, progress;
                    var __frame = {
                      name: "scm_doDeploymentGet__5",
                      line: 197
                    };
                    return __func(_, this, arguments, scm_doDeploymentGet__5, 1, __frame, function __$scm_doDeploymentGet__5() {
/*   200 */           channel = getScmChannel(context).path("deployments").path(context.id);
/*   201 */           progress = cli.progress("Retrieving deployment info");
                      return (function ___(__then) {
                        (function ___(_) {
                          __tryCatch(_, function __$scm_doDeploymentGet__5() {
/*   203 */                 return channel.GET(__cb(_, __frame, 6, 30, function ___(__0, __2) {
/*   203 */                   var __1 = formatDeployment(__2);
                              return _(null, __1);
                            }, true));
                          });
                        })(function ___(__e, __r, __cont) {
                          (function ___(__then) {
                            __tryCatch(_, function __$scm_doDeploymentGet__5() {
/*   205 */                   progress.end();
                              __then();
                            });
                          })(function ___() {
                            __tryCatch(_, function ___() {
                              if (__cont) {
                                __then();
                              } else {
                                _(__e, __r);
                              };
                            });
                          });
                        });
                      })(function ___() {
                        __tryCatch(_, _);
                      });
                    });
                  };
/*   209 */       scm.doDeploymentPut = function scm_doDeploymentPut__6(context, _) {
                    var channel, progress;
                    var __frame = {
                      name: "scm_doDeploymentPut__6",
                      line: 209
                    };
                    return __func(_, this, arguments, scm_doDeploymentPut__6, 1, __frame, function __$scm_doDeploymentPut__6() {
/*   212 */           channel = getScmChannel(context).path("deployments").path(context.id);
/*   213 */           progress = cli.progress("Redeploying deployment");
                      return (function ___(__then) {
                        (function ___(_) {
                          __tryCatch(_, function __$scm_doDeploymentPut__6() {
/*   215 */                 return channel.PUT(null, __cb(_, __frame, 6, 13, _, true));
                          });
                        })(function ___(__e, __r, __cont) {
                          (function ___(__then) {
                            __tryCatch(_, function __$scm_doDeploymentPut__6() {
/*   217 */                   progress.end();
                              __then();
                            });
                          })(function ___() {
                            __tryCatch(_, function ___() {
                              if (__cont) {
                                __then();
                              } else {
                                _(__e, __r);
                              };
                            });
                          });
                        });
                      })(function ___() {
                        __tryCatch(_, _);
                      });
                    });
                  };
/*   221 */       scm.doLogGet = function scm_doLogGet__7(context, _) {
                    var channel, progress, logs;
                    var __frame = {
                      name: "scm_doLogGet__7",
                      line: 221
                    };
                    return __func(_, this, arguments, scm_doLogGet__7, 1, __frame, function __$scm_doLogGet__7() {
/*   225 */           channel = getScmChannel(context).path("deployments").path(context.id).path("log");
/*   226 */           progress = cli.progress("Retrieving deployment log info");
                      return (function ___(__then) {
                        (function ___(_) {
                          __tryCatch(_, function __$scm_doLogGet__7() {
/*   228 */                 return channel.GET(__cb(_, __frame, 7, 17, function ___(__0, __1) {
                              logs = __1;
/*   229 */                   return _(null, logs.map(formatLog));
                            }, true));
                          });
                        })(function ___(__e, __r, __cont) {
                          (function ___(__then) {
                            __tryCatch(_, function __$scm_doLogGet__7() {
/*   231 */                   progress.end();
                              __then();
                            });
                          })(function ___() {
                            __tryCatch(_, function ___() {
                              if (__cont) {
                                __then();
                              } else {
                                _(__e, __r);
                              };
                            });
                          });
                        });
                      })(function ___() {
                        __tryCatch(_, _);
                      });
                    });
                  };
/*   235 */       function listDeployments(context, _) {
                    var deployments, authorLength, messageLength;
                    var __frame = {
                      name: "listDeployments",
                      line: 235
                    };
                    return __func(_, this, arguments, listDeployments, 1, __frame, function __$listDeployments() {
/*   236 */           return scm.doDeploymentsGet(context, __cb(_, __frame, 1, 22, function ___(__0, __1) {
                        deployments = __1;
/*   237 */             authorLength = 0;
/*   237 */             messageLength = 0;
/*   238 */             if ((deployments && deployments.length)) {
/*   239 */               log.table(deployments, function(row, deployment) {
/*   240 */                 row.cell("Time", deployment.start_time);
/*   241 */                 row.cell("Commit id", deployment.shortId);
/*   242 */                 row.cell("Status", deployment.status);
/*   243 */                 authorLength = Math.max(deployment.author.length, authorLength);
/*   244 */                 row.cell("Author", deployment.author, null, Math.min(authorLength, 15));
/*   245 */                 messageLength = Math.max(deployment.message.length, messageLength);
/*   246 */                 row.cell("Message", deployment.message, null, Math.min(messageLength, 40));
                          });
                        }
/*   248 */              else {
/*   249 */               log.info("No git deployment found");
                        }
                      ;
                        _();
                      }, true));
                    });
                  };
/*   253 */       function getLogDetails(context, _) {
                    var results, logs, progress, i;
                    var __frame = {
                      name: "getLogDetails",
                      line: 253
                    };
                    return __func(_, this, arguments, getLogDetails, 1, __frame, function __$getLogDetails() {
/*   255 */           return scm.doLogGet(context, __cb(_, __frame, 2, 15, function ___(__0, __2) {
                        logs = __2;
                        return (function __$getLogDetails(__then) {
/*   256 */               if ((logs && logs.length)) {
/*   257 */                 progress = cli.progress("Retrieving log details");
                            return (function ___(__then) {
                              (function ___(_) {
                                __tryCatch(_, function __$getLogDetails() {
/*   259 */                       return async.map(logs, function __1(log, _) {
                                    var details;
                                    var __frame = {
                                      name: "__1",
                                      line: 259
                                    };
                                    return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
                                      return (function __$__1(__then) {
/*   260 */                             if (log.hasDetails) {
/*   266 */                               return getScmChannel(context).path("deployments").path(context.id).path("log").path(log.id).GET(__cb(_, __frame, 7, 26, function ___(__0, __1) {
                                            details = __1;
/*   267 */                                 return _(null, details.map(formatLog));
                                          }, true));
                                        }
                                         else {
                                          __then();
                                        }
                                      ;
                                      })(_);
                                    });
                                  }, __cb(_, __frame, 6, 18, function ___(__0, __3) {
/*   259 */                         results = __3;
                                    _(null, null, true);
                                  }, true));
                                });
                              })(function ___(__e, __r, __cont) {
                                (function ___(__then) {
                                  __tryCatch(_, function __$getLogDetails() {
/*   271 */                         progress.end();
                                    __then();
                                  });
                                })(function ___() {
                                  __tryCatch(_, function ___() {
                                    if (__cont) {
                                      __then();
                                    } else {
                                      _(__e, __r);
                                    };
                                  });
                                });
                              });
                            })(function ___() {
                              __tryCatch(_, function __$getLogDetails() {
/*   274 */                     for (i = 0; (i < logs.length); ++i) {
/*   275 */                       if (results[i]) {
/*   276 */                         logs[i].details = results[i];
                                  }
                                ;
                                };
/*   280 */                     return _(null, logs);
                              });
                            });
                          }
                           else {
/*   282 */                 log.info("deployment has no detail");
/*   283 */                 return _(null, []);
                          }
                        ;
                        })(_);
                      }, true));
                    });
                  };
/*   287 */       function displayLog(item) {
/*   288 */         if ((item.type === "Warning")) {
/*   289 */           log.warn(((item.short_time + " ") + item.message));
                    }
/*   290 */          else if ((item.type === "Error")) {
/*   291 */           log.error(((item.short_time + " ") + item.message));
                    }
/*   292 */          else {
/*   293 */           log.data(((item.short_time + " ") + item.message));
                    }
                    
                  ;
                  };
/*   297 */       function fromJsonDate(str) {
/*   298 */         return eval(str.replace(/\/Date\((.*)[+].*\)\//gi, "new Date($1)"));
                  };
/*   301 */       function formatDate(dt) {
/*   302 */         var date = dt.getDate(), month = (dt.getMonth() + 1);
/*   304 */         date = ((((date < 10) ? "0" : "")) + date);
/*   305 */         month = ((((month < 10) ? "0" : "")) + month);
/*   306 */         return ((((((dt.getFullYear() + "-") + month) + "-") + date) + " ") + dt.toLocaleTimeString());
                  };
/*   309 */       function dateTimeText(str) {
/*   310 */         return formatDate(fromJsonDate(str));
                  };
/*   313 */       function deploymentStatusText(status) {
/*   314 */         switch (status) {
/*   315 */         case 0:
/*   315 */           return "Pending";
/*   315 */         case 1:
/*   316 */           return "Building";
/*   316 */         case 2:
/*   317 */           return "Deploying";
/*   317 */         case 3:
/*   318 */           return "Failed";
/*   318 */         case 4:
/*   319 */           return "Success";
/*   319 */           default:
/*   320 */           return "Unknown";
/*   320 */         };
                  };
/*   324 */       function logTypeText(type) {
/*   325 */         switch (type) {
/*   326 */         case 0:
/*   326 */           return "Message";
/*   326 */         case 1:
/*   327 */           return "Warning";
/*   327 */         case 2:
/*   328 */           return "Error";
/*   328 */           default:
/*   329 */           return "Unknown";
/*   329 */         };
                  };
/*   333 */       function ensureShortCommitId(deployments) {
/*   334 */         return deployments.map(function(deployment) {
/*   335 */           deployment.shortId = deployment.id.substr(0, 10);
/*   336 */           return deployment;
                    });
                  };
/*   340 */       function ensureRepositoryUri(context, _) {
                    var siteData, repositoryUri;
                    var __frame = {
                      name: "ensureRepositoryUri",
                      line: 340
                    };
                    return __func(_, this, arguments, ensureRepositoryUri, 1, __frame, function __$ensureRepositoryUri() {
/*   341 */           return site.lookupSiteNameAndWebSpace(context, __cb(_, __frame, 1, 19, function ___(__0, __1) {
                        siteData = __1;
/*   342 */             repositoryUri = (siteData && site.getRepositoryUri(siteData));
                        return (function __$ensureRepositoryUri(__then) {
/*   343 */               if (!repositoryUri) {
/*   344 */                 return site.doSiteGet(context, __cb(_, __frame, 4, 17, function ___(__0, __2) {
/*   344 */                   siteData = __2;
/*   345 */                   repositoryUri = site.getRepositoryUri(siteData);
                              __then();
                            }, true));
                          }
                           else {
                            __then();
                          }
                        ;
                        })(function __$ensureRepositoryUri() {
/*   347 */               if (repositoryUri) {
/*   348 */                 context.repositoryAuth = site.getRepositoryAuth(siteData);
/*   349 */                 return _(null, context.repositoryUri = repositoryUri);
                          }
                        ;
                          _();
                        });
                      }, true));
                    });
                  };
/*   352 */       scm.ensureRepositoryUri = ensureRepositoryUri;
/*   354 */       function formatDeployment(deployment) {
/*   355 */         var timeProperties = ["end_time","last_success_end_time","received_time","start_time",];
/*   356 */         for (var i = 0; (i < timeProperties.length); ++i) {
/*   357 */           if (deployment[timeProperties[i]]) {
/*   358 */             deployment[timeProperties[i]] = dateTimeText(deployment[timeProperties[i]]);
                      }
                    ;
                    };
/*   361 */         deployment.complete = (!!deployment.complete).toString();
/*   362 */         deployment.status = (deployment.active ? "Active" : deploymentStatusText(deployment.status));
/*   363 */         deployment.message = deployment.message.replace(/\s*(.*)\s*?/g, "$1");
/*   364 */         delete deployment.active;
/*   365 */         delete deployment.status_text;
/*   366 */         delete deployment.url;
/*   367 */         delete deployment.log_url;
/*   368 */         return deployment;
                  };
/*   371 */       function formatLog(log) {
/*   372 */         log.hasDetails = !!log.details_url;
/*   373 */         log.log_time = (log.log_time && dateTimeText(log.log_time));
/*   374 */         log.short_time = (log.log_time && log.log_time.replace(/.* +(.*)/g, "$1"));
/*   375 */         log.type = logTypeText(log.type);
/*   376 */         log.shortId = log.id.substr(0, 10);
/*   377 */         delete log.details_url;
/*   378 */         return log;
                  };
                };
                _();
              });
            }).call(this, __trap);
