/*** Generated by streamline 0.2.5 - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch,__propagate=__rt.__propagate,__trap=__rt.__trap,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g;
/*     1 */ var common = require("../common");
/*    20 */ var fs = require("fs");
/*    21 */ var path = require("path");
/*    22 */ var url = require("url");
/*    23 */ var crypto = require("crypto");
/*    24 */ var pfx2pem = require("../../util/certificates/pkcs").pfx2pem;
/*    25 */ var Channel = require("../channel");
/*    26 */ var async = require("async");
/*    27 */ var child_process = require("child_process");
/*    28 */ var utils = require("../utils");
/*    29 */ var constants = require("../constants");
/*    30 */ var cacheUtils = require("../cacheUtils");
/*    32 */ exports.init = function(cli) {
/*    34 */   var log = cli.output;
/*    35 */   var site = cli.category("site");
/*    36 */   var scm = site.category("deployment").description("Commands to manage your git deployments");
/*    39 */   function getScmChannel(context) {
/*    40 */     var parts = url.parse(context.repositoryUri);
/*    41 */     var channel = new Channel({
/*    42 */       host: parts.hostname,
/*    43 */       port: (((parts.port && parseInt(parts.port, 10))) || ((/https/i.test(parts.protocol) ? 443 : 80))),
/*    44 */       auth: context.repositoryAuth
                });
/*    47 */     var proxyString = (((process.env.HTTPS_PROXY || process.env.https_proxy) || process.env.ALL_PROXY) || process.env.all_proxy);
/*    53 */     if ((proxyString !== undefined)) {
/*    54 */       var proxyUrl = url.parse(proxyString);
/*    55 */       if (((proxyUrl.protocol !== "http:") && (proxyUrl.protocol !== "https:"))) {
/*    58 */         proxyUrl = url.parse(("http://" + proxyString));
                  }
                ;
/*    61 */       channel = channel.add({
/*    61 */         proxy: proxyUrl
                  });
                }
              ;
/*    64 */     return channel;
              };
/*    66 */   scm.getScmChannel = getScmChannel;
/*    68 */   scm.command("list [name]").whiteListPowershell().usage("[options] [name]").description("List your git deployments").option("-s, --subscription <id>", "use the subscription id").option("-m, --max <count>", "limit the maximum number of results").execute(function __1(name, options, _) {
                var context, repositoryUri;
                var __frame = {
                  name: "__1",
                  line: 74
                };
                return __func(_, this, arguments, __1, 2, __frame, function __$__1() {
/*    75 */       context = {
/*    76 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*    77 */         maxItems: options.max,
/*    78 */         site: {
/*    79 */           name: name
                    }
                  };
/*    83 */       return ensureRepositoryUri(context, __cb(_, __frame, 9, 26, function ___(__0, __1) {
                    repositoryUri = __1;
                    return (function __$__1(__then) {
/*    84 */           if (repositoryUri) {
/*    85 */             return listDeployments(context, __cb(_, __frame, 11, 8, __then, true));
                      }
                       else {
/*    87 */             log.error("Repository is not setup");
                        __then();
                      }
                    ;
                    })(_);
                  }, true));
                });
              });
/*    91 */   scm.command("show <commitId> [name]").whiteListPowershell().usage("[options] <commitId> [name]").description("Show your git deployment").option("-s, --subscription <id>", "use the subscription id").option("-d, --details", "display log details").execute(function __2(commitId, name, options, _) {
                var context, repositoryUri, deployment;
                var __frame = {
                  name: "__2",
                  line: 97
                };
                return __func(_, this, arguments, __2, 3, __frame, function __$__2() {
/*    98 */       context = {
/*    99 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   100 */         shortId: commitId,
/*   101 */         site: {
/*   102 */           name: name
                    }
                  };
/*   106 */       return cacheUtils.readCommitId(context, __cb(_, __frame, 9, 25, function ___(__0, __2) {
/*   106 */         var __1 = !(context.id = __2);
                    return (function __$__2(__then) {
                      if (__1) {
/*   107 */             return _(null, log.error((("deployment with " + commitId) + " does not exist")));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(function __$__2() {
/*   110 */           return ensureRepositoryUri(context, __cb(_, __frame, 13, 26, function ___(__0, __3) {
                        repositoryUri = __3;
                        return (function __$__2(__then) {
/*   111 */               if (repositoryUri) {
/*   112 */                 return scm.doDeploymentGet(context, __cb(_, __frame, 15, 25, function ___(__0, __4) {
                              deployment = __4;
/*   113 */                   site.logEachData("info", deployment);
                              return (function __$__2(__then) {
/*   114 */                     if (options.details) {
/*   115 */                       return showLogDetails(context, __cb(_, __frame, 18, 10, __then, true));
                                }
                                 else {
/*   117 */                       log.help("To see more details, specify -d or --details option");
                                  __then();
                                }
                              ;
                              })(__then);
                            }, true));
                          }
                           else {
/*   120 */                 log.error("Repository is not setup");
                            __then();
                          }
                        ;
                        })(_);
                      }, true));
                    });
                  }, true));
                });
              });
/*   124 */   scm.command("redeploy <commitId> [name]").whiteListPowershell().usage("[options] <commitId> [name]").description("Redeploy your git deployment").option("-s, --subscription <id>", "use the subscription id").execute(function __3(commitId, name, options, _) {
                var context, repositoryUri;
                var __frame = {
                  name: "__3",
                  line: 129
                };
                return __func(_, this, arguments, __3, 3, __frame, function __$__3() {
/*   130 */       context = {
/*   131 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   132 */         shortId: commitId,
/*   133 */         site: {
/*   134 */           name: name
                    }
                  };
/*   138 */       return cacheUtils.readCommitId(context, __cb(_, __frame, 9, 25, function ___(__0, __2) {
/*   138 */         var __1 = !(context.id = __2);
                    return (function __$__3(__then) {
                      if (__1) {
/*   139 */             return _(null, log.error((("deployment with " + commitId) + " does not exist")));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(function __$__3() {
/*   142 */           return ensureRepositoryUri(context, __cb(_, __frame, 13, 26, function ___(__0, __3) {
                        repositoryUri = __3;
                        return (function __$__3(__then) {
/*   143 */               if (repositoryUri) {
/*   144 */                 return site.confirm((("Reploy deployment with " + context.shortId) + " id?  (y/n) "), __cb(_, __frame, 15, 13, function ___(__0, __5) {
/*   144 */                   var __4 = !__5;
                              return (function __$__3(__then) {
                                if (__4) {
                                  return _(null);
                                }
                                 else {
                                  __then();
                                }
                              ;
                              })(function __$__3() {
/*   147 */                     return scm.doDeploymentPut(context, __cb(_, __frame, 18, 8, function __$__3() {
/*   148 */                       return listDeployments(context, __cb(_, __frame, 19, 8, __then, true));
                                }, true));
                              });
                            }, true));
                          }
                           else {
/*   150 */                 log.error("Repository is not setup");
                            __then();
                          }
                        ;
                        })(_);
                      }, true));
                    });
                  }, true));
                });
              });
/*   154 */   scm.doDeploymentsGet = function scm_doDeploymentsGet__4(context, _) {
                var maxItems, channel, progress, deployments;
                var __frame = {
                  name: "scm_doDeploymentsGet__4",
                  line: 154
                };
                return __func(_, this, arguments, scm_doDeploymentsGet__4, 1, __frame, function __$scm_doDeploymentsGet__4() {
/*   155 */       maxItems = parseInt(context.maxItems, 10);
/*   156 */       if ((!maxItems || (maxItems <= 0))) {
/*   157 */         maxItems = 20;
                  }
                ;
/*   163 */       channel = getScmChannel(context).path("deployments").query("$orderby", "ReceivedTime desc").query("$top", maxItems);
/*   165 */       progress = cli.progress("Enumerating deployments");
                  return (function ___(__then) {
                    (function ___(_) {
                      __tryCatch(_, function __$scm_doDeploymentsGet__4() {
/*   167 */             return channel.GET(__cb(_, __frame, 13, 44, function ___(__0, __1) {
/*   167 */               deployments = ensureShortCommitId(__1);
/*   168 */               return cacheUtils.saveCommitIds(context, deployments, __cb(_, __frame, 14, 6, function __$scm_doDeploymentsGet__4() {
/*   169 */                 return _(null, deployments.map(formatDeployment));
                          }, true));
                        }, true));
                      });
                    })(function ___(__e, __r, __cont) {
                      (function ___(__then) {
                        __tryCatch(_, function __$scm_doDeploymentsGet__4() {
/*   171 */               progress.end();
                          __then();
                        });
                      })(function ___() {
                        __tryCatch(_, function ___() {
                          if (__cont) {
                            __then();
                          } else {
                            _(__e, __r);
                          };
                        });
                      });
                    });
                  })(function ___() {
                    __tryCatch(_, _);
                  });
                });
              };
/*   175 */   scm.doDeploymentGet = function scm_doDeploymentGet__5(context, _) {
                var channel, progress;
                var __frame = {
                  name: "scm_doDeploymentGet__5",
                  line: 175
                };
                return __func(_, this, arguments, scm_doDeploymentGet__5, 1, __frame, function __$scm_doDeploymentGet__5() {
/*   178 */       channel = getScmChannel(context).path("deployments").path(context.id);
/*   179 */       progress = cli.progress("Retrieving deployment info");
                  return (function ___(__then) {
                    (function ___(_) {
                      __tryCatch(_, function __$scm_doDeploymentGet__5() {
/*   181 */             return channel.GET(__cb(_, __frame, 6, 30, function ___(__0, __2) {
/*   181 */               var __1 = formatDeployment(__2);
                          return _(null, __1);
                        }, true));
                      });
                    })(function ___(__e, __r, __cont) {
                      (function ___(__then) {
                        __tryCatch(_, function __$scm_doDeploymentGet__5() {
/*   183 */               progress.end();
                          __then();
                        });
                      })(function ___() {
                        __tryCatch(_, function ___() {
                          if (__cont) {
                            __then();
                          } else {
                            _(__e, __r);
                          };
                        });
                      });
                    });
                  })(function ___() {
                    __tryCatch(_, _);
                  });
                });
              };
/*   187 */   scm.doDeploymentPut = function scm_doDeploymentPut__6(context, _) {
                var channel, progress;
                var __frame = {
                  name: "scm_doDeploymentPut__6",
                  line: 187
                };
                return __func(_, this, arguments, scm_doDeploymentPut__6, 1, __frame, function __$scm_doDeploymentPut__6() {
/*   190 */       channel = getScmChannel(context).path("deployments").path(context.id);
/*   191 */       progress = cli.progress("Redeploying deployment");
                  return (function ___(__then) {
                    (function ___(_) {
                      __tryCatch(_, function __$scm_doDeploymentPut__6() {
/*   193 */             return channel.PUT(null, __cb(_, __frame, 6, 13, _, true));
                      });
                    })(function ___(__e, __r, __cont) {
                      (function ___(__then) {
                        __tryCatch(_, function __$scm_doDeploymentPut__6() {
/*   195 */               progress.end();
                          __then();
                        });
                      })(function ___() {
                        __tryCatch(_, function ___() {
                          if (__cont) {
                            __then();
                          } else {
                            _(__e, __r);
                          };
                        });
                      });
                    });
                  })(function ___() {
                    __tryCatch(_, _);
                  });
                });
              };
/*   199 */   scm.doLogGet = function scm_doLogGet__7(context, _) {
                var channel, progress, logs;
                var __frame = {
                  name: "scm_doLogGet__7",
                  line: 199
                };
                return __func(_, this, arguments, scm_doLogGet__7, 1, __frame, function __$scm_doLogGet__7() {
/*   203 */       channel = getScmChannel(context).path("deployments").path(context.id).path("log");
/*   204 */       progress = cli.progress("Retrieving deployment log info");
                  return (function ___(__then) {
                    (function ___(_) {
                      __tryCatch(_, function __$scm_doLogGet__7() {
/*   206 */             return channel.GET(__cb(_, __frame, 7, 17, function ___(__0, __1) {
                          logs = __1;
/*   207 */               return _(null, logs.map(formatLog));
                        }, true));
                      });
                    })(function ___(__e, __r, __cont) {
                      (function ___(__then) {
                        __tryCatch(_, function __$scm_doLogGet__7() {
/*   209 */               progress.end();
                          __then();
                        });
                      })(function ___() {
                        __tryCatch(_, function ___() {
                          if (__cont) {
                            __then();
                          } else {
                            _(__e, __r);
                          };
                        });
                      });
                    });
                  })(function ___() {
                    __tryCatch(_, _);
                  });
                });
              };
/*   213 */   function listDeployments(context, _) {
                var deployments, authorLength, messageLength;
                var __frame = {
                  name: "listDeployments",
                  line: 213
                };
                return __func(_, this, arguments, listDeployments, 1, __frame, function __$listDeployments() {
/*   214 */       return scm.doDeploymentsGet(context, __cb(_, __frame, 1, 22, function ___(__0, __1) {
                    deployments = __1;
/*   215 */         authorLength = 0;
/*   215 */         messageLength = 0;
/*   216 */         log.table(deployments, function(row, deployment) {
/*   217 */           row.cell("Time", deployment.start_time);
/*   218 */           row.cell("Commit id", deployment.shortId);
/*   219 */           row.cell("Status", deployment.status);
/*   220 */           authorLength = Math.max(deployment.author.length, authorLength);
/*   221 */           row.cell("Author", deployment.author, null, Math.min(authorLength, 15));
/*   222 */           messageLength = Math.max(deployment.message.length, messageLength);
/*   223 */           row.cell("Message", deployment.message, null, Math.min(messageLength, 40));
                    });
                    _();
                  }, true));
                });
              };
/*   227 */   function showLogDetails(context, _) {
                var results, logs, progress, i, details, j;
                var __frame = {
                  name: "showLogDetails",
                  line: 227
                };
                return __func(_, this, arguments, showLogDetails, 1, __frame, function __$showLogDetails() {
/*   229 */       return scm.doLogGet(context, __cb(_, __frame, 2, 15, function ___(__0, __2) {
                    logs = __2;
                    return (function __$showLogDetails(__then) {
/*   230 */           if ((logs && logs.length)) {
/*   231 */             progress = cli.progress("Retrieving log details");
                        return (function ___(__then) {
                          (function ___(_) {
                            __tryCatch(_, function __$showLogDetails() {
/*   233 */                   return async.map(logs, function __1(log, _) {
                                var details;
                                var __frame = {
                                  name: "__1",
                                  line: 233
                                };
                                return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
                                  return (function __$__1(__then) {
/*   234 */                         if (log.hasDetails) {
/*   240 */                           return getScmChannel(context).path("deployments").path(context.id).path("log").path(log.id).GET(__cb(_, __frame, 7, 26, function ___(__0, __1) {
                                        details = __1;
/*   241 */                             return _(null, details.map(formatLog));
                                      }, true));
                                    }
                                     else {
                                      __then();
                                    }
                                  ;
                                  })(_);
                                });
                              }, __cb(_, __frame, 6, 18, function ___(__0, __3) {
/*   233 */                     results = __3;
                                _(null, null, true);
                              }, true));
                            });
                          })(function ___(__e, __r, __cont) {
                            (function ___(__then) {
                              __tryCatch(_, function __$showLogDetails() {
/*   245 */                     progress.end();
                                __then();
                              });
                            })(function ___() {
                              __tryCatch(_, function ___() {
                                if (__cont) {
                                  __then();
                                } else {
                                  _(__e, __r);
                                };
                              });
                            });
                          });
                        })(function ___() {
                          __tryCatch(_, function __$showLogDetails() {
/*   247 */                 for (i = 0; (i < logs.length); ++i) {
/*   248 */                   displayLog(logs[i]);
/*   249 */                   if (results[i]) {
/*   250 */                     details = results[i];
/*   251 */                     for (j = 0; (j < details.length); ++j) {
/*   252 */                       displayLog(details[j]);
                                };
                              }
                            ;
                            };
                            __then();
                          });
                        });
                      }
                       else {
/*   257 */             log.info("deployment has no detail");
                        __then();
                      }
                    ;
                    })(_);
                  }, true));
                });
              };
/*   261 */   function displayLog(item) {
/*   262 */     if ((item.type === "Warning")) {
/*   263 */       log.warn(((item.short_time + " ") + item.message));
                }
/*   264 */      else if ((item.type === "Error")) {
/*   265 */       log.error(((item.short_time + " ") + item.message));
                }
/*   266 */      else {
/*   267 */       log.data(((item.short_time + " ") + item.message));
                }
                
              ;
              };
/*   271 */   function fromJsonDate(str) {
/*   272 */     return eval(str.replace(/\/Date\((.*)[+].*\)\//gi, "new Date($1)"));
              };
/*   275 */   function formatDate(dt) {
/*   276 */     var date = dt.getDate(), month = dt.getMonth();
/*   278 */     date = ((((date < 10) ? "0" : "")) + date);
/*   279 */     month = ((((month < 10) ? "0" : "")) + month);
/*   280 */     return ((((((dt.getFullYear() + "-") + month) + "-") + date) + " ") + dt.toLocaleTimeString());
              };
/*   283 */   function dateTimeText(str) {
/*   284 */     return formatDate(fromJsonDate(str));
              };
/*   287 */   function deploymentStatusText(status) {
/*   288 */     switch (status) {
/*   289 */     case 0:
/*   289 */       return "Pending";
/*   289 */     case 1:
                  return "Building";
/*   290 */     case 2:
/*   290 */       return "Deploying";
/*   290 */     case 3:
                  return "Failed";
/*   291 */     case 4:
/*   291 */       return "Success";
/*   291 */       default:
                  return "Unknown";
/*   292 */     };
/*   292 */   };
/*   292 */   function logTypeText(type) {
                switch (type) {
/*   293 */     case 0:
/*   293 */       return "Message";
/*   293 */     case 1:
                  return "Warning";
                case 2:
/*   294 */       return "Error";
/*   294 */       default:
                  return "Unknown";
                };
              };
/*   298 */   function ensureShortCommitId(deployments) {
/*   299 */     return deployments.map(function(deployment) {
/*   300 */       deployment.shortId = deployment.id.substr(0, 10);
/*   300 */       return deployment;
/*   300 */     });
              };
/*   301 */   function ensureRepositoryUri(context, _) {
/*   301 */     var siteData, repositoryUri;
/*   301 */     var __frame = {
                  name: "ensureRepositoryUri",
/*   302 */       line: 314
/*   302 */     };
/*   302 */     return __func(_, this, arguments, ensureRepositoryUri, 1, __frame, function __$ensureRepositoryUri() {
                  return site.lookupSiteNameAndWebSpace(context, __cb(_, __frame, 1, 19, function ___(__0, __1) {
                    siteData = __1;
/*   303 */         repositoryUri = (siteData && site.getRepositoryUri(siteData));
/*   303 */         return (function __$ensureRepositoryUri(__then) {
                      if (!repositoryUri) {
                        return site.doSiteGet(context, __cb(_, __frame, 4, 17, function ___(__0, __2) {
                          siteData = __2;
/*   307 */               repositoryUri = site.getRepositoryUri(siteData);
/*   308 */               __then();
/*   309 */             }, true));
/*   310 */           }
                       else {
                        __then();
/*   314 */           }
                    ;
                    })(function __$ensureRepositoryUri() {
                      if (repositoryUri) {
                        context.repositoryAuth = site.getRepositoryAuth(siteData);
                        return _(null, context.repositoryUri = repositoryUri);
                      }
/*   315 */         ;
                      _();
/*   316 */         });
                  }, true));
/*   317 */     });
/*   318 */   };
/*   318 */   scm.ensureRepositoryUri = ensureRepositoryUri;
/*   319 */   function formatDeployment(deployment) {
                var timeProperties = ["end_time","last_success_end_time","received_time","start_time",];
                for (var i = 0; (i < timeProperties.length); ++i) {
                  if (deployment[timeProperties[i]]) {
                    deployment[timeProperties[i]] = dateTimeText(deployment[timeProperties[i]]);
                  }
                ;
                };
                deployment.complete = (!!deployment.complete).toString();
/*   321 */     deployment.status = (deployment.active ? "Active" : deploymentStatusText(deployment.status));
/*   322 */     deployment.message = deployment.message.replace(/\s*(.*)\s*?/g, "$1");
/*   323 */     delete deployment.active;
                delete deployment.status_text;
                delete deployment.url;
                delete deployment.log_url;
                return deployment;
              };
              function formatLog(log) {
                log.hasDetails = !!log.details_url;
/*   326 */     log.log_time = (log.log_time && dateTimeText(log.log_time));
/*   328 */     log.short_time = (log.log_time && log.log_time.replace(/.* +(.*)/g, "$1"));
/*   329 */     log.type = logTypeText(log.type);
/*   330 */     log.shortId = log.id.substr(0, 10);
/*   331 */     delete log.details_url;
/*   332 */     return log;
              };
            };
