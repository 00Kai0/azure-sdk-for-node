/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; var LinkedRevisionControl = require("../linkedrevisioncontrol.js");
















exports.init = function(cli) {

  var log = cli.output;
  var site = cli.category("site");
  var scm = site.category("deployment");

  scm.command("github [name]").whiteListPowershell().usage("[options] [name]").description("Redeploy your git deployment").option("-s, --subscription <id>", "use the subscription id").option("-u, --username <user>", "The username").option("-up, --pass <pass>", "The password").execute(function __1(name, options, _) { var context;





















    function promptForCredentials(_) { var __frame = { name: "promptForCredentials", line: 46 }; return __func(_, this, arguments, promptForCredentials, 0, __frame, function __$promptForCredentials() {
        log.help("Enter your github credentials"); return (function __$promptForCredentials(__then) {

          if (options.username) {
            context.username = options.username; __then(); } else {

            return prompt("Username: ", __cb(_, __frame, 6, 29, function ___(__0, __1) { context.username = __1; __then(); }, true)); } ; })(function __$promptForCredentials() { return (function __$promptForCredentials(__then) {


            if (options.pass) {
              context.password = options.pass; __then(); } else {

              return promptPassword("Password: ", __cb(_, __frame, 12, 29, function ___(__0, __2) { context.password = __2; __then(); }, true)); } ; })(function __$promptForCredentials() {


            context.lvcClient = LinkedRevisionControl.createClient(cli, "github"); _(); }); }); }); };


    function promptForRepository(_) { var repositories, parsedRepositoryUri, pathParts, owner, name, localRepositories; var __frame = { name: "promptForRepository", line: 64 }; return __func(_, this, arguments, promptForRepository, 0, __frame, function __$promptForRepository() {
        return context.lvcClient.getRepositories(context.username, __cb(_, __frame, 1, 27, function ___(__0, __1) { repositories = __1;

          return scm.doGetRemoteUri(context, __cb(_, __frame, 3, 28, function ___(__0, __2) { context.remoteUri = __2;
            if (context.remoteUri) {
              parsedRepositoryUri = url.parse(context.remoteUri);
              pathParts = parsedRepositoryUri.pathname.split("/");
              if ((pathParts.length === 3)) {
                owner = pathParts[1];
                name = pathParts[2].split(".")[0];
                localRepositories = repositories.filter(function(repository) {
                  return ((repository.name === name) && (repository.owner.login === owner)); });


                if ((localRepositories && (localRepositories.length > 0))) {
                  context.repository = localRepositories[0]; } ; } ; } ; return (function __$promptForRepository(__then) {




              if (!context.repository) {
                log.help("Choose a repository");
                return choose(repositories.map(function(repository) {
                  return repository.full_name; }), __cb(_, __frame, 22, 44, function ___(__0, __3) { context.repository = repositories[__3]; __then(); }, true)); } else { __then(); } ; })(_); }, true)); }, true)); }); };




    function linkRemoteGitRepo(_) { var parsedRepositoryUri, hookUrl; var __frame = { name: "linkRemoteGitRepo", line: 92 }; return __func(_, this, arguments, linkRemoteGitRepo, 0, __frame, function __$linkRemoteGitRepo() {
        parsedRepositoryUri = url.parse(context.repositoryUri);
        parsedRepositoryUri.auth = context.repositoryAuth;
        parsedRepositoryUri.pathname = "/deploy";
        hookUrl = url.format(parsedRepositoryUri);

        return context.lvcClient.createOrUpdateHook(context.repository.owner.login, context.repository.name, hookUrl, __cb(_, __frame, 6, 8, _, true)); }); };





    function addRemoteToLocalGitRepo(_) { var gitUri; var __frame = { name: "addRemoteToLocalGitRepo", line: 104 }; return __func(_, this, arguments, addRemoteToLocalGitRepo, 0, __frame, function __$addRemoteToLocalGitRepo() {
        if (context.remoteUri) { return _(null); } ;



        gitUri = context.repository.git_url;


        log.info((("Executing `git remote add azure " + gitUri) + "`"));
        return exec(("git remote add azure " + gitUri), __cb(_, __frame, 9, 8, _, true)); }); }; var __frame = { name: "__1", line: 31 }; return __func(_, this, arguments, __1, 2, __frame, function __$__1() { context = { subscription: cli.category("account").lookupSubscriptionId(options.subscription), site: { name: name } }; return scm.ensureRepositoryUri(context, __cb(_, __frame, 9, 6, function __$__1() { return promptForCredentials(__cb(_, __frame, 10, 6, function __$__1() { return promptForRepository(__cb(_, __frame, 11, 6, function __$__1() { return linkRemoteGitRepo(__cb(_, __frame, 12, 6, function __$__1() { return addRemoteToLocalGitRepo(__cb(_, __frame, 13, 6, _, true)); }, true)); }, true)); }, true)); }, true)); }); });



  scm.doGetRemoteUri = function scm_doGetRemoteUri__2(context, _) { var progress, originUri;




    function getRemote(name, _) { var remotes, origin; var __frame = { name: "getRemote", line: 122 }; return __func(_, this, arguments, getRemote, 1, __frame, function __$getRemote() {
        return exec("git remote -v", __cb(_, __frame, 1, 22, function ___(__0, __1) { remotes = __1;
          origin = ((remotes.stdout + remotes.stderr)).split("\n").filter(function(item) {
            return item.split("	").some(function(it) {
              return (it === name); }); });



          if ((origin && (origin.length > 0))) {
            return _(null, origin[0].split("	")[1].split(" ")[0]); } ;


          return _(null, null); }, true)); }); }; var __frame = { name: "scm_doGetRemoteUri__2", line: 117 }; return __func(_, this, arguments, scm_doGetRemoteUri__2, 1, __frame, function __$scm_doGetRemoteUri__2() { progress = cli.progress("Retrieving local git repositories"); originUri = null; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$scm_doGetRemoteUri__2() {


            return getRemote("azure", __cb(_, __frame, 20, 18, function ___(__0, __1) { originUri = __1; return (function __$scm_doGetRemoteUri__2(__then) {
                if (!originUri) {
                  return getRemote("origin", __cb(_, __frame, 22, 20, function ___(__0, __2) { originUri = __2; __then(); }, true)); } else { __then(); } ; })(function __$scm_doGetRemoteUri__2() { _(null, null, true); }); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$scm_doGetRemoteUri__2() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$scm_doGetRemoteUri__2() {


          return _(null, originUri); }); }); }); };


  function prompt(label, callback) {
    cli.prompt(label, function(x) { callback(undefined, x); }); };


  function promptPassword(label, callback) {
    cli.passwordOnce(label, function(x) { callback(undefined, x); }); };


  function choose(data, callback) {
    cli.choose(data, function(x) { callback(undefined, x); }); };


  function exec(cmd, cb) {
    child_process.exec(cmd, function(err, stdout, stderr) {
      cb(err, {
        stdout: stdout,
        stderr: stderr }); }); };};