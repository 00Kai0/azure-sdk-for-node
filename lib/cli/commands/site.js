/*** Generated by streamline 0.2.2 - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__propagate=__rt.__propagate,__trap=__rt.__trap,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g;
/*     1 */ var common = require("../common");
/*     5 */ var fs = require("fs");
/*     6 */ var path = require("path");
/*     7 */ var url = require("url");
/*     8 */ var crypto = require("crypto");
/*     9 */ var pfx2pem = require("../../util/certificates/pkcs").pfx2pem;
/*    10 */ var Channel = require("../channel");
/*    11 */ var async = require("async");
/*    14 */ exports.init = function(cli) {
/*    16 */   var log = cli.output;
/*    18 */   var regions = [{
/*    20 */     prompt: "South Central US",
/*    21 */     webspace: "southcentraluswebspace",
/*    22 */     location: "SouthCentralUS1",
/*    23 */     plan: "VirtualDedicatedPlan"
/*    25 */   },{
/*    26 */     prompt: "North Europe",
/*    27 */     webspace: "northeuropewebspace",
/*    28 */     location: "NorthEurope1",
/*    29 */     plan: "VirtualDedicatedPlan"
              },];
/*    32 */   var regionPrompts = regions.map(function(region) {
/*    32 */     return region.prompt;
              });
/*    34 */   function getChannel() {
/*    35 */     var pem = cli.category("account").managementCertificate();
/*    37 */     var channel = new Channel({
/*    38 */       host: "umapi-tc2.rdfetest.dnsdemo4.com",
/*    39 */       port: 8443,
/*    40 */       key: pem,
/*    41 */       cert: pem
/*    42 */     }).header("x-ms-version", "2011-02-25");
/*    44 */     var proxyString = (((process.env.HTTPS_PROXY || process.env.https_proxy) || process.env.ALL_PROXY) || process.env.all_proxy);
/*    50 */     if ((proxyString != undefined)) {
/*    51 */       var proxyUrl = url.parse(proxyString);
/*    52 */       if (((proxyUrl.protocol !== "http:") && (proxyUrl.protocol !== "https:"))) {
/*    55 */         proxyUrl = url.parse(("http://" + proxyString));
                  }
                ;
/*    58 */       channel = channel.add({
/*    58 */         proxy: proxyUrl
                  });
                }
              ;
/*    61 */     return channel;
              };
/*    65 */   var site = cli.category("site").description("Commands to manage your web sites");
/*    69 */   site.command("list").description("List your web sites").option("-s, --subscription <id>", "use the subscription id").execute(function __1(options, _) {
                var parameters, spaces, sites;
                var __frame = {
                  name: "__1",
                  line: 72
                };
                return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
/*    73 */       parameters = {
/*    74 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription)
                  };
/*    77 */       return site.doSpacesGet(parameters, __cb(_, __frame, 5, 25, function ___(__0, __1) {
                    spaces = __1;
/*    78 */         return site.doSitesGet(parameters, __cb(_, __frame, 6, 24, function ___(__0, __2) {
                      sites = __2;
/*    80 */           log.table(sites, function(row, site) {
/*    81 */             row.cell("Name", site.Name);
/*    82 */             row.cell("State", site.State);
/*    83 */             row.cell("Host names", clean(site).HostNames);
                      });
                      _();
                    }));
                  }));
                });
              });
/*    87 */   function choose(data, callback) {
/*    88 */     cli.choose(data, function(x) {
/*    88 */       callback(undefined, x);
                });
              };
/*    91 */   site.command("create [name]").description("Create a new web site and local directory").option("-s, --subscription <id>", "use the subscription id").option("--location <location>", "the geographic region to create the website").option("--hostname <hostname>", "custom host name to use").execute(function __2(nameArg, options, _) {
                var context, cfg, spaces, href, repo;
                var __frame = {
                  name: "__2",
                  line: 96
                };
                return __func(_, this, arguments, __2, 2, __frame, function __$__2() {
/*    97 */       context = {
/*    98 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*    99 */         site: {
/*   100 */           name: nameArg,
/*   101 */           webspace: options.location,
/*   102 */           hostname: options.hostname
                    }
                  };
/*   106 */       cfg = site.readConfig();
                  return (function __$__2(__then) {
/*   107 */         if ((cfg === undefined)) {
                      return (function __$__2(__then) {
/*   108 */             if ((context.site.name === undefined)) {
/*   109 */               log.help("Need a site name");
/*   110 */               return cli.prompt("Name: ", __cb(_, __frame, 14, 40, function ___(__0, __1) {
/*   110 */                 context.site.name = __1;
                            __then();
                          }));
                        }
                         else {
/*   112 */               log.verbose("Initializing config with site name:", context.site.name);
                          __then();
                        }
                      ;
                      })(function __$__2() {
/*   114 */             cfg = {
/*   114 */               name: context.site.name
                        };
/*   115 */             site.initConfig(cfg);
                        __then();
                      });
                    }
                     else {
/*   117 */           if ((context.site.name === undefined)) {
/*   118 */             log.verbose("Using existing site name from config:", cfg.name);
/*   119 */             context.site.name = cfg.name;
                      }
/*   120 */            else {
/*   121 */             log.verbose("Updating config with site name:", context.site.name);
/*   122 */             cfg.name = context.site.name;
/*   123 */             site.writeConfig(cfg);
                      }
                    ;
                      __then();
                    }
                  ;
                  })(function __$__2() {
/*   127 */         return site.doSpacesGet(context, __cb(_, __frame, 31, 25, function ___(__0, __2) {
                      spaces = __2;
                      return (function __$__2(__then) {
/*   129 */             if ((spaces.length == 0)) {
/*   130 */               log.help("You must create your first web site online.");
/*   131 */               log.help("Launching portal.");
/*   132 */               href = "https://commonuxfx-bvt01.cloudapp.net/";
/*   133 */               common.launchBrowser(href);
                          return _(null);
                        }
                         else {
                          return (function __$__2(__then) {
/*   135 */                 if ((spaces.length == 1)) {
/*   136 */                   context.site.webspace = spaces[0].Name;
                              __then();
                            }
                             else {
/*   138 */                   log.help("Choose a region");
/*   139 */                   return choose(spaces.map(function(space) {
/*   140 */                     return space.GeoRegion;
                              }), __cb(_, __frame, 43, 47, function ___(__0, __3) {
/*   139 */                     context.site.webspace = spaces[__3].Name;
                                __then();
                              }));
                            }
                          ;
                          })(__then);
                        }
                      ;
                      })(function __$__2() {
/*   144 */             log.json("silly", context);
/*   146 */             return site.doSitesPost(context, __cb(_, __frame, 50, 12, function __$__2() {
/*   147 */               return site.doRepositoryPost(context, __cb(_, __frame, 51, 12, function __$__2() {
/*   148 */                 return site.doRepositoryGet(context, __cb(_, __frame, 52, 23, function ___(__0, __4) {
                              repo = __4;
/*   150 */                   log.help("To start adding content to the website, type in the following:");
/*   151 */                   log.help("  git init");
/*   152 */                   log.help("  git add .");
/*   153 */                   log.help("  git commit -m \"initial commit\"");
/*   154 */                   log.help(((("  git remote add azure " + repo) + context.site.name) + ".git"));
/*   155 */                   log.help("  git push azure master");
                              _();
                            }));
                          }));
                        }));
                      });
                    }));
                  });
                });
              });
/*   158 */   site.command("portal [name]").description("Opens the portal in a browser to manage your web sites").execute(function __3(name, options, _) {
                var href;
                var __frame = {
                  name: "__3",
                  line: 160
                };
                return __func(_, this, arguments, __3, 2, __frame, function __$__3() {
/*   162 */       href = "https://commonuxfx-bvt01.cloudapp.net/";
/*   163 */       if (name) {
/*   164 */         href = (((href + "#Workspaces/WebsiteExtension/Website/") + name) + "/dashboard");
                  }
                ;
/*   167 */       common.launchBrowser(href);
                  _();
                });
              });
/*   170 */   site.command("browse [name]").description("Open your web site in a browser.").option("-s, --subscription <id>", "use the subscription id").execute(function __4(name, options, _) {
                var context, siteData, href;
                var __frame = {
                  name: "__4",
                  line: 173
                };
                return __func(_, this, arguments, __4, 2, __frame, function __$__4() {
/*   175 */       context = {
/*   176 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   177 */         site: {
/*   178 */           name: name
                    }
                  };
/*   181 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__4() {
/*   182 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__4() {
/*   183 */           return site.doSiteGet(context, __cb(_, __frame, 10, 33, function ___(__0, __1) {
/*   183 */             siteData = clean(__1);
/*   185 */             href = ("http://" + toArray(siteData.HostNames)[0]);
/*   187 */             common.launchBrowser(href);
                        _();
                      }));
                    }));
                  }));
                });
              });
/*   190 */   site.command("show [name]").description("Show details for a web sites").option("-s, --subscription <id>", "use the subscription id").execute(function __5(name, options, _) {
                var context, siteData, configData, repositoryData;
                var __frame = {
                  name: "__5",
                  line: 193
                };
                return __func(_, this, arguments, __5, 2, __frame, function __$__5() {
/*   194 */       context = {
/*   195 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   196 */         site: {
/*   197 */           name: name
                    }
                  };
/*   201 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__5() {
/*   202 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__5() {
/*   204 */           log.info("Showing details for site");
/*   205 */           log.verbose("Parameters", context);
/*   207 */           return site.doSiteGet(context, __cb(_, __frame, 14, 27, function ___(__0, __1) {
                        siteData = __1;
/*   208 */             return site.doSiteConfigGet(context, __cb(_, __frame, 15, 29, function ___(__0, __2) {
                          configData = __2;
/*   209 */               return site.doRepositoryGet(context, __cb(_, __frame, 16, 33, function ___(__0, __3) {
                            repositoryData = __3;
/*   211 */                 logEachData("Site", siteData);
/*   212 */                 logEachData("Config", configData);
/*   213 */                 log.data("Repository", clean(repositoryData));
                            _();
                          }));
                        }));
                      }));
                    }));
                  }));
                });
              });
/*   216 */   function lookupSiteName(context, _) {
                var cfg;
                var __frame = {
                  name: "lookupSiteName",
                  line: 216
                };
                return __func(_, this, arguments, lookupSiteName, 1, __frame, function __$lookupSiteName() {
/*   217 */       if ((context.site.name !== undefined)) {
                    return _(null);
                  }
                ;
/*   222 */       cfg = site.readConfig();
/*   223 */       if ((cfg !== undefined)) {
/*   225 */         context.site.name = cfg.name;
                    return _(null);
                  }
                ;
/*   229 */       return cli.prompt("Web site name:", __cb(_, __frame, 13, 28, function ___(__0, __1) {
/*   229 */         context.site.name = __1;
                    _();
                  }));
                });
              };
/*   231 */   site.lookupSiteName = lookupSiteName;
/*   233 */   function lookupSiteWebSpace(context, _) {
                var sites, index;
                var __frame = {
                  name: "lookupSiteWebSpace",
                  line: 233
                };
                return __func(_, this, arguments, lookupSiteWebSpace, 1, __frame, function __$lookupSiteWebSpace() {
/*   234 */       log.verbose("Attempting to locate site ", context.site.name);
/*   235 */       return site.doSitesGet(context, __cb(_, __frame, 2, 20, function ___(__0, __1) {
                    sites = __1;
/*   236 */         for (index in sites) {
/*   237 */           if ((sites[index].Name === context.site.name)) {
/*   238 */             log.verbose("Site located at ", sites[index].WebSpace);
/*   239 */             context.site.webspace = sites[index].WebSpace;
                      }
                    ;
                    };
/*   242 */         if ((context.site.webspace === undefined)) {
/*   243 */           return _(new Error(("Unable to locate site named " + context.site.name)));
                    }
                  ;
                    _();
                  }));
                });
              };
/*   246 */   site.lookupSiteWebSpace = lookupSiteWebSpace;
/*   248 */   site.command("delete [name]").description("Delete a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __6(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__6",
                  line: 251
                };
                return __func(_, this, arguments, __6, 2, __frame, function __$__6() {
/*   252 */       context = {
/*   253 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   254 */         site: {
/*   255 */           name: name
                    }
                  };
/*   259 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__6() {
/*   260 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__6() {
/*   268 */           return getChannel().path(context.subscription).path("services/webspaces").path(context.site.webspace).path("sites").path(context.site.name).DELETE(__cb(_, __frame, 17, 25, function ___(__0, __1) {
                        result = __1;
                        _();
                      }));
                    }));
                  }));
                });
              });
/*   272 */   site.command("start [name]").description("Start a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __7(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__7",
                  line: 275
                };
                return __func(_, this, arguments, __7, 2, __frame, function __$__7() {
/*   276 */       context = {
/*   277 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   278 */         site: {
/*   279 */           name: name
                    }
                  };
/*   283 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__7() {
/*   284 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__7() {
/*   293 */           return getChannel().path(context.subscription).path("services/webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").POST(function(req) {
/*   294 */             req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   295 */             req.write("<State>");
/*   296 */             req.write("Running");
/*   297 */             req.write("</State>");
/*   298 */             req.write("</Site>");
/*   300 */             req.end();
                      }, __cb(_, __frame, 18, 25, function ___(__0, __1) {
                        result = __1;
                        _();
                      }));
                    }));
                  }));
                });
              });
/*   305 */   site.command("stop <name>").description("Stop a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __8(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__8",
                  line: 308
                };
                return __func(_, this, arguments, __8, 2, __frame, function __$__8() {
/*   309 */       context = {
/*   310 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   311 */         site: {
/*   312 */           name: name
                    }
                  };
/*   316 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__8() {
/*   317 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__8() {
/*   326 */           return getChannel().path(context.subscription).path("services/webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").POST(function(req) {
/*   327 */             req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   328 */             req.write("<State>");
/*   329 */             req.write("Stopped");
/*   330 */             req.write("</State>");
/*   331 */             req.write("</Site>");
/*   333 */             req.end();
                      }, __cb(_, __frame, 18, 25, function ___(__0, __1) {
                        result = __1;
                        _();
                      }));
                    }));
                  }));
                });
              });
/*   341 */   site.findConfig = function() {
/*   342 */     var scanFolder = process.cwd();
/*   343 */     while (true) {
/*   344 */       var azureFolder = path.join(scanFolder, ".azure");
/*   347 */       if ((path.existsSync(azureFolder) && fs.statSync(azureFolder).isDirectory())) {
/*   351 */         var files = fs.readdirSync(azureFolder);
/*   352 */         files = files.filter(function(filename) {
/*   353 */           return endsWith(filename, ".config");
                    });
/*   357 */         if ((files.length == 1)) {
/*   358 */           var hit = path.join(azureFolder, files[0]);
/*   359 */           log.silly("Found local config", hit);
/*   360 */           return hit;
                    }
                  ;
                  }
                ;
/*   365 */       try {
/*   366 */         var parentFolder = path.dirname(scanFolder);
/*   367 */         if (((parentFolder === scanFolder) || !path.exists(scanFolder))) {
/*   368 */           return undefined;
                    }
                  ;
/*   371 */       } catch (err) {
/*   372 */         return undefined;
                  };
                };
              };
/*   377 */   site.initConfig = function(config) {
/*   378 */     var baseFolder = process.cwd();
/*   379 */     var azureFolder = path.join(baseFolder, ".azure");
/*   380 */     var baseName = crypto.randomBytes(16).toString("hex");
/*   381 */     var configPath = path.join(azureFolder, (baseName + ".config"));
/*   382 */     if (!path.exists(azureFolder)) {
/*   383 */       log.silly("Creating folder", azureFolder);
/*   384 */       fs.mkdirSync(azureFolder);
                }
              ;
/*   386 */     log.silly("Writing file", configPath);
/*   387 */     var configText = JSON.stringify(config);
/*   388 */     fs.writeFileSync(configPath, configText);
              };
/*   391 */   site.readConfig = function() {
/*   392 */     var configPath = site.findConfig();
/*   393 */     if ((configPath === undefined)) {
/*   394 */       log.verbose("No site .azure/*.config file locate at current directory");
/*   395 */       return undefined;
                }
              ;
/*   398 */     log.silly("Reading file", configPath);
/*   399 */     var configText = fs.readFileSync(configPath);
/*   400 */     var config = JSON.parse(configText);
/*   401 */     log.json("silly", "Site config", config);
/*   402 */     return config;
              };
/*   405 */   site.writeConfig = function(config) {
/*   406 */     var configPath = site.findConfig();
/*   407 */     if ((configPath === undefined)) {
/*   408 */       log.verbose("No site .azure/*.config file locate at current directory");
/*   409 */       return undefined;
                }
              ;
/*   411 */     log.silly("Writing file", configPath);
/*   412 */     var configText = JSON.stringify(config);
/*   413 */     fs.writeFileSync(configPath, configText);
              };
/*   421 */   site.doSitesPost = function(options, callback) {
/*   422 */     log.info("Creating a new web site");
/*   423 */     log.verbose("Subscription", options.subscription);
/*   424 */     log.verbose("Webspace", options.site.webspace);
/*   425 */     log.verbose("Site", options.site.name);
/*   427 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites/").header("Content-Type", "application/xml").POST(writers.Site.xml(options.site), function(err, result) {
/*   436 */       if (err) {
/*   437 */         logError("Failed to create site", err);
                  }
/*   438 */        else {
/*   439 */         log.info("Created website at ", clean(result).HostNames);
/*   440 */         log.verbose("Site", clean(result));
                  }
                ;
/*   442 */       callback(err, result);
                });
              };
/*   446 */   site.doRepositoryPost = function(options, callback) {
/*   447 */     log.info("Initializing repository");
/*   448 */     log.verbose("Subscription", options.subscription);
/*   449 */     log.verbose("Webspace", options.site.webspace);
/*   450 */     log.verbose("Site", options.site.name);
/*   452 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("repository").POST("", function(err, result) {
/*   462 */       if (err) {
/*   463 */         logError("Failed to initialize repository", err);
                  }
/*   464 */        else {
/*   465 */         log.info("Repository initialized");
                  }
                ;
/*   467 */       callback(err, result);
                });
              };
/*   471 */   site.doSpacesGet = function site_doSpacesGet__9(options, _) {
                var result;
                var __frame = {
                  name: "site_doSpacesGet__9",
                  line: 471
                };
                return __func(_, this, arguments, site_doSpacesGet__9, 1, __frame, function __$site_doSpacesGet__9() {
/*   472 */       log.verbose("Subscription", options.subscription);
/*   477 */       return getChannel().path(options.subscription).path("services/webspaces/").GET(__cb(_, __frame, 6, 21, function ___(__0, __1) {
                    result = __1;
/*   479 */         log.json("silly", result);
/*   480 */         return _(null, toArray(result.WebSpace));
                  }));
                });
              };
/*   483 */   site.doSitesGet = function site_doSitesGet__10(options, _) {
                var spaces, channel, result, sites;
                var __frame = {
                  name: "site_doSitesGet__10",
                  line: 483
                };
                return __func(_, this, arguments, site_doSitesGet__10, 1, __frame, function __$site_doSitesGet__10() {
/*   484 */       log.verbose("Subscription", options.subscription);
/*   486 */       return site.doSpacesGet(options, __cb(_, __frame, 3, 21, function ___(__0, __2) {
                    spaces = __2;
/*   490 */         channel = getChannel().path(options.subscription).path("services/webspaces");
/*   492 */         return async.map(spaces, function __1(webspace, _) {
                      var __frame = {
                        name: "__1",
                        line: 494
                      };
                      return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
/*   498 */             return channel.path(webspace.Name).path("sites/").GET(__cb(_, __frame, 4, 23, _));
                      });
                    }, __cb(_, __frame, 9, 21, function ___(__0, __3) {
                      result = __3;
/*   502 */           sites = [];
/*   503 */           result.forEach(function(item) {
/*   504 */             sites = sites.concat(toArray(item.Site));
                      });
/*   506 */           result = sites;
/*   508 */           log.json("verbose", sites);
/*   509 */           return _(null, sites);
                    }));
                  }));
                });
              };
/*   512 */   site.doSiteGet = function(options, callback) {
/*   513 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).GET(function(err, result) {
/*   521 */       if (err) {
/*   522 */         logError("Failed to get site info", err);
                  }
/*   523 */        else {
/*   524 */         log.verbose("Site", clean(result));
                  }
                ;
/*   526 */       callback(err, result);
                });
              };
/*   530 */   site.doSiteConfigGet = function(options, callback) {
/*   531 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("config").GET(function(err, result) {
/*   540 */       if (err) {
/*   541 */         logError("Failed to get site config info", err);
                  }
/*   542 */        else {
/*   543 */         log.verbose("SiteConfig", clean(result));
                  }
                ;
/*   545 */       callback(err, result);
                });
              };
/*   549 */   site.doRepositoryGet = function(options, callback) {
/*   550 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("repository").GET(function(err, result) {
/*   559 */       if (err) {
/*   560 */         logError("Failed to get repository info", err);
                  }
/*   561 */        else {
/*   562 */         log.verbose("Repository", clean(result));
                  }
                ;
/*   564 */       callback(err, clean(result));
                });
              };
/*   572 */   var writers = {
/*   573 */     Site: {
/*   574 */       xml: function(site) {
/*   575 */         return function(req) {
/*   576 */           req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   577 */           req.write("<HostNames>");
/*   578 */           req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   579 */           req.write((site.name + ".antdir0.antares-test.windows-int.net"));
/*   580 */           req.write("</string>");
/*   582 */           if (site.hostname) {
/*   583 */             req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   584 */             req.write(site.hostname);
/*   585 */             req.write("</string>");
                      }
                    ;
/*   587 */           req.write("</HostNames>");
/*   588 */           req.write("<Name>");
/*   589 */           req.write(site.name);
/*   590 */           req.write("</Name>");
/*   591 */           req.write("</Site>");
/*   593 */           req.end();
                    };
                  }
                }
              };
/*   599 */   function clean(source) {
/*   600 */     if ((typeof (source) === "string")) {
/*   601 */       return source;
                }
              ;
/*   604 */     var target = {
                };
/*   605 */     var hasString = false;
/*   606 */     var hasNonString = false;
/*   607 */     var stringValue = "";
/*   609 */     for (var prop in source) {
/*   610 */       if ((prop == "@")) {
/*   611 */         continue;
                  }
/*   612 */        else {
/*   613 */         if ((((prop === "#") || (prop === "string")) || (prop.substring((prop.length - 7)) === ":string"))) {
/*   614 */           hasString = true;
/*   615 */           stringValue = source[prop];
                    }
/*   616 */          else {
/*   617 */           hasNonString = true;
                    }
                  ;
/*   619 */         target[prop] = clean(source[prop]);
                  }
                ;
                };
/*   622 */     if ((hasString && !hasNonString)) {
/*   623 */       return stringValue;
                }
              ;
/*   625 */     return target;
              };
/*   628 */   function logEachData(title, data) {
/*   629 */     var cleaned = clean(data);
/*   630 */     for (var property in cleaned) {
/*   631 */       log.data(((title + " ") + property), cleaned[property]);
                };
              };
/*   635 */   function logError(message, err) {
/*   636 */     if ((arguments.length == 1)) {
/*   637 */       err = message;
/*   638 */       message = undefined;
                }
/*   639 */      else {
/*   640 */       log.error(message);
                }
              ;
/*   643 */     if (err) {
/*   644 */       if (err.message) {
/*   645 */         log.error(err.message);
/*   646 */         log.verbose("stack", err.stack);
/*   647 */         log.json("silly", err);
                  }
/*   649 */        else if (err.Message) {
/*   650 */         log.error(err.Message);
/*   651 */         log.json("verbose", clean(err));
                  }
/*   653 */        else {
/*   654 */         log.error(err);
                  }
                  
                ;
                }
              ;
              };
/*   659 */   function isArray(testObject) {
/*   660 */     return (((testObject && !(testObject.propertyIsEnumerable("length"))) && (typeof testObject === "object")) && (typeof testObject.length === "number"));
              };
/*   663 */   function toArray(testObject) {
/*   664 */     return (isArray(testObject) ? testObject : ((typeof testObject === "undefined") ? [] : [testObject,]));
              };
/*   667 */   function endsWith(str, suffix) {
/*   668 */     return (str.indexOf(suffix, (str.length - suffix.length)) !== -1);
              };
            };
