/*** Generated by streamline 0.2.2 - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch,__propagate=__rt.__propagate,__trap=__rt.__trap,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g;
/*     1 */ var common = require("../common");
/*    20 */ var fs = require("fs");
/*    21 */ var path = require("path");
/*    22 */ var url = require("url");
/*    23 */ var crypto = require("crypto");
/*    24 */ var pfx2pem = require("../../util/certificates/pkcs").pfx2pem;
/*    25 */ var Channel = require("../channel");
/*    26 */ var async = require("async");
/*    27 */ var child_process = require("child_process");
/*    30 */ exports.init = function(cli) {
/*    32 */   var log = cli.output;
/*    34 */   function getChannel() {
/*    35 */     var pem = cli.category('account').managementCertificate();
/*    37 */     var channel = new Channel({
/*    38 */       host: "umapi-preview.core.windows-int.net",
/*    39 */       port: 8443,
/*    40 */       key: pem.key,
/*    41 */       cert: pem.cert
/*    42 */     }).header("x-ms-version", "2011-02-25");
/*    44 */     var proxyString = (((process.env.HTTPS_PROXY || process.env.https_proxy) || process.env.ALL_PROXY) || process.env.all_proxy);
/*    50 */     if ((proxyString !== undefined)) {
/*    51 */       var proxyUrl = url.parse(proxyString);
/*    52 */       if (((proxyUrl.protocol !== "http:") && (proxyUrl.protocol !== "https:"))) {
/*    55 */         proxyUrl = url.parse(("http://" + proxyString));
                  }
                ;
/*    58 */       channel = channel.add({
/*    58 */         proxy: proxyUrl
                  });
                }
              ;
/*    61 */     return channel;
              };
/*    65 */   var site = cli.category("site").description("Commands to manage your web sites");
/*    69 */   site.command("list").description("List your web sites").option("-s, --subscription <id>", "use the subscription id").execute(function __1(options, _) {
                var parameters, spaces, sites;
                var __frame = {
                  name: "__1",
                  line: 72
                };
                return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
/*    73 */       parameters = {
/*    74 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription)
                  };
/*    77 */       return site.doSpacesGet(parameters, __cb(_, __frame, 5, 25, function ___(__0, __1) {
                    spaces = __1;
/*    78 */         return site.doSitesGet(parameters, __cb(_, __frame, 6, 24, function ___(__0, __2) {
                      sites = __2;
/*    80 */           log.table(sites, function(row, site) {
/*    81 */             row.cell("Name", site.Name);
/*    82 */             row.cell("State", site.State);
/*    83 */             row.cell("Host names", clean(site).HostNames);
                      });
                      _();
                    }));
                  }));
                });
              });
/*    87 */   function choose(data, callback) {
/*    88 */     cli.choose(data, function(x) {
/*    88 */       callback(undefined, x);
                });
              };
/*    90 */   function prompt(label, callback) {
/*    91 */     cli.prompt(label, function(x) {
/*    91 */       callback(undefined, x);
                });
              };
/*    95 */   site.command("create [name]").description("Create a new web site and local directory").option("-s, --subscription <id>", "use the subscription id").option("--location <location>", "the geographic region to create the website").option("--hostname <hostname>", "custom host name to use").option("--git", "configure git on web site and local folder").execute(function __2(nameArg, options, _) {
                var context, cfg, spaces, href, isInsideWorkTree, lines, repo, publishingUsers, repoUrl, remotes, azureExists;
                var __frame = {
                  name: "__2",
                  line: 101
                };
                return __func(_, this, arguments, __2, 2, __frame, function __$__2() {
/*   102 */       context = {
/*   103 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   104 */         site: {
/*   105 */           name: nameArg,
/*   106 */           webspace: options.location,
/*   107 */           hostname: options.hostname
                    }
                  };
/*   111 */       cfg = site.readConfig();
                  return (function __$__2(__then) {
/*   112 */         if ((cfg === undefined)) {
                      return (function __$__2(__then) {
/*   113 */             if ((context.site.name === undefined)) {
/*   114 */               log.help("Need a site name");
/*   115 */               return prompt("Name: ", __cb(_, __frame, 14, 40, function ___(__0, __1) {
/*   115 */                 context.site.name = __1;
                            __then();
                          }));
                        }
                         else {
/*   117 */               log.verbose("Initializing config with site name:", context.site.name);
                          __then();
                        }
                      ;
                      })(function __$__2() {
/*   119 */             cfg = {
/*   119 */               name: context.site.name
                        };
/*   120 */             site.initConfig(cfg);
                        __then();
                      });
                    }
                     else {
/*   122 */           if ((context.site.name === undefined)) {
/*   123 */             log.verbose("Using existing site name from config:", cfg.name);
/*   124 */             context.site.name = cfg.name;
                      }
/*   125 */            else {
/*   126 */             log.verbose("Updating config with site name:", context.site.name);
/*   127 */             cfg.name = context.site.name;
/*   128 */             site.writeConfig(cfg);
                      }
                    ;
                      __then();
                    }
                  ;
                  })(function __$__2() {
                    return (function __$__2(__then) {
/*   134 */           if (!context.site.webspace) {
/*   135 */             return site.doSpacesGet(context, __cb(_, __frame, 34, 29, function ___(__0, __2) {
                          spaces = __2;
                          return (function __$__2(__then) {
/*   137 */                 if ((spaces.length === 0)) {
/*   138 */                   log.help("You must create your first web site online.");
/*   139 */                   log.help("Launching portal.");
/*   140 */                   href = "https://windows.azure-test.net/";
/*   141 */                   common.launchBrowser(href);
                              return _(null);
                            }
                             else {
                              return (function __$__2(__then) {
/*   143 */                     if ((spaces.length == 1)) {
/*   144 */                       context.site.webspace = spaces[0].Name;
                                  __then();
                                }
                                 else {
/*   146 */                       log.help("Choose a region");
/*   147 */                       return choose(spaces.map(function(space) {
/*   148 */                         return space.GeoRegion;
                                  }), __cb(_, __frame, 46, 51, function ___(__0, __3) {
/*   147 */                         context.site.webspace = spaces[__3].Name;
                                    __then();
                                  }));
                                }
                              ;
                              })(__then);
                            }
                          ;
                          })(__then);
                        }));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(function __$__2() {
/*   153 */           log.json("silly", context);
/*   155 */           return site.doSitesPost(context, __cb(_, __frame, 54, 12, function __$__2() {
                        return (function __$__2(__then) {
/*   157 */               if (!options.git) {
                            return (function ___(__then) {
                              (function ___(_) {
                                __tryCatch(_, function __$__2() {
/*   159 */                       log.silly("Detecting if local folder is already a git repo");
/*   161 */                       return exec("git rev-parse --is-inside-work-tree", __cb(_, __frame, 60, 43, function ___(__0, __4) {
                                    isInsideWorkTree = __4;
/*   162 */                         lines = (isInsideWorkTree.stdout + isInsideWorkTree.stderr);
/*   163 */                         options.git = lines.split("\n").some(function(line) {
/*   164 */                           return (line === "true");
                                    });
/*   166 */                         if (options.git) {
/*   167 */                           log.verbose("Local git working tree detected");
                                    }
                                  ;
                                    __then();
                                  }));
                                });
                              })(function ___(err, __result) {
                                __tryCatch(_, function __$__2() {
                                  if (err) {
                                    __then();
                                  }
                                   else {
                                    _(null, __result);
                                  }
                                ;
                                });
                              });
                            })(function ___() {
                              __tryCatch(_, __then);
                            });
                          }
                           else {
                            __then();
                          }
                        ;
                        })(function __$__2() {
                          return (function __$__2(__then) {
/*   175 */                 if (options.git) {
/*   176 */                   return site.doRepositoryPost(context, __cb(_, __frame, 75, 16, function __$__2() {
/*   177 */                     return site.doRepositoryGet(context, __cb(_, __frame, 76, 27, function ___(__0, __5) {
                                  repo = __5;
/*   178 */                       return site.doPublishingUsersGet(context, __cb(_, __frame, 77, 38, function ___(__0, __6) {
                                    publishingUsers = __6;
/*   180 */                         repoUrl = url.parse(((repo + context.site.name) + ".git"));
/*   181 */                         repoUrl.protocol = "http:";
/*   182 */                         repoUrl.auth = toArray(publishingUsers)[0];
                                    return (function ___(__then) {
                                      (function ___(_) {
                                        __tryCatch(_, function __$__2() {
                                          return (function ___(__then) {
                                            (function ___(_) {
                                              __tryCatch(_, function __$__2() {
/*   186 */                                     log.verbose("Detecting git and local git folder");
/*   187 */                                     return exec("git remote", __cb(_, __frame, 86, 38, function ___(__0, __7) {
                                                  remotes = __7;
/*   188 */                                       azureExists = ((remotes.stdout + remotes.stderr)).split("\n").some(function(item) {
/*   189 */                                         return (item === "azure");
                                                  });
                                                  return (function __$__2(__then) {
/*   192 */                                         if (azureExists) {
/*   193 */                                           log.verbose("Removing existing azure remote alias");
/*   194 */                                           return exec("git remote rm azure", __cb(_, __frame, 93, 28, __then));
                                                    }
                                                     else {
                                                      __then();
                                                    }
                                                  ;
                                                  })(__then);
                                                }));
                                              });
                                            })(function ___(err, __result) {
                                              __tryCatch(_, function __$__2() {
                                                if (err) {
/*   198 */                                       log.info("Executing `git init`");
/*   199 */                                       return exec("git init", __cb(_, __frame, 98, 24, __then));
                                                }
                                                 else {
                                                  _(null, __result);
                                                }
                                              ;
                                              });
                                            });
                                          })(function ___() {
                                            __tryCatch(_, function __$__2() {
/*   201 */                                   log.info((("Executing `git remote add azure " + url.format(repoUrl)) + "`"));
/*   202 */                                   return exec(("git remote add azure " + url.format(repoUrl)), __cb(_, __frame, 101, 20, __then));
                                            });
                                          });
                                        });
                                      })(function ___(err, __result) {
                                        __tryCatch(_, function __$__2() {
                                          if (err) {
/*   205 */                                 log.warn("Trouble updating local git folder", err);
                                            __then();
                                          }
                                           else {
                                            _(null, __result);
                                          }
                                        ;
                                        });
                                      });
                                    })(function ___() {
                                      __tryCatch(_, function __$__2() {
/*   208 */                             log.help("To start adding content to the website, type in the following:");
/*   209 */                             log.help("  git add .");
/*   210 */                             log.help("  git commit -m \"initial commit\"");
/*   211 */                             log.help("  git push azure master");
                                        __then();
                                      });
                                    });
                                  }));
                                }));
                              }));
                            }
                             else {
                              __then();
                            }
                          ;
                          })(_);
                        });
                      }));
                    });
                  });
                });
              });
/*   215 */   site.command("portal [name]").description("Opens the portal in a browser to manage your web sites").execute(function __3(name, options, _) {
                var href;
                var __frame = {
                  name: "__3",
                  line: 217
                };
                return __func(_, this, arguments, __3, 2, __frame, function __$__3() {
/*   219 */       href = "https://windows.azure-test.net/";
/*   220 */       if (name) {
/*   221 */         href = (((href + "#Workspaces/WebsiteExtension/Website/") + name) + "/dashboard");
                  }
                ;
/*   224 */       common.launchBrowser(href);
                  _();
                });
              });
/*   227 */   site.command("browse [name]").description("Open your web site in a browser.").option("-s, --subscription <id>", "use the subscription id").execute(function __4(name, options, _) {
                var context, siteData, href;
                var __frame = {
                  name: "__4",
                  line: 230
                };
                return __func(_, this, arguments, __4, 2, __frame, function __$__4() {
/*   232 */       context = {
/*   233 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   234 */         site: {
/*   235 */           name: name
                    }
                  };
/*   238 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__4() {
/*   239 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__4() {
/*   240 */           return site.doSiteGet(context, __cb(_, __frame, 10, 33, function ___(__0, __1) {
/*   240 */             siteData = clean(__1);
/*   242 */             href = ("http://" + toArray(siteData.HostNames)[0]);
/*   244 */             common.launchBrowser(href);
                        _();
                      }));
                    }));
                  }));
                });
              });
/*   247 */   site.command("show [name]").description("Show details for a web sites").option("-s, --subscription <id>", "use the subscription id").execute(function __5(name, options, _) {
                var context, siteData, configData, repositoryData;
                var __frame = {
                  name: "__5",
                  line: 250
                };
                return __func(_, this, arguments, __5, 2, __frame, function __$__5() {
/*   251 */       context = {
/*   252 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   253 */         site: {
/*   254 */           name: name
                    }
                  };
/*   258 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__5() {
/*   259 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__5() {
/*   261 */           log.info("Showing details for site");
/*   262 */           log.verbose("Parameters", context);
/*   264 */           return site.doSiteGet(context, __cb(_, __frame, 14, 27, function ___(__0, __1) {
                        siteData = __1;
/*   265 */             return site.doSiteConfigGet(context, __cb(_, __frame, 15, 29, function ___(__0, __2) {
                          configData = __2;
/*   266 */               return site.doRepositoryGet(context, __cb(_, __frame, 16, 33, function ___(__0, __3) {
                            repositoryData = __3;
/*   268 */                 logEachData("Site", siteData);
/*   269 */                 logEachData("Config", configData);
/*   270 */                 log.data("Repository", clean(repositoryData));
                            _();
                          }));
                        }));
                      }));
                    }));
                  }));
                });
              });
/*   273 */   function lookupSiteName(context, _) {
                var cfg;
                var __frame = {
                  name: "lookupSiteName",
                  line: 273
                };
                return __func(_, this, arguments, lookupSiteName, 1, __frame, function __$lookupSiteName() {
/*   274 */       if ((context.site.name !== undefined)) {
                    return _(null);
                  }
                ;
/*   279 */       cfg = site.readConfig();
/*   280 */       if ((cfg !== undefined)) {
/*   282 */         context.site.name = cfg.name;
                    return _(null);
                  }
                ;
/*   286 */       return prompt("Web site name: ", __cb(_, __frame, 13, 28, function ___(__0, __1) {
/*   286 */         context.site.name = __1;
                    _();
                  }));
                });
              };
/*   288 */   site.lookupSiteName = lookupSiteName;
/*   290 */   function lookupSiteWebSpace(context, _) {
                var sites, index;
                var __frame = {
                  name: "lookupSiteWebSpace",
                  line: 290
                };
                return __func(_, this, arguments, lookupSiteWebSpace, 1, __frame, function __$lookupSiteWebSpace() {
/*   291 */       log.verbose("Attempting to locate site ", context.site.name);
/*   292 */       return site.doSitesGet(context, __cb(_, __frame, 2, 20, function ___(__0, __1) {
                    sites = __1;
/*   293 */         for (index in sites) {
/*   294 */           if ((sites[index].Name === context.site.name)) {
/*   295 */             log.verbose("Site located at ", sites[index].WebSpace);
/*   296 */             context.site.webspace = sites[index].WebSpace;
                      }
                    ;
                    };
/*   299 */         if ((context.site.webspace === undefined)) {
/*   300 */           return _(new Error(("Unable to locate site named " + context.site.name)));
                    }
                  ;
                    _();
                  }));
                });
              };
/*   303 */   site.lookupSiteWebSpace = lookupSiteWebSpace;
/*   305 */   site.command("delete [name]").description("Delete a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __6(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__6",
                  line: 308
                };
                return __func(_, this, arguments, __6, 2, __frame, function __$__6() {
/*   309 */       context = {
/*   310 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   311 */         site: {
/*   312 */           name: name
                    }
                  };
/*   316 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__6() {
/*   317 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__6() {
/*   319 */           log.info("Deleting site", context.site.name);
/*   327 */           return getChannel().path(context.subscription).path("services/webspaces").path(context.site.webspace).path("sites").path(context.site.name).DELETE(__cb(_, __frame, 19, 25, function ___(__0, __1) {
                        result = __1;
/*   329 */             log.info((("Site " + context.site.name) + " has been deleted"));
                        _();
                      }));
                    }));
                  }));
                });
              });
/*   333 */   site.command("start [name]").description("Start a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __7(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__7",
                  line: 336
                };
                return __func(_, this, arguments, __7, 2, __frame, function __$__7() {
/*   337 */       context = {
/*   338 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   339 */         site: {
/*   340 */           name: name
                    }
                  };
/*   344 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__7() {
/*   345 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__7() {
/*   347 */           log.info("Starting site", context.site.name);
/*   356 */           return getChannel().path(context.subscription).path("services/webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").PUT(function(req) {
/*   357 */             req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   358 */             req.write("<HostNames>");
/*   359 */             req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   360 */             req.write((context.site.name + ".antdf0.antares-test.windows-int.net"));
/*   361 */             req.write("</string>");
/*   362 */             req.write("</HostNames>");
/*   363 */             req.write("<Name>");
/*   364 */             req.write(context.site.name);
/*   365 */             req.write("</Name>");
/*   366 */             req.write("<State>");
/*   367 */             req.write("Running");
/*   368 */             req.write("</State>");
/*   369 */             req.write("</Site>");
/*   371 */             req.end();
                      }, __cb(_, __frame, 20, 25, function ___(__0, __1) {
                        result = __1;
/*   374 */             log.info((("Site " + context.site.name) + " has been started"));
                        _();
                      }));
                    }));
                  }));
                });
              });
/*   377 */   site.command("stop [name]").description("Stop a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __8(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__8",
                  line: 380
                };
                return __func(_, this, arguments, __8, 2, __frame, function __$__8() {
/*   381 */       context = {
/*   382 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   383 */         site: {
/*   384 */           name: name
                    }
                  };
/*   388 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__8() {
/*   389 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__8() {
/*   391 */           log.info("Stopping site", context.site.name);
/*   400 */           return getChannel().path(context.subscription).path("services/webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").PUT(function(req) {
/*   401 */             req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   402 */             req.write("<HostNames>");
/*   403 */             req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   404 */             req.write((context.site.name + ".antdf0.antares-test.windows-int.net"));
/*   405 */             req.write("</string>");
/*   406 */             req.write("</HostNames>");
/*   407 */             req.write("<Name>");
/*   408 */             req.write(context.site.name);
/*   409 */             req.write("</Name>");
/*   410 */             req.write("<State>");
/*   411 */             req.write("Stopped");
/*   412 */             req.write("</State>");
/*   413 */             req.write("</Site>");
/*   415 */             req.end();
                      }, __cb(_, __frame, 20, 25, function ___(__0, __1) {
                        result = __1;
/*   418 */             log.info((("Site " + context.site.name) + " has been stopped"));
                        _();
                      }));
                    }));
                  }));
                });
              });
/*   425 */   site.findConfig = function() {
/*   426 */     function filenameEndsWithConfig(filename) {
/*   427 */       return endsWith(filename, ".config");
                };
/*   430 */     var scanFolder = process.cwd();
/*   431 */     while (true) {
/*   432 */       var azureFolder = path.join(scanFolder, ".azure");
/*   435 */       if ((path.existsSync(azureFolder) && fs.statSync(azureFolder).isDirectory())) {
/*   439 */         var files = fs.readdirSync(azureFolder);
/*   440 */         files = files.filter(filenameEndsWithConfig);
/*   443 */         if ((files.length == 1)) {
/*   444 */           var hit = path.join(azureFolder, files[0]);
/*   445 */           log.silly("Found local config", hit);
/*   446 */           return hit;
                    }
                  ;
                  }
                ;
/*   451 */       try {
/*   452 */         var parentFolder = path.dirname(scanFolder);
/*   453 */         if (((parentFolder === scanFolder) || !path.exists(scanFolder))) {
/*   454 */           return undefined;
                    }
                  ;
/*   457 */       } catch (err) {
/*   458 */         return undefined;
                  };
                };
              };
/*   463 */   site.initConfig = function(config) {
/*   464 */     var baseFolder = process.cwd();
/*   465 */     var azureFolder = path.join(baseFolder, ".azure");
/*   466 */     var baseName = crypto.randomBytes(16).toString("hex");
/*   467 */     var configPath = path.join(azureFolder, (baseName + ".config"));
/*   468 */     if (!path.exists(azureFolder)) {
/*   469 */       log.silly("Creating folder", azureFolder);
/*   470 */       fs.mkdirSync(azureFolder);
                }
              ;
/*   472 */     log.silly("Writing file", configPath);
/*   473 */     var configText = JSON.stringify(config);
/*   474 */     fs.writeFileSync(configPath, configText);
              };
/*   477 */   site.readConfig = function() {
/*   478 */     var configPath = site.findConfig();
/*   479 */     if ((configPath === undefined)) {
/*   480 */       log.verbose("No site .azure/*.config file locate at current directory");
/*   481 */       return undefined;
                }
              ;
/*   484 */     log.silly("Reading file", configPath);
/*   485 */     var configText = fs.readFileSync(configPath);
/*   486 */     var config = JSON.parse(configText);
/*   487 */     log.json("silly", "Site config", config);
/*   488 */     return config;
              };
/*   491 */   site.writeConfig = function(config) {
/*   492 */     var configPath = site.findConfig();
/*   493 */     if ((configPath === undefined)) {
/*   494 */       log.verbose("No site .azure/*.config file locate at current directory");
/*   495 */       return undefined;
                }
              ;
/*   497 */     log.silly("Writing file", configPath);
/*   498 */     var configText = JSON.stringify(config);
/*   499 */     fs.writeFileSync(configPath, configText);
              };
/*   507 */   site.doSitesPost = function(options, callback) {
/*   508 */     log.info("Creating a new web site");
/*   509 */     log.verbose("Subscription", options.subscription);
/*   510 */     log.verbose("Webspace", options.site.webspace);
/*   511 */     log.verbose("Site", options.site.name);
/*   513 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites/").header("Content-Type", "application/xml").POST(writers.Site.xml(options.site), function(err, result) {
/*   522 */       if (err) {
/*   523 */         logError("Failed to create site", err);
                  }
/*   524 */        else {
/*   525 */         log.info("Created website at ", clean(result).HostNames);
/*   526 */         log.verbose("Site", clean(result));
                  }
                ;
/*   528 */       callback(err, result);
                });
              };
/*   532 */   site.doRepositoryPost = function(options, callback) {
/*   533 */     log.info("Initializing repository");
/*   534 */     log.verbose("Subscription", options.subscription);
/*   535 */     log.verbose("Webspace", options.site.webspace);
/*   536 */     log.verbose("Site", options.site.name);
/*   538 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("repository").POST("", function(err, result) {
/*   548 */       if (err) {
/*   549 */         logError("Failed to initialize repository", err);
                  }
/*   550 */        else {
/*   551 */         log.info("Repository initialized");
                  }
                ;
/*   553 */       callback(err, result);
                });
              };
/*   557 */   site.doSpacesGet = function site_doSpacesGet__9(options, _) {
                var result;
                var __frame = {
                  name: "site_doSpacesGet__9",
                  line: 557
                };
                return __func(_, this, arguments, site_doSpacesGet__9, 1, __frame, function __$site_doSpacesGet__9() {
/*   558 */       log.verbose("Subscription", options.subscription);
/*   563 */       return getChannel().path(options.subscription).path("services/webspaces/").GET(__cb(_, __frame, 6, 21, function ___(__0, __1) {
                    result = __1;
/*   565 */         log.json("silly", result);
/*   566 */         return _(null, toArray(result.WebSpace));
                  }));
                });
              };
/*   569 */   site.doSitesGet = function site_doSitesGet__10(options, _) {
                var spaces, channel, result, sites;
                var __frame = {
                  name: "site_doSitesGet__10",
                  line: 569
                };
                return __func(_, this, arguments, site_doSitesGet__10, 1, __frame, function __$site_doSitesGet__10() {
/*   570 */       log.verbose("Subscription", options.subscription);
/*   572 */       return site.doSpacesGet(options, __cb(_, __frame, 3, 21, function ___(__0, __2) {
                    spaces = __2;
/*   576 */         channel = getChannel().path(options.subscription).path("services/webspaces");
/*   578 */         return async.map(spaces, function __1(webspace, _) {
                      var __frame = {
                        name: "__1",
                        line: 580
                      };
                      return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
/*   584 */             return channel.path(webspace.Name).path("sites/").GET(__cb(_, __frame, 4, 23, _));
                      });
                    }, __cb(_, __frame, 9, 21, function ___(__0, __3) {
                      result = __3;
/*   588 */           sites = [];
/*   589 */           result.forEach(function(item) {
/*   590 */             sites = sites.concat(toArray(item.Site));
                      });
/*   592 */           result = sites;
/*   594 */           log.json("verbose", sites);
/*   595 */           return _(null, sites);
                    }));
                  }));
                });
              };
/*   598 */   site.doSiteGet = function(options, callback) {
/*   599 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).GET(function(err, result) {
/*   607 */       if (err) {
/*   608 */         logError("Failed to get site info", err);
                  }
/*   609 */        else {
/*   610 */         log.verbose("Site", clean(result));
                  }
                ;
/*   612 */       callback(err, result);
                });
              };
/*   616 */   site.doSiteConfigGet = function(options, callback) {
/*   617 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("config").GET(function(err, result) {
/*   626 */       if (err) {
/*   627 */         logError("Failed to get site config info", err);
                  }
/*   628 */        else {
/*   629 */         log.verbose("SiteConfig", clean(result));
                  }
                ;
/*   631 */       callback(err, result);
                });
              };
/*   635 */   site.doRepositoryGet = function(options, callback) {
/*   636 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("repository").GET(function(err, result) {
/*   645 */       if (err) {
/*   646 */         logError("Failed to get repository info", err);
                  }
/*   647 */        else {
/*   648 */         log.verbose("Repository", clean(result));
                  }
                ;
/*   650 */       callback(err, clean(result));
                });
              };
/*   654 */   site.doPublishingUsersGet = function site_doPublishingUsersGet__11(options, _) {
                var publishingUsers;
                var __frame = {
                  name: "site_doPublishingUsersGet__11",
                  line: 654
                };
                return __func(_, this, arguments, site_doPublishingUsersGet__11, 1, __frame, function __$site_doPublishingUsersGet__11() {
/*   660 */       return getChannel().path(options.subscription).path("services").path("webspaces").path("publishingUsers").GET(__cb(_, __frame, 6, 36, function ___(__0, __1) {
/*   655 */         publishingUsers = clean(__1);
/*   662 */         log.verbose("PublishingUsers", publishingUsers);
/*   663 */         return _(null, publishingUsers);
                  }));
                });
              };
/*   670 */   var writers = {
/*   671 */     Site: {
/*   672 */       xml: function(site) {
/*   673 */         return function(req) {
/*   674 */           req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   675 */           req.write("<HostNames>");
/*   676 */           req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   677 */           req.write((site.name + ".antdf0.antares-test.windows-int.net"));
/*   678 */           req.write("</string>");
/*   680 */           if (site.hostname) {
/*   681 */             req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   682 */             req.write(site.hostname);
/*   683 */             req.write("</string>");
                      }
                    ;
/*   685 */           req.write("</HostNames>");
/*   686 */           req.write("<Name>");
/*   687 */           req.write(site.name);
/*   688 */           req.write("</Name>");
/*   689 */           req.write("</Site>");
/*   691 */           req.end();
                    };
                  }
                }
              };
/*   697 */   function clean(source) {
/*   698 */     if ((typeof (source) === "string")) {
/*   699 */       return source;
                }
              ;
/*   702 */     var target = {
                };
/*   703 */     var hasString = false;
/*   704 */     var hasNonString = false;
/*   705 */     var stringValue = "";
/*   707 */     for (var prop in source) {
/*   708 */       if ((prop == "@")) {
/*   709 */         continue;
                  }
/*   710 */        else {
/*   711 */         if ((((prop === "#") || (prop === "string")) || (prop.substring((prop.length - 7)) === ":string"))) {
/*   712 */           hasString = true;
/*   713 */           stringValue = source[prop];
                    }
/*   714 */          else {
/*   715 */           hasNonString = true;
                    }
                  ;
/*   717 */         target[prop] = clean(source[prop]);
                  }
                ;
                };
/*   720 */     if ((hasString && !hasNonString)) {
/*   721 */       return stringValue;
                }
              ;
/*   723 */     return target;
              };
/*   726 */   function logEachData(title, data) {
/*   727 */     var cleaned = clean(data);
/*   728 */     for (var property in cleaned) {
/*   729 */       log.data(((title + " ") + property), cleaned[property]);
                };
              };
/*   733 */   function logError(message, err) {
/*   734 */     if ((arguments.length == 1)) {
/*   735 */       err = message;
/*   736 */       message = undefined;
                }
/*   737 */      else {
/*   738 */       log.error(message);
                }
              ;
/*   741 */     if (err) {
/*   742 */       if (err.message) {
/*   744 */         log.verbose("stack", err.stack);
/*   745 */         log.json("silly", err);
                  }
/*   747 */        else if (err.Message) {
/*   749 */         log.json("verbose", clean(err));
                  }
/*   751 */        else {
                  
                  }
                  
                ;
                }
              ;
              };
/*   757 */   function isArray(testObject) {
/*   758 */     return (((testObject && !(testObject.propertyIsEnumerable("length"))) && (typeof testObject === "object")) && (typeof testObject.length === "number"));
              };
/*   761 */   function toArray(testObject) {
/*   762 */     return (isArray(testObject) ? testObject : ((typeof testObject === "undefined") ? [] : [testObject,]));
              };
/*   765 */   function endsWith(str, suffix) {
/*   766 */     return (str.indexOf(suffix, (str.length - suffix.length)) !== -1);
              };
/*   769 */   function exec(cmd, cb) {
/*   770 */     child_process.exec(cmd, function(err, stdout, stderr) {
/*   771 */       cb(err, {
/*   772 */         stdout: stdout,
/*   773 */         stderr: stderr
                  });
                });
              };
            };
