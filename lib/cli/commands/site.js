/*** Generated by streamline 0.2.5 - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch,__propagate=__rt.__propagate,__trap=__rt.__trap,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g;
/*     1 */ var common = require("../common");
/*    20 */ var fs = require("fs");
/*    21 */ var path = require("path");
/*    22 */ var url = require("url");
/*    23 */ var crypto = require("crypto");
/*    24 */ var pfx2pem = require("../../util/certificates/pkcs").pfx2pem;
/*    25 */ var Channel = require("../channel");
/*    26 */ var async = require("async");
/*    27 */ var child_process = require("child_process");
/*    28 */ var utils = require("../utils");
/*    30 */ exports.init = function(cli) {
/*    32 */   var log = cli.output;
/*    34 */   function getChannel() {
/*    35 */     var account = cli.category("account"), pem = account.managementCertificate(), host = ((process.env.AZURE_ENDPOINT_HOST || account.endpointHost()) || "management-preview.core.windows-int.net"), port = ((process.env.AZURE_ENDPOINT_PORT || account.endpointPort()) || 443);
/*    40 */     var channel = new Channel({
/*    41 */       host: host,
/*    42 */       port: port,
/*    43 */       key: pem.key,
/*    44 */       cert: pem.cert
/*    45 */     }).header("x-ms-version", "2011-02-25");
/*    47 */     var proxyString = (((process.env.HTTPS_PROXY || process.env.https_proxy) || process.env.ALL_PROXY) || process.env.all_proxy);
/*    53 */     if ((proxyString !== undefined)) {
/*    54 */       var proxyUrl = url.parse(proxyString);
/*    55 */       if (((proxyUrl.protocol !== "http:") && (proxyUrl.protocol !== "https:"))) {
/*    58 */         proxyUrl = url.parse(("http://" + proxyString));
                  }
                ;
/*    61 */       channel = channel.add({
/*    61 */         proxy: proxyUrl
                  });
                }
              ;
/*    64 */     return channel;
              };
/*    68 */   var site = cli.category("site").description("Commands to manage your web sites");
/*    72 */   site.command("list").whiteListPowershell().description("List your web sites").option("-s, --subscription <id>", "use the subscription id").execute(function __1(options, _) {
                var parameters, sites;
                var __frame = {
                  name: "__1",
                  line: 76
                };
                return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
/*    77 */       parameters = {
/*    78 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription)
                  };
/*    81 */       return site.doSitesGet(parameters, __cb(_, __frame, 5, 24, function ___(__0, __1) {
                    sites = __1;
/*    83 */         log.table(sites, function(row, site) {
/*    84 */           row.cell("Name", site.Name);
/*    85 */           row.cell("State", site.State);
/*    86 */           row.cell("Host names", clean(site).HostNames);
                    });
                    _();
                  }, true));
                });
              });
/*    90 */   function choose(data, callback) {
/*    91 */     cli.choose(data, function(x) {
/*    91 */       callback(undefined, x);
                });
              };
/*    93 */   function prompt(label, callback) {
/*    94 */     cli.prompt(label, function(x) {
/*    94 */       callback(undefined, x);
                });
              };
/*    96 */   function confirm(label, callback) {
/*    97 */     cli.confirm(label, function(x) {
/*    97 */       callback(undefined, x);
                });
              };
/*   101 */   site.command("create [name]").whiteListPowershell().description("Create a new web site and local directory").option("-s, --subscription <id>", "use the subscription id").option("--location <location>", "the geographic region to create the website").option("--hostname <hostname>", "custom host name to use").option("--git", "configure git on web site and local folder").execute(function __2(nameArg, options, _) {
                var context;
/*   130 */     function promptForSiteName(_) {
                  var __frame = {
                    name: "promptForSiteName",
                    line: 130
                  };
                  return __func(_, this, arguments, promptForSiteName, 0, __frame, function __$promptForSiteName() {
/*   131 */         log.silly("promptForSiteName");
                    return (function __$promptForSiteName(__then) {
/*   132 */           if ((context.site.name === undefined)) {
/*   133 */             log.help("Need a site name");
/*   134 */             return prompt("Name: ", __cb(_, __frame, 4, 40, function ___(__0, __1) {
/*   134 */               context.site.name = __1;
                          __then();
                        }, true));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(_);
                  });
                };
/*   138 */     function determineIfSiteExists(_) {
                  var sites, hits;
                  var __frame = {
                    name: "determineIfSiteExists",
                    line: 138
                  };
                  return __func(_, this, arguments, determineIfSiteExists, 0, __frame, function __$determineIfSiteExists() {
/*   139 */         log.silly("determineIfSiteExists");
/*   140 */         return site.doSitesGet(context, __cb(_, __frame, 2, 28, function ___(__0, __1) {
                      sites = __1;
/*   141 */           hits = sites.filter(function(item) {
/*   142 */             return (item.Name === context.site.name);
                      });
/*   144 */           if ((hits.length === 1)) {
/*   145 */             log.info("Updating existing site");
/*   146 */             context.flags.siteExists = true;
/*   147 */             if ((context.site.webspace === undefined)) {
/*   148 */               context.site.webspace = hits[0].WebSpace;
/*   149 */               log.verbose("Existing site location is ", context.site.webspace);
                        }
                         else {
/*   150 */               if ((context.site.webspace !== hits[0].WebSpace)) {
/*   151 */                 return _(new Error(((("Expected location " + context.site.webspace) + " but was ") + hits[0].WebSpace)));
                          }
                        ;
                        }
                      ;
                      }
                    ;
                      _();
                    }, true));
                  });
                };
/*   156 */     function promptForLocation(_) {
                  var spaces, displayNameMatches, href;
                  var __frame = {
                    name: "promptForLocation",
                    line: 156
                  };
                  return __func(_, this, arguments, promptForLocation, 0, __frame, function __$promptForLocation() {
/*   157 */         log.silly("promptForLocation");
/*   159 */         return site.doSpacesGet(context, __cb(_, __frame, 3, 29, function ___(__0, __1) {
                      spaces = __1;
/*   161 */           if ((context.site.webspace !== undefined)) {
/*   163 */             displayNameMatches = spaces.filter(function(space) {
/*   164 */               return (space.GeoRegion === context.site.webspace);
                        });
/*   166 */             if ((displayNameMatches.length === 1)) {
/*   167 */               context.site.webspace = displayNameMatches[0].Name;
                        }
                      ;
                      }
                    ;
/*   171 */           if ((context.site.webspace !== undefined)) {
                        return _(null);
                      }
                    ;
                      return (function __$promptForLocation(__then) {
/*   176 */             if ((spaces.length === 0)) {
/*   177 */               log.help("You must create your first web site using the Windows Azure portal.");
/*   178 */               log.help("Please follow these steps in the portal:");
/*   179 */               log.help("1. At the bottom of the page, click on New > Web Site > Quick Create");
/*   180 */               log.help((("2. Type \"" + context.site.name) + "\" in the URL field"));
/*   181 */               log.help("3. Click on \"Create Web Site\"");
/*   182 */               log.help("4. Once the site has been created, click on the site name");
/*   183 */               log.help("5. Click on \"Set up Git publishing\" and create a publishing username and password. Use those credentials for all new websites you create.");
/*   184 */               return confirm("Launch browser to portal now? (y/n) ", __cb(_, __frame, 28, 24, function ___(__0, __2) {
                            return (function __$promptForLocation(__then) {
                              if (__2) {
/*   185 */                     log.help("Launching portal.");
/*   186 */                     href = utils.portal();
/*   187 */                     common.launchBrowser(href);
                                __then();
                              }
                               else {
                                __then();
                              }
                            ;
                            })(function __$promptForLocation() {
/*   189 */                   return _(new Error("First site must be created on portal"));
                            });
                          }, true));
                        }
                         else {
                          return (function __$promptForLocation(__then) {
/*   190 */                 if ((spaces.length == 1)) {
/*   191 */                   context.site.webspace = spaces[0].Name;
/*   192 */                   log.info("Using location", context.site.webspace);
                              __then();
                            }
                             else {
/*   194 */                   log.help("Choose a region");
/*   195 */                   return choose(spaces.map(function(space) {
/*   196 */                     return space.GeoRegion;
                              }), __cb(_, __frame, 39, 51, function ___(__0, __3) {
/*   195 */                     context.site.webspace = spaces[__3].Name;
                                __then();
                              }, true));
                            }
                          ;
                          })(__then);
                        }
                      ;
                      })(_);
                    }, true));
                  });
                };
/*   201 */     function determineIfCurrentDirectoryIsGitWorkingTree(_) {
                  var isInsideWorkTree, lines;
                  var __frame = {
                    name: "determineIfCurrentDirectoryIsGitWorkingTree",
                    line: 201
                  };
                  return __func(_, this, arguments, determineIfCurrentDirectoryIsGitWorkingTree, 0, __frame, function __$determineIfCurrentDirectoryIsGitWorkingTree() {
/*   202 */         log.silly("determineIfCurrentDirectoryIsGitWorkingTree");
                    return (function ___(__then) {
                      (function ___(_) {
                        __tryCatch(_, function __$determineIfCurrentDirectoryIsGitWorkingTree() {
/*   205 */               return exec("git rev-parse --is-inside-work-tree", __cb(_, __frame, 4, 43, function ___(__0, __1) {
                            isInsideWorkTree = __1;
/*   206 */                 lines = (isInsideWorkTree.stdout + isInsideWorkTree.stderr);
/*   207 */                 context.flags.isGitWorkingTree = lines.split("\n").some(function(line) {
/*   208 */                   return (line === "true");
                            });
                            __then();
                          }, true));
                        });
                      })(function ___(err, __result) {
                        __tryCatch(_, function __$determineIfCurrentDirectoryIsGitWorkingTree() {
                          if (err) {
/*   211 */                 context.flags.isGitWorkingTree = false;
                            __then();
                          }
                           else {
                            _(null, __result);
                          }
                        ;
                        });
                      });
                    })(function ___() {
                      __tryCatch(_, _);
                    });
                  });
                };
/*   215 */     function initGitOnCurrentDirectory(_) {
                  var __frame = {
                    name: "initGitOnCurrentDirectory",
                    line: 215
                  };
                  return __func(_, this, arguments, initGitOnCurrentDirectory, 0, __frame, function __$initGitOnCurrentDirectory() {
/*   216 */         log.silly("initGitOnCurrentDirectoryIfNeeded");
/*   217 */         if (context.flags.isGitWorkingTree) {
                      return _(null);
                    }
                  ;
/*   221 */         if (!options.git) {
                      return _(null);
                    }
                  ;
/*   225 */         log.info("Executing `git init`");
/*   226 */         return exec("git init", __cb(_, __frame, 11, 16, function __$initGitOnCurrentDirectory() {
                      return (function __$initGitOnCurrentDirectory(__then) {
/*   228 */             if (!path.existsSync(".gitignore")) {
/*   229 */               log.info("Creating default .gitignore file");
/*   230 */               return fs.writeFile(".gitignore", "node_modules", __cb(_, __frame, 15, 20, __then, true));
                        }
                         else {
                          __then();
                        }
                      ;
                      })(function __$initGitOnCurrentDirectory() {
/*   233 */             context.flags.isGitWorkingTree = true;
                        _();
                      });
                    }, true));
                  });
                };
/*   236 */     function copyWebConfigWhenServerJsPresent(_) {
                  var sourcePath;
                  var __frame = {
                    name: "copyWebConfigWhenServerJsPresent",
                    line: 236
                  };
                  return __func(_, this, arguments, copyWebConfigWhenServerJsPresent, 0, __frame, function __$copyWebConfigWhenServerJsPresent() {
/*   237 */         log.silly("copyWebConfigWhenServerJsPresent");
                    return (function __$copyWebConfigWhenServerJsPresent(__then) {
/*   238 */           if ((!path.existsSync("web.config") && path.existsSync("server.js"))) {
/*   239 */             log.info("Creating default web.config file");
/*   240 */             sourcePath = path.join(__dirname, "../templates/node/web.config");
/*   241 */             return fs.readFile(sourcePath, __cb(_, __frame, 5, 47, function ___(__0, __1) {
/*   241 */               return fs.writeFile("web.config", __1, __cb(_, __frame, 5, 20, __then, true));
                        }, true));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(_);
                  });
                };
/*   245 */     function updateLocalConfigWithSiteName(_) {
                  var cfg;
                  var __frame = {
                    name: "updateLocalConfigWithSiteName",
                    line: 245
                  };
                  return __func(_, this, arguments, updateLocalConfigWithSiteName, 0, __frame, function __$updateLocalConfigWithSiteName() {
/*   246 */         log.silly("updateLocalConfigWithSiteName");
                    return (function __$updateLocalConfigWithSiteName(__then) {
/*   247 */           if (context.flags.isGitWorkingTree) {
/*   248 */             return site.readConfig(__cb(_, __frame, 3, 30, function ___(__0, __1) {
                          cfg = __1;
/*   249 */               cfg.name = context.site.name;
/*   250 */               return site.writeConfig(cfg, __cb(_, __frame, 5, 20, __then, true));
                        }, true));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(_);
                  });
                };
/*   254 */     function createSiteAndInitializeRemoteRepo(_) {
                  var __frame = {
                    name: "createSiteAndInitializeRemoteRepo",
                    line: 254
                  };
                  return __func(_, this, arguments, createSiteAndInitializeRemoteRepo, 0, __frame, function __$createSiteAndInitializeRemoteRepo() {
/*   255 */         log.silly("createSiteAndInitializeRemoteRepo");
                    return (function __$createSiteAndInitializeRemoteRepo(__then) {
/*   256 */           if (!context.flags.siteExists) {
/*   257 */             return site.doSitesPost(context, __cb(_, __frame, 3, 20, __then, true));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(function __$createSiteAndInitializeRemoteRepo() {
                      return (function ___(__then) {
                        (function ___(_) {
                          __tryCatch(_, function __$createSiteAndInitializeRemoteRepo() {
/*   260 */                 return site.doRepositoryGet(context, __cb(_, __frame, 6, 35, function ___(__0, __2) {
/*   260 */                   context.repo = __2;
                              __then();
                            }, true));
                          });
                        })(function ___(err, __result) {
                          __tryCatch(_, function __$createSiteAndInitializeRemoteRepo() {
                            if (err) {
/*   263 */                   return site.doRepositoryPost(context, __cb(_, __frame, 9, 20, function __$createSiteAndInitializeRemoteRepo() {
/*   264 */                     return site.doRepositoryGet(context, __cb(_, __frame, 10, 35, function ___(__0, __1) {
/*   264 */                       context.repo = __1;
                                  __then();
                                }, true));
                              }, true));
                            }
                             else {
                              _(null, __result);
                            }
                          ;
                          });
                        });
                      })(function ___() {
                        __tryCatch(_, function __$createSiteAndInitializeRemoteRepo() {
/*   266 */               log.silly("context.repo", context.repo);
                          _();
                        });
                      });
                    });
                  });
                };
/*   269 */     function addRemoteToLocalGitRepo(_) {
                  var publishingUsers, publishingUser, repoUrl, remotes, azureExists;
                  var __frame = {
                    name: "addRemoteToLocalGitRepo",
                    line: 269
                  };
                  return __func(_, this, arguments, addRemoteToLocalGitRepo, 0, __frame, function __$addRemoteToLocalGitRepo() {
/*   270 */         log.silly("addRemoteToLocalGitRepo");
/*   271 */         if (!context.flags.isGitWorkingTree) {
                      return _(null);
                    }
                  ;
/*   274 */         return site.doPublishingUsersGet(context, __cb(_, __frame, 5, 38, function ___(__0, __1) {
                      publishingUsers = __1;
/*   275 */           publishingUser = toArray(publishingUsers)[0];
                      return (function __$addRemoteToLocalGitRepo(__then) {
/*   276 */             if (((publishingUser === undefined) || (publishingUser.length > 64))) {
/*   277 */               log.help("You will also need to provide publishing username and credentials on the portal.");
/*   278 */               log.help("For now, please provide a username for git remote");
/*   279 */               return prompt("Publishing username ", __cb(_, __frame, 10, 37, function ___(__0, __2) {
/*   279 */                 publishingUser = __2;
                            __then();
                          }, true));
                        }
                         else {
                          __then();
                        }
                      ;
                      })(function __$addRemoteToLocalGitRepo() {
/*   282 */             repoUrl = url.parse(((context.repo + context.site.name) + ".git"));
/*   283 */             repoUrl.protocol = "http:";
/*   284 */             repoUrl.auth = publishingUser;
/*   287 */             log.verbose("Detecting git and local git folder");
/*   288 */             return exec("git remote", __cb(_, __frame, 19, 30, function ___(__0, __3) {
                          remotes = __3;
/*   289 */               azureExists = ((remotes.stdout + remotes.stderr)).split("\n").some(function(item) {
/*   290 */                 return (item === "azure");
                          });
                          return (function __$addRemoteToLocalGitRepo(__then) {
/*   293 */                 if (azureExists) {
/*   294 */                   log.verbose("Removing existing azure remote alias");
/*   295 */                   return exec("git remote rm azure", __cb(_, __frame, 26, 20, __then, true));
                            }
                             else {
                              __then();
                            }
                          ;
                          })(function __$addRemoteToLocalGitRepo() {
/*   298 */                 log.info((("Executing `git remote add azure " + url.format(repoUrl)) + "`"));
/*   299 */                 return exec(("git remote add azure " + url.format(repoUrl)), __cb(_, __frame, 30, 16, _, true));
                          });
                        }, true));
                      });
                    }, true));
                  });
                };
                var __frame = {
                  name: "__2",
                  line: 108
                };
                return __func(_, this, arguments, __2, 2, __frame, function __$__2() {
/*   109 */       context = {
/*   110 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   111 */         site: {
/*   112 */           name: nameArg,
/*   113 */           webspace: options.location,
/*   114 */           hostname: options.hostname
                    },
/*   116 */         flags: {
                    }
                  };
/*   120 */       return promptForSiteName(__cb(_, __frame, 12, 12, function __$__2() {
/*   121 */         return determineIfSiteExists(__cb(_, __frame, 13, 12, function __$__2() {
/*   122 */           return promptForLocation(__cb(_, __frame, 14, 12, function __$__2() {
/*   123 */             return determineIfCurrentDirectoryIsGitWorkingTree(__cb(_, __frame, 15, 12, function __$__2() {
/*   124 */               return initGitOnCurrentDirectory(__cb(_, __frame, 16, 12, function __$__2() {
/*   125 */                 return copyWebConfigWhenServerJsPresent(__cb(_, __frame, 17, 12, function __$__2() {
/*   126 */                   return updateLocalConfigWithSiteName(__cb(_, __frame, 18, 12, function __$__2() {
/*   127 */                     return createSiteAndInitializeRemoteRepo(__cb(_, __frame, 19, 12, function __$__2() {
/*   128 */                       return addRemoteToLocalGitRepo(__cb(_, __frame, 20, 12, _, true));
                                }, true));
                              }, true));
                            }, true));
                          }, true));
                        }, true));
                      }, true));
                    }, true));
                  }, true));
                });
              });
/*   303 */   site.command("portal [name]").whiteListPowershell().description("Opens the portal in a browser to manage your web sites").execute(function __3(name, options, _) {
                var href;
                var __frame = {
                  name: "__3",
                  line: 306
                };
                return __func(_, this, arguments, __3, 2, __frame, function __$__3() {
/*   308 */       href = utils.portal();
/*   309 */       if (name) {
/*   310 */         href = (((href + "#Workspaces/WebsiteExtension/Website/") + name) + "/dashboard");
                  }
                ;
/*   313 */       common.launchBrowser(href);
                  _();
                });
              });
/*   316 */   site.command("browse [name]").whiteListPowershell().description("Open your web site in a browser.").option("-s, --subscription <id>", "use the subscription id").execute(function __4(name, options, _) {
                var context, siteData, href;
                var __frame = {
                  name: "__4",
                  line: 320
                };
                return __func(_, this, arguments, __4, 2, __frame, function __$__4() {
/*   322 */       context = {
/*   323 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   324 */         site: {
/*   325 */           name: name
                    }
                  };
/*   328 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__4() {
/*   329 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__4() {
/*   330 */           return site.doSiteGet(context, __cb(_, __frame, 10, 33, function ___(__0, __1) {
/*   330 */             siteData = clean(__1);
/*   332 */             href = ("http://" + toArray(siteData.HostNames)[0]);
/*   334 */             common.launchBrowser(href);
                        _();
                      }, true));
                    }, true));
                  }, true));
                });
              });
/*   337 */   site.command("show [name]").whiteListPowershell().description("Show details for a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __5(name, options, _) {
                var context, siteData, configData, repositoryData;
                var __frame = {
                  name: "__5",
                  line: 341
                };
                return __func(_, this, arguments, __5, 2, __frame, function __$__5() {
/*   342 */       context = {
/*   343 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   344 */         site: {
/*   345 */           name: name
                    }
                  };
/*   349 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__5() {
/*   350 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__5() {
/*   352 */           log.info("Showing details for site");
/*   353 */           log.verbose("Parameters", context);
/*   355 */           return site.doSiteGet(context, __cb(_, __frame, 14, 27, function ___(__0, __1) {
                        siteData = __1;
/*   356 */             return site.doSiteConfigGet(context, __cb(_, __frame, 15, 29, function ___(__0, __2) {
                          configData = __2;
/*   357 */               return site.doRepositoryGet(context, __cb(_, __frame, 16, 33, function ___(__0, __3) {
                            repositoryData = __3;
/*   359 */                 logEachData("Site", siteData);
/*   360 */                 logEachData("Config", configData);
/*   361 */                 log.data("Repository", clean(repositoryData));
                            _();
                          }, true));
                        }, true));
                      }, true));
                    }, true));
                  }, true));
                });
              });
/*   364 */   function lookupSiteName(context, _) {
                var cfg;
                var __frame = {
                  name: "lookupSiteName",
                  line: 364
                };
                return __func(_, this, arguments, lookupSiteName, 1, __frame, function __$lookupSiteName() {
/*   365 */       if ((context.site.name !== undefined)) {
                    return _(null);
                  }
                ;
/*   370 */       return site.readConfig(__cb(_, __frame, 6, 18, function ___(__0, __1) {
                    cfg = __1;
/*   371 */         if ((cfg !== undefined)) {
/*   373 */           context.site.name = cfg.name;
                      return _(null);
                    }
                  ;
/*   377 */         return prompt("Web site name: ", __cb(_, __frame, 13, 28, function ___(__0, __2) {
/*   377 */           context.site.name = __2;
                      _();
                    }, true));
                  }, true));
                });
              };
/*   379 */   site.lookupSiteName = lookupSiteName;
/*   381 */   function lookupSiteWebSpace(context, _) {
                var sites, index;
                var __frame = {
                  name: "lookupSiteWebSpace",
                  line: 381
                };
                return __func(_, this, arguments, lookupSiteWebSpace, 1, __frame, function __$lookupSiteWebSpace() {
/*   382 */       log.verbose("Attempting to locate site ", context.site.name);
/*   383 */       return site.doSitesGet(context, __cb(_, __frame, 2, 20, function ___(__0, __1) {
                    sites = __1;
/*   384 */         for (index in sites) {
/*   385 */           if ((sites[index].Name === context.site.name)) {
/*   386 */             log.verbose("Site located at ", sites[index].WebSpace);
/*   387 */             context.site.webspace = sites[index].WebSpace;
                      }
                    ;
                    };
/*   390 */         if ((context.site.webspace === undefined)) {
/*   391 */           return _(new Error(("Unable to locate site named " + context.site.name)));
                    }
                  ;
                    _();
                  }, true));
                });
              };
/*   394 */   site.lookupSiteWebSpace = lookupSiteWebSpace;
/*   396 */   site.command("delete [name]").whiteListPowershell().description("Delete a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __6(name, options, _) {
                var context, progress, result;
                var __frame = {
                  name: "__6",
                  line: 400
                };
                return __func(_, this, arguments, __6, 2, __frame, function __$__6() {
/*   401 */       context = {
/*   402 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   403 */         site: {
/*   404 */           name: name
                    }
                  };
/*   408 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__6() {
/*   409 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__6() {
/*   411 */           log.info("Deleting site", context.site.name);
/*   413 */           progress = cli.progress("Deleting site");
                      return (function ___(__then) {
                        (function ___(_) {
                          __tryCatch(_, function __$__6() {
/*   422 */                 return getChannel().path(context.subscription).path("services").path("webspaces").path(context.site.webspace).path("sites").path(context.site.name).DELETE(__cb(_, __frame, 22, 29, function ___(__0, __1) {
                              result = __1;
                              _(null, null, true);
                            }, true));
                          });
                        })(function ___(__e, __r, __cont) {
                          (function ___(__then) {
                            __tryCatch(_, function __$__6() {
/*   425 */                   progress.end();
                              __then();
                            });
                          })(function ___() {
                            __tryCatch(_, function ___() {
                              if (__cont) {
                                __then();
                              } else {
                                _(__e, __r);
                              };
                            });
                          });
                        });
                      })(function ___() {
                        __tryCatch(_, function __$__6() {
/*   427 */               log.info((("Site " + context.site.name) + " has been deleted"));
                          _();
                        });
                      });
                    }, true));
                  }, true));
                });
              });
/*   431 */   site.command("start [name]").whiteListPowershell().description("Start a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __7(name, options, _) {
                var context, progress, result;
                var __frame = {
                  name: "__7",
                  line: 435
                };
                return __func(_, this, arguments, __7, 2, __frame, function __$__7() {
/*   436 */       context = {
/*   437 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   438 */         site: {
/*   439 */           name: name
                    }
                  };
/*   443 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__7() {
/*   444 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__7() {
/*   446 */           log.info("Starting site", context.site.name);
/*   448 */           progress = cli.progress("Updating site state");
                      return (function ___(__then) {
                        (function ___(_) {
                          __tryCatch(_, function __$__7() {
/*   458 */                 return getChannel().path(context.subscription).path("services").path("webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").PUT(function(req) {
/*   459 */                   req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   460 */                   req.write("<HostNames>");
/*   461 */                   req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   462 */                   req.write((context.site.name + ".antdf0.antares-test.windows-int.net"));
/*   463 */                   req.write("</string>");
/*   464 */                   req.write("</HostNames>");
/*   465 */                   req.write("<Name>");
/*   466 */                   req.write(context.site.name);
/*   467 */                   req.write("</Name>");
/*   468 */                   req.write("<State>");
/*   469 */                   req.write("Running");
/*   470 */                   req.write("</State>");
/*   471 */                   req.write("</Site>");
/*   473 */                   req.end();
                            }, __cb(_, __frame, 23, 29, function ___(__0, __1) {
                              result = __1;
                              _(null, null, true);
                            }, true));
                          });
                        })(function ___(__e, __r, __cont) {
                          (function ___(__then) {
                            __tryCatch(_, function __$__7() {
/*   477 */                   progress.end();
                              __then();
                            });
                          })(function ___() {
                            __tryCatch(_, function ___() {
                              if (__cont) {
                                __then();
                              } else {
                                _(__e, __r);
                              };
                            });
                          });
                        });
                      })(function ___() {
                        __tryCatch(_, function __$__7() {
/*   480 */               log.info((("Site " + context.site.name) + " has been started"));
                          _();
                        });
                      });
                    }, true));
                  }, true));
                });
              });
/*   483 */   site.command("stop [name]").whiteListPowershell().description("Stop a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __8(name, options, _) {
                var context, progress, result;
                var __frame = {
                  name: "__8",
                  line: 487
                };
                return __func(_, this, arguments, __8, 2, __frame, function __$__8() {
/*   488 */       context = {
/*   489 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   490 */         site: {
/*   491 */           name: name
                    }
                  };
/*   495 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__8() {
/*   496 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__8() {
/*   498 */           log.info("Stopping site", context.site.name);
/*   500 */           progress = cli.progress("Updating site state");
                      return (function ___(__then) {
                        (function ___(_) {
                          __tryCatch(_, function __$__8() {
/*   510 */                 return getChannel().path(context.subscription).path("services").path("webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").PUT(function(req) {
/*   511 */                   req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   512 */                   req.write("<HostNames>");
/*   513 */                   req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   514 */                   req.write((context.site.name + ".antdf0.antares-test.windows-int.net"));
/*   515 */                   req.write("</string>");
/*   516 */                   req.write("</HostNames>");
/*   517 */                   req.write("<Name>");
/*   518 */                   req.write(context.site.name);
/*   519 */                   req.write("</Name>");
/*   520 */                   req.write("<State>");
/*   521 */                   req.write("Stopped");
/*   522 */                   req.write("</State>");
/*   523 */                   req.write("</Site>");
/*   525 */                   req.end();
                            }, __cb(_, __frame, 23, 29, function ___(__0, __1) {
                              result = __1;
                              _(null, null, true);
                            }, true));
                          });
                        })(function ___(__e, __r, __cont) {
                          (function ___(__then) {
                            __tryCatch(_, function __$__8() {
/*   529 */                   progress.end();
                              __then();
                            });
                          })(function ___() {
                            __tryCatch(_, function ___() {
                              if (__cont) {
                                __then();
                              } else {
                                _(__e, __r);
                              };
                            });
                          });
                        });
                      })(function ___() {
                        __tryCatch(_, function __$__8() {
/*   532 */               log.info((("Site " + context.site.name) + " has been stopped"));
                          _();
                        });
                      });
                    }, true));
                  }, true));
                });
              });
/*   539 */   site.readConfig = function site_readConfig__9(_) {
                var __frame = {
                  name: "site_readConfig__9",
                  line: 539
                };
                return __func(_, this, arguments, site_readConfig__9, 0, __frame, function __$site_readConfig__9() {
/*   541 */       return site.readConfigValue("azure.site.name", __cb(_, __frame, 2, 18, function ___(__0, __2) {
/*   540 */         var __1 = {
/*   541 */           name: __2
                    };
                    return _(null, __1);
                  }, true));
                });
              };
/*   545 */   site.writeConfig = function site_writeConfig__10(cfg, _) {
                var __frame = {
                  name: "site_writeConfig__10",
                  line: 545
                };
                return __func(_, this, arguments, site_writeConfig__10, 1, __frame, function __$site_writeConfig__10() {
/*   546 */       return site.writeConfigValue("azure.site.name", cfg.name, __cb(_, __frame, 1, 8, _, true));
                });
              };
/*   549 */   site.readConfigValue = function site_readConfigValue__11(name, _) {
                var result;
                var __frame = {
                  name: "site_readConfigValue__11",
                  line: 549
                };
                return __func(_, this, arguments, site_readConfigValue__11, 1, __frame, function __$site_readConfigValue__11() {
                  return (function ___(__then) {
                    (function ___(_) {
                      __tryCatch(_, function __$site_readConfigValue__11() {
/*   551 */             return exec(("git config --get " + name), __cb(_, __frame, 2, 25, function ___(__0, __1) {
                          result = __1;
/*   552 */               return _(null, ((result.stdout + result.stderr)).trim());
                        }, true));
                      });
                    })(function ___(err, __result) {
                      __tryCatch(_, function __$site_readConfigValue__11() {
                        if (err) {
/*   555 */               log.silly("Unable to read config", err);
/*   556 */               return _(null, "");
                        }
                         else {
                          _(null, __result);
                        }
                      ;
                      });
                    });
                  })(function ___() {
                    __tryCatch(_, _);
                  });
                });
              };
/*   560 */   site.writeConfigValue = function site_writeConfigValue__12(name, value, _) {
                var __frame = {
                  name: "site_writeConfigValue__12",
                  line: 560
                };
                return __func(_, this, arguments, site_writeConfigValue__12, 2, __frame, function __$site_writeConfigValue__12() {
/*   561 */       return exec(((("git config " + name) + " ") + value), __cb(_, __frame, 1, 8, _, true));
                });
              };
/*   568 */   site.doSitesPost = function(options, callback) {
/*   569 */     log.info("Creating a new web site");
/*   570 */     log.verbose("Subscription", options.subscription);
/*   571 */     log.verbose("Webspace", options.site.webspace);
/*   572 */     log.verbose("Site", options.site.name);
/*   574 */     var progress = cli.progress("Sending site information");
/*   575 */     try {
/*   576 */       getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").header("Content-Type", "application/xml").POST(writers.Site.xml(options.site), function(err, result) {
/*   586 */         if (err) {
/*   587 */           logError("Failed to create site", err);
                    }
/*   588 */          else {
/*   589 */           log.info("Created website at ", clean(result).HostNames);
/*   590 */           log.verbose("Site", clean(result));
                    }
                  ;
/*   592 */         callback(err, result);
                  });
/*   595 */     } finally {
/*   596 */       progress.end();
                };
              };
/*   600 */   site.doRepositoryPost = function(options, callback) {
/*   601 */     log.info("Initializing repository");
/*   602 */     log.verbose("Subscription", options.subscription);
/*   603 */     log.verbose("Webspace", options.site.webspace);
/*   604 */     log.verbose("Site", options.site.name);
/*   606 */     var progress = cli.progress("Updating site information");
/*   607 */     try {
/*   608 */       getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("repository").POST("", function(err, result) {
/*   619 */         if (err) {
/*   620 */           logError("Failed to initialize repository", err);
                    }
/*   621 */          else {
/*   622 */           log.info("Repository initialized");
                    }
                  ;
/*   624 */         callback(err, result);
                  });
/*   627 */     } finally {
/*   628 */       progress.end();
                };
              };
/*   632 */   site.doSpacesGet = function site_doSpacesGet__13(options, _) {
                var progress, result;
                var __frame = {
                  name: "site_doSpacesGet__13",
                  line: 632
                };
                return __func(_, this, arguments, site_doSpacesGet__13, 1, __frame, function __$site_doSpacesGet__13() {
/*   633 */       log.verbose("Subscription", options.subscription);
/*   635 */       progress = cli.progress("Enumerating locations");
                  return (function ___(__then) {
                    (function ___(_) {
                      __tryCatch(_, function __$site_doSpacesGet__13() {
/*   642 */             return getChannel().path(options.subscription).path("services").path("webspaces").path("").GET(__cb(_, __frame, 10, 25, function ___(__0, __1) {
                          result = __1;
/*   644 */               log.json("silly", result);
/*   645 */               return _(null, toArray(result.WebSpace));
                        }, true));
                      });
                    })(function ___(__e, __r, __cont) {
                      (function ___(__then) {
                        __tryCatch(_, function __$site_doSpacesGet__13() {
/*   648 */               progress.end();
                          __then();
                        });
                      })(function ___() {
                        __tryCatch(_, function ___() {
                          if (__cont) {
                            __then();
                          } else {
                            _(__e, __r);
                          };
                        });
                      });
                    });
                  })(function ___() {
                    __tryCatch(_, _);
                  });
                });
              };
/*   652 */   site.doSitesGet = function site_doSitesGet__14(options, _) {
                var spaces, channel, progress, result, sites;
                var __frame = {
                  name: "site_doSitesGet__14",
                  line: 652
                };
                return __func(_, this, arguments, site_doSitesGet__14, 1, __frame, function __$site_doSitesGet__14() {
/*   653 */       log.verbose("Subscription", options.subscription);
/*   655 */       return site.doSpacesGet(options, __cb(_, __frame, 3, 21, function ___(__0, __2) {
                    spaces = __2;
/*   659 */         channel = getChannel().path(options.subscription).path("services/webspaces");
/*   661 */         progress = cli.progress("Enumerating sites");
                    return (function ___(__then) {
                      (function ___(_) {
                        __tryCatch(_, function __$site_doSitesGet__14() {
/*   663 */               return async.map(spaces, function __1(webspace, _) {
                            var __frame = {
                              name: "__1",
                              line: 665
                            };
                            return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
/*   670 */                   return channel.path(webspace.Name).path("sites").path("").GET(__cb(_, __frame, 5, 27, _, true));
                            });
                          }, __cb(_, __frame, 11, 25, function ___(__0, __3) {
                            result = __3;
/*   674 */                 sites = [];
/*   675 */                 result.forEach(function(item) {
/*   676 */                   sites = sites.concat(toArray(item.Site));
                            });
/*   678 */                 result = sites;
/*   680 */                 log.json("verbose", sites);
/*   681 */                 return _(null, sites);
                          }, true));
                        });
                      })(function ___(__e, __r, __cont) {
                        (function ___(__then) {
                          __tryCatch(_, function __$site_doSitesGet__14() {
/*   684 */                 progress.end();
                            __then();
                          });
                        })(function ___() {
                          __tryCatch(_, function ___() {
                            if (__cont) {
                              __then();
                            } else {
                              _(__e, __r);
                            };
                          });
                        });
                      });
                    })(function ___() {
                      __tryCatch(_, _);
                    });
                  }, true));
                });
              };
/*   688 */   site.doSiteGet = function(options, callback) {
/*   689 */     var progress = cli.progress("Retrieving site information");
/*   690 */     try {
/*   691 */       getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").path(options.site.name).GET(function(err, result) {
/*   700 */         if (err) {
/*   701 */           logError("Failed to get site info", err);
                    }
/*   702 */          else {
/*   703 */           log.verbose("Site", clean(result));
                    }
                  ;
/*   705 */         callback(err, result);
                  });
/*   708 */     } finally {
/*   709 */       progress.end();
                };
              };
/*   713 */   site.doSiteConfigGet = function(options, callback) {
/*   714 */     var progress = cli.progress("Retrieving site information");
/*   715 */     try {
/*   716 */       getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("config").GET(function(err, result) {
/*   726 */         if (err) {
/*   727 */           logError("Failed to get site config info", err);
                    }
/*   728 */          else {
/*   729 */           log.verbose("SiteConfig", clean(result));
                    }
                  ;
/*   731 */         callback(err, result);
                  });
/*   734 */     } finally {
/*   735 */       progress.end();
                };
              };
/*   739 */   site.doRepositoryGet = function(options, callback) {
/*   740 */     var progress = cli.progress("Retrieving site information");
/*   741 */     try {
/*   742 */       getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("repository").GET(function(err, result) {
/*   752 */         if (result) {
/*   753 */           log.verbose("Repository", clean(result));
                    }
                  ;
/*   755 */         callback(err, clean(result));
                  });
/*   758 */     } finally {
/*   759 */       progress.end();
                };
              };
/*   763 */   site.doPublishingUsersGet = function site_doPublishingUsersGet__15(options, _) {
                var progress, publishingUsers;
                var __frame = {
                  name: "site_doPublishingUsersGet__15",
                  line: 763
                };
                return __func(_, this, arguments, site_doPublishingUsersGet__15, 1, __frame, function __$site_doPublishingUsersGet__15() {
/*   764 */       progress = cli.progress("Retrieving user information");
                  return (function ___(__then) {
                    (function ___(_) {
                      __tryCatch(_, function __$site_doPublishingUsersGet__15() {
/*   772 */             return getChannel().path(options.subscription).path("services").path("webspaces").path("").query("properties", "publishingUsers").GET(__cb(_, __frame, 9, 40, function ___(__0, __1) {
/*   766 */               publishingUsers = clean(__1);
/*   774 */               log.verbose("PublishingUsers", publishingUsers);
/*   775 */               return _(null, publishingUsers);
                        }, true));
                      });
                    })(function ___(__e, __r, __cont) {
                      (function ___(__then) {
                        __tryCatch(_, function __$site_doPublishingUsersGet__15() {
/*   778 */               progress.end();
                          __then();
                        });
                      })(function ___() {
                        __tryCatch(_, function ___() {
                          if (__cont) {
                            __then();
                          } else {
                            _(__e, __r);
                          };
                        });
                      });
                    });
                  })(function ___() {
                    __tryCatch(_, _);
                  });
                });
              };
/*   786 */   var writers = {
/*   787 */     Site: {
/*   788 */       xml: function(site) {
/*   789 */         return function(req) {
/*   790 */           req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   791 */           req.write("<HostNames>");
/*   792 */           req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   793 */           req.write((site.name + ".antdf0.antares-test.windows-int.net"));
/*   794 */           req.write("</string>");
/*   796 */           if (site.hostname) {
/*   797 */             req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   798 */             req.write(site.hostname);
/*   799 */             req.write("</string>");
                      }
                    ;
/*   801 */           req.write("</HostNames>");
/*   802 */           req.write("<Name>");
/*   803 */           req.write(site.name);
/*   804 */           req.write("</Name>");
/*   805 */           req.write("</Site>");
/*   807 */           req.end();
                    };
                  }
                }
              };
/*   813 */   function clean(source) {
/*   814 */     if ((typeof (source) === "string")) {
/*   815 */       return source;
                }
              ;
/*   818 */     var target = {
                };
/*   819 */     var hasString = false;
/*   820 */     var hasNonString = false;
/*   821 */     var stringValue = "";
/*   823 */     for (var prop in source) {
/*   824 */       if ((prop == "@")) {
/*   825 */         continue;
                  }
/*   826 */        else {
/*   827 */         if ((((prop === "#") || (prop === "string")) || (prop.substring((prop.length - 7)) === ":string"))) {
/*   828 */           hasString = true;
/*   829 */           stringValue = source[prop];
                    }
/*   830 */          else {
/*   831 */           hasNonString = true;
                    }
                  ;
/*   833 */         target[prop] = clean(source[prop]);
                  }
                ;
                };
/*   836 */     if ((hasString && !hasNonString)) {
/*   837 */       return stringValue;
                }
              ;
/*   839 */     return target;
              };
/*   842 */   function logEachData(title, data) {
/*   843 */     var cleaned = clean(data);
/*   844 */     for (var property in cleaned) {
/*   845 */       log.data(((title + " ") + property), cleaned[property]);
                };
              };
/*   849 */   function logError(message, err) {
/*   850 */     if ((arguments.length == 1)) {
/*   851 */       err = message;
/*   852 */       message = undefined;
                }
/*   853 */      else {
/*   854 */       log.error(message);
                }
              ;
/*   857 */     if (err) {
/*   858 */       if (err.message) {
/*   860 */         log.verbose("stack", err.stack);
/*   861 */         log.json("silly", err);
                  }
/*   863 */        else if (err.Message) {
/*   865 */         log.json("verbose", clean(err));
                  }
/*   867 */        else {
                  
                  }
                  
                ;
                }
              ;
              };
/*   873 */   function isArray(testObject) {
/*   874 */     return (((testObject && !(testObject.propertyIsEnumerable("length"))) && (typeof testObject === "object")) && (typeof testObject.length === "number"));
              };
/*   877 */   function toArray(testObject) {
/*   878 */     return (isArray(testObject) ? testObject : ((typeof testObject === "undefined") ? [] : [testObject,]));
              };
/*   881 */   function endsWith(str, suffix) {
/*   882 */     return (str.indexOf(suffix, (str.length - suffix.length)) !== -1);
              };
/*   885 */   function exec(cmd, cb) {
/*   886 */     child_process.exec(cmd, function(err, stdout, stderr) {
/*   887 */       cb(err, {
/*   888 */         stdout: stdout,
/*   889 */         stderr: stderr
                  });
                });
              };
            };
