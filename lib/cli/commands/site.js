/*** Generated by streamline 0.2.2 - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch,__propagate=__rt.__propagate,__trap=__rt.__trap,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g;
/*     1 */ var common = require("../common");
/*    20 */ var fs = require("fs");
/*    21 */ var path = require("path");
/*    22 */ var url = require("url");
/*    23 */ var crypto = require("crypto");
/*    24 */ var pfx2pem = require("../../util/certificates/pkcs").pfx2pem;
/*    25 */ var Channel = require("../channel");
/*    26 */ var async = require("async");
/*    27 */ var child_process = require("child_process");
/*    30 */ exports.init = function(cli) {
/*    32 */   var log = cli.output;
/*    34 */   function getChannel() {
/*    35 */     var pem = cli.category("account").managementCertificate();
/*    37 */     var channel = new Channel({
/*    38 */       host: "umapi-preview.core.windows-int.net",
/*    39 */       port: 8443,
/*    40 */       key: pem,
/*    41 */       cert: pem
/*    42 */     }).header("x-ms-version", "2011-02-25");
/*    44 */     var proxyString = (((process.env.HTTPS_PROXY || process.env.https_proxy) || process.env.ALL_PROXY) || process.env.all_proxy);
/*    50 */     if ((proxyString !== undefined)) {
/*    51 */       var proxyUrl = url.parse(proxyString);
/*    52 */       if (((proxyUrl.protocol !== "http:") && (proxyUrl.protocol !== "https:"))) {
/*    55 */         proxyUrl = url.parse(("http://" + proxyString));
                  }
                ;
/*    58 */       channel = channel.add({
/*    58 */         proxy: proxyUrl
                  });
                }
              ;
/*    61 */     return channel;
              };
/*    65 */   var site = cli.category("site").description("Commands to manage your web sites");
/*    69 */   site.command("list").description("List your web sites").option("-s, --subscription <id>", "use the subscription id").execute(function __1(options, _) {
                var parameters, spaces, sites;
                var __frame = {
                  name: "__1",
                  line: 72
                };
                return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
/*    73 */       parameters = {
/*    74 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription)
                  };
/*    77 */       return site.doSpacesGet(parameters, __cb(_, __frame, 5, 25, function ___(__0, __1) {
                    spaces = __1;
/*    78 */         return site.doSitesGet(parameters, __cb(_, __frame, 6, 24, function ___(__0, __2) {
                      sites = __2;
/*    80 */           log.table(sites, function(row, site) {
/*    81 */             row.cell("Name", site.Name);
/*    82 */             row.cell("State", site.State);
/*    83 */             row.cell("Host names", clean(site).HostNames);
                      });
                      _();
                    }));
                  }));
                });
              });
/*    87 */   function choose(data, callback) {
/*    88 */     cli.choose(data, function(x) {
/*    88 */       callback(undefined, x);
                });
              };
/*    90 */   function prompt(label, callback) {
/*    91 */     cli.prompt(label, function(x) {
/*    91 */       callback(undefined, x);
                });
              };
/*    95 */   site.command("create [name]").description("Create a new web site and local directory").option("-s, --subscription <id>", "use the subscription id").option("--location <location>", "the geographic region to create the website").option("--hostname <hostname>", "custom host name to use").execute(function __2(nameArg, options, _) {
                var context, cfg, spaces, href, repo, publishingUsers, repoUrl, remotes, azureExists;
                var __frame = {
                  name: "__2",
                  line: 100
                };
                return __func(_, this, arguments, __2, 2, __frame, function __$__2() {
/*   101 */       context = {
/*   102 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   103 */         site: {
/*   104 */           name: nameArg,
/*   105 */           webspace: options.location,
/*   106 */           hostname: options.hostname
                    }
                  };
/*   110 */       cfg = site.readConfig();
                  return (function __$__2(__then) {
/*   111 */         if ((cfg === undefined)) {
                      return (function __$__2(__then) {
/*   112 */             if ((context.site.name === undefined)) {
/*   113 */               log.help("Need a site name");
/*   114 */               return prompt("Name: ", __cb(_, __frame, 14, 40, function ___(__0, __1) {
/*   114 */                 context.site.name = __1;
                            __then();
                          }));
                        }
                         else {
/*   116 */               log.verbose("Initializing config with site name:", context.site.name);
                          __then();
                        }
                      ;
                      })(function __$__2() {
/*   118 */             cfg = {
/*   118 */               name: context.site.name
                        };
/*   119 */             site.initConfig(cfg);
                        __then();
                      });
                    }
                     else {
/*   121 */           if ((context.site.name === undefined)) {
/*   122 */             log.verbose("Using existing site name from config:", cfg.name);
/*   123 */             context.site.name = cfg.name;
                      }
/*   124 */            else {
/*   125 */             log.verbose("Updating config with site name:", context.site.name);
/*   126 */             cfg.name = context.site.name;
/*   127 */             site.writeConfig(cfg);
                      }
                    ;
                      __then();
                    }
                  ;
                  })(function __$__2() {
                    return (function __$__2(__then) {
/*   133 */           if (!context.site.webspace) {
/*   134 */             return site.doSpacesGet(context, __cb(_, __frame, 34, 29, function ___(__0, __2) {
                          spaces = __2;
                          return (function __$__2(__then) {
/*   136 */                 if ((spaces.length === 0)) {
/*   137 */                   log.help("You must create your first web site online.");
/*   138 */                   log.help("Launching portal.");
/*   139 */                   href = "https://windows.azure-test.net/";
/*   140 */                   common.launchBrowser(href);
                              return _(null);
                            }
                             else {
                              return (function __$__2(__then) {
/*   142 */                     if ((spaces.length == 1)) {
/*   143 */                       context.site.webspace = spaces[0].Name;
                                  __then();
                                }
                                 else {
/*   145 */                       log.help("Choose a region");
/*   146 */                       return choose(spaces.map(function(space) {
/*   147 */                         return space.GeoRegion;
                                  }), __cb(_, __frame, 46, 51, function ___(__0, __3) {
/*   146 */                         context.site.webspace = spaces[__3].Name;
                                    __then();
                                  }));
                                }
                              ;
                              })(__then);
                            }
                          ;
                          })(__then);
                        }));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(function __$__2() {
/*   152 */           log.json("silly", context);
/*   154 */           return site.doSitesPost(context, __cb(_, __frame, 54, 12, function __$__2() {
/*   155 */             return site.doRepositoryPost(context, __cb(_, __frame, 55, 12, function __$__2() {
/*   157 */               return site.doRepositoryGet(context, __cb(_, __frame, 57, 23, function ___(__0, __4) {
                            repo = __4;
/*   158 */                 return site.doPublishingUsersGet(context, __cb(_, __frame, 58, 34, function ___(__0, __5) {
                              publishingUsers = __5;
/*   160 */                   repoUrl = url.parse(((repo + context.site.name) + ".git"));
/*   161 */                   repoUrl.protocol = "http:";
/*   162 */                   repoUrl.auth = toArray(publishingUsers)[0];
                              return (function ___(__then) {
                                (function ___(_) {
                                  __tryCatch(_, function __$__2() {
                                    return (function ___(__then) {
                                      (function ___(_) {
                                        __tryCatch(_, function __$__2() {
/*   166 */                               log.verbose("Detecting git and local git folder");
/*   167 */                               return exec("git remote", __cb(_, __frame, 67, 34, function ___(__0, __6) {
                                            remotes = __6;
/*   168 */                                 azureExists = ((remotes.stdout + remotes.stderr)).split("\n").some(function(item) {
/*   169 */                                   return (item === "azure");
                                            });
                                            return (function __$__2(__then) {
/*   172 */                                   if (azureExists) {
/*   173 */                                     log.verbose("Removing existing azure remote alias");
/*   174 */                                     return exec("git remote rm azure", __cb(_, __frame, 74, 24, __then));
                                              }
                                               else {
                                                __then();
                                              }
                                            ;
                                            })(__then);
                                          }));
                                        });
                                      })(function ___(err, __result) {
                                        __tryCatch(_, function __$__2() {
                                          if (err) {
/*   178 */                                 log.info("Executing `git init`");
/*   179 */                                 return exec("git init", __cb(_, __frame, 79, 20, __then));
                                          }
                                           else {
                                            _(null, __result);
                                          }
                                        ;
                                        });
                                      });
                                    })(function ___() {
                                      __tryCatch(_, function __$__2() {
/*   181 */                             log.info((("Executing `git remote add azure " + url.format(repoUrl)) + "`"));
/*   182 */                             return exec(("git remote add azure " + url.format(repoUrl)), __cb(_, __frame, 82, 16, __then));
                                      });
                                    });
                                  });
                                })(function ___(err, __result) {
                                  __tryCatch(_, function __$__2() {
                                    if (err) {
/*   185 */                           log.warn("Trouble updating local git folder", err);
                                      __then();
                                    }
                                     else {
                                      _(null, __result);
                                    }
                                  ;
                                  });
                                });
                              })(function ___() {
                                __tryCatch(_, function __$__2() {
/*   188 */                       log.help("To start adding content to the website, type in the following:");
/*   189 */                       log.help("  git add .");
/*   190 */                       log.help("  git commit -m \"initial commit\"");
/*   191 */                       log.help("  git push azure master");
                                  _();
                                });
                              });
                            }));
                          }));
                        }));
                      }));
                    });
                  });
                });
              });
/*   194 */   site.command("portal [name]").description("Opens the portal in a browser to manage your web sites").execute(function __3(name, options, _) {
                var href;
                var __frame = {
                  name: "__3",
                  line: 196
                };
                return __func(_, this, arguments, __3, 2, __frame, function __$__3() {
/*   198 */       href = "https://windows.azure-test.net/";
/*   199 */       if (name) {
/*   200 */         href = (((href + "#Workspaces/WebsiteExtension/Website/") + name) + "/dashboard");
                  }
                ;
/*   203 */       common.launchBrowser(href);
                  _();
                });
              });
/*   206 */   site.command("browse [name]").description("Open your web site in a browser.").option("-s, --subscription <id>", "use the subscription id").execute(function __4(name, options, _) {
                var context, siteData, href;
                var __frame = {
                  name: "__4",
                  line: 209
                };
                return __func(_, this, arguments, __4, 2, __frame, function __$__4() {
/*   211 */       context = {
/*   212 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   213 */         site: {
/*   214 */           name: name
                    }
                  };
/*   217 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__4() {
/*   218 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__4() {
/*   219 */           return site.doSiteGet(context, __cb(_, __frame, 10, 33, function ___(__0, __1) {
/*   219 */             siteData = clean(__1);
/*   221 */             href = ("http://" + toArray(siteData.HostNames)[0]);
/*   223 */             common.launchBrowser(href);
                        _();
                      }));
                    }));
                  }));
                });
              });
/*   226 */   site.command("show [name]").description("Show details for a web sites").option("-s, --subscription <id>", "use the subscription id").execute(function __5(name, options, _) {
                var context, siteData, configData, repositoryData;
                var __frame = {
                  name: "__5",
                  line: 229
                };
                return __func(_, this, arguments, __5, 2, __frame, function __$__5() {
/*   230 */       context = {
/*   231 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   232 */         site: {
/*   233 */           name: name
                    }
                  };
/*   237 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__5() {
/*   238 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__5() {
/*   240 */           log.info("Showing details for site");
/*   241 */           log.verbose("Parameters", context);
/*   243 */           return site.doSiteGet(context, __cb(_, __frame, 14, 27, function ___(__0, __1) {
                        siteData = __1;
/*   244 */             return site.doSiteConfigGet(context, __cb(_, __frame, 15, 29, function ___(__0, __2) {
                          configData = __2;
/*   245 */               return site.doRepositoryGet(context, __cb(_, __frame, 16, 33, function ___(__0, __3) {
                            repositoryData = __3;
/*   247 */                 logEachData("Site", siteData);
/*   248 */                 logEachData("Config", configData);
/*   249 */                 log.data("Repository", clean(repositoryData));
                            _();
                          }));
                        }));
                      }));
                    }));
                  }));
                });
              });
/*   252 */   function lookupSiteName(context, _) {
                var cfg;
                var __frame = {
                  name: "lookupSiteName",
                  line: 252
                };
                return __func(_, this, arguments, lookupSiteName, 1, __frame, function __$lookupSiteName() {
/*   253 */       if ((context.site.name !== undefined)) {
                    return _(null);
                  }
                ;
/*   258 */       cfg = site.readConfig();
/*   259 */       if ((cfg !== undefined)) {
/*   261 */         context.site.name = cfg.name;
                    return _(null);
                  }
                ;
/*   265 */       return prompt("Web site name: ", __cb(_, __frame, 13, 28, function ___(__0, __1) {
/*   265 */         context.site.name = __1;
                    _();
                  }));
                });
              };
/*   267 */   site.lookupSiteName = lookupSiteName;
/*   269 */   function lookupSiteWebSpace(context, _) {
                var sites, index;
                var __frame = {
                  name: "lookupSiteWebSpace",
                  line: 269
                };
                return __func(_, this, arguments, lookupSiteWebSpace, 1, __frame, function __$lookupSiteWebSpace() {
/*   270 */       log.verbose("Attempting to locate site ", context.site.name);
/*   271 */       return site.doSitesGet(context, __cb(_, __frame, 2, 20, function ___(__0, __1) {
                    sites = __1;
/*   272 */         for (index in sites) {
/*   273 */           if ((sites[index].Name === context.site.name)) {
/*   274 */             log.verbose("Site located at ", sites[index].WebSpace);
/*   275 */             context.site.webspace = sites[index].WebSpace;
                      }
                    ;
                    };
/*   278 */         if ((context.site.webspace === undefined)) {
/*   279 */           return _(new Error(("Unable to locate site named " + context.site.name)));
                    }
                  ;
                    _();
                  }));
                });
              };
/*   282 */   site.lookupSiteWebSpace = lookupSiteWebSpace;
/*   284 */   site.command("delete [name]").description("Delete a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __6(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__6",
                  line: 287
                };
                return __func(_, this, arguments, __6, 2, __frame, function __$__6() {
/*   288 */       context = {
/*   289 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   290 */         site: {
/*   291 */           name: name
                    }
                  };
/*   295 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__6() {
/*   296 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__6() {
/*   298 */           log.info("Deleting site", context.site.name);
/*   306 */           return getChannel().path(context.subscription).path("services/webspaces").path(context.site.webspace).path("sites").path(context.site.name).DELETE(__cb(_, __frame, 19, 25, function ___(__0, __1) {
                        result = __1;
/*   308 */             log.info((("Site " + context.site.name) + " has been deleted"));
                        _();
                      }));
                    }));
                  }));
                });
              });
/*   312 */   site.command("start [name]").description("Start a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __7(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__7",
                  line: 315
                };
                return __func(_, this, arguments, __7, 2, __frame, function __$__7() {
/*   316 */       context = {
/*   317 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   318 */         site: {
/*   319 */           name: name
                    }
                  };
/*   323 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__7() {
/*   324 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__7() {
/*   326 */           log.info("Starting site", context.site.name);
/*   335 */           return getChannel().path(context.subscription).path("services/webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").PUT(function(req) {
/*   336 */             req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   337 */             req.write("<HostNames>");
/*   338 */             req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   339 */             req.write((context.site.name + ".antdf0.antares-test.windows-int.net"));
/*   340 */             req.write("</string>");
/*   341 */             req.write("</HostNames>");
/*   342 */             req.write("<Name>");
/*   343 */             req.write(context.site.name);
/*   344 */             req.write("</Name>");
/*   345 */             req.write("<State>");
/*   346 */             req.write("Running");
/*   347 */             req.write("</State>");
/*   348 */             req.write("</Site>");
/*   350 */             req.end();
                      }, __cb(_, __frame, 20, 25, function ___(__0, __1) {
                        result = __1;
/*   353 */             log.info((("Site " + context.site.name) + " has been started"));
                        _();
                      }));
                    }));
                  }));
                });
              });
/*   356 */   site.command("stop [name]").description("Stop a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __8(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__8",
                  line: 359
                };
                return __func(_, this, arguments, __8, 2, __frame, function __$__8() {
/*   360 */       context = {
/*   361 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   362 */         site: {
/*   363 */           name: name
                    }
                  };
/*   367 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__8() {
/*   368 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__8() {
/*   370 */           log.info("Stopping site", context.site.name);
/*   379 */           return getChannel().path(context.subscription).path("services/webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").PUT(function(req) {
/*   380 */             req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   381 */             req.write("<HostNames>");
/*   382 */             req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   383 */             req.write((context.site.name + ".antdf0.antares-test.windows-int.net"));
/*   384 */             req.write("</string>");
/*   385 */             req.write("</HostNames>");
/*   386 */             req.write("<Name>");
/*   387 */             req.write(context.site.name);
/*   388 */             req.write("</Name>");
/*   389 */             req.write("<State>");
/*   390 */             req.write("Stopped");
/*   391 */             req.write("</State>");
/*   392 */             req.write("</Site>");
/*   394 */             req.end();
                      }, __cb(_, __frame, 20, 25, function ___(__0, __1) {
                        result = __1;
/*   397 */             log.info((("Site " + context.site.name) + " has been stopped"));
                        _();
                      }));
                    }));
                  }));
                });
              });
/*   404 */   site.findConfig = function() {
/*   405 */     function filenameEndsWithConfig(filename) {
/*   406 */       return endsWith(filename, ".config");
                };
/*   409 */     var scanFolder = process.cwd();
/*   410 */     while (true) {
/*   411 */       var azureFolder = path.join(scanFolder, ".azure");
/*   414 */       if ((path.existsSync(azureFolder) && fs.statSync(azureFolder).isDirectory())) {
/*   418 */         var files = fs.readdirSync(azureFolder);
/*   419 */         files = files.filter(filenameEndsWithConfig);
/*   422 */         if ((files.length == 1)) {
/*   423 */           var hit = path.join(azureFolder, files[0]);
/*   424 */           log.silly("Found local config", hit);
/*   425 */           return hit;
                    }
                  ;
                  }
                ;
/*   430 */       try {
/*   431 */         var parentFolder = path.dirname(scanFolder);
/*   432 */         if (((parentFolder === scanFolder) || !path.exists(scanFolder))) {
/*   433 */           return undefined;
                    }
                  ;
/*   436 */       } catch (err) {
/*   437 */         return undefined;
                  };
                };
              };
/*   442 */   site.initConfig = function(config) {
/*   443 */     var baseFolder = process.cwd();
/*   444 */     var azureFolder = path.join(baseFolder, ".azure");
/*   445 */     var baseName = crypto.randomBytes(16).toString("hex");
/*   446 */     var configPath = path.join(azureFolder, (baseName + ".config"));
/*   447 */     if (!path.exists(azureFolder)) {
/*   448 */       log.silly("Creating folder", azureFolder);
/*   449 */       fs.mkdirSync(azureFolder);
                }
              ;
/*   451 */     log.silly("Writing file", configPath);
/*   452 */     var configText = JSON.stringify(config);
/*   453 */     fs.writeFileSync(configPath, configText);
              };
/*   456 */   site.readConfig = function() {
/*   457 */     var configPath = site.findConfig();
/*   458 */     if ((configPath === undefined)) {
/*   459 */       log.verbose("No site .azure/*.config file locate at current directory");
/*   460 */       return undefined;
                }
              ;
/*   463 */     log.silly("Reading file", configPath);
/*   464 */     var configText = fs.readFileSync(configPath);
/*   465 */     var config = JSON.parse(configText);
/*   466 */     log.json("silly", "Site config", config);
/*   467 */     return config;
              };
/*   470 */   site.writeConfig = function(config) {
/*   471 */     var configPath = site.findConfig();
/*   472 */     if ((configPath === undefined)) {
/*   473 */       log.verbose("No site .azure/*.config file locate at current directory");
/*   474 */       return undefined;
                }
              ;
/*   476 */     log.silly("Writing file", configPath);
/*   477 */     var configText = JSON.stringify(config);
/*   478 */     fs.writeFileSync(configPath, configText);
              };
/*   486 */   site.doSitesPost = function(options, callback) {
/*   487 */     log.info("Creating a new web site");
/*   488 */     log.verbose("Subscription", options.subscription);
/*   489 */     log.verbose("Webspace", options.site.webspace);
/*   490 */     log.verbose("Site", options.site.name);
/*   492 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites/").header("Content-Type", "application/xml").POST(writers.Site.xml(options.site), function(err, result) {
/*   501 */       if (err) {
/*   502 */         logError("Failed to create site", err);
                  }
/*   503 */        else {
/*   504 */         log.info("Created website at ", clean(result).HostNames);
/*   505 */         log.verbose("Site", clean(result));
                  }
                ;
/*   507 */       callback(err, result);
                });
              };
/*   511 */   site.doRepositoryPost = function(options, callback) {
/*   512 */     log.info("Initializing repository");
/*   513 */     log.verbose("Subscription", options.subscription);
/*   514 */     log.verbose("Webspace", options.site.webspace);
/*   515 */     log.verbose("Site", options.site.name);
/*   517 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("repository").POST("", function(err, result) {
/*   527 */       if (err) {
/*   528 */         logError("Failed to initialize repository", err);
                  }
/*   529 */        else {
/*   530 */         log.info("Repository initialized");
                  }
                ;
/*   532 */       callback(err, result);
                });
              };
/*   536 */   site.doSpacesGet = function site_doSpacesGet__9(options, _) {
                var result;
                var __frame = {
                  name: "site_doSpacesGet__9",
                  line: 536
                };
                return __func(_, this, arguments, site_doSpacesGet__9, 1, __frame, function __$site_doSpacesGet__9() {
/*   537 */       log.verbose("Subscription", options.subscription);
/*   542 */       return getChannel().path(options.subscription).path("services/webspaces/").GET(__cb(_, __frame, 6, 21, function ___(__0, __1) {
                    result = __1;
/*   544 */         log.json("silly", result);
/*   545 */         return _(null, toArray(result.WebSpace));
                  }));
                });
              };
/*   548 */   site.doSitesGet = function site_doSitesGet__10(options, _) {
                var spaces, channel, result, sites;
                var __frame = {
                  name: "site_doSitesGet__10",
                  line: 548
                };
                return __func(_, this, arguments, site_doSitesGet__10, 1, __frame, function __$site_doSitesGet__10() {
/*   549 */       log.verbose("Subscription", options.subscription);
/*   551 */       return site.doSpacesGet(options, __cb(_, __frame, 3, 21, function ___(__0, __2) {
                    spaces = __2;
/*   555 */         channel = getChannel().path(options.subscription).path("services/webspaces");
/*   557 */         return async.map(spaces, function __1(webspace, _) {
                      var __frame = {
                        name: "__1",
                        line: 559
                      };
                      return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
/*   563 */             return channel.path(webspace.Name).path("sites/").GET(__cb(_, __frame, 4, 23, _));
                      });
                    }, __cb(_, __frame, 9, 21, function ___(__0, __3) {
                      result = __3;
/*   567 */           sites = [];
/*   568 */           result.forEach(function(item) {
/*   569 */             sites = sites.concat(toArray(item.Site));
                      });
/*   571 */           result = sites;
/*   573 */           log.json("verbose", sites);
/*   574 */           return _(null, sites);
                    }));
                  }));
                });
              };
/*   577 */   site.doSiteGet = function(options, callback) {
/*   578 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).GET(function(err, result) {
/*   586 */       if (err) {
/*   587 */         logError("Failed to get site info", err);
                  }
/*   588 */        else {
/*   589 */         log.verbose("Site", clean(result));
                  }
                ;
/*   591 */       callback(err, result);
                });
              };
/*   595 */   site.doSiteConfigGet = function(options, callback) {
/*   596 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("config").GET(function(err, result) {
/*   605 */       if (err) {
/*   606 */         logError("Failed to get site config info", err);
                  }
/*   607 */        else {
/*   608 */         log.verbose("SiteConfig", clean(result));
                  }
                ;
/*   610 */       callback(err, result);
                });
              };
/*   614 */   site.doRepositoryGet = function(options, callback) {
/*   615 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("repository").GET(function(err, result) {
/*   624 */       if (err) {
/*   625 */         logError("Failed to get repository info", err);
                  }
/*   626 */        else {
/*   627 */         log.verbose("Repository", clean(result));
                  }
                ;
/*   629 */       callback(err, clean(result));
                });
              };
/*   633 */   site.doPublishingUsersGet = function site_doPublishingUsersGet__11(options, _) {
                var publishingUsers;
                var __frame = {
                  name: "site_doPublishingUsersGet__11",
                  line: 633
                };
                return __func(_, this, arguments, site_doPublishingUsersGet__11, 1, __frame, function __$site_doPublishingUsersGet__11() {
/*   639 */       return getChannel().path(options.subscription).path("services").path("webspaces").path("publishingUsers").GET(__cb(_, __frame, 6, 36, function ___(__0, __1) {
/*   634 */         publishingUsers = clean(__1);
/*   641 */         log.verbose("PublishingUsers", publishingUsers);
/*   642 */         return _(null, publishingUsers);
                  }));
                });
              };
/*   649 */   var writers = {
/*   650 */     Site: {
/*   651 */       xml: function(site) {
/*   652 */         return function(req) {
/*   653 */           req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   654 */           req.write("<HostNames>");
/*   655 */           req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   656 */           req.write((site.name + ".antdf0.antares-test.windows-int.net"));
/*   657 */           req.write("</string>");
/*   659 */           if (site.hostname) {
/*   660 */             req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   661 */             req.write(site.hostname);
/*   662 */             req.write("</string>");
                      }
                    ;
/*   664 */           req.write("</HostNames>");
/*   665 */           req.write("<Name>");
/*   666 */           req.write(site.name);
/*   667 */           req.write("</Name>");
/*   668 */           req.write("</Site>");
/*   670 */           req.end();
                    };
                  }
                }
              };
/*   676 */   function clean(source) {
/*   677 */     if ((typeof (source) === "string")) {
/*   678 */       return source;
                }
              ;
/*   681 */     var target = {
                };
/*   682 */     var hasString = false;
/*   683 */     var hasNonString = false;
/*   684 */     var stringValue = "";
/*   686 */     for (var prop in source) {
/*   687 */       if ((prop == "@")) {
/*   688 */         continue;
                  }
/*   689 */        else {
/*   690 */         if ((((prop === "#") || (prop === "string")) || (prop.substring((prop.length - 7)) === ":string"))) {
/*   691 */           hasString = true;
/*   692 */           stringValue = source[prop];
                    }
/*   693 */          else {
/*   694 */           hasNonString = true;
                    }
                  ;
/*   696 */         target[prop] = clean(source[prop]);
                  }
                ;
                };
/*   699 */     if ((hasString && !hasNonString)) {
/*   700 */       return stringValue;
                }
              ;
/*   702 */     return target;
              };
/*   705 */   function logEachData(title, data) {
/*   706 */     var cleaned = clean(data);
/*   707 */     for (var property in cleaned) {
/*   708 */       log.data(((title + " ") + property), cleaned[property]);
                };
              };
/*   712 */   function logError(message, err) {
/*   713 */     if ((arguments.length == 1)) {
/*   714 */       err = message;
/*   715 */       message = undefined;
                }
/*   716 */      else {
/*   717 */       log.error(message);
                }
              ;
/*   720 */     if (err) {
/*   721 */       if (err.message) {
/*   723 */         log.verbose("stack", err.stack);
/*   724 */         log.json("silly", err);
                  }
/*   726 */        else if (err.Message) {
/*   728 */         log.json("verbose", clean(err));
                  }
/*   730 */        else {
                  
                  }
                  
                ;
                }
              ;
              };
/*   736 */   function isArray(testObject) {
/*   737 */     return (((testObject && !(testObject.propertyIsEnumerable("length"))) && (typeof testObject === "object")) && (typeof testObject.length === "number"));
              };
/*   740 */   function toArray(testObject) {
/*   741 */     return (isArray(testObject) ? testObject : ((typeof testObject === "undefined") ? [] : [testObject,]));
              };
/*   744 */   function endsWith(str, suffix) {
/*   745 */     return (str.indexOf(suffix, (str.length - suffix.length)) !== -1);
              };
/*   748 */   function exec(cmd, cb) {
/*   749 */     child_process.exec(cmd, function(err, stdout, stderr) {
/*   750 */       cb(err, {
/*   751 */         stdout: stdout,
/*   752 */         stderr: stderr
                  });
                });
              };
            };
