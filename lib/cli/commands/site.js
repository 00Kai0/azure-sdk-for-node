/*** Generated by streamline 0.2.2 - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch,__propagate=__rt.__propagate,__trap=__rt.__trap,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g;
/*     1 */ var common = require("../common");
/*    20 */ var fs = require("fs");
/*    21 */ var path = require("path");
/*    22 */ var url = require("url");
/*    23 */ var crypto = require("crypto");
/*    24 */ var pfx2pem = require("../../util/certificates/pkcs").pfx2pem;
/*    25 */ var Channel = require("../channel");
/*    26 */ var async = require("async");
/*    27 */ var child_process = require("child_process");
/*    30 */ exports.init = function(cli) {
/*    32 */   var log = cli.output;
/*    34 */   function getChannel() {
/*    35 */     var pem = cli.category("account").managementCertificate();
/*    37 */     var channel = new Channel({
/*    38 */       host: "umapi-preview.core.windows-int.net",
/*    39 */       port: 8443,
/*    40 */       key: pem.key,
/*    41 */       cert: pem.cert
/*    42 */     }).header("x-ms-version", "2011-02-25");
/*    44 */     var proxyString = (((process.env.HTTPS_PROXY || process.env.https_proxy) || process.env.ALL_PROXY) || process.env.all_proxy);
/*    50 */     if ((proxyString !== undefined)) {
/*    51 */       var proxyUrl = url.parse(proxyString);
/*    52 */       if (((proxyUrl.protocol !== "http:") && (proxyUrl.protocol !== "https:"))) {
/*    55 */         proxyUrl = url.parse(("http://" + proxyString));
                  }
                ;
/*    58 */       channel = channel.add({
/*    58 */         proxy: proxyUrl
                  });
                }
              ;
/*    61 */     return channel;
              };
/*    65 */   var site = cli.category("site").description("Commands to manage your web sites");
/*    69 */   site.command("list").description("List your web sites").option("-s, --subscription <id>", "use the subscription id").execute(function __1(options, _) {
                var parameters, spaces, sites;
                var __frame = {
                  name: "__1",
                  line: 72
                };
                return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
/*    73 */       parameters = {
/*    74 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription)
                  };
/*    77 */       return site.doSpacesGet(parameters, __cb(_, __frame, 5, 25, function ___(__0, __1) {
                    spaces = __1;
/*    78 */         return site.doSitesGet(parameters, __cb(_, __frame, 6, 24, function ___(__0, __2) {
                      sites = __2;
/*    80 */           log.table(sites, function(row, site) {
/*    81 */             row.cell("Name", site.Name);
/*    82 */             row.cell("State", site.State);
/*    83 */             row.cell("Host names", clean(site).HostNames);
                      });
                      _();
                    }));
                  }));
                });
              });
/*    87 */   function choose(data, callback) {
/*    88 */     cli.choose(data, function(x) {
/*    88 */       callback(undefined, x);
                });
              };
/*    90 */   function prompt(label, callback) {
/*    91 */     cli.prompt(label, function(x) {
/*    91 */       callback(undefined, x);
                });
              };
/*    95 */   site.command("create [name]").description("Create a new web site and local directory").option("-s, --subscription <id>", "use the subscription id").option("--location <location>", "the geographic region to create the website").option("--hostname <hostname>", "custom host name to use").option("--git", "configure git on web site and local folder").execute(function __2(nameArg, options, _) {
                var context;
/*   122 */     function promptForSiteName(_) {
                  var __frame = {
                    name: "promptForSiteName",
                    line: 122
                  };
                  return __func(_, this, arguments, promptForSiteName, 0, __frame, function __$promptForSiteName() {
/*   123 */         log.silly("promptForSiteName");
                    return (function __$promptForSiteName(__then) {
/*   124 */           if ((context.site.name === undefined)) {
/*   125 */             log.help("Need a site name");
/*   126 */             return prompt("Name: ", __cb(_, __frame, 4, 40, function ___(__0, __1) {
/*   126 */               context.site.name = __1;
                          __then();
                        }));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(_);
                  });
                };
/*   130 */     function determineIfSiteExists(_) {
                  var sites, hits;
                  var __frame = {
                    name: "determineIfSiteExists",
                    line: 130
                  };
                  return __func(_, this, arguments, determineIfSiteExists, 0, __frame, function __$determineIfSiteExists() {
/*   131 */         log.silly("determineIfSiteExists");
/*   132 */         return site.doSitesGet(context, __cb(_, __frame, 2, 28, function ___(__0, __1) {
                      sites = __1;
/*   133 */           hits = sites.filter(function(item) {
/*   134 */             return (item.Name === context.site.name);
                      });
/*   136 */           if ((hits.length === 1)) {
/*   137 */             log.info("Updating existing site");
/*   138 */             context.flags.siteExists = true;
/*   139 */             if ((context.site.webspace === undefined)) {
/*   140 */               context.site.webspace = hits[0].WebSpace;
/*   141 */               log.verbose("Existing site location is ", context.site.webspace);
                        }
                         else {
/*   142 */               if ((context.site.webspace !== hits[0].WebSpace)) {
/*   143 */                 return _(new Error(((("Expected location " + context.site.webspace) + " but was ") + hits[0].WebSpace)));
                          }
                        ;
                        }
                      ;
                      }
                    ;
                      _();
                    }));
                  });
                };
/*   148 */     function promptForLocation(_) {
                  var spaces, href;
                  var __frame = {
                    name: "promptForLocation",
                    line: 148
                  };
                  return __func(_, this, arguments, promptForLocation, 0, __frame, function __$promptForLocation() {
/*   149 */         log.silly("promptForLocation");
/*   150 */         return site.doSpacesGet(context, __cb(_, __frame, 2, 29, function ___(__0, __1) {
                      spaces = __1;
                      return (function __$promptForLocation(__then) {
/*   152 */             if ((spaces.length === 0)) {
/*   153 */               log.help("You must create your first web site online.");
/*   154 */               log.help("Launching portal.");
/*   155 */               href = "https://windows.azure-test.net/";
/*   156 */               common.launchBrowser(href);
/*   157 */               return _(new Error("First site must be created on portal"));
                        }
                         else {
                          return (function __$promptForLocation(__then) {
/*   158 */                 if ((spaces.length == 1)) {
/*   159 */                   context.site.webspace = spaces[0].Name;
/*   160 */                   log.info("Using location", context.site.webspace);
                              __then();
                            }
                             else {
/*   162 */                   log.help("Choose a region");
/*   163 */                   return choose(spaces.map(function(space) {
/*   164 */                     return space.GeoRegion;
                              }), __cb(_, __frame, 15, 51, function ___(__0, __2) {
/*   163 */                     context.site.webspace = spaces[__2].Name;
                                __then();
                              }));
                            }
                          ;
                          })(__then);
                        }
                      ;
                      })(_);
                    }));
                  });
                };
/*   169 */     function determineIfCurrentDirectoryIsGitWorkingTree(_) {
                  var isInsideWorkTree, lines;
                  var __frame = {
                    name: "determineIfCurrentDirectoryIsGitWorkingTree",
                    line: 169
                  };
                  return __func(_, this, arguments, determineIfCurrentDirectoryIsGitWorkingTree, 0, __frame, function __$determineIfCurrentDirectoryIsGitWorkingTree() {
/*   170 */         log.silly("determineIfCurrentDirectoryIsGitWorkingTree");
                    return (function ___(__then) {
                      (function ___(_) {
                        __tryCatch(_, function __$determineIfCurrentDirectoryIsGitWorkingTree() {
/*   173 */               return exec("git rev-parse --is-inside-work-tree", __cb(_, __frame, 4, 43, function ___(__0, __1) {
                            isInsideWorkTree = __1;
/*   174 */                 lines = (isInsideWorkTree.stdout + isInsideWorkTree.stderr);
/*   175 */                 context.flags.isGitWorkingTree = lines.split("\n").some(function(line) {
/*   176 */                   return (line === "true");
                            });
                            __then();
                          }));
                        });
                      })(function ___(err, __result) {
                        __tryCatch(_, function __$determineIfCurrentDirectoryIsGitWorkingTree() {
                          if (err) {
/*   179 */                 context.flags.isGitWorkingTree = false;
                            __then();
                          }
                           else {
                            _(null, __result);
                          }
                        ;
                        });
                      });
                    })(function ___() {
                      __tryCatch(_, _);
                    });
                  });
                };
/*   183 */     function initGitOnCurrentDirectory(_) {
                  var __frame = {
                    name: "initGitOnCurrentDirectory",
                    line: 183
                  };
                  return __func(_, this, arguments, initGitOnCurrentDirectory, 0, __frame, function __$initGitOnCurrentDirectory() {
/*   184 */         log.silly("initGitOnCurrentDirectoryIfNeeded");
/*   185 */         if (context.flags.isGitWorkingTree) {
                      return _(null);
                    }
                  ;
/*   189 */         if (!options.git) {
                      return _(null);
                    }
                  ;
/*   193 */         log.info("Executing `git init`");
/*   194 */         return exec("git init", __cb(_, __frame, 11, 16, function __$initGitOnCurrentDirectory() {
/*   195 */           context.flags.isGitWorkingTree = true;
                      _();
                    }));
                  });
                };
/*   198 */     function updateLocalConfigWithSiteName(_) {
                  var __frame = {
                    name: "updateLocalConfigWithSiteName",
                    line: 198
                  };
                  return __func(_, this, arguments, updateLocalConfigWithSiteName, 0, __frame, function __$updateLocalConfigWithSiteName() {
/*   199 */         log.silly("updateLocalConfigWithSiteName");
                    _();
                  });
                };
/*   202 */     function createSiteAndInitializeRemoteRepo(_) {
                  var __frame = {
                    name: "createSiteAndInitializeRemoteRepo",
                    line: 202
                  };
                  return __func(_, this, arguments, createSiteAndInitializeRemoteRepo, 0, __frame, function __$createSiteAndInitializeRemoteRepo() {
/*   203 */         log.silly("createSiteAndInitializeRemoteRepo");
                    return (function __$createSiteAndInitializeRemoteRepo(__then) {
/*   204 */           if (!context.flags.siteExists) {
/*   205 */             return site.doSitesPost(context, __cb(_, __frame, 3, 20, __then));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(function __$createSiteAndInitializeRemoteRepo() {
                      return (function ___(__then) {
                        (function ___(_) {
                          __tryCatch(_, function __$createSiteAndInitializeRemoteRepo() {
/*   208 */                 return site.doRepositoryGet(context, __cb(_, __frame, 6, 35, function ___(__0, __2) {
/*   208 */                   context.repo = __2;
                              __then();
                            }));
                          });
                        })(function ___(err, __result) {
                          __tryCatch(_, function __$createSiteAndInitializeRemoteRepo() {
                            if (err) {
/*   211 */                   return site.doRepositoryPost(context, __cb(_, __frame, 9, 20, function __$createSiteAndInitializeRemoteRepo() {
/*   212 */                     return site.doRepositoryGet(context, __cb(_, __frame, 10, 35, function ___(__0, __1) {
/*   212 */                       context.repo = __1;
                                  __then();
                                }));
                              }));
                            }
                             else {
                              _(null, __result);
                            }
                          ;
                          });
                        });
                      })(function ___() {
                        __tryCatch(_, function __$createSiteAndInitializeRemoteRepo() {
/*   214 */               log.silly("context.repo", context.repo);
                          _();
                        });
                      });
                    });
                  });
                };
/*   217 */     function addRemoteToLocalGitRepo(_) {
                  var publishingUsers, publishingUser, repoUrl, remotes, azureExists;
                  var __frame = {
                    name: "addRemoteToLocalGitRepo",
                    line: 217
                  };
                  return __func(_, this, arguments, addRemoteToLocalGitRepo, 0, __frame, function __$addRemoteToLocalGitRepo() {
/*   218 */         log.silly("addRemoteToLocalGitRepo");
/*   219 */         if (!context.flags.isGitWorkingTree) {
                      return _(null);
                    }
                  ;
/*   222 */         return site.doPublishingUsersGet(context, __cb(_, __frame, 5, 38, function ___(__0, __1) {
                      publishingUsers = __1;
/*   223 */           publishingUser = toArray(publishingUsers)[0];
                      return (function __$addRemoteToLocalGitRepo(__then) {
/*   224 */             if (((publishingUser === undefined) || (publishingUser.length > 64))) {
/*   225 */               log.help("You will also need to provide publishing username and credentials on the portal.");
/*   226 */               log.help("For now, please provide a username for git remote");
/*   227 */               return prompt("Publishing username ", __cb(_, __frame, 10, 37, function ___(__0, __2) {
/*   227 */                 publishingUser = __2;
                            __then();
                          }));
                        }
                         else {
                          __then();
                        }
                      ;
                      })(function __$addRemoteToLocalGitRepo() {
/*   230 */             repoUrl = url.parse(((context.repo + context.site.name) + ".git"));
/*   231 */             repoUrl.protocol = "http:";
/*   232 */             repoUrl.auth = publishingUser;
/*   235 */             log.verbose("Detecting git and local git folder");
/*   236 */             return exec("git remote", __cb(_, __frame, 19, 30, function ___(__0, __3) {
                          remotes = __3;
/*   237 */               azureExists = ((remotes.stdout + remotes.stderr)).split("\n").some(function(item) {
/*   238 */                 return (item === "azure");
                          });
                          return (function __$addRemoteToLocalGitRepo(__then) {
/*   241 */                 if (azureExists) {
/*   242 */                   log.verbose("Removing existing azure remote alias");
/*   243 */                   return exec("git remote rm azure", __cb(_, __frame, 26, 20, __then));
                            }
                             else {
                              __then();
                            }
                          ;
                          })(function __$addRemoteToLocalGitRepo() {
/*   246 */                 log.info((("Executing `git remote add azure " + url.format(repoUrl)) + "`"));
/*   247 */                 return exec(("git remote add azure " + url.format(repoUrl)), __cb(_, __frame, 30, 16, _));
                          });
                        }));
                      });
                    }));
                  });
                };
                var __frame = {
                  name: "__2",
                  line: 101
                };
                return __func(_, this, arguments, __2, 2, __frame, function __$__2() {
/*   102 */       context = {
/*   103 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   104 */         site: {
/*   105 */           name: nameArg,
/*   106 */           webspace: options.location,
/*   107 */           hostname: options.hostname
                    },
/*   109 */         flags: {
                    }
                  };
/*   113 */       return promptForSiteName(__cb(_, __frame, 12, 12, function __$__2() {
/*   114 */         return determineIfSiteExists(__cb(_, __frame, 13, 12, function __$__2() {
/*   115 */           return promptForLocation(__cb(_, __frame, 14, 12, function __$__2() {
/*   116 */             return determineIfCurrentDirectoryIsGitWorkingTree(__cb(_, __frame, 15, 12, function __$__2() {
/*   117 */               return initGitOnCurrentDirectory(__cb(_, __frame, 16, 12, function __$__2() {
/*   118 */                 return updateLocalConfigWithSiteName(__cb(_, __frame, 17, 12, function __$__2() {
/*   119 */                   return createSiteAndInitializeRemoteRepo(__cb(_, __frame, 18, 12, function __$__2() {
/*   120 */                     return addRemoteToLocalGitRepo(__cb(_, __frame, 19, 12, _));
                              }));
                            }));
                          }));
                        }));
                      }));
                    }));
                  }));
                });
              });
/*   356 */   site.command("portal [name]").description("Opens the portal in a browser to manage your web sites").execute(function __3(name, options, _) {
                var href;
                var __frame = {
                  name: "__3",
                  line: 358
                };
                return __func(_, this, arguments, __3, 2, __frame, function __$__3() {
/*   360 */       href = "https://windows.azure-test.net/";
/*   361 */       if (name) {
/*   362 */         href = (((href + "#Workspaces/WebsiteExtension/Website/") + name) + "/dashboard");
                  }
                ;
/*   365 */       common.launchBrowser(href);
                  _();
                });
              });
/*   368 */   site.command("browse [name]").description("Open your web site in a browser.").option("-s, --subscription <id>", "use the subscription id").execute(function __4(name, options, _) {
                var context, siteData, href;
                var __frame = {
                  name: "__4",
                  line: 371
                };
                return __func(_, this, arguments, __4, 2, __frame, function __$__4() {
/*   373 */       context = {
/*   374 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   375 */         site: {
/*   376 */           name: name
                    }
                  };
/*   379 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__4() {
/*   380 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__4() {
/*   381 */           return site.doSiteGet(context, __cb(_, __frame, 10, 33, function ___(__0, __1) {
/*   381 */             siteData = clean(__1);
/*   383 */             href = ("http://" + toArray(siteData.HostNames)[0]);
/*   385 */             common.launchBrowser(href);
                        _();
                      }));
                    }));
                  }));
                });
              });
/*   388 */   site.command("show [name]").description("Show details for a web sites").option("-s, --subscription <id>", "use the subscription id").execute(function __5(name, options, _) {
                var context, siteData, configData, repositoryData;
                var __frame = {
                  name: "__5",
                  line: 391
                };
                return __func(_, this, arguments, __5, 2, __frame, function __$__5() {
/*   392 */       context = {
/*   393 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   394 */         site: {
/*   395 */           name: name
                    }
                  };
/*   399 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__5() {
/*   400 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__5() {
/*   402 */           log.info("Showing details for site");
/*   403 */           log.verbose("Parameters", context);
/*   405 */           return site.doSiteGet(context, __cb(_, __frame, 14, 27, function ___(__0, __1) {
                        siteData = __1;
/*   406 */             return site.doSiteConfigGet(context, __cb(_, __frame, 15, 29, function ___(__0, __2) {
                          configData = __2;
/*   407 */               return site.doRepositoryGet(context, __cb(_, __frame, 16, 33, function ___(__0, __3) {
                            repositoryData = __3;
/*   409 */                 logEachData("Site", siteData);
/*   410 */                 logEachData("Config", configData);
/*   411 */                 log.data("Repository", clean(repositoryData));
                            _();
                          }));
                        }));
                      }));
                    }));
                  }));
                });
              });
/*   414 */   function lookupSiteName(context, _) {
                var cfg;
                var __frame = {
                  name: "lookupSiteName",
                  line: 414
                };
                return __func(_, this, arguments, lookupSiteName, 1, __frame, function __$lookupSiteName() {
/*   415 */       if ((context.site.name !== undefined)) {
                    return _(null);
                  }
                ;
/*   420 */       cfg = site.readConfig();
/*   421 */       if ((cfg !== undefined)) {
/*   423 */         context.site.name = cfg.name;
                    return _(null);
                  }
                ;
/*   427 */       return prompt("Web site name: ", __cb(_, __frame, 13, 28, function ___(__0, __1) {
/*   427 */         context.site.name = __1;
                    _();
                  }));
                });
              };
/*   429 */   site.lookupSiteName = lookupSiteName;
/*   431 */   function lookupSiteWebSpace(context, _) {
                var sites, index;
                var __frame = {
                  name: "lookupSiteWebSpace",
                  line: 431
                };
                return __func(_, this, arguments, lookupSiteWebSpace, 1, __frame, function __$lookupSiteWebSpace() {
/*   432 */       log.verbose("Attempting to locate site ", context.site.name);
/*   433 */       return site.doSitesGet(context, __cb(_, __frame, 2, 20, function ___(__0, __1) {
                    sites = __1;
/*   434 */         for (index in sites) {
/*   435 */           if ((sites[index].Name === context.site.name)) {
/*   436 */             log.verbose("Site located at ", sites[index].WebSpace);
/*   437 */             context.site.webspace = sites[index].WebSpace;
                      }
                    ;
                    };
/*   440 */         if ((context.site.webspace === undefined)) {
/*   441 */           return _(new Error(("Unable to locate site named " + context.site.name)));
                    }
                  ;
                    _();
                  }));
                });
              };
/*   444 */   site.lookupSiteWebSpace = lookupSiteWebSpace;
/*   446 */   site.command("delete [name]").description("Delete a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __6(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__6",
                  line: 449
                };
                return __func(_, this, arguments, __6, 2, __frame, function __$__6() {
/*   450 */       context = {
/*   451 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   452 */         site: {
/*   453 */           name: name
                    }
                  };
/*   457 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__6() {
/*   458 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__6() {
/*   460 */           log.info("Deleting site", context.site.name);
/*   468 */           return getChannel().path(context.subscription).path("services/webspaces").path(context.site.webspace).path("sites").path(context.site.name).DELETE(__cb(_, __frame, 19, 25, function ___(__0, __1) {
                        result = __1;
/*   470 */             log.info((("Site " + context.site.name) + " has been deleted"));
                        _();
                      }));
                    }));
                  }));
                });
              });
/*   474 */   site.command("start [name]").description("Start a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __7(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__7",
                  line: 477
                };
                return __func(_, this, arguments, __7, 2, __frame, function __$__7() {
/*   478 */       context = {
/*   479 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   480 */         site: {
/*   481 */           name: name
                    }
                  };
/*   485 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__7() {
/*   486 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__7() {
/*   488 */           log.info("Starting site", context.site.name);
/*   497 */           return getChannel().path(context.subscription).path("services/webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").PUT(function(req) {
/*   498 */             req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   499 */             req.write("<HostNames>");
/*   500 */             req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   501 */             req.write((context.site.name + ".antdf0.antares-test.windows-int.net"));
/*   502 */             req.write("</string>");
/*   503 */             req.write("</HostNames>");
/*   504 */             req.write("<Name>");
/*   505 */             req.write(context.site.name);
/*   506 */             req.write("</Name>");
/*   507 */             req.write("<State>");
/*   508 */             req.write("Running");
/*   509 */             req.write("</State>");
/*   510 */             req.write("</Site>");
/*   512 */             req.end();
                      }, __cb(_, __frame, 20, 25, function ___(__0, __1) {
                        result = __1;
/*   515 */             log.info((("Site " + context.site.name) + " has been started"));
                        _();
                      }));
                    }));
                  }));
                });
              });
/*   518 */   site.command("stop [name]").description("Stop a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __8(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__8",
                  line: 521
                };
                return __func(_, this, arguments, __8, 2, __frame, function __$__8() {
/*   522 */       context = {
/*   523 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   524 */         site: {
/*   525 */           name: name
                    }
                  };
/*   529 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__8() {
/*   530 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__8() {
/*   532 */           log.info("Stopping site", context.site.name);
/*   541 */           return getChannel().path(context.subscription).path("services/webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").PUT(function(req) {
/*   542 */             req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   543 */             req.write("<HostNames>");
/*   544 */             req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   545 */             req.write((context.site.name + ".antdf0.antares-test.windows-int.net"));
/*   546 */             req.write("</string>");
/*   547 */             req.write("</HostNames>");
/*   548 */             req.write("<Name>");
/*   549 */             req.write(context.site.name);
/*   550 */             req.write("</Name>");
/*   551 */             req.write("<State>");
/*   552 */             req.write("Stopped");
/*   553 */             req.write("</State>");
/*   554 */             req.write("</Site>");
/*   556 */             req.end();
                      }, __cb(_, __frame, 20, 25, function ___(__0, __1) {
                        result = __1;
/*   559 */             log.info((("Site " + context.site.name) + " has been stopped"));
                        _();
                      }));
                    }));
                  }));
                });
              });
/*   566 */   site.findConfig = function() {
/*   567 */     function filenameEndsWithConfig(filename) {
/*   568 */       return endsWith(filename, ".config");
                };
/*   571 */     var scanFolder = process.cwd();
/*   572 */     while (true) {
/*   573 */       var azureFolder = path.join(scanFolder, ".azure");
/*   576 */       if ((path.existsSync(azureFolder) && fs.statSync(azureFolder).isDirectory())) {
/*   580 */         var files = fs.readdirSync(azureFolder);
/*   581 */         files = files.filter(filenameEndsWithConfig);
/*   584 */         if ((files.length == 1)) {
/*   585 */           var hit = path.join(azureFolder, files[0]);
/*   586 */           log.silly("Found local config", hit);
/*   587 */           return hit;
                    }
                  ;
                  }
                ;
/*   592 */       try {
/*   593 */         var parentFolder = path.dirname(scanFolder);
/*   594 */         if (((parentFolder === scanFolder) || !path.exists(scanFolder))) {
/*   595 */           return undefined;
                    }
                  ;
/*   598 */       } catch (err) {
/*   599 */         return undefined;
                  };
                };
              };
/*   604 */   site.initConfig = function(config) {
/*   605 */     var baseFolder = process.cwd();
/*   606 */     var azureFolder = path.join(baseFolder, ".azure");
/*   607 */     var baseName = crypto.randomBytes(16).toString("hex");
/*   608 */     var configPath = path.join(azureFolder, (baseName + ".config"));
/*   609 */     if (!path.exists(azureFolder)) {
/*   610 */       log.silly("Creating folder", azureFolder);
/*   611 */       fs.mkdirSync(azureFolder);
                }
              ;
/*   613 */     log.silly("Writing file", configPath);
/*   614 */     var configText = JSON.stringify(config);
/*   615 */     fs.writeFileSync(configPath, configText);
              };
/*   618 */   site.readConfig = function() {
/*   619 */     var configPath = site.findConfig();
/*   620 */     if ((configPath === undefined)) {
/*   621 */       log.verbose("No site .azure/*.config file locate at current directory");
/*   622 */       return undefined;
                }
              ;
/*   625 */     log.silly("Reading file", configPath);
/*   626 */     var configText = fs.readFileSync(configPath);
/*   627 */     var config = JSON.parse(configText);
/*   628 */     log.json("silly", "Site config", config);
/*   629 */     return config;
              };
/*   632 */   site.writeConfig = function(config) {
/*   633 */     var configPath = site.findConfig();
/*   634 */     if ((configPath === undefined)) {
/*   635 */       log.verbose("No site .azure/*.config file locate at current directory");
/*   636 */       return undefined;
                }
              ;
/*   638 */     log.silly("Writing file", configPath);
/*   639 */     var configText = JSON.stringify(config);
/*   640 */     fs.writeFileSync(configPath, configText);
              };
/*   648 */   site.doSitesPost = function(options, callback) {
/*   649 */     log.info("Creating a new web site");
/*   650 */     log.verbose("Subscription", options.subscription);
/*   651 */     log.verbose("Webspace", options.site.webspace);
/*   652 */     log.verbose("Site", options.site.name);
/*   654 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites/").header("Content-Type", "application/xml").POST(writers.Site.xml(options.site), function(err, result) {
/*   663 */       if (err) {
/*   664 */         logError("Failed to create site", err);
                  }
/*   665 */        else {
/*   666 */         log.info("Created website at ", clean(result).HostNames);
/*   667 */         log.verbose("Site", clean(result));
                  }
                ;
/*   669 */       callback(err, result);
                });
              };
/*   673 */   site.doRepositoryPost = function(options, callback) {
/*   674 */     log.info("Initializing repository");
/*   675 */     log.verbose("Subscription", options.subscription);
/*   676 */     log.verbose("Webspace", options.site.webspace);
/*   677 */     log.verbose("Site", options.site.name);
/*   679 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("repository").POST("", function(err, result) {
/*   689 */       if (err) {
/*   690 */         logError("Failed to initialize repository", err);
                  }
/*   691 */        else {
/*   692 */         log.info("Repository initialized");
                  }
                ;
/*   694 */       callback(err, result);
                });
              };
/*   698 */   site.doSpacesGet = function site_doSpacesGet__9(options, _) {
                var result;
                var __frame = {
                  name: "site_doSpacesGet__9",
                  line: 698
                };
                return __func(_, this, arguments, site_doSpacesGet__9, 1, __frame, function __$site_doSpacesGet__9() {
/*   699 */       log.verbose("Subscription", options.subscription);
/*   704 */       return getChannel().path(options.subscription).path("services/webspaces/").GET(__cb(_, __frame, 6, 21, function ___(__0, __1) {
                    result = __1;
/*   706 */         log.json("silly", result);
/*   707 */         return _(null, toArray(result.WebSpace));
                  }));
                });
              };
/*   710 */   site.doSitesGet = function site_doSitesGet__10(options, _) {
                var spaces, channel, result, sites;
                var __frame = {
                  name: "site_doSitesGet__10",
                  line: 710
                };
                return __func(_, this, arguments, site_doSitesGet__10, 1, __frame, function __$site_doSitesGet__10() {
/*   711 */       log.verbose("Subscription", options.subscription);
/*   713 */       return site.doSpacesGet(options, __cb(_, __frame, 3, 21, function ___(__0, __2) {
                    spaces = __2;
/*   717 */         channel = getChannel().path(options.subscription).path("services/webspaces");
/*   719 */         return async.map(spaces, function __1(webspace, _) {
                      var __frame = {
                        name: "__1",
                        line: 721
                      };
                      return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
/*   725 */             return channel.path(webspace.Name).path("sites/").GET(__cb(_, __frame, 4, 23, _));
                      });
                    }, __cb(_, __frame, 9, 21, function ___(__0, __3) {
                      result = __3;
/*   729 */           sites = [];
/*   730 */           result.forEach(function(item) {
/*   731 */             sites = sites.concat(toArray(item.Site));
                      });
/*   733 */           result = sites;
/*   735 */           log.json("verbose", sites);
/*   736 */           return _(null, sites);
                    }));
                  }));
                });
              };
/*   739 */   site.doSiteGet = function(options, callback) {
/*   740 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).GET(function(err, result) {
/*   748 */       if (err) {
/*   749 */         logError("Failed to get site info", err);
                  }
/*   750 */        else {
/*   751 */         log.verbose("Site", clean(result));
                  }
                ;
/*   753 */       callback(err, result);
                });
              };
/*   757 */   site.doSiteConfigGet = function(options, callback) {
/*   758 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("config").GET(function(err, result) {
/*   767 */       if (err) {
/*   768 */         logError("Failed to get site config info", err);
                  }
/*   769 */        else {
/*   770 */         log.verbose("SiteConfig", clean(result));
                  }
                ;
/*   772 */       callback(err, result);
                });
              };
/*   776 */   site.doRepositoryGet = function(options, callback) {
/*   777 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("repository").GET(function(err, result) {
/*   786 */       if (result) {
/*   787 */         log.verbose("Repository", clean(result));
                  }
                ;
/*   789 */       callback(err, clean(result));
                });
              };
/*   793 */   site.doPublishingUsersGet = function site_doPublishingUsersGet__11(options, _) {
                var publishingUsers;
                var __frame = {
                  name: "site_doPublishingUsersGet__11",
                  line: 793
                };
                return __func(_, this, arguments, site_doPublishingUsersGet__11, 1, __frame, function __$site_doPublishingUsersGet__11() {
/*   798 */       return getChannel().path(options.subscription).path("services/webspaces/").query("properties", "publishingUsers").GET(__cb(_, __frame, 5, 36, function ___(__0, __1) {
/*   794 */         publishingUsers = clean(__1);
/*   800 */         log.verbose("PublishingUsers", publishingUsers);
/*   801 */         return _(null, publishingUsers);
                  }));
                });
              };
/*   808 */   var writers = {
/*   809 */     Site: {
/*   810 */       xml: function(site) {
/*   811 */         return function(req) {
/*   812 */           req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   813 */           req.write("<HostNames>");
/*   814 */           req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   815 */           req.write((site.name + ".antdf0.antares-test.windows-int.net"));
/*   816 */           req.write("</string>");
/*   818 */           if (site.hostname) {
/*   819 */             req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   820 */             req.write(site.hostname);
/*   821 */             req.write("</string>");
                      }
                    ;
/*   823 */           req.write("</HostNames>");
/*   824 */           req.write("<Name>");
/*   825 */           req.write(site.name);
/*   826 */           req.write("</Name>");
/*   827 */           req.write("</Site>");
/*   829 */           req.end();
                    };
                  }
                }
              };
/*   835 */   function clean(source) {
/*   836 */     if ((typeof (source) === "string")) {
/*   837 */       return source;
                }
              ;
/*   840 */     var target = {
                };
/*   841 */     var hasString = false;
/*   842 */     var hasNonString = false;
/*   843 */     var stringValue = "";
/*   845 */     for (var prop in source) {
/*   846 */       if ((prop == "@")) {
/*   847 */         continue;
                  }
/*   848 */        else {
/*   849 */         if ((((prop === "#") || (prop === "string")) || (prop.substring((prop.length - 7)) === ":string"))) {
/*   850 */           hasString = true;
/*   851 */           stringValue = source[prop];
                    }
/*   852 */          else {
/*   853 */           hasNonString = true;
                    }
                  ;
/*   855 */         target[prop] = clean(source[prop]);
                  }
                ;
                };
/*   858 */     if ((hasString && !hasNonString)) {
/*   859 */       return stringValue;
                }
              ;
/*   861 */     return target;
              };
/*   864 */   function logEachData(title, data) {
/*   865 */     var cleaned = clean(data);
/*   866 */     for (var property in cleaned) {
/*   867 */       log.data(((title + " ") + property), cleaned[property]);
                };
              };
/*   871 */   function logError(message, err) {
/*   872 */     if ((arguments.length == 1)) {
/*   873 */       err = message;
/*   874 */       message = undefined;
                }
/*   875 */      else {
/*   876 */       log.error(message);
                }
              ;
/*   879 */     if (err) {
/*   880 */       if (err.message) {
/*   882 */         log.verbose("stack", err.stack);
/*   883 */         log.json("silly", err);
                  }
/*   885 */        else if (err.Message) {
/*   887 */         log.json("verbose", clean(err));
                  }
/*   889 */        else {
                  
                  }
                  
                ;
                }
              ;
              };
/*   895 */   function isArray(testObject) {
/*   896 */     return (((testObject && !(testObject.propertyIsEnumerable("length"))) && (typeof testObject === "object")) && (typeof testObject.length === "number"));
              };
/*   899 */   function toArray(testObject) {
/*   900 */     return (isArray(testObject) ? testObject : ((typeof testObject === "undefined") ? [] : [testObject,]));
              };
/*   903 */   function endsWith(str, suffix) {
/*   904 */     return (str.indexOf(suffix, (str.length - suffix.length)) !== -1);
              };
/*   907 */   function exec(cmd, cb) {
/*   908 */     child_process.exec(cmd, function(err, stdout, stderr) {
/*   909 */       cb(err, {
/*   910 */         stdout: stdout,
/*   911 */         stderr: stderr
                  });
                });
              };
            };
