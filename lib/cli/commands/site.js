/*** Generated by streamline 0.2.5 - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch,__propagate=__rt.__propagate,__trap=__rt.__trap,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g;
/*     1 */ var common = require("../common");
/*    17 */ var fs = require("fs");
/*    18 */ var path = require("path");
/*    19 */ var url = require("url");
/*    20 */ var crypto = require("crypto");
/*    21 */ var pfx2pem = require("../../util/certificates/pkcs").pfx2pem;
/*    22 */ var Channel = require("../channel");
/*    23 */ var async = require("async");
/*    24 */ var child_process = require("child_process");
/*    25 */ var utils = require("../utils");
/*    26 */ var constants = require("../constants");
/*    27 */ var cacheUtils = require("../cacheUtils");
/*    29 */ exports.init = function(cli) {
/*    31 */   var log = cli.output;
/*    33 */   function getChannel() {
/*    34 */     var account = cli.category("account"), pem = account.managementCertificate(), host = ((process.env.AZURE_ENDPOINT_HOST || account.endpointHost()) || constants.DEFAULT_MANAGEMENT_HOSTNAME), port = ((process.env.AZURE_ENDPOINT_PORT || account.endpointPort()) || constants.DEFAULT_HTTPS_PORT);
/*    39 */     var channel = new Channel({
/*    40 */       host: host,
/*    41 */       port: port,
/*    42 */       key: pem.key,
/*    43 */       cert: pem.cert
/*    44 */     }).header("x-ms-version", "2011-02-25");
/*    46 */     var proxyString = (((process.env.HTTPS_PROXY || process.env.https_proxy) || process.env.ALL_PROXY) || process.env.all_proxy);
/*    52 */     if ((proxyString !== undefined)) {
/*    53 */       var proxyUrl = url.parse(proxyString);
/*    54 */       if (((proxyUrl.protocol !== "http:") && (proxyUrl.protocol !== "https:"))) {
/*    57 */         proxyUrl = url.parse(("http://" + proxyString));
                  }
                ;
/*    60 */       channel = channel.add({
/*    60 */         proxy: proxyUrl
                  });
                }
              ;
/*    63 */     return channel;
              };
/*    66 */   var site = cli.category("site").description("Commands to manage your web sites");
/*    69 */   site.command("list").whiteListPowershell().description("List your web sites").option("-s, --subscription <id>", "use the subscription id").execute(function __1(options, _) {
                var parameters, sites, s;
                var __frame = {
                  name: "__1",
                  line: 73
                };
                return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
/*    74 */       parameters = {
/*    75 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription)
                  };
/*    78 */       return site.doSitesGet(parameters, __cb(_, __frame, 5, 22, function ___(__0, __1) {
                    sites = __1;
/*    80 */         if ((sites && (sites.length > 0))) {
/*    81 */           for (s in sites) {
/*    82 */             sites[s] = clean(sites[s]);
                      };
/*    85 */           log.table(sites, function(row, s) {
/*    86 */             row.cell("Name", s.Name);
/*    87 */             row.cell("State", s.State);
/*    88 */             row.cell("Host names", s.HostNames);
                      });
                    }
/*    90 */          else {
/*    91 */           log.info("No sites created yet. You can create new sites using \"azure site create\" or through the portal.");
                    }
                  ;
                    _();
                  }, true));
                });
              });
/*    95 */   function choose(data, callback) {
/*    96 */     cli.choose(data, function(x) {
/*    96 */       callback(undefined, x);
                });
              };
/*    98 */   function prompt(label, callback) {
/*    99 */     cli.prompt(label, function(x) {
/*    99 */       callback(undefined, x);
                });
              };
/*   101 */   function confirm(label, callback) {
/*   102 */     cli.confirm(label, function(x) {
/*   103 */       if (!x) {
/*   104 */         log.warn("The operation was cancelled by the user");
                  }
                ;
/*   106 */       callback(undefined, x);
                });
              };
/*   109 */   site.confirm = confirm;
/*   111 */   site.command("create [name]").whiteListPowershell().description("Create a new web site and local directory").option("-s, --subscription <id>", "use the subscription id").option("--location <location>", "the geographic region to create the website").option("--hostname <hostname>", "custom host name to use").option("--git", "configure git on web site and local folder").execute(function __2(nameArg, options, _) {
                var context;
/*   141 */     function promptForSiteName(_) {
                  var __frame = {
                    name: "promptForSiteName",
                    line: 141
                  };
                  return __func(_, this, arguments, promptForSiteName, 0, __frame, function __$promptForSiteName() {
/*   142 */         log.silly("promptForSiteName");
                    return (function __$promptForSiteName(__then) {
/*   143 */           if ((context.site.name === undefined)) {
/*   144 */             log.help("Need a site name");
/*   145 */             return prompt("Name: ", __cb(_, __frame, 4, 34, function ___(__0, __1) {
/*   145 */               context.site.name = __1;
                          __then();
                        }, true));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(_);
                  });
                };
/*   149 */     function determineIfSiteExists(_) {
                  var sites, hits;
                  var __frame = {
                    name: "determineIfSiteExists",
                    line: 149
                  };
                  return __func(_, this, arguments, determineIfSiteExists, 0, __frame, function __$determineIfSiteExists() {
/*   150 */         log.silly("determineIfSiteExists");
/*   151 */         return site.doSitesGet(context, __cb(_, __frame, 2, 24, function ___(__0, __1) {
                      sites = __1;
/*   152 */           hits = sites.filter(function(item) {
/*   153 */             return utils.ignoreCaseEquals(item.Name, context.site.name);
                      });
/*   155 */           if ((hits.length === 1)) {
/*   156 */             log.info("Updating existing site");
/*   157 */             context.flags.siteExists = true;
/*   158 */             if ((context.site.webspace === undefined)) {
/*   159 */               context.site.webspace = hits[0].WebSpace;
/*   160 */               log.verbose("Existing site location is ", context.site.webspace);
                        }
                         else {
/*   161 */               if ((context.site.webspace !== hits[0].WebSpace)) {
/*   162 */                 return _(new Error(((("Expected location " + context.site.webspace) + " but was ") + hits[0].WebSpace)));
                          }
                        ;
                        }
                      ;
                      }
                    ;
                      _();
                    }, true));
                  });
                };
/*   167 */     function promptForLocation(_) {
                  var spaces, displayNameMatches;
                  var __frame = {
                    name: "promptForLocation",
                    line: 167
                  };
                  return __func(_, this, arguments, promptForLocation, 0, __frame, function __$promptForLocation() {
/*   168 */         log.silly("promptForLocation");
/*   169 */         return cacheUtils.readSpaces(context, __cb(_, __frame, 2, 25, function ___(__0, __1) {
                      spaces = __1;
                      return (function __$promptForLocation(__then) {
/*   170 */             if ((!spaces || !spaces.length)) {
/*   171 */               return site.doSpacesGet(context, __cb(_, __frame, 4, 23, function ___(__0, __2) {
/*   171 */                 spaces = __2;
                            __then();
                          }, true));
                        }
                         else {
                          __then();
                        }
                      ;
                      })(function __$promptForLocation() {
/*   174 */             if ((context.site.webspace !== undefined)) {
/*   176 */               displayNameMatches = spaces.filter(function(space) {
/*   177 */                 return (space.GeoRegion === context.site.webspace);
                          });
/*   179 */               if ((displayNameMatches.length === 1)) {
/*   180 */                 context.site.webspace = displayNameMatches[0].Name;
                          }
                        ;
                        }
                      ;
/*   184 */             if ((context.site.webspace !== undefined)) {
                          return _(null);
                        }
                      ;
                        return (function __$promptForLocation(__then) {
/*   189 */               if ((spaces.length === 0)) {
/*   190 */                 return portalCreateSiteInstruction(context, __cb(_, __frame, 23, 14, function __$promptForLocation() {
/*   191 */                   return _(new Error("First site must be created on portal"));
                            }, true));
                          }
                           else {
                            return (function __$promptForLocation(__then) {
/*   192 */                   if ((spaces.length == 1)) {
/*   193 */                     context.site.webspace = spaces[0].Name;
/*   194 */                     log.info("Using location", context.site.webspace);
                                __then();
                              }
                               else {
/*   196 */                     log.help("Choose a region");
/*   197 */                     return choose(spaces.map(function(space) {
/*   198 */                       return space.GeoRegion;
                                }), __cb(_, __frame, 30, 45, function ___(__0, __3) {
/*   197 */                       context.site.webspace = spaces[__3].Name;
                                  __then();
                                }, true));
                              }
                            ;
                            })(__then);
                          }
                        ;
                        })(_);
                      });
                    }, true));
                  });
                };
/*   203 */     function determineIfCurrentDirectoryIsGitWorkingTree(_) {
                  var isInsideWorkTree, lines;
                  var __frame = {
                    name: "determineIfCurrentDirectoryIsGitWorkingTree",
                    line: 203
                  };
                  return __func(_, this, arguments, determineIfCurrentDirectoryIsGitWorkingTree, 0, __frame, function __$determineIfCurrentDirectoryIsGitWorkingTree() {
/*   204 */         log.silly("determineIfCurrentDirectoryIsGitWorkingTree");
                    return (function ___(__then) {
                      (function ___(_) {
                        __tryCatch(_, function __$determineIfCurrentDirectoryIsGitWorkingTree() {
/*   207 */               return exec("git rev-parse --is-inside-work-tree", __cb(_, __frame, 4, 37, function ___(__0, __1) {
                            isInsideWorkTree = __1;
/*   208 */                 lines = (isInsideWorkTree.stdout + isInsideWorkTree.stderr);
/*   209 */                 context.flags.isGitWorkingTree = lines.split("\n").some(function(line) {
/*   210 */                   return (line === "true");
                            });
                            __then();
                          }, true));
                        });
                      })(function ___(err, __result) {
                        __tryCatch(_, function __$determineIfCurrentDirectoryIsGitWorkingTree() {
                          if (err) {
/*   213 */                 context.flags.isGitWorkingTree = false;
                            __then();
                          }
                           else {
                            _(null, __result);
                          }
                        ;
                        });
                      });
                    })(function ___() {
                      __tryCatch(_, _);
                    });
                  });
                };
/*   217 */     function initGitOnCurrentDirectory(_) {
                  var __frame = {
                    name: "initGitOnCurrentDirectory",
                    line: 217
                  };
                  return __func(_, this, arguments, initGitOnCurrentDirectory, 0, __frame, function __$initGitOnCurrentDirectory() {
/*   218 */         log.silly("initGitOnCurrentDirectoryIfNeeded");
/*   219 */         if (context.flags.isGitWorkingTree) {
                      return _(null);
                    }
                  ;
/*   223 */         if (!options.git) {
                      return _(null);
                    }
                  ;
/*   227 */         return site.doPublishingUsersGet(context, __cb(_, __frame, 10, 38, function ___(__0, __1) {
/*   227 */           context.publishingUsers = __1;
                      return (function __$initGitOnCurrentDirectory(__then) {
/*   228 */             if ((context.publishingUsers["@"] && (context.publishingUsers["@"]["i:nil"] === "true"))) {
/*   229 */               return portalGitInitInstruction(context, __cb(_, __frame, 12, 14, function __$initGitOnCurrentDirectory() {
/*   230 */                 return _(new Error("Git credentials needs to be setup on the portal"));
                          }, true));
                        }
                         else {
                          __then();
                        }
                      ;
                      })(function __$initGitOnCurrentDirectory() {
/*   233 */             log.info("Executing `git init`");
/*   234 */             return exec("git init", __cb(_, __frame, 17, 12, function __$initGitOnCurrentDirectory() {
                          return (function __$initGitOnCurrentDirectory(__then) {
/*   236 */                 if (!path.existsSync(".gitignore")) {
/*   237 */                   log.info("Creating default .gitignore file");
/*   238 */                   return fs.writeFile(".gitignore", "node_modules", __cb(_, __frame, 21, 14, __then, true));
                            }
                             else {
                              __then();
                            }
                          ;
                          })(function __$initGitOnCurrentDirectory() {
/*   241 */                 context.flags.isGitWorkingTree = true;
                            _();
                          });
                        }, true));
                      });
                    }, true));
                  });
                };
/*   244 */     function copyIisNodeWhenServerJsPresent(_) {
                  var sourcePath;
                  var __frame = {
                    name: "copyIisNodeWhenServerJsPresent",
                    line: 244
                  };
                  return __func(_, this, arguments, copyIisNodeWhenServerJsPresent, 0, __frame, function __$copyIisNodeWhenServerJsPresent() {
/*   245 */         log.silly("copyWebConfigWhenServerJsPresent");
                    return (function __$copyIisNodeWhenServerJsPresent(__then) {
/*   246 */           if ((!path.existsSync("iisnode.yml") && ((path.existsSync("server.js") || path.existsSync("app.js"))))) {
/*   247 */             log.info("Creating default iisnode.yml file");
/*   248 */             sourcePath = path.join(__dirname, "../templates/node/iisnode.yml");
/*   249 */             return fs.readFile(sourcePath, __cb(_, __frame, 5, 42, function ___(__0, __1) {
/*   249 */               return fs.writeFile("iisnode.yml", __1, __cb(_, __frame, 5, 14, __then, true));
                        }, true));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(_);
                  });
                };
/*   253 */     function updateLocalConfigWithSiteName(_) {
                  var cfg;
                  var __frame = {
                    name: "updateLocalConfigWithSiteName",
                    line: 253
                  };
                  return __func(_, this, arguments, updateLocalConfigWithSiteName, 0, __frame, function __$updateLocalConfigWithSiteName() {
/*   254 */         log.silly("updateLocalConfigWithSiteName");
                    return (function __$updateLocalConfigWithSiteName(__then) {
/*   255 */           if (context.flags.isGitWorkingTree) {
/*   256 */             return site.readConfig(__cb(_, __frame, 3, 24, function ___(__0, __1) {
                          cfg = __1;
/*   257 */               cfg.name = context.site.name;
/*   258 */               cfg.webspace = context.site.webspace;
/*   259 */               return site.writeConfig(cfg, __cb(_, __frame, 6, 14, __then, true));
                        }, true));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(_);
                  });
                };
/*   263 */     function createSiteAndInitializeRemoteRepo(_) {
                  var __frame = {
                    name: "createSiteAndInitializeRemoteRepo",
                    line: 263
                  };
                  return __func(_, this, arguments, createSiteAndInitializeRemoteRepo, 0, __frame, function __$createSiteAndInitializeRemoteRepo() {
/*   264 */         log.silly("createSiteAndInitializeRemoteRepo");
                    return (function __$createSiteAndInitializeRemoteRepo(__then) {
/*   265 */           if (!context.flags.siteExists) {
/*   266 */             return site.doSitesPost(context, __cb(_, __frame, 3, 14, function __$createSiteAndInitializeRemoteRepo() {
/*   267 */               return site.doRepositoryPost(context, __cb(_, __frame, 4, 14, function __$createSiteAndInitializeRemoteRepo() {
/*   268 */                 return site.doRepositoryGet(context, __cb(_, __frame, 5, 29, function ___(__0, __1) {
/*   268 */                   context.repo = __1;
                              __then();
                            }, true));
                          }, true));
                        }, true));
                      }
                       else {
/*   270 */             return site.doRepositoryGet(context, __cb(_, __frame, 7, 29, function ___(__0, __2) {
/*   270 */               context.repo = __2;
                          return (function __$createSiteAndInitializeRemoteRepo(__then) {
/*   271 */                 if (!context.repo) {
/*   272 */                   return site.doRepositoryPost(context, __cb(_, __frame, 9, 16, function __$createSiteAndInitializeRemoteRepo() {
/*   273 */                     return site.doRepositoryGet(context, __cb(_, __frame, 10, 31, function ___(__0, __3) {
/*   273 */                       context.repo = __3;
                                  __then();
                                }, true));
                              }, true));
                            }
                             else {
                              __then();
                            }
                          ;
                          })(__then);
                        }, true));
                      }
                    ;
                    })(function __$createSiteAndInitializeRemoteRepo() {
/*   276 */           log.silly("context.repo", context.repo);
                      _();
                    });
                  });
                };
/*   279 */     function addRemoteToLocalGitRepo(_) {
                  var publishingUser, remotes, azureExists, gitUri;
                  var __frame = {
                    name: "addRemoteToLocalGitRepo",
                    line: 279
                  };
                  return __func(_, this, arguments, addRemoteToLocalGitRepo, 0, __frame, function __$addRemoteToLocalGitRepo() {
/*   280 */         log.silly("addRemoteToLocalGitRepo");
/*   281 */         if (!context.flags.isGitWorkingTree) {
                      return _(null);
                    }
                  ;
                    return (function __$addRemoteToLocalGitRepo(__then) {
/*   285 */           if (!context.publishingUsers) {
/*   286 */             return site.doPublishingUsersGet(context, __cb(_, __frame, 7, 40, function ___(__0, __1) {
/*   286 */               context.publishingUsers = __1;
                          return (function __$addRemoteToLocalGitRepo(__then) {
/*   287 */                 if ((context.publishingUsers["@"] && (context.publishingUsers["@"]["i:nil"] === "true"))) {
/*   288 */                   return portalGitInitInstruction(context, __cb(_, __frame, 9, 16, function __$addRemoteToLocalGitRepo() {
/*   289 */                     return _(new Error("Git credentials needs to be setup on the portal"));
                              }, true));
                            }
                             else {
                              __then();
                            }
                          ;
                          })(__then);
                        }, true));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(function __$addRemoteToLocalGitRepo() {
/*   293 */           publishingUser = toArray(context.publishingUsers)[0];
                      return (function __$addRemoteToLocalGitRepo(__then) {
/*   294 */             if ((((typeof publishingUser !== "string") || (publishingUser === undefined)) || (publishingUser.length > 64))) {
/*   295 */               log.help("You will also need to provide publishing username and credentials on the portal.");
/*   296 */               log.help("For now, please provide a username for git remote");
/*   297 */               return prompt("Publishing username: ", __cb(_, __frame, 18, 31, function ___(__0, __2) {
/*   297 */                 publishingUser = __2;
                            __then();
                          }, true));
                        }
                         else {
                          __then();
                        }
                      ;
                      })(function __$addRemoteToLocalGitRepo() {
/*   300 */             log.verbose("Detecting git and local git folder");
/*   301 */             return exec("git remote", __cb(_, __frame, 22, 26, function ___(__0, __3) {
                          remotes = __3;
/*   302 */               azureExists = ((remotes.stdout + remotes.stderr)).split("\n").some(function(item) {
/*   303 */                 return (item === "azure");
                          });
                          return (function __$addRemoteToLocalGitRepo(__then) {
/*   306 */                 if (azureExists) {
/*   307 */                   log.verbose("Removing existing azure remote alias");
/*   308 */                   return exec("git remote rm azure", __cb(_, __frame, 29, 14, __then, true));
                            }
                             else {
                              __then();
                            }
                          ;
                          })(function __$addRemoteToLocalGitRepo() {
/*   311 */                 gitUri = getGitUri(context.repo, context.site.name, publishingUser);
/*   312 */                 log.info((("Executing `git remote add azure " + gitUri) + "`"));
/*   313 */                 return exec(("git remote add azure " + gitUri), __cb(_, __frame, 34, 12, _, true));
                          });
                        }, true));
                      });
                    });
                  });
                };
                var __frame = {
                  name: "__2",
                  line: 118
                };
                return __func(_, this, arguments, __2, 2, __frame, function __$__2() {
/*   119 */       context = {
/*   120 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   121 */         git: options.git,
/*   122 */         site: {
/*   123 */           name: nameArg,
/*   124 */           webspace: options.location,
/*   125 */           hostname: options.hostname
                    },
/*   127 */         flags: {
                    }
                  };
/*   131 */       return promptForSiteName(__cb(_, __frame, 13, 10, function __$__2() {
/*   132 */         return determineIfSiteExists(__cb(_, __frame, 14, 10, function __$__2() {
/*   133 */           return promptForLocation(__cb(_, __frame, 15, 10, function __$__2() {
/*   134 */             return determineIfCurrentDirectoryIsGitWorkingTree(__cb(_, __frame, 16, 10, function __$__2() {
/*   135 */               return initGitOnCurrentDirectory(__cb(_, __frame, 17, 10, function __$__2() {
/*   136 */                 return copyIisNodeWhenServerJsPresent(__cb(_, __frame, 18, 10, function __$__2() {
/*   137 */                   return updateLocalConfigWithSiteName(__cb(_, __frame, 19, 10, function __$__2() {
/*   138 */                     return createSiteAndInitializeRemoteRepo(__cb(_, __frame, 20, 10, function __$__2() {
/*   139 */                       return addRemoteToLocalGitRepo(__cb(_, __frame, 21, 10, _, true));
                                }, true));
                              }, true));
                            }, true));
                          }, true));
                        }, true));
                      }, true));
                    }, true));
                  }, true));
                });
              });
/*   317 */   function portalCreateSiteInstruction(context, _) {
                var href;
                var __frame = {
                  name: "portalCreateSiteInstruction",
                  line: 317
                };
                return __func(_, this, arguments, portalCreateSiteInstruction, 1, __frame, function __$portalCreateSiteInstruction() {
/*   318 */       log.help("You must create your first web site using the Windows Azure portal.");
/*   319 */       log.help("Please follow these steps in the portal:");
/*   320 */       log.help("1. At the bottom of the page, click on New > Web Site > Quick Create");
/*   321 */       log.help((("2. Type \"" + ((((context.site && context.site.name)) || "{site name}"))) + "\" in the URL field"));
/*   322 */       log.help("3. Click on \"Create Web Site\"");
/*   323 */       log.help("4. Once the site has been created, click on the site name");
/*   324 */       log.help("5. Click on \"Set up Git publishing\" and create a publishing username and password. Use those credentials for all new websites you create.");
/*   325 */       if (context.git) {
/*   326 */         log.help("6. Back in the console window, rerun this command by typing \"azure site create {site name} --git\"");
                  }
                ;
/*   329 */       return confirm("Launch browser to portal now? (y/n) ", __cb(_, __frame, 12, 8, function ___(__0, __1) {
                    return (function __$portalCreateSiteInstruction(__then) {
                      if (__1) {
/*   330 */             log.help("Launching portal.");
/*   331 */             href = utils.portal();
/*   332 */             common.launchBrowser(href);
                        __then();
                      }
                       else {
                        __then();
                      }
                    ;
                    })(_);
                  }, true));
                });
              };
/*   336 */   function portalGitInitInstruction(context, _) {
                var href;
                var __frame = {
                  name: "portalGitInitInstruction",
                  line: 336
                };
                return __func(_, this, arguments, portalGitInitInstruction, 1, __frame, function __$portalGitInitInstruction() {
/*   337 */       log.help("You must create your git publishing credentials using the Windows Azure portal.");
/*   338 */       log.help("Please follow these steps in the portal:");
/*   339 */       log.help("1. In the menu on the left select \"Web Sites\"");
/*   340 */       log.help((("2. Click on the site named \"" + ((((context.site && context.site.name)) || "{site name}"))) + "\""));
/*   341 */       log.help("3. Click on \"Set up Git publishing\" and create a publishing username and password. Use those credentials for all new websites you create.");
/*   342 */       if (context.git) {
/*   343 */         log.help("4. Back in the console window, rerun this command by typing \"azure site create {site name} --git\"");
                  }
                ;
/*   346 */       return confirm("Launch browser to portal now? (y/n) ", __cb(_, __frame, 10, 8, function ___(__0, __1) {
                    return (function __$portalGitInitInstruction(__then) {
                      if (__1) {
/*   347 */             log.help("Launching portal.");
/*   348 */             href = utils.portal();
/*   349 */             common.launchBrowser(href);
                        __then();
                      }
                       else {
                        __then();
                      }
                    ;
                    })(_);
                  }, true));
                });
              };
/*   353 */   var location = site.category("location").description("Commands to manage your Azure locations");
/*   356 */   location.command("list").whiteListPowershell().description("List locations available for your account").execute(function __3(options, _) {
                var context, spaces, s;
                var __frame = {
                  name: "__3",
                  line: 359
                };
                return __func(_, this, arguments, __3, 1, __frame, function __$__3() {
/*   360 */       context = {
/*   361 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription)
                  };
/*   364 */       return site.doSpacesGet(context, __cb(_, __frame, 5, 23, function ___(__0, __1) {
                    spaces = __1;
                    return (function __$__3(__then) {
/*   365 */           if ((spaces && spaces.length)) {
/*   366 */             for (s in spaces) {
/*   367 */               spaces[s] = clean(spaces[s]);
                        };
/*   370 */             log.table(spaces, function(row, item) {
/*   371 */               row.cell("Name", item.Name);
/*   372 */               row.cell("Display Name", item.GeoRegion);
                        });
                        __then();
                      }
                       else {
/*   375 */             return portalCreateSiteInstruction(context, __cb(_, __frame, 16, 12, __then, true));
                      }
                    ;
                    })(_);
                  }, true));
                });
              });
/*   379 */   site.command("portal [name]").whiteListPowershell().description("Opens the portal in a browser to manage your web sites").execute(function __4(name, options, _) {
                var href;
                var __frame = {
                  name: "__4",
                  line: 382
                };
                return __func(_, this, arguments, __4, 2, __frame, function __$__4() {
/*   384 */       href = utils.portal();
/*   385 */       if (name) {
/*   386 */         href = (((href + "#Workspaces/WebsiteExtension/Website/") + name) + "/dashboard");
                  }
                ;
/*   389 */       common.launchBrowser(href);
                  _();
                });
              });
/*   392 */   site.command("browse [name]").whiteListPowershell().description("Open your web site in a browser.").option("-s, --subscription <id>", "use the subscription id").execute(function __5(name, options, _) {
                var context, cache, siteData, href;
                var __frame = {
                  name: "__5",
                  line: 396
                };
                return __func(_, this, arguments, __5, 2, __frame, function __$__5() {
/*   398 */       context = {
/*   399 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   400 */         site: {
/*   401 */           name: name
                    }
                  };
/*   405 */       return lookupSiteNameAndWebSpace(context, __cb(_, __frame, 9, 22, function ___(__0, __2) {
                    cache = __2;
                    return (function __$__5(_) {
/*   406 */           var __1 = cache;
                      if (__1) {
                        return _(null, __1);
                      }
                    ;
/*   406 */           return site.doSiteGet(context, __cb(_, __frame, 10, 40, _, true));
                    })(__cb(_, __frame, -395, 17, function ___(__0, __3) {
/*   406 */           siteData = clean(__3);
/*   408 */           href = ("http://" + toArray(siteData.HostNames)[0]);
/*   410 */           common.launchBrowser(href);
                      _();
                    }, true));
                  }, true));
                });
              });
/*   413 */   site.command("show [name]").whiteListPowershell().description("Show details for a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __6(name, options, _) {
                var context, result, repositoryUri, gitUri, data;
                var __frame = {
                  name: "__6",
                  line: 417
                };
                return __func(_, this, arguments, __6, 2, __frame, function __$__6() {
/*   418 */       context = {
/*   419 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   420 */         site: {
/*   421 */           name: name
                    }
                  };
/*   425 */       return lookupSiteNameAndWebSpace(context, __cb(_, __frame, 8, 10, function __$__6() {
/*   427 */         log.info("Showing details for site");
/*   428 */         log.verbose("Parameters", context);
/*   430 */         return async.parallel([function __1(_) {
                      var __frame = {
                        name: "__1",
                        line: 431
                      };
                      return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
/*   431 */             return site.doSiteGet(context, __cb(_, __frame, 0, 34, _, true));
                      });
/*   432 */         },function __2(_) {
                      var __frame = {
                        name: "__2",
                        line: 432
                      };
                      return __func(_, this, arguments, __2, 0, __frame, function __$__2() {
/*   432 */             return site.doSiteConfigGet(context, __cb(_, __frame, 0, 34, _, true));
                      });
                    },], __cb(_, __frame, 13, 23, function ___(__0, __3) {
                      result = __3;
/*   436 */           repositoryUri = getRepositoryUri(result[0]);
/*   437 */           gitUri = (repositoryUri ? getGitUri(repositoryUri, context.site.name) : "none");
/*   439 */           if (log.format().json) {
/*   440 */             data = {
/*   441 */               site: clean(result[0]),
/*   442 */               config: clean(result[1]),
/*   443 */               gitRepositoryUri: gitUri
                        };
/*   446 */             log.json(data);
                      }
/*   447 */            else {
/*   448 */             logEachData("Site", result[0]);
/*   449 */             logEachData("Config", result[1]);
/*   451 */             log.data("GitRepositoryUri", gitUri);
                      }
                    ;
                      _();
                    }, true));
                  }, true));
                });
              });
/*   455 */   function lookupSiteName(context, _) {
                var cfg;
                var __frame = {
                  name: "lookupSiteName",
                  line: 455
                };
                return __func(_, this, arguments, lookupSiteName, 1, __frame, function __$lookupSiteName() {
/*   456 */       if ((context.site.name !== undefined)) {
                    return _(null);
                  }
                ;
/*   461 */       return site.readConfig(__cb(_, __frame, 6, 14, function ___(__0, __1) {
                    cfg = __1;
/*   462 */         if ((cfg && cfg.name)) {
/*   464 */           context.site.name = cfg.name;
/*   465 */           context.site.webspace = cfg.webspace;
                      return _(null);
                    }
                  ;
/*   469 */         return prompt("Web site name: ", __cb(_, __frame, 14, 24, function ___(__0, __2) {
/*   469 */           context.site.name = __2;
/*   471 */           if (!context.site.name) {
/*   472 */             return _(new Error("Invalid site name"));
                      }
                    ;
                      _();
                    }, true));
                  }, true));
                });
              };
/*   476 */   function lookupSiteWebSpace(context, _) {
                var sites, index;
                var __frame = {
                  name: "lookupSiteWebSpace",
                  line: 476
                };
                return __func(_, this, arguments, lookupSiteWebSpace, 1, __frame, function __$lookupSiteWebSpace() {
/*   477 */       log.verbose("Attempting to locate site ", context.site.name);
/*   478 */       return site.doSitesGet(context, __cb(_, __frame, 2, 16, function ___(__0, __1) {
                    sites = __1;
/*   479 */         for (index in sites) {
/*   480 */           if (utils.ignoreCaseEquals(sites[index].Name, context.site.name)) {
/*   481 */             log.verbose("Site located at ", sites[index].WebSpace);
/*   482 */             context.site.webspace = sites[index].WebSpace;
                      }
                    ;
                    };
/*   485 */         if ((context.site.webspace === undefined)) {
/*   486 */           return _(new Error(("Unable to locate site named " + context.site.name)));
                    }
                  ;
                    _();
                  }, true));
                });
              };
/*   490 */   function lookupSiteNameAndWebSpace(context, _) {
                var cache;
                var __frame = {
                  name: "lookupSiteNameAndWebSpace",
                  line: 490
                };
                return __func(_, this, arguments, lookupSiteNameAndWebSpace, 1, __frame, function __$lookupSiteNameAndWebSpace() {
/*   491 */       return lookupSiteName(context, __cb(_, __frame, 1, 4, function __$lookupSiteNameAndWebSpace() {
/*   492 */         return cacheUtils.readSite(context, __cb(_, __frame, 2, 16, function ___(__0, __1) {
                      cache = __1;
/*   493 */           if ((cache || context.site.webspace)) {
/*   494 */             context.site.webspace = (((cache && cache.WebSpace)) || context.site.webspace);
/*   495 */             return _(null, cache);
                      }
                    ;
/*   497 */           return lookupSiteWebSpace(context, __cb(_, __frame, 7, 4, _, true));
                    }, true));
                  }, true));
                });
              };
/*   500 */   site.lookupSiteNameAndWebSpace = lookupSiteNameAndWebSpace;
/*   502 */   function getRepositoryUri(siteData) {
/*   503 */     if (siteData.SiteProperties.Properties) {
/*   504 */       for (var i = 0; (i < siteData.SiteProperties.Properties.NameValuePair.length); ++i) {
/*   505 */         var pair = siteData.SiteProperties.Properties.NameValuePair[i];
/*   506 */         if (utils.ignoreCaseEquals(pair.Name, "RepositoryUri")) {
/*   507 */           if ((typeof pair.Value === "string")) {
/*   508 */             if (!endsWith(pair.Value, "/")) {
/*   510 */               pair.Value += "/";
                        }
                      ;
/*   513 */             return pair.Value;
                      }
/*   514 */            else {
/*   515 */             return null;
                      }
                    ;
                    }
                  ;
                  };
                }
              ;
/*   521 */     return null;
              };
/*   524 */   site.getRepositoryUri = getRepositoryUri;
/*   526 */   function getGitUri(repositoryUri, siteName, auth) {
/*   527 */     var repoUrl = url.parse(repositoryUri);
/*   529 */     if (auth) {
/*   530 */       repoUrl.auth = auth;
                }
              ;
/*   533 */     var sitePath = (siteName + ".git");
/*   535 */     if (!endsWith(repoUrl.path, "/")) {
/*   537 */       repoUrl.path += "/";
                }
              ;
/*   539 */     repoUrl.path += sitePath;
/*   541 */     if (!endsWith(repoUrl.pathname, "/")) {
/*   543 */       repoUrl.pathname += "/";
                }
              ;
/*   545 */     repoUrl.pathname += sitePath;
/*   547 */     return url.format(repoUrl);
              };
/*   550 */   function getRepositoryAuth(siteData) {
/*   551 */     var userName, password;
/*   552 */     for (var i = 0; (i < siteData.SiteProperties.Properties.NameValuePair.length); ++i) {
/*   553 */       var pair = siteData.SiteProperties.Properties.NameValuePair[i];
/*   554 */       if (utils.ignoreCaseEquals(pair.Name, "PublishingUsername")) {
/*   555 */         userName = pair.Value;
                  }
/*   556 */        else if (utils.ignoreCaseEquals(pair.Name, "PublishingPassword")) {
/*   557 */         password = pair.Value;
                  }
                  
                ;
                };
/*   560 */     return (userName && (((userName + ":") + password)));
              };
/*   562 */   site.getRepositoryAuth = getRepositoryAuth;
/*   564 */   site.command("delete [name]").whiteListPowershell().description("Delete a web site").option("-s, --subscription <id>", "use the subscription id").option("-q, --quiet", "quiet mode, do not ask for delete confirmation").execute(function __7(name, options, _) {
                var context, progress, result;
                var __frame = {
                  name: "__7",
                  line: 569
                };
                return __func(_, this, arguments, __7, 2, __frame, function __$__7() {
/*   570 */       context = {
/*   571 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   572 */         site: {
/*   573 */           name: name
                    }
                  };
/*   577 */       return lookupSiteNameAndWebSpace(context, __cb(_, __frame, 8, 10, function __$__7() {
/*   579 */         log.info("Deleting site", context.site.name);
                    return (function __$__7(_) {
/*   580 */           var __1 = !options.quiet;
                      if (!__1) {
                        return _(null, __1);
                      }
                    ;
/*   580 */           return confirm((("Delete " + context.site.name) + " site?  (y/n) "), __cb(_, __frame, 11, 33, function ___(__0, __3) {
/*   580 */             var __2 = !__3;
                        return _(null, __2);
                      }, true));
                    })(__cb(_, __frame, -568, 17, function ___(__0, __2) {
                      return (function __$__7(__then) {
                        if (__2) {
                          return _(null);
                        }
                         else {
                          __then();
                        }
                      ;
                      })(function __$__7() {
/*   584 */             progress = cli.progress("Deleting site");
                        return (function ___(__then) {
                          (function ___(_) {
                            __tryCatch(_, function __$__7() {
/*   593 */                   return getChannel().path(context.subscription).path("services").path("webspaces").path(context.site.webspace).path("sites").path(context.site.name).DELETE(__cb(_, __frame, 24, 25, function ___(__0, __3) {
                                result = __3;
/*   594 */                     return cacheUtils.deleteSite(context, __cb(_, __frame, 25, 12, function __$__7() {
                                  _(null, null, true);
                                }, true));
                              }, true));
                            });
                          })(function ___(__e, __r, __cont) {
                            (function ___(__then) {
                              __tryCatch(_, function __$__7() {
/*   597 */                     progress.end();
                                __then();
                              });
                            })(function ___() {
                              __tryCatch(_, function ___() {
                                if (__cont) {
                                  __then();
                                } else {
                                  _(__e, __r);
                                };
                              });
                            });
                          });
                        })(function ___() {
                          __tryCatch(_, function __$__7() {
/*   599 */                 log.info((("Site " + context.site.name) + " has been deleted"));
                            _();
                          });
                        });
                      });
                    }, true));
                  }, true));
                });
              });
/*   603 */   site.command("start [name]").whiteListPowershell().description("Start a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __8(name, options, _) {
                var context, progress, result;
                var __frame = {
                  name: "__8",
                  line: 607
                };
                return __func(_, this, arguments, __8, 2, __frame, function __$__8() {
/*   608 */       context = {
/*   609 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   610 */         site: {
/*   611 */           name: name
                    }
                  };
/*   615 */       return lookupSiteNameAndWebSpace(context, __cb(_, __frame, 8, 10, function __$__8() {
/*   617 */         log.info("Starting site", context.site.name);
/*   619 */         progress = cli.progress("Updating site state");
                    return (function ___(__then) {
                      (function ___(_) {
                        __tryCatch(_, function __$__8() {
/*   629 */               return getChannel().path(context.subscription).path("services").path("webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").PUT(function(req) {
/*   630 */                 req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   631 */                 req.write("<HostNames>");
/*   632 */                 req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   633 */                 req.write((context.site.name + cli.category("account").hostNameSuffix()));
/*   634 */                 req.write("</string>");
/*   635 */                 req.write("</HostNames>");
/*   636 */                 req.write("<Name>");
/*   637 */                 req.write(context.site.name);
/*   638 */                 req.write("</Name>");
/*   639 */                 req.write("<State>");
/*   640 */                 req.write("Running");
/*   641 */                 req.write("</State>");
/*   642 */                 req.write("</Site>");
/*   644 */                 req.end();
                          }, __cb(_, __frame, 22, 25, function ___(__0, __1) {
                            result = __1;
                            _(null, null, true);
                          }, true));
                        });
                      })(function ___(__e, __r, __cont) {
                        (function ___(__then) {
                          __tryCatch(_, function __$__8() {
/*   648 */                 progress.end();
                            __then();
                          });
                        })(function ___() {
                          __tryCatch(_, function ___() {
                            if (__cont) {
                              __then();
                            } else {
                              _(__e, __r);
                            };
                          });
                        });
                      });
                    })(function ___() {
                      __tryCatch(_, function __$__8() {
/*   651 */             log.info((("Site " + context.site.name) + " has been started"));
                        _();
                      });
                    });
                  }, true));
                });
              });
/*   654 */   site.command("stop [name]").whiteListPowershell().description("Stop a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __9(name, options, _) {
                var context, progress, result;
                var __frame = {
                  name: "__9",
                  line: 658
                };
                return __func(_, this, arguments, __9, 2, __frame, function __$__9() {
/*   659 */       context = {
/*   660 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   661 */         site: {
/*   662 */           name: name
                    }
                  };
/*   666 */       return lookupSiteNameAndWebSpace(context, __cb(_, __frame, 8, 10, function __$__9() {
/*   668 */         log.info("Stopping site", context.site.name);
/*   670 */         progress = cli.progress("Updating site state");
                    return (function ___(__then) {
                      (function ___(_) {
                        __tryCatch(_, function __$__9() {
/*   680 */               return getChannel().path(context.subscription).path("services").path("webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").PUT(function(req) {
/*   681 */                 req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   682 */                 req.write("<HostNames>");
/*   683 */                 req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   684 */                 req.write((context.site.name + cli.category("account").hostNameSuffix()));
/*   685 */                 req.write("</string>");
/*   686 */                 req.write("</HostNames>");
/*   687 */                 req.write("<Name>");
/*   688 */                 req.write(context.site.name);
/*   689 */                 req.write("</Name>");
/*   690 */                 req.write("<State>");
/*   691 */                 req.write("Stopped");
/*   692 */                 req.write("</State>");
/*   693 */                 req.write("</Site>");
/*   695 */                 req.end();
                          }, __cb(_, __frame, 22, 25, function ___(__0, __1) {
                            result = __1;
                            _(null, null, true);
                          }, true));
                        });
                      })(function ___(__e, __r, __cont) {
                        (function ___(__then) {
                          __tryCatch(_, function __$__9() {
/*   699 */                 progress.end();
                            __then();
                          });
                        })(function ___() {
                          __tryCatch(_, function ___() {
                            if (__cont) {
                              __then();
                            } else {
                              _(__e, __r);
                            };
                          });
                        });
                      });
                    })(function ___() {
                      __tryCatch(_, function __$__9() {
/*   702 */             log.info((("Site " + context.site.name) + " has been stopped"));
                        _();
                      });
                    });
                  }, true));
                });
              });
/*   709 */   site.readConfig = function site_readConfig__10(_) {
                var __frame = {
                  name: "site_readConfig__10",
                  line: 709
                };
                return __func(_, this, arguments, site_readConfig__10, 0, __frame, function __$site_readConfig__10() {
/*   711 */       return site.readConfigValue("azure.site.name", __cb(_, __frame, 2, 12, function ___(__0, __2) {
/*   712 */         return site.readConfigValue("azure.site.webspace", __cb(_, __frame, 3, 16, function ___(__0, __3) {
/*   710 */           var __1 = {
/*   711 */             name: __2,
/*   712 */             webspace: __3
                      };
                      return _(null, __1);
                    }, true));
                  }, true));
                });
              };
/*   716 */   site.writeConfig = function site_writeConfig__11(cfg, _) {
                var __frame = {
                  name: "site_writeConfig__11",
                  line: 716
                };
                return __func(_, this, arguments, site_writeConfig__11, 1, __frame, function __$site_writeConfig__11() {
/*   717 */       return site.writeConfigValue("azure.site.name", cfg.name, __cb(_, __frame, 1, 4, function __$site_writeConfig__11() {
/*   718 */         return site.writeConfigValue("azure.site.webspace", cfg.webspace, __cb(_, __frame, 2, 4, _, true));
                  }, true));
                });
              };
/*   721 */   site.readConfigValue = function site_readConfigValue__12(name, _) {
                var result;
                var __frame = {
                  name: "site_readConfigValue__12",
                  line: 721
                };
                return __func(_, this, arguments, site_readConfigValue__12, 1, __frame, function __$site_readConfigValue__12() {
                  return (function ___(__then) {
                    (function ___(_) {
                      __tryCatch(_, function __$site_readConfigValue__12() {
/*   723 */             return exec(("git config --get " + name), __cb(_, __frame, 2, 19, function ___(__0, __1) {
                          result = __1;
/*   724 */               return _(null, ((result.stdout + result.stderr)).trim());
                        }, true));
                      });
                    })(function ___(err, __result) {
                      __tryCatch(_, function __$site_readConfigValue__12() {
                        if (err) {
/*   727 */               log.silly("Unable to read config", err);
/*   728 */               return _(null, "");
                        }
                         else {
                          _(null, __result);
                        }
                      ;
                      });
                    });
                  })(function ___() {
                    __tryCatch(_, _);
                  });
                });
              };
/*   732 */   site.writeConfigValue = function site_writeConfigValue__13(name, value, _) {
                var __frame = {
                  name: "site_writeConfigValue__13",
                  line: 732
                };
                return __func(_, this, arguments, site_writeConfigValue__13, 2, __frame, function __$site_writeConfigValue__13() {
/*   733 */       return exec(((("git config " + name) + " ") + value), __cb(_, __frame, 1, 4, _, true));
                });
              };
/*   740 */   site.doSitesPost = function(options, callback) {
/*   741 */     log.info((("Creating a new web site at " + options.site.name) + cli.category("account").hostNameSuffix()));
/*   742 */     log.verbose("Subscription", options.subscription);
/*   743 */     log.verbose("Webspace", options.site.webspace);
/*   744 */     log.verbose("Site", options.site.name);
/*   746 */     var progress = cli.progress("Sending site information");
/*   747 */     getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").header("Content-Type", "application/xml").POST(writers.Site.xml(options.site), function(err, result) {
/*   757 */       progress.end();
/*   758 */       if (err) {
/*   759 */         logError("Failed to create site", err);
                  }
/*   760 */        else {
/*   761 */         return cacheUtils.saveSite(options, result, function(err) {
/*   762 */           log.info(("Created website at " + clean(result).HostNames));
/*   763 */           log.verbose("Site", clean(result));
/*   764 */           return callback(err, result);
                    });
                  }
                ;
/*   767 */       return callback(err, result);
                });
              };
/*   771 */   site.doRepositoryPost = function(options, callback) {
/*   772 */     log.info("Initializing remote Azure repository");
/*   773 */     log.verbose("Subscription", options.subscription);
/*   774 */     log.verbose("Webspace", options.site.webspace);
/*   775 */     log.verbose("Site", options.site.name);
/*   777 */     var progress = cli.progress("Updating site information");
/*   778 */     getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("repository").POST("", function(err, result) {
/*   789 */       progress.end();
/*   790 */       if (err) {
/*   791 */         logError("Failed to initialize repository", err);
                  }
/*   792 */        else {
/*   793 */         log.info("Repository initialized");
                  }
                ;
/*   795 */       return callback(err, result);
                });
              };
/*   799 */   site.doSpacesGet = function site_doSpacesGet__14(options, _) {
                var progress, result, spaces;
                var __frame = {
                  name: "site_doSpacesGet__14",
                  line: 799
                };
                return __func(_, this, arguments, site_doSpacesGet__14, 1, __frame, function __$site_doSpacesGet__14() {
/*   800 */       log.verbose("Subscription", options.subscription);
/*   802 */       progress = cli.progress("Enumerating locations");
                  return (function ___(__then) {
                    (function ___(_) {
                      __tryCatch(_, function __$site_doSpacesGet__14() {
/*   809 */             return getChannel().path(options.subscription).path("services").path("webspaces").path("").GET(__cb(_, __frame, 10, 19, function ___(__0, __1) {
                          result = __1;
/*   811 */               log.json("silly", result);
/*   812 */               spaces = toArray(result.WebSpace);
/*   813 */               return cacheUtils.saveSpaces(options, spaces, __cb(_, __frame, 14, 6, function __$site_doSpacesGet__14() {
/*   814 */                 return _(null, spaces);
                          }, true));
                        }, true));
                      });
                    })(function ___(__e, __r, __cont) {
                      (function ___(__then) {
                        __tryCatch(_, function __$site_doSpacesGet__14() {
/*   817 */               progress.end();
                          __then();
                        });
                      })(function ___() {
                        __tryCatch(_, function ___() {
                          if (__cont) {
                            __then();
                          } else {
                            _(__e, __r);
                          };
                        });
                      });
                    });
                  })(function ___() {
                    __tryCatch(_, _);
                  });
                });
              };
/*   821 */   site.doSitesGet = function site_doSitesGet__15(options, _) {
                var spaces, channel, progress, result, sites;
                var __frame = {
                  name: "site_doSitesGet__15",
                  line: 821
                };
                return __func(_, this, arguments, site_doSitesGet__15, 1, __frame, function __$site_doSitesGet__15() {
/*   822 */       log.verbose("Subscription", options.subscription);
/*   824 */       return site.doSpacesGet(options, __cb(_, __frame, 3, 17, function ___(__0, __2) {
                    spaces = __2;
/*   829 */         channel = getChannel().path(options.subscription).path("services").path("webspaces");
/*   831 */         progress = cli.progress("Enumerating sites");
                    return (function ___(__then) {
                      (function ___(_) {
                        __tryCatch(_, function __$site_doSitesGet__15() {
/*   833 */               return async.map(spaces, function __1(webspace, _) {
                            var __frame = {
                              name: "__1",
                              line: 835
                            };
                            return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
/*   841 */                   return channel.path(webspace.Name).path("sites").path("").query("propertiesToInclude", "repositoryuri,publishingpassword,publishingusername").GET(__cb(_, __frame, 6, 25, _, true));
                            });
                          }, __cb(_, __frame, 12, 19, function ___(__0, __3) {
                            result = __3;
/*   845 */                 sites = [];
/*   846 */                 result.forEach(function(item) {
/*   847 */                   sites = sites.concat(toArray(item.Site));
                            });
/*   849 */                 result = sites;
/*   851 */                 log.json("verbose", sites);
/*   852 */                 return cacheUtils.saveSites(options, result, __cb(_, __frame, 31, 6, function __$site_doSitesGet__15() {
/*   853 */                   return _(null, sites);
                            }, true));
                          }, true));
                        });
                      })(function ___(__e, __r, __cont) {
                        (function ___(__then) {
                          __tryCatch(_, function __$site_doSitesGet__15() {
/*   856 */                 progress.end();
                            __then();
                          });
                        })(function ___() {
                          __tryCatch(_, function ___() {
                            if (__cont) {
                              __then();
                            } else {
                              _(__e, __r);
                            };
                          });
                        });
                      });
                    })(function ___() {
                      __tryCatch(_, _);
                    });
                  }, true));
                });
              };
/*   860 */   site.doSiteGet = function(options, callback) {
/*   861 */     var progress = cli.progress("Retrieving site information");
/*   862 */     getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").path(options.site.name).query("propertiesToInclude", "repositoryuri,publishingpassword,publishingusername").GET(function(err, result) {
/*   872 */       progress.end();
/*   873 */       if (err) {
/*   874 */         logError("Failed to get site info", err);
/*   875 */         if ((err.Code === "NotFound")) {
/*   876 */           return cacheUtils.deleteSite(options, function() {
/*   877 */             return callback(err, result);
                      });
                    }
                  ;
                  }
/*   880 */        else {
/*   881 */         return cacheUtils.saveSite(options, result, function(err) {
/*   882 */           log.verbose("Site", clean(result));
/*   883 */           return callback(err, result);
                    });
                  }
                ;
/*   886 */       return callback(err, result);
                });
              };
/*   890 */   site.doSiteConfigGet = function(options, callback) {
/*   891 */     var progress = cli.progress("Retrieving site config information");
/*   892 */     getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("config").GET(function(err, result) {
/*   902 */       progress.end();
/*   903 */       if (err) {
/*   904 */         logError("Failed to get site config info", err);
                  }
/*   905 */        else {
/*   906 */         log.verbose("SiteConfig", clean(result));
                  }
                ;
/*   908 */       return callback(err, result);
                });
              };
/*   912 */   site.doRepositoryGet = function site_doRepositoryGet__16(options, _) {
                var siteData;
                var __frame = {
                  name: "site_doRepositoryGet__16",
                  line: 912
                };
                return __func(_, this, arguments, site_doRepositoryGet__16, 1, __frame, function __$site_doRepositoryGet__16() {
/*   913 */       return site.doSiteGet(options, __cb(_, __frame, 1, 19, function ___(__0, __1) {
                    siteData = __1;
/*   914 */         return _(null, getRepositoryUri(siteData));
                  }, true));
                });
              };
/*   917 */   site.doPublishingUsersGet = function site_doPublishingUsersGet__17(options, _) {
                var progress, publishingUsers;
                var __frame = {
                  name: "site_doPublishingUsersGet__17",
                  line: 917
                };
                return __func(_, this, arguments, site_doPublishingUsersGet__17, 1, __frame, function __$site_doPublishingUsersGet__17() {
/*   918 */       progress = cli.progress("Retrieving user information");
                  return (function ___(__then) {
                    (function ___(_) {
                      __tryCatch(_, function __$site_doPublishingUsersGet__17() {
/*   926 */             return getChannel().path(options.subscription).path("services").path("webspaces").path("").query("properties", "publishingUsers").GET(__cb(_, __frame, 9, 34, function ___(__0, __1) {
/*   920 */               publishingUsers = clean(__1);
/*   928 */               log.verbose("PublishingUsers", publishingUsers);
/*   929 */               return _(null, publishingUsers);
                        }, true));
                      });
                    })(function ___(__e, __r, __cont) {
                      (function ___(__then) {
                        __tryCatch(_, function __$site_doPublishingUsersGet__17() {
/*   932 */               progress.end();
                          __then();
                        });
                      })(function ___() {
                        __tryCatch(_, function ___() {
                          if (__cont) {
                            __then();
                          } else {
                            _(__e, __r);
                          };
                        });
                      });
                    });
                  })(function ___() {
                    __tryCatch(_, _);
                  });
                });
              };
/*   940 */   var writers = {
/*   941 */     Site: {
/*   942 */       xml: function(site) {
/*   943 */         return function(req) {
/*   944 */           req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   945 */           req.write("<HostNames>");
/*   946 */           req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   947 */           req.write((site.name + cli.category("account").hostNameSuffix()));
/*   948 */           req.write("</string>");
/*   950 */           if (site.hostname) {
/*   951 */             req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   952 */             req.write(site.hostname);
/*   953 */             req.write("</string>");
                      }
                    ;
/*   955 */           req.write("</HostNames>");
/*   956 */           req.write("<Name>");
/*   957 */           req.write(site.name);
/*   958 */           req.write("</Name>");
/*   959 */           req.write("</Site>");
/*   961 */           req.end();
                    };
                  }
                }
              };
/*   967 */   function clean(source) {
/*   968 */     if ((typeof (source) === "string")) {
/*   969 */       return source;
                }
              ;
/*   972 */     var target = {
                };
/*   973 */     var hasString = false;
/*   974 */     var hasNonString = false;
/*   975 */     var stringValue = "";
/*   977 */     for (var prop in source) {
/*   978 */       if ((prop == "@")) {
/*   979 */         continue;
                  }
/*   980 */        else {
/*   981 */         if ((((prop === "#") || (prop === "string")) || (prop.substring((prop.length - 7)) === ":string"))) {
/*   982 */           hasString = true;
/*   983 */           stringValue = source[prop];
                    }
/*   984 */          else {
/*   985 */           hasNonString = true;
                    }
                  ;
/*   987 */         target[prop] = clean(source[prop]);
                  }
                ;
                };
/*   990 */     if ((hasString && !hasNonString)) {
/*   991 */       return stringValue;
                }
              ;
/*   993 */     return target;
              };
/*   996 */   function logEachData(title, data) {
/*   997 */     var cleaned = clean(data);
/*   998 */     for (var property in cleaned) {
/*   999 */       log.data(((title + " ") + property), cleaned[property]);
                };
              };
/*  1002 */   site.logEachData = logEachData;
/*  1004 */   function logError(message, err) {
/*  1005 */     if ((arguments.length == 1)) {
/*  1006 */       err = message;
/*  1007 */       message = undefined;
                }
/*  1008 */      else {
/*  1009 */       log.error(message);
                }
              ;
/*  1012 */     if (err) {
/*  1013 */       if (err.message) {
/*  1015 */         log.verbose("stack", err.stack);
/*  1016 */         log.json("silly", err);
                  }
/*  1018 */        else if (err.Message) {
/*  1020 */         log.json("verbose", clean(err));
                  }
/*  1022 */        else {
                  
                  }
                  
                ;
                }
              ;
              };
/*  1028 */   function isArray(testObject) {
/*  1029 */     return (((testObject && !(testObject.propertyIsEnumerable("length"))) && (typeof testObject === "object")) && (typeof testObject.length === "number"));
              };
/*  1032 */   function toArray(testObject) {
/*  1033 */     return (isArray(testObject) ? testObject : ((typeof testObject === "undefined") ? [] : [testObject,]));
              };
/*  1036 */   function endsWith(str, suffix) {
/*  1037 */     return (str.indexOf(suffix, (str.length - suffix.length)) !== -1);
              };
/*  1040 */   function exec(cmd, cb) {
/*  1041 */     child_process.exec(cmd, function(err, stdout, stderr) {
/*  1042 */       cb(err, {
/*  1043 */         stdout: stdout,
/*  1044 */         stderr: stderr
                  });
                });
              };
            };
