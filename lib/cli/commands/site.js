/*** Generated by streamline 0.2.5 - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch,__propagate=__rt.__propagate,__trap=__rt.__trap,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g;
/*     1 */ var common = require("../common");
/*    20 */ var fs = require("fs");
/*    21 */ var path = require("path");
/*    22 */ var url = require("url");
/*    23 */ var crypto = require("crypto");
/*    24 */ var pfx2pem = require("../../util/certificates/pkcs").pfx2pem;
/*    25 */ var Channel = require("../channel");
/*    26 */ var async = require("async");
/*    27 */ var child_process = require("child_process");
/*    30 */ exports.init = function(cli) {
/*    32 */   var log = cli.output;
/*    34 */   function getChannel() {
/*    35 */     var pem = cli.category("account").managementCertificate();
/*    37 */     var channel = new Channel({
/*    38 */       host: "umapi-preview.core.windows-int.net",
/*    39 */       port: 8443,
/*    40 */       key: pem.key,
/*    41 */       cert: pem.cert
/*    42 */     }).header("x-ms-version", "2011-02-25");
/*    44 */     var proxyString = (((process.env.HTTPS_PROXY || process.env.https_proxy) || process.env.ALL_PROXY) || process.env.all_proxy);
/*    50 */     if ((proxyString !== undefined)) {
/*    51 */       var proxyUrl = url.parse(proxyString);
/*    52 */       if (((proxyUrl.protocol !== "http:") && (proxyUrl.protocol !== "https:"))) {
/*    55 */         proxyUrl = url.parse(("http://" + proxyString));
                  }
                ;
/*    58 */       channel = channel.add({
/*    58 */         proxy: proxyUrl
                  });
                }
              ;
/*    61 */     return channel;
              };
/*    65 */   var site = cli.category("site").description("Commands to manage your web sites");
/*    69 */   site.command("list").description("List your web sites").option("-s, --subscription <id>", "use the subscription id").execute(function __1(options, _) {
                var parameters, spaces, sites;
                var __frame = {
                  name: "__1",
                  line: 72
                };
                return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
/*    73 */       parameters = {
/*    74 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription)
                  };
/*    77 */       return site.doSpacesGet(parameters, __cb(_, __frame, 5, 25, function ___(__0, __1) {
                    spaces = __1;
/*    78 */         return site.doSitesGet(parameters, __cb(_, __frame, 6, 24, function ___(__0, __2) {
                      sites = __2;
/*    80 */           log.table(sites, function(row, site) {
/*    81 */             row.cell("Name", site.Name);
/*    82 */             row.cell("State", site.State);
/*    83 */             row.cell("Host names", clean(site).HostNames);
                      });
                      _();
                    }, true));
                  }, true));
                });
              });
/*    87 */   function choose(data, callback) {
/*    88 */     cli.choose(data, function(x) {
/*    88 */       callback(undefined, x);
                });
              };
/*    90 */   function prompt(label, callback) {
/*    91 */     cli.prompt(label, function(x) {
/*    91 */       callback(undefined, x);
                });
              };
/*    93 */   function confirm(label, callback) {
/*    94 */     cli.confirm(label, function(x) {
/*    94 */       callback(undefined, x);
                });
              };
/*    98 */   site.command("create [name]").description("Create a new web site and local directory").option("-s, --subscription <id>", "use the subscription id").option("--location <location>", "the geographic region to create the website").option("--hostname <hostname>", "custom host name to use").option("--git", "configure git on web site and local folder").execute(function __2(nameArg, options, _) {
                var context;
/*   126 */     function promptForSiteName(_) {
                  var __frame = {
                    name: "promptForSiteName",
                    line: 126
                  };
                  return __func(_, this, arguments, promptForSiteName, 0, __frame, function __$promptForSiteName() {
/*   127 */         log.silly("promptForSiteName");
                    return (function __$promptForSiteName(__then) {
/*   128 */           if ((context.site.name === undefined)) {
/*   129 */             log.help("Need a site name");
/*   130 */             return prompt("Name: ", __cb(_, __frame, 4, 40, function ___(__0, __1) {
/*   130 */               context.site.name = __1;
                          __then();
                        }, true));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(_);
                  });
                };
/*   134 */     function determineIfSiteExists(_) {
                  var sites, hits;
                  var __frame = {
                    name: "determineIfSiteExists",
                    line: 134
                  };
                  return __func(_, this, arguments, determineIfSiteExists, 0, __frame, function __$determineIfSiteExists() {
/*   135 */         log.silly("determineIfSiteExists");
/*   136 */         return site.doSitesGet(context, __cb(_, __frame, 2, 28, function ___(__0, __1) {
                      sites = __1;
/*   137 */           hits = sites.filter(function(item) {
/*   138 */             return (item.Name === context.site.name);
                      });
/*   140 */           if ((hits.length === 1)) {
/*   141 */             log.info("Updating existing site");
/*   142 */             context.flags.siteExists = true;
/*   143 */             if ((context.site.webspace === undefined)) {
/*   144 */               context.site.webspace = hits[0].WebSpace;
/*   145 */               log.verbose("Existing site location is ", context.site.webspace);
                        }
                         else {
/*   146 */               if ((context.site.webspace !== hits[0].WebSpace)) {
/*   147 */                 return _(new Error(((("Expected location " + context.site.webspace) + " but was ") + hits[0].WebSpace)));
                          }
                        ;
                        }
                      ;
                      }
                    ;
                      _();
                    }, true));
                  });
                };
/*   152 */     function promptForLocation(_) {
                  var spaces, displayNameMatches, href;
                  var __frame = {
                    name: "promptForLocation",
                    line: 152
                  };
                  return __func(_, this, arguments, promptForLocation, 0, __frame, function __$promptForLocation() {
/*   153 */         log.silly("promptForLocation");
/*   155 */         return site.doSpacesGet(context, __cb(_, __frame, 3, 29, function ___(__0, __1) {
                      spaces = __1;
/*   157 */           if ((context.site.webspace !== undefined)) {
/*   159 */             displayNameMatches = spaces.filter(function(space) {
/*   160 */               return (space.GeoRegion === context.site.webspace);
                        });
/*   162 */             if ((displayNameMatches.length === 1)) {
/*   163 */               context.site.webspace = displayNameMatches[0].Name;
                        }
                      ;
                      }
                    ;
/*   167 */           if ((context.site.webspace !== undefined)) {
                        return _(null);
                      }
                    ;
                      return (function __$promptForLocation(__then) {
/*   172 */             if ((spaces.length === 0)) {
/*   173 */               log.help("You must create your first web site using the Windows Azure portal.");
/*   174 */               log.help("Please follow these steps in the portal:");
/*   175 */               log.help("1. At the bottom of the page, click on New > Web Site > Quick Create");
/*   176 */               log.help((("2. Type \"" + context.site.name) + "\" in the URL field"));
/*   177 */               log.help("3. Click on \"Create Web Site\"");
/*   178 */               log.help("4. Once the site has been created, click on the site name");
/*   179 */               log.help("5. Click on \"Set up Git publishing\" and create a publishing username and password. Use those credentials for all new websites you create.");
/*   180 */               return confirm("Launch browser to portal now? (y/n) ", __cb(_, __frame, 28, 24, function ___(__0, __2) {
                            return (function __$promptForLocation(__then) {
                              if (__2) {
/*   181 */                     log.help("Launching portal.");
/*   182 */                     href = "https://windows.azure-test.net/";
/*   183 */                     common.launchBrowser(href);
                                __then();
                              }
                               else {
                                __then();
                              }
                            ;
                            })(function __$promptForLocation() {
/*   185 */                   return _(new Error("First site must be created on portal"));
                            });
                          }, true));
                        }
                         else {
                          return (function __$promptForLocation(__then) {
/*   186 */                 if ((spaces.length == 1)) {
/*   187 */                   context.site.webspace = spaces[0].Name;
/*   188 */                   log.info("Using location", context.site.webspace);
                              __then();
                            }
                             else {
/*   190 */                   log.help("Choose a region");
/*   191 */                   return choose(spaces.map(function(space) {
/*   192 */                     return space.GeoRegion;
                              }), __cb(_, __frame, 39, 51, function ___(__0, __3) {
/*   191 */                     context.site.webspace = spaces[__3].Name;
                                __then();
                              }, true));
                            }
                          ;
                          })(__then);
                        }
                      ;
                      })(_);
                    }, true));
                  });
                };
/*   197 */     function determineIfCurrentDirectoryIsGitWorkingTree(_) {
                  var isInsideWorkTree, lines;
                  var __frame = {
                    name: "determineIfCurrentDirectoryIsGitWorkingTree",
                    line: 197
                  };
                  return __func(_, this, arguments, determineIfCurrentDirectoryIsGitWorkingTree, 0, __frame, function __$determineIfCurrentDirectoryIsGitWorkingTree() {
/*   198 */         log.silly("determineIfCurrentDirectoryIsGitWorkingTree");
                    return (function ___(__then) {
                      (function ___(_) {
                        __tryCatch(_, function __$determineIfCurrentDirectoryIsGitWorkingTree() {
/*   201 */               return exec("git rev-parse --is-inside-work-tree", __cb(_, __frame, 4, 43, function ___(__0, __1) {
                            isInsideWorkTree = __1;
/*   202 */                 lines = (isInsideWorkTree.stdout + isInsideWorkTree.stderr);
/*   203 */                 context.flags.isGitWorkingTree = lines.split("\n").some(function(line) {
/*   204 */                   return (line === "true");
                            });
                            __then();
                          }, true));
                        });
                      })(function ___(err, __result) {
                        __tryCatch(_, function __$determineIfCurrentDirectoryIsGitWorkingTree() {
                          if (err) {
/*   207 */                 context.flags.isGitWorkingTree = false;
                            __then();
                          }
                           else {
                            _(null, __result);
                          }
                        ;
                        });
                      });
                    })(function ___() {
                      __tryCatch(_, _);
                    });
                  });
                };
/*   211 */     function initGitOnCurrentDirectory(_) {
                  var __frame = {
                    name: "initGitOnCurrentDirectory",
                    line: 211
                  };
                  return __func(_, this, arguments, initGitOnCurrentDirectory, 0, __frame, function __$initGitOnCurrentDirectory() {
/*   212 */         log.silly("initGitOnCurrentDirectoryIfNeeded");
/*   213 */         if (context.flags.isGitWorkingTree) {
                      return _(null);
                    }
                  ;
/*   217 */         if (!options.git) {
                      return _(null);
                    }
                  ;
/*   221 */         log.info("Executing `git init`");
/*   222 */         return exec("git init", __cb(_, __frame, 11, 16, function __$initGitOnCurrentDirectory() {
                      return (function __$initGitOnCurrentDirectory(__then) {
/*   224 */             if (!path.existsSync(".gitignore")) {
/*   225 */               log.info("Creating default .gitignore file");
/*   226 */               return fs.writeFile(".gitignore", "node_modules", __cb(_, __frame, 15, 20, __then, true));
                        }
                         else {
                          __then();
                        }
                      ;
                      })(function __$initGitOnCurrentDirectory() {
/*   229 */             context.flags.isGitWorkingTree = true;
                        _();
                      });
                    }, true));
                  });
                };
/*   232 */     function copyWebConfigWhenServerJsPresent(_) {
                  var sourcePath;
                  var __frame = {
                    name: "copyWebConfigWhenServerJsPresent",
                    line: 232
                  };
                  return __func(_, this, arguments, copyWebConfigWhenServerJsPresent, 0, __frame, function __$copyWebConfigWhenServerJsPresent() {
/*   233 */         log.silly("copyWebConfigWhenServerJsPresent");
                    return (function __$copyWebConfigWhenServerJsPresent(__then) {
/*   234 */           if ((!path.existsSync("web.config") && path.existsSync("server.js"))) {
/*   235 */             log.info("Creating default web.config file");
/*   236 */             sourcePath = path.join(__dirname, "../templates/node/web.config");
/*   237 */             return fs.readFile(sourcePath, __cb(_, __frame, 5, 47, function ___(__0, __1) {
/*   237 */               return fs.writeFile("web.config", __1, __cb(_, __frame, 5, 20, __then, true));
                        }, true));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(_);
                  });
                };
/*   241 */     function updateLocalConfigWithSiteName(_) {
                  var cfg;
                  var __frame = {
                    name: "updateLocalConfigWithSiteName",
                    line: 241
                  };
                  return __func(_, this, arguments, updateLocalConfigWithSiteName, 0, __frame, function __$updateLocalConfigWithSiteName() {
/*   242 */         log.silly("updateLocalConfigWithSiteName");
                    return (function __$updateLocalConfigWithSiteName(__then) {
/*   243 */           if (context.flags.isGitWorkingTree) {
/*   244 */             return site.readConfig(__cb(_, __frame, 3, 30, function ___(__0, __1) {
                          cfg = __1;
/*   245 */               cfg.name = context.site.name;
/*   246 */               return site.writeConfig(cfg, __cb(_, __frame, 5, 20, __then, true));
                        }, true));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(_);
                  });
                };
/*   250 */     function createSiteAndInitializeRemoteRepo(_) {
                  var __frame = {
                    name: "createSiteAndInitializeRemoteRepo",
                    line: 250
                  };
                  return __func(_, this, arguments, createSiteAndInitializeRemoteRepo, 0, __frame, function __$createSiteAndInitializeRemoteRepo() {
/*   251 */         log.silly("createSiteAndInitializeRemoteRepo");
                    return (function __$createSiteAndInitializeRemoteRepo(__then) {
/*   252 */           if (!context.flags.siteExists) {
/*   253 */             return site.doSitesPost(context, __cb(_, __frame, 3, 20, __then, true));
                      }
                       else {
                        __then();
                      }
                    ;
                    })(function __$createSiteAndInitializeRemoteRepo() {
                      return (function ___(__then) {
                        (function ___(_) {
                          __tryCatch(_, function __$createSiteAndInitializeRemoteRepo() {
/*   256 */                 return site.doRepositoryGet(context, __cb(_, __frame, 6, 35, function ___(__0, __2) {
/*   256 */                   context.repo = __2;
                              __then();
                            }, true));
                          });
                        })(function ___(err, __result) {
                          __tryCatch(_, function __$createSiteAndInitializeRemoteRepo() {
                            if (err) {
/*   259 */                   return site.doRepositoryPost(context, __cb(_, __frame, 9, 20, function __$createSiteAndInitializeRemoteRepo() {
/*   260 */                     return site.doRepositoryGet(context, __cb(_, __frame, 10, 35, function ___(__0, __1) {
/*   260 */                       context.repo = __1;
                                  __then();
                                }, true));
                              }, true));
                            }
                             else {
                              _(null, __result);
                            }
                          ;
                          });
                        });
                      })(function ___() {
                        __tryCatch(_, function __$createSiteAndInitializeRemoteRepo() {
/*   262 */               log.silly("context.repo", context.repo);
                          _();
                        });
                      });
                    });
                  });
                };
/*   265 */     function addRemoteToLocalGitRepo(_) {
                  var publishingUsers, publishingUser, repoUrl, remotes, azureExists;
                  var __frame = {
                    name: "addRemoteToLocalGitRepo",
                    line: 265
                  };
                  return __func(_, this, arguments, addRemoteToLocalGitRepo, 0, __frame, function __$addRemoteToLocalGitRepo() {
/*   266 */         log.silly("addRemoteToLocalGitRepo");
/*   267 */         if (!context.flags.isGitWorkingTree) {
                      return _(null);
                    }
                  ;
/*   270 */         return site.doPublishingUsersGet(context, __cb(_, __frame, 5, 38, function ___(__0, __1) {
                      publishingUsers = __1;
/*   271 */           publishingUser = toArray(publishingUsers)[0];
                      return (function __$addRemoteToLocalGitRepo(__then) {
/*   272 */             if (((publishingUser === undefined) || (publishingUser.length > 64))) {
/*   273 */               log.help("You will also need to provide publishing username and credentials on the portal.");
/*   274 */               log.help("For now, please provide a username for git remote");
/*   275 */               return prompt("Publishing username ", __cb(_, __frame, 10, 37, function ___(__0, __2) {
/*   275 */                 publishingUser = __2;
                            __then();
                          }, true));
                        }
                         else {
                          __then();
                        }
                      ;
                      })(function __$addRemoteToLocalGitRepo() {
/*   278 */             repoUrl = url.parse(((context.repo + context.site.name) + ".git"));
/*   279 */             repoUrl.protocol = "http:";
/*   280 */             repoUrl.auth = publishingUser;
/*   283 */             log.verbose("Detecting git and local git folder");
/*   284 */             return exec("git remote", __cb(_, __frame, 19, 30, function ___(__0, __3) {
                          remotes = __3;
/*   285 */               azureExists = ((remotes.stdout + remotes.stderr)).split("\n").some(function(item) {
/*   286 */                 return (item === "azure");
                          });
                          return (function __$addRemoteToLocalGitRepo(__then) {
/*   289 */                 if (azureExists) {
/*   290 */                   log.verbose("Removing existing azure remote alias");
/*   291 */                   return exec("git remote rm azure", __cb(_, __frame, 26, 20, __then, true));
                            }
                             else {
                              __then();
                            }
                          ;
                          })(function __$addRemoteToLocalGitRepo() {
/*   294 */                 log.info((("Executing `git remote add azure " + url.format(repoUrl)) + "`"));
/*   295 */                 return exec(("git remote add azure " + url.format(repoUrl)), __cb(_, __frame, 30, 16, _, true));
                          });
                        }, true));
                      });
                    }, true));
                  });
                };
                var __frame = {
                  name: "__2",
                  line: 104
                };
                return __func(_, this, arguments, __2, 2, __frame, function __$__2() {
/*   105 */       context = {
/*   106 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   107 */         site: {
/*   108 */           name: nameArg,
/*   109 */           webspace: options.location,
/*   110 */           hostname: options.hostname
                    },
/*   112 */         flags: {
                    }
                  };
/*   116 */       return promptForSiteName(__cb(_, __frame, 12, 12, function __$__2() {
/*   117 */         return determineIfSiteExists(__cb(_, __frame, 13, 12, function __$__2() {
/*   118 */           return promptForLocation(__cb(_, __frame, 14, 12, function __$__2() {
/*   119 */             return determineIfCurrentDirectoryIsGitWorkingTree(__cb(_, __frame, 15, 12, function __$__2() {
/*   120 */               return initGitOnCurrentDirectory(__cb(_, __frame, 16, 12, function __$__2() {
/*   121 */                 return copyWebConfigWhenServerJsPresent(__cb(_, __frame, 17, 12, function __$__2() {
/*   122 */                   return updateLocalConfigWithSiteName(__cb(_, __frame, 18, 12, function __$__2() {
/*   123 */                     return createSiteAndInitializeRemoteRepo(__cb(_, __frame, 19, 12, function __$__2() {
/*   124 */                       return addRemoteToLocalGitRepo(__cb(_, __frame, 20, 12, _, true));
                                }, true));
                              }, true));
                            }, true));
                          }, true));
                        }, true));
                      }, true));
                    }, true));
                  }, true));
                });
              });
/*   299 */   site.command("portal [name]").description("Opens the portal in a browser to manage your web sites").execute(function __3(name, options, _) {
                var href;
                var __frame = {
                  name: "__3",
                  line: 301
                };
                return __func(_, this, arguments, __3, 2, __frame, function __$__3() {
/*   303 */       href = "https://windows.azure-test.net/";
/*   304 */       if (name) {
/*   305 */         href = (((href + "#Workspaces/WebsiteExtension/Website/") + name) + "/dashboard");
                  }
                ;
/*   308 */       common.launchBrowser(href);
                  _();
                });
              });
/*   311 */   site.command("browse [name]").description("Open your web site in a browser.").option("-s, --subscription <id>", "use the subscription id").execute(function __4(name, options, _) {
                var context, siteData, href;
                var __frame = {
                  name: "__4",
                  line: 314
                };
                return __func(_, this, arguments, __4, 2, __frame, function __$__4() {
/*   316 */       context = {
/*   317 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   318 */         site: {
/*   319 */           name: name
                    }
                  };
/*   322 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__4() {
/*   323 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__4() {
/*   324 */           return site.doSiteGet(context, __cb(_, __frame, 10, 33, function ___(__0, __1) {
/*   324 */             siteData = clean(__1);
/*   326 */             href = ("http://" + toArray(siteData.HostNames)[0]);
/*   328 */             common.launchBrowser(href);
                        _();
                      }, true));
                    }, true));
                  }, true));
                });
              });
/*   331 */   site.command("show [name]").description("Show details for a web sites").option("-s, --subscription <id>", "use the subscription id").execute(function __5(name, options, _) {
                var context, siteData, configData, repositoryData;
                var __frame = {
                  name: "__5",
                  line: 334
                };
                return __func(_, this, arguments, __5, 2, __frame, function __$__5() {
/*   335 */       context = {
/*   336 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   337 */         site: {
/*   338 */           name: name
                    }
                  };
/*   342 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__5() {
/*   343 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__5() {
/*   345 */           log.info("Showing details for site");
/*   346 */           log.verbose("Parameters", context);
/*   348 */           return site.doSiteGet(context, __cb(_, __frame, 14, 27, function ___(__0, __1) {
                        siteData = __1;
/*   349 */             return site.doSiteConfigGet(context, __cb(_, __frame, 15, 29, function ___(__0, __2) {
                          configData = __2;
/*   350 */               return site.doRepositoryGet(context, __cb(_, __frame, 16, 33, function ___(__0, __3) {
                            repositoryData = __3;
/*   352 */                 logEachData("Site", siteData);
/*   353 */                 logEachData("Config", configData);
/*   354 */                 log.data("Repository", clean(repositoryData));
                            _();
                          }, true));
                        }, true));
                      }, true));
                    }, true));
                  }, true));
                });
              });
/*   357 */   function lookupSiteName(context, _) {
                var cfg;
                var __frame = {
                  name: "lookupSiteName",
                  line: 357
                };
                return __func(_, this, arguments, lookupSiteName, 1, __frame, function __$lookupSiteName() {
/*   358 */       if ((context.site.name !== undefined)) {
                    return _(null);
                  }
                ;
/*   363 */       return site.readConfig(__cb(_, __frame, 6, 18, function ___(__0, __1) {
                    cfg = __1;
/*   364 */         if ((cfg !== undefined)) {
/*   366 */           context.site.name = cfg.name;
                      return _(null);
                    }
                  ;
/*   370 */         return prompt("Web site name: ", __cb(_, __frame, 13, 28, function ___(__0, __2) {
/*   370 */           context.site.name = __2;
                      _();
                    }, true));
                  }, true));
                });
              };
/*   372 */   site.lookupSiteName = lookupSiteName;
/*   374 */   function lookupSiteWebSpace(context, _) {
                var sites, index;
                var __frame = {
                  name: "lookupSiteWebSpace",
                  line: 374
                };
                return __func(_, this, arguments, lookupSiteWebSpace, 1, __frame, function __$lookupSiteWebSpace() {
/*   375 */       log.verbose("Attempting to locate site ", context.site.name);
/*   376 */       return site.doSitesGet(context, __cb(_, __frame, 2, 20, function ___(__0, __1) {
                    sites = __1;
/*   377 */         for (index in sites) {
/*   378 */           if ((sites[index].Name === context.site.name)) {
/*   379 */             log.verbose("Site located at ", sites[index].WebSpace);
/*   380 */             context.site.webspace = sites[index].WebSpace;
                      }
                    ;
                    };
/*   383 */         if ((context.site.webspace === undefined)) {
/*   384 */           return _(new Error(("Unable to locate site named " + context.site.name)));
                    }
                  ;
                    _();
                  }, true));
                });
              };
/*   387 */   site.lookupSiteWebSpace = lookupSiteWebSpace;
/*   389 */   site.command("delete [name]").description("Delete a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __6(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__6",
                  line: 392
                };
                return __func(_, this, arguments, __6, 2, __frame, function __$__6() {
/*   393 */       context = {
/*   394 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   395 */         site: {
/*   396 */           name: name
                    }
                  };
/*   400 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__6() {
/*   401 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__6() {
/*   403 */           log.info("Deleting site", context.site.name);
/*   412 */           return getChannel().path(context.subscription).path("services").path("webspaces").path(context.site.webspace).path("sites").path(context.site.name).DELETE(__cb(_, __frame, 20, 25, function ___(__0, __1) {
                        result = __1;
/*   414 */             log.info((("Site " + context.site.name) + " has been deleted"));
                        _();
                      }, true));
                    }, true));
                  }, true));
                });
              });
/*   418 */   site.command("start [name]").description("Start a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __7(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__7",
                  line: 421
                };
                return __func(_, this, arguments, __7, 2, __frame, function __$__7() {
/*   422 */       context = {
/*   423 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   424 */         site: {
/*   425 */           name: name
                    }
                  };
/*   429 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__7() {
/*   430 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__7() {
/*   432 */           log.info("Starting site", context.site.name);
/*   442 */           return getChannel().path(context.subscription).path("services").path("webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").PUT(function(req) {
/*   443 */             req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   444 */             req.write("<HostNames>");
/*   445 */             req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   446 */             req.write((context.site.name + ".antdf0.antares-test.windows-int.net"));
/*   447 */             req.write("</string>");
/*   448 */             req.write("</HostNames>");
/*   449 */             req.write("<Name>");
/*   450 */             req.write(context.site.name);
/*   451 */             req.write("</Name>");
/*   452 */             req.write("<State>");
/*   453 */             req.write("Running");
/*   454 */             req.write("</State>");
/*   455 */             req.write("</Site>");
/*   457 */             req.end();
                      }, __cb(_, __frame, 21, 25, function ___(__0, __1) {
                        result = __1;
/*   460 */             log.info((("Site " + context.site.name) + " has been started"));
                        _();
                      }, true));
                    }, true));
                  }, true));
                });
              });
/*   463 */   site.command("stop [name]").description("Stop a web site").option("-s, --subscription <id>", "use the subscription id").execute(function __8(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__8",
                  line: 466
                };
                return __func(_, this, arguments, __8, 2, __frame, function __$__8() {
/*   467 */       context = {
/*   468 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   469 */         site: {
/*   470 */           name: name
                    }
                  };
/*   474 */       return lookupSiteName(context, __cb(_, __frame, 8, 12, function __$__8() {
/*   475 */         return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__8() {
/*   477 */           log.info("Stopping site", context.site.name);
/*   487 */           return getChannel().path(context.subscription).path("services").path("webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").PUT(function(req) {
/*   488 */             req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   489 */             req.write("<HostNames>");
/*   490 */             req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   491 */             req.write((context.site.name + ".antdf0.antares-test.windows-int.net"));
/*   492 */             req.write("</string>");
/*   493 */             req.write("</HostNames>");
/*   494 */             req.write("<Name>");
/*   495 */             req.write(context.site.name);
/*   496 */             req.write("</Name>");
/*   497 */             req.write("<State>");
/*   498 */             req.write("Stopped");
/*   499 */             req.write("</State>");
/*   500 */             req.write("</Site>");
/*   502 */             req.end();
                      }, __cb(_, __frame, 21, 25, function ___(__0, __1) {
                        result = __1;
/*   505 */             log.info((("Site " + context.site.name) + " has been stopped"));
                        _();
                      }, true));
                    }, true));
                  }, true));
                });
              });
/*   512 */   site.readConfig = function site_readConfig__9(_) {
                var __frame = {
                  name: "site_readConfig__9",
                  line: 512
                };
                return __func(_, this, arguments, site_readConfig__9, 0, __frame, function __$site_readConfig__9() {
/*   514 */       return site.readConfigValue("azure.site.name", __cb(_, __frame, 2, 18, function ___(__0, __2) {
/*   513 */         var __1 = {
/*   514 */           name: __2
                    };
                    return _(null, __1);
                  }, true));
                });
              };
/*   518 */   site.writeConfig = function site_writeConfig__10(cfg, _) {
                var __frame = {
                  name: "site_writeConfig__10",
                  line: 518
                };
                return __func(_, this, arguments, site_writeConfig__10, 1, __frame, function __$site_writeConfig__10() {
/*   519 */       return site.writeConfigValue("azure.site.name", cfg.name, __cb(_, __frame, 1, 8, _, true));
                });
              };
/*   522 */   site.readConfigValue = function site_readConfigValue__11(name, _) {
                var result;
                var __frame = {
                  name: "site_readConfigValue__11",
                  line: 522
                };
                return __func(_, this, arguments, site_readConfigValue__11, 1, __frame, function __$site_readConfigValue__11() {
                  return (function ___(__then) {
                    (function ___(_) {
                      __tryCatch(_, function __$site_readConfigValue__11() {
/*   524 */             return exec(("git config --get " + name), __cb(_, __frame, 2, 25, function ___(__0, __1) {
                          result = __1;
/*   525 */               return _(null, ((result.stdout + result.stderr)).trim());
                        }, true));
                      });
                    })(function ___(err, __result) {
                      __tryCatch(_, function __$site_readConfigValue__11() {
                        if (err) {
/*   528 */               log.silly("Unable to read config", err);
/*   529 */               return _(null, "");
                        }
                         else {
                          _(null, __result);
                        }
                      ;
                      });
                    });
                  })(function ___() {
                    __tryCatch(_, _);
                  });
                });
              };
/*   533 */   site.writeConfigValue = function site_writeConfigValue__12(name, value, _) {
                var __frame = {
                  name: "site_writeConfigValue__12",
                  line: 533
                };
                return __func(_, this, arguments, site_writeConfigValue__12, 2, __frame, function __$site_writeConfigValue__12() {
/*   534 */       return exec(((("git config " + name) + " ") + value), __cb(_, __frame, 1, 8, _, true));
                });
              };
/*   541 */   site.doSitesPost = function(options, callback) {
/*   542 */     log.info("Creating a new web site");
/*   543 */     log.verbose("Subscription", options.subscription);
/*   544 */     log.verbose("Webspace", options.site.webspace);
/*   545 */     log.verbose("Site", options.site.name);
/*   547 */     getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").header("Content-Type", "application/xml").POST(writers.Site.xml(options.site), function(err, result) {
/*   557 */       if (err) {
/*   558 */         logError("Failed to create site", err);
                  }
/*   559 */        else {
/*   560 */         log.info("Created website at ", clean(result).HostNames);
/*   561 */         log.verbose("Site", clean(result));
                  }
                ;
/*   563 */       callback(err, result);
                });
              };
/*   567 */   site.doRepositoryPost = function(options, callback) {
/*   568 */     log.info("Initializing repository");
/*   569 */     log.verbose("Subscription", options.subscription);
/*   570 */     log.verbose("Webspace", options.site.webspace);
/*   571 */     log.verbose("Site", options.site.name);
/*   573 */     getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("repository").POST("", function(err, result) {
/*   584 */       if (err) {
/*   585 */         logError("Failed to initialize repository", err);
                  }
/*   586 */        else {
/*   587 */         log.info("Repository initialized");
                  }
                ;
/*   589 */       callback(err, result);
                });
              };
/*   593 */   site.doSpacesGet = function site_doSpacesGet__13(options, _) {
                var result;
                var __frame = {
                  name: "site_doSpacesGet__13",
                  line: 593
                };
                return __func(_, this, arguments, site_doSpacesGet__13, 1, __frame, function __$site_doSpacesGet__13() {
/*   594 */       log.verbose("Subscription", options.subscription);
/*   601 */       return getChannel().path(options.subscription).path("services").path("webspaces").path("").GET(__cb(_, __frame, 8, 21, function ___(__0, __1) {
                    result = __1;
/*   603 */         log.json("silly", result);
/*   604 */         return _(null, toArray(result.WebSpace));
                  }, true));
                });
              };
/*   607 */   site.doSitesGet = function site_doSitesGet__14(options, _) {
                var spaces, channel, result, sites;
                var __frame = {
                  name: "site_doSitesGet__14",
                  line: 607
                };
                return __func(_, this, arguments, site_doSitesGet__14, 1, __frame, function __$site_doSitesGet__14() {
/*   608 */       log.verbose("Subscription", options.subscription);
/*   610 */       return site.doSpacesGet(options, __cb(_, __frame, 3, 21, function ___(__0, __2) {
                    spaces = __2;
/*   614 */         channel = getChannel().path(options.subscription).path("services/webspaces");
/*   616 */         return async.map(spaces, function __1(webspace, _) {
                      var __frame = {
                        name: "__1",
                        line: 618
                      };
                      return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
/*   623 */             return channel.path(webspace.Name).path("sites").path("").GET(__cb(_, __frame, 5, 23, _, true));
                      });
                    }, __cb(_, __frame, 9, 21, function ___(__0, __3) {
                      result = __3;
/*   627 */           sites = [];
/*   628 */           result.forEach(function(item) {
/*   629 */             sites = sites.concat(toArray(item.Site));
                      });
/*   631 */           result = sites;
/*   633 */           log.json("verbose", sites);
/*   634 */           return _(null, sites);
                    }, true));
                  }, true));
                });
              };
/*   637 */   site.doSiteGet = function(options, callback) {
/*   638 */     getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").path(options.site.name).GET(function(err, result) {
/*   647 */       if (err) {
/*   648 */         logError("Failed to get site info", err);
                  }
/*   649 */        else {
/*   650 */         log.verbose("Site", clean(result));
                  }
                ;
/*   652 */       callback(err, result);
                });
              };
/*   656 */   site.doSiteConfigGet = function(options, callback) {
/*   657 */     getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("config").GET(function(err, result) {
/*   667 */       if (err) {
/*   668 */         logError("Failed to get site config info", err);
                  }
/*   669 */        else {
/*   670 */         log.verbose("SiteConfig", clean(result));
                  }
                ;
/*   672 */       callback(err, result);
                });
              };
/*   676 */   site.doRepositoryGet = function(options, callback) {
/*   677 */     getChannel().path(options.subscription).path("services").path("webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("repository").GET(function(err, result) {
/*   687 */       if (result) {
/*   688 */         log.verbose("Repository", clean(result));
                  }
                ;
/*   690 */       callback(err, clean(result));
                });
              };
/*   694 */   site.doPublishingUsersGet = function site_doPublishingUsersGet__15(options, _) {
                var publishingUsers;
                var __frame = {
                  name: "site_doPublishingUsersGet__15",
                  line: 694
                };
                return __func(_, this, arguments, site_doPublishingUsersGet__15, 1, __frame, function __$site_doPublishingUsersGet__15() {
/*   701 */       return getChannel().path(options.subscription).path("services").path("webspaces").path("").query("properties", "publishingUsers").GET(__cb(_, __frame, 7, 36, function ___(__0, __1) {
/*   695 */         publishingUsers = clean(__1);
/*   703 */         log.verbose("PublishingUsers", publishingUsers);
/*   704 */         return _(null, publishingUsers);
                  }, true));
                });
              };
/*   711 */   var writers = {
/*   712 */     Site: {
/*   713 */       xml: function(site) {
/*   714 */         return function(req) {
/*   715 */           req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   716 */           req.write("<HostNames>");
/*   717 */           req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   718 */           req.write((site.name + ".antdf0.antares-test.windows-int.net"));
/*   719 */           req.write("</string>");
/*   721 */           if (site.hostname) {
/*   722 */             req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   723 */             req.write(site.hostname);
/*   724 */             req.write("</string>");
                      }
                    ;
/*   726 */           req.write("</HostNames>");
/*   727 */           req.write("<Name>");
/*   728 */           req.write(site.name);
/*   729 */           req.write("</Name>");
/*   730 */           req.write("</Site>");
/*   732 */           req.end();
                    };
                  }
                }
              };
/*   738 */   function clean(source) {
/*   739 */     if ((typeof (source) === "string")) {
/*   740 */       return source;
                }
              ;
/*   743 */     var target = {
                };
/*   744 */     var hasString = false;
/*   745 */     var hasNonString = false;
/*   746 */     var stringValue = "";
/*   748 */     for (var prop in source) {
/*   749 */       if ((prop == "@")) {
/*   750 */         continue;
                  }
/*   751 */        else {
/*   752 */         if ((((prop === "#") || (prop === "string")) || (prop.substring((prop.length - 7)) === ":string"))) {
/*   753 */           hasString = true;
/*   754 */           stringValue = source[prop];
                    }
/*   755 */          else {
/*   756 */           hasNonString = true;
                    }
                  ;
/*   758 */         target[prop] = clean(source[prop]);
                  }
                ;
                };
/*   761 */     if ((hasString && !hasNonString)) {
/*   762 */       return stringValue;
                }
              ;
/*   764 */     return target;
              };
/*   767 */   function logEachData(title, data) {
/*   768 */     var cleaned = clean(data);
/*   769 */     for (var property in cleaned) {
/*   770 */       log.data(((title + " ") + property), cleaned[property]);
                };
              };
/*   774 */   function logError(message, err) {
/*   775 */     if ((arguments.length == 1)) {
/*   776 */       err = message;
/*   777 */       message = undefined;
                }
/*   778 */      else {
/*   779 */       log.error(message);
                }
              ;
/*   782 */     if (err) {
/*   783 */       if (err.message) {
/*   785 */         log.verbose("stack", err.stack);
/*   786 */         log.json("silly", err);
                  }
/*   788 */        else if (err.Message) {
/*   790 */         log.json("verbose", clean(err));
                  }
/*   792 */        else {
                  
                  }
                  
                ;
                }
              ;
              };
/*   798 */   function isArray(testObject) {
/*   799 */     return (((testObject && !(testObject.propertyIsEnumerable("length"))) && (typeof testObject === "object")) && (typeof testObject.length === "number"));
              };
/*   802 */   function toArray(testObject) {
/*   803 */     return (isArray(testObject) ? testObject : ((typeof testObject === "undefined") ? [] : [testObject,]));
              };
/*   806 */   function endsWith(str, suffix) {
/*   807 */     return (str.indexOf(suffix, (str.length - suffix.length)) !== -1);
              };
/*   810 */   function exec(cmd, cb) {
/*   811 */     child_process.exec(cmd, function(err, stdout, stderr) {
/*   812 */       cb(err, {
/*   813 */         stdout: stdout,
/*   814 */         stderr: stderr
                  });
                });
              };
            };
