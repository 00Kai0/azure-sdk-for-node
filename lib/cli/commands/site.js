/*** Generated by streamline 0.2.2 - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__propagate=__rt.__propagate,__trap=__rt.__trap,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g;
/*     1 */ var fs = require("fs");
/*     5 */ var path = require("path");
/*     6 */ var url = require("url");
/*     7 */ var crypto = require("crypto");
/*     8 */ var pfx2pem = require("../../util/certificates/pkcs").pfx2pem;
/*     9 */ var Channel = require("../channel");
/*    10 */ var async = require("async");
/*    11 */ var child_process = require("child_process");
/*    14 */ exports.init = function(cli) {
/*    16 */   var log = cli.output;
/*    18 */   var regions = [{
/*    20 */     prompt: "South Central US",
/*    21 */     webspace: "southcentraluswebspace",
/*    22 */     location: "SouthCentralUS1",
/*    23 */     plan: "VirtualDedicatedPlan"
/*    25 */   },{
/*    26 */     prompt: "North Europe",
/*    27 */     webspace: "northeuropewebspace",
/*    28 */     location: "NorthEurope1",
/*    29 */     plan: "VirtualDedicatedPlan"
              },];
/*    32 */   var regionPrompts = regions.map(function(region) {
/*    32 */     return region.prompt;
              });
/*    34 */   function getChannel() {
/*    35 */     var pem = cli.category("account").managementCertificate();
/*    37 */     var channel = new Channel({
/*    38 */       host: "umapi-tc2.rdfetest.dnsdemo4.com",
/*    39 */       port: 8443,
/*    40 */       key: pem,
/*    41 */       cert: pem
/*    42 */     }).header("x-ms-version", "2011-02-25");
/*    44 */     var proxyString = (((process.env.HTTPS_PROXY || process.env.https_proxy) || process.env.ALL_PROXY) || process.env.all_proxy);
/*    50 */     if ((proxyString != undefined)) {
/*    51 */       channel = channel.add({
/*    51 */         proxy: url.parse(proxyString)
                  });
                }
              ;
/*    54 */     return channel;
              };
/*    58 */   var site = cli.category("site").description("Commands to manage your web sites.");
/*    62 */   site.command("list").description("List your web sites.").option("-s, --subscription <id>", "use the subscription id").execute(function __1(options, _) {
                var parameters, spaces, sites;
                var __frame = {
                  name: "__1",
                  line: 65
                };
                return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
/*    66 */       parameters = {
/*    67 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription)
                  };
/*    70 */       return site.doSpacesGet(parameters, __cb(_, __frame, 5, 25, function ___(__0, __1) {
                    spaces = __1;
/*    71 */         return site.doSitesGet(parameters, __cb(_, __frame, 6, 24, function ___(__0, __2) {
                      sites = __2;
/*    73 */           log.table(sites, function(row, site) {
/*    74 */             row.cell("Name", site.Name);
/*    75 */             row.cell("State", site.State);
/*    76 */             row.cell("Host names", clean(site).HostNames);
                      });
                      _();
                    }));
                  }));
                });
              });
/*    80 */   function choose(data, callback) {
/*    81 */     cli.choose(data, function(x) {
/*    81 */       callback(null, x);
                });
              };
/*    84 */   site.command("create <name>").description("Create a new web site and local directory.").option("-s, --subscription <id>", "use the subscription id").option("--location <location>", "the geographic region to create the website").option("--hostname <hostname>", "custom host name to use").execute(function __2(name, options, _) {
                var context, repo;
                var __frame = {
                  name: "__2",
                  line: 89
                };
                return __func(_, this, arguments, __2, 2, __frame, function __$__2() {
/*    90 */       context = {
/*    91 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*    92 */         site: {
/*    93 */           name: name,
/*    94 */           webspace: options.location,
/*    95 */           hostname: options.hostname
                    }
                  };
                  return (function __$__2(__then) {
/*    99 */         if ((context.site.webspace === undefined)) {
/*   100 */           log.help("Choose a region");
/*   101 */           return choose(regionPrompts, __cb(_, __frame, 12, 48, function ___(__0, __1) {
/*   101 */             context.site.webspace = regions[__1].webspace;
                        __then();
                      }));
                    }
                     else {
                      __then();
                    }
                  ;
                  })(function __$__2() {
/*   104 */         return site.doSitesPost(context, __cb(_, __frame, 15, 12, function __$__2() {
/*   105 */           return site.doRepositoryPost(context, __cb(_, __frame, 16, 12, function __$__2() {
/*   106 */             return site.doRepositoryGet(context, __cb(_, __frame, 17, 23, function ___(__0, __2) {
                          repo = __2;
/*   108 */               log.help("To start adding content to the website, type in the following:");
/*   109 */               log.help("  git init");
/*   110 */               log.help("  git add .");
/*   111 */               log.help("  git commit -m \"initial commit\"");
/*   112 */               log.help(((("  git remote add azure " + repo) + context.site.name) + ".git"));
/*   113 */               log.help("  git push azure master");
                          _();
                        }));
                      }));
                    }));
                  });
                });
              });
/*   116 */   site.command("portal [name]").description("Opens the portal in a browser to manage your web sites.").execute(function __3(name, options, _) {
                var url;
                var __frame = {
                  name: "__3",
                  line: 118
                };
                return __func(_, this, arguments, __3, 2, __frame, function __$__3() {
/*   120 */       url = "http://commonuxfx-bvt01.cloudapp.net/?wa=wsignin1.0";
/*   121 */       if (options.name) {
/*   122 */         url = (((url + "#Workspaces/WebsiteExtension/Website/") + name) + "/dashboard");
                  }
                ;
/*   125 */       child_process.spawn("open", [url,]);
                  _();
                });
              });
/*   128 */   site.command("browse <name>").description("Open your web site in a browser.").option("-s, --subscription <id>", "use the subscription id").execute(function __4(name, options, _) {
                var context, siteData, url;
                var __frame = {
                  name: "__4",
                  line: 131
                };
                return __func(_, this, arguments, __4, 2, __frame, function __$__4() {
/*   133 */       context = {
/*   134 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   135 */         site: {
/*   136 */           name: name
                    }
                  };
/*   140 */       return lookupSiteWebSpace(context, __cb(_, __frame, 9, 12, function __$__4() {
/*   141 */         return site.doSiteGet(context, __cb(_, __frame, 10, 33, function ___(__0, __1) {
/*   141 */           siteData = clean(__1);
/*   142 */           log.json(siteData);
/*   143 */           url = ("http://" + toArray(siteData.HostNames)[0]);
/*   144 */           log.verbose("Browsing url", url);
/*   145 */           child_process.spawn("open", [url,]);
                      _();
                    }));
                  }));
                });
              });
/*   148 */   site.command("show <name>").description("Show details for a web sites.").option("-s, --subscription <id>", "use the subscription id").execute(function __5(name, options, _) {
                var context, siteData, configData, repositoryData;
                var __frame = {
                  name: "__5",
                  line: 151
                };
                return __func(_, this, arguments, __5, 2, __frame, function __$__5() {
/*   152 */       context = {
/*   153 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   154 */         site: {
/*   155 */           name: name
                    }
                  };
/*   159 */       return lookupSiteWebSpace(context, __cb(_, __frame, 8, 12, function __$__5() {
/*   161 */         log.info("Showing details for site");
/*   162 */         log.verbose("Parameters", context);
/*   164 */         return site.doSiteGet(context, __cb(_, __frame, 13, 27, function ___(__0, __1) {
                      siteData = __1;
/*   165 */           return site.doSiteConfigGet(context, __cb(_, __frame, 14, 29, function ___(__0, __2) {
                        configData = __2;
/*   166 */             return site.doRepositoryGet(context, __cb(_, __frame, 15, 33, function ___(__0, __3) {
                          repositoryData = __3;
/*   168 */               logEachData("Site", siteData);
/*   169 */               logEachData("Config", configData);
/*   170 */               log.data("Repository", clean(repositoryData));
                          _();
                        }));
                      }));
                    }));
                  }));
                });
              });
/*   173 */   function lookupSiteWebSpace(context, _) {
                var sites, index;
                var __frame = {
                  name: "lookupSiteWebSpace",
                  line: 173
                };
                return __func(_, this, arguments, lookupSiteWebSpace, 1, __frame, function __$lookupSiteWebSpace() {
/*   174 */       log.verbose("Attempting to locate site ", context.site.name);
/*   175 */       return site.doSitesGet(context, __cb(_, __frame, 2, 20, function ___(__0, __1) {
                    sites = __1;
/*   176 */         for (index in sites) {
/*   177 */           if ((sites[index].Name === context.site.name)) {
/*   178 */             log.verbose("Site located at ", sites[index].WebSpace);
/*   179 */             context.site.webspace = sites[index].WebSpace;
                      }
                    ;
                    };
/*   182 */         if ((context.site.webspace === undefined)) {
/*   183 */           return _(new Error(("Unable to locate site named " + context.site.name)));
                    }
                  ;
                    _();
                  }));
                });
              };
/*   187 */   site.command("delete <name>").description("Delete a web site.").option("-s, --subscription <id>", "use the subscription id").execute(function __6(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__6",
                  line: 190
                };
                return __func(_, this, arguments, __6, 2, __frame, function __$__6() {
/*   191 */       context = {
/*   192 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   193 */         site: {
/*   194 */           name: name
                    }
                  };
/*   198 */       return lookupSiteWebSpace(context, __cb(_, __frame, 8, 12, function __$__6() {
/*   206 */         return getChannel().path(context.subscription).path("services/webspaces").path(context.site.webspace).path("sites").path(context.site.name).DELETE(__cb(_, __frame, 16, 25, function ___(__0, __1) {
                      result = __1;
                      _();
                    }));
                  }));
                });
              });
/*   210 */   site.command("start <name>").description("Start a web site.").option("-s, --subscription <id>", "use the subscription id").execute(function __7(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__7",
                  line: 213
                };
                return __func(_, this, arguments, __7, 2, __frame, function __$__7() {
/*   214 */       context = {
/*   215 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   216 */         site: {
/*   217 */           name: name
                    }
                  };
/*   221 */       return lookupSiteWebSpace(context, __cb(_, __frame, 8, 12, function __$__7() {
/*   230 */         return getChannel().path(context.subscription).path("services/webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").POST(function(req) {
/*   231 */           req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   232 */           req.write("<State>");
/*   233 */           req.write("Running");
/*   234 */           req.write("</State>");
/*   235 */           req.write("</Site>");
/*   237 */           req.end();
                    }, __cb(_, __frame, 17, 25, function ___(__0, __1) {
                      result = __1;
                      _();
                    }));
                  }));
                });
              });
/*   242 */   site.command("stop <name>").description("Stop a web site.").option("-s, --subscription <id>", "use the subscription id").execute(function __8(name, options, _) {
                var context, result;
                var __frame = {
                  name: "__8",
                  line: 245
                };
                return __func(_, this, arguments, __8, 2, __frame, function __$__8() {
/*   246 */       context = {
/*   247 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*   248 */         site: {
/*   249 */           name: name
                    }
                  };
/*   253 */       return lookupSiteWebSpace(context, __cb(_, __frame, 8, 12, function __$__8() {
/*   262 */         return getChannel().path(context.subscription).path("services/webspaces").path(context.site.webspace).path("sites").path(context.site.name).header("Content-Type", "application/xml").POST(function(req) {
/*   263 */           req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   264 */           req.write("<State>");
/*   265 */           req.write("Stopped");
/*   266 */           req.write("</State>");
/*   267 */           req.write("</Site>");
/*   269 */           req.end();
                    }, __cb(_, __frame, 17, 25, function ___(__0, __1) {
                      result = __1;
                      _();
                    }));
                  }));
                });
              });
/*   277 */   site.findConfig = function() {
/*   278 */     var scanFolder = process.cwd();
/*   279 */     while (true) {
/*   280 */       var azureFolder = path.join(scanFolder, ".azure");
/*   283 */       if ((path.existsSync(azureFolder) && path.statSync(azureFolder).isDirectory())) {
/*   287 */         var files = fs.readDirSync(azureFolder);
/*   288 */         files = files.filter(function(filename) {
/*   289 */           return endsWith(filename, ".config");
                    });
/*   293 */         if ((files.length == 1)) {
/*   294 */           return path.join(azureFolder, files[0]);
                    }
                  ;
                  }
                ;
/*   299 */       try {
/*   300 */         var parentFolder = path.dirname(scanFolder);
/*   301 */         if (((parentFolder === scanFolder) || !path.exists(scanFolder))) {
/*   302 */           return null;
                    }
                  ;
/*   305 */       } catch (err) {
/*   306 */         return null;
                  };
                };
              };
/*   311 */   site.initConfig = function(config) {
/*   312 */     var baseFolder = process.cwd();
/*   313 */     var azureFolder = path.join(baseFolder, ".azure");
/*   314 */     var baseName = crypto.randomBytes(16).toString("hex");
/*   315 */     var configPath = path.join(azureFolder, (baseName + ".config"));
/*   316 */     if (!path.exists(azureFolder)) {
/*   317 */       log.silly("Creating folder", azureFolder);
/*   318 */       fs.mkdirSync(azureFolder);
                }
              ;
/*   320 */     log.silly("Writing file", configPath);
/*   321 */     var configText = JSON.stringify(config);
/*   322 */     fs.writeFileSync(configPath, configText);
              };
/*   325 */   site.readConfig = function() {
/*   326 */     var configPath = site.findConfig();
/*   327 */     if ((configPath === undefined)) {
/*   328 */       log.verbose("No site .azure/*.config file locate at current directory");
/*   329 */       return null;
                }
              ;
/*   332 */     log.silly("Reading file", configPath);
/*   333 */     var configText = fs.readFileSync(configPath);
/*   334 */     var config = JSON.parse(configText);
/*   335 */     log.json("silly", "Site config", config);
/*   336 */     return config;
              };
/*   339 */   site.writeConfig = function(config) {
/*   340 */     var configPath = site.findConfig();
/*   341 */     if ((configPath === undefined)) {
/*   342 */       log.verbose("No site .azure/*.config file locate at current directory");
/*   343 */       return null;
                }
              ;
/*   345 */     log.silly("Writing file", configPath);
/*   346 */     var configText = JSON.stringify(config);
/*   347 */     fs.writeFileSync(configPath, configText);
              };
/*   355 */   site.doSitesPost = function(options, callback) {
/*   356 */     log.info("Creating a new web site");
/*   357 */     log.verbose("Subscription", options.subscription);
/*   358 */     log.verbose("Webspace", options.site.webspace);
/*   359 */     log.verbose("Site", options.site.name);
/*   361 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites/").header("Content-Type", "application/xml").POST(writers.Site.xml(options.site), function(err, result) {
/*   370 */       if (err) {
/*   371 */         logError("Failed to create site", err);
                  }
/*   372 */        else {
/*   373 */         log.info("Created website at ", clean(result).HostNames);
/*   374 */         log.verbose("Site", clean(result));
                  }
                ;
/*   376 */       callback(err, result);
                });
              };
/*   380 */   site.doRepositoryPost = function(options, callback) {
/*   381 */     log.info("Initializing repository");
/*   382 */     log.verbose("Subscription", options.subscription);
/*   383 */     log.verbose("Webspace", options.site.webspace);
/*   384 */     log.verbose("Site", options.site.name);
/*   386 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("repository").POST("", function(err, result) {
/*   396 */       if (err) {
/*   397 */         logError("Failed to initialize repository", err);
                  }
/*   398 */        else {
/*   399 */         log.info("Repository initialized");
                  }
                ;
/*   401 */       callback(err, result);
                });
              };
/*   405 */   site.doSpacesGet = function site_doSpacesGet__9(options, _) {
                var result;
                var __frame = {
                  name: "site_doSpacesGet__9",
                  line: 405
                };
                return __func(_, this, arguments, site_doSpacesGet__9, 1, __frame, function __$site_doSpacesGet__9() {
/*   406 */       log.verbose("Subscription", options.subscription);
/*   411 */       return getChannel().path(options.subscription).path("services/webspaces/").GET(__cb(_, __frame, 6, 21, function ___(__0, __1) {
                    result = __1;
/*   413 */         log.json("silly", result);
/*   414 */         return _(null, toArray(result.WebSpace));
                  }));
                });
              };
/*   417 */   site.doSitesGet = function site_doSitesGet__10(options, _) {
                var spaces, channel, result, sites;
                var __frame = {
                  name: "site_doSitesGet__10",
                  line: 417
                };
                return __func(_, this, arguments, site_doSitesGet__10, 1, __frame, function __$site_doSitesGet__10() {
/*   418 */       log.verbose("Subscription", options.subscription);
/*   420 */       return site.doSpacesGet(options, __cb(_, __frame, 3, 21, function ___(__0, __2) {
                    spaces = __2;
/*   424 */         channel = getChannel().path(options.subscription).path("services/webspaces");
/*   426 */         return async.map(spaces, function __1(webspace, _) {
                      var __frame = {
                        name: "__1",
                        line: 428
                      };
                      return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
/*   432 */             return channel.path(webspace.Name).path("sites/").GET(__cb(_, __frame, 4, 23, _));
                      });
                    }, __cb(_, __frame, 9, 21, function ___(__0, __3) {
                      result = __3;
/*   436 */           sites = [];
/*   437 */           result.forEach(function(item) {
/*   438 */             sites = sites.concat(toArray(item.Site));
                      });
/*   440 */           result = sites;
/*   442 */           log.json("verbose", sites);
/*   443 */           return _(null, sites);
                    }));
                  }));
                });
              };
/*   446 */   site.doSiteGet = function(options, callback) {
/*   447 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).GET(function(err, result) {
/*   455 */       if (err) {
/*   456 */         logError("Failed to get site info", err);
                  }
/*   457 */        else {
/*   458 */         log.verbose("Site", clean(result));
                  }
                ;
/*   460 */       callback(err, result);
                });
              };
/*   464 */   site.doSiteConfigGet = function(options, callback) {
/*   465 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("config").GET(function(err, result) {
/*   474 */       if (err) {
/*   475 */         logError("Failed to get site config info", err);
                  }
/*   476 */        else {
/*   477 */         log.verbose("SiteConfig", clean(result));
                  }
                ;
/*   479 */       callback(err, result);
                });
              };
/*   483 */   site.doRepositoryGet = function(options, callback) {
/*   484 */     getChannel().path(options.subscription).path("services/webspaces").path(options.site.webspace).path("sites").path(options.site.name).path("repository").GET(function(err, result) {
/*   493 */       if (err) {
/*   494 */         logError("Failed to get repository info", err);
                  }
/*   495 */        else {
/*   496 */         log.verbose("Repository", clean(result));
                  }
                ;
/*   498 */       callback(err, clean(result));
                });
              };
/*   506 */   var writers = {
/*   507 */     Site: {
/*   508 */       xml: function(site) {
/*   509 */         return function(req) {
/*   510 */           req.write("<Site xmlns=\"http://schemas.microsoft.com/windowsazure\">");
/*   511 */           req.write("<HostNames>");
/*   512 */           req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   513 */           req.write((site.name + ".antdir0.antares-test.windows-int.net"));
/*   514 */           req.write("</string>");
/*   516 */           if (site.hostname) {
/*   517 */             req.write("<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">");
/*   518 */             req.write(site.hostname);
/*   519 */             req.write("</string>");
                      }
                    ;
/*   521 */           req.write("</HostNames>");
/*   522 */           req.write("<Name>");
/*   523 */           req.write(site.name);
/*   524 */           req.write("</Name>");
/*   525 */           req.write("</Site>");
/*   527 */           req.end();
                    };
                  }
                }
              };
/*   533 */   function clean(source) {
/*   534 */     if ((typeof (source) === "string")) {
/*   535 */       return source;
                }
              ;
/*   538 */     var target = {
                };
/*   539 */     var hasString = false;
/*   540 */     var hasNonString = false;
/*   541 */     var stringValue = "";
/*   543 */     for (var prop in source) {
/*   544 */       if ((prop == "@")) {
/*   545 */         continue;
                  }
/*   546 */        else {
/*   547 */         if ((((prop === "#") || (prop === "string")) || (prop.substring((prop.length - 7)) === ":string"))) {
/*   548 */           hasString = true;
/*   549 */           stringValue = source[prop];
                    }
/*   550 */          else {
/*   551 */           hasNonString = true;
                    }
                  ;
/*   553 */         target[prop] = clean(source[prop]);
                  }
                ;
                };
/*   556 */     if ((hasString && !hasNonString)) {
/*   557 */       return stringValue;
                }
              ;
/*   559 */     return target;
              };
/*   562 */   function logEachData(title, data) {
/*   563 */     var cleaned = clean(data);
/*   564 */     for (var property in cleaned) {
/*   565 */       log.data(((title + " ") + property), cleaned[property]);
                };
              };
/*   569 */   function logError(message, err) {
/*   570 */     if ((arguments.length == 1)) {
/*   571 */       err = message;
/*   572 */       message = undefined;
                }
/*   573 */      else {
/*   574 */       log.error(message);
                }
              ;
/*   577 */     if (err) {
/*   578 */       if (err.message) {
/*   579 */         log.error(err.message);
/*   580 */         log.verbose("stack", err.stack);
/*   581 */         log.json("silly", err);
                  }
/*   583 */        else if (err.Message) {
/*   584 */         log.error(err.Message);
/*   585 */         log.json("verbose", clean(err));
                  }
/*   587 */        else {
/*   588 */         log.error(err);
                  }
                  
                ;
                }
              ;
              };
/*   593 */   function isArray(testObject) {
/*   594 */     return (((testObject && !(testObject.propertyIsEnumerable("length"))) && (typeof testObject === "object")) && (typeof testObject.length === "number"));
              };
/*   597 */   function toArray(testObject) {
/*   598 */     return (isArray(testObject) ? testObject : ((typeof testObject === "undefined") ? [] : [testObject,]));
              };
/*   601 */   function endsWith(str, suffix) {
/*   602 */     return (str.indexOf(suffix, (str.length - suffix.length)) !== -1);
              };
            };
