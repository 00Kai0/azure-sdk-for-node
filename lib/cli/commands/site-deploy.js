/*** Generated by streamline 0.2.2 - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__propagate=__rt.__propagate,__trap=__rt.__trap,__future=__rt.__future,__setEF=__rt.__setEF,__g=__rt.__g;
/*     1 */ var url = require("url");
/*     3 */ var querystring = require("querystring");
/*     4 */ var Channel = require("../channel");
/*     8 */ var child_process = require("child_process");
/*    10 */ exports.init = function(cli) {
/*    11 */   var log = cli.output;
/*    12 */   var site = cli.category("site");
/*    14 */   var deploy = site.command("push [name]").description("Publish the current directory as web site via git").option("-s, --subscription <id>", "use the subscription id").execute(function __1(name, options, _) {
                var context, siteConfig, repositoryData, repositoryUrl, result;
                var __frame = {
                  name: "__1",
                  line: 17
                };
                return __func(_, this, arguments, __1, 2, __frame, function __$__1() {
/*    21 */       context = {
/*    22 */         subscription: cli.category("account").lookupSubscriptionId(options.subscription),
/*    23 */         site: {
/*    24 */           name: name
                    }
                  };
/*    27 */       return site.lookupSiteName(context, __cb(_, __frame, 10, 12, function __$__1() {
/*    28 */         return site.lookupSiteWebSpace(context, __cb(_, __frame, 11, 12, function __$__1() {
/*    29 */           return site.doSiteConfigGet(context, __cb(_, __frame, 12, 29, function ___(__0, __1) {
                        siteConfig = __1;
/*    30 */             return site.doRepositoryGet(context, __cb(_, __frame, 13, 33, function ___(__0, __2) {
                          repositoryData = __2;
/*    31 */               repositoryUrl = url.parse(repositoryData);
/*    33 */               repositoryUrl.pathname = (context.site.name + ".git");
/*    34 */               repositoryUrl.auth = ((querystring.escape(("$" + context.site.name)) + ":") + querystring.escape(siteConfig.PublishingPassword));
/*    35 */               repositoryUrl.protocol = "http:";
/*    36 */               delete repositoryUrl.host;
/*    38 */               return exec((("git push " + url.format(repositoryUrl)) + " HEAD:master -f"), __cb(_, __frame, 21, 25, function ___(__0, __3) {
                            result = __3;
/*    39 */                 ((result.stdout + result.stderr)).split("\n").forEach(function(line) {
/*    40 */                   log.data(line.replace(/:\/\/[^@]*@/, "://...@"));
                            });
                            _();
                          }));
                        }));
                      }));
                    }));
                  }));
                });
              });
/*    44 */   function exec(cmd, cb) {
/*    45 */     child_process.exec(cmd, function(err, stdout, stderr) {
/*    46 */       cb(err, {
/*    47 */         stdout: stdout,
/*    48 */         stderr: stderr
                  });
                });
              };
            };
