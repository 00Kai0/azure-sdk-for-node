/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch,__forIn=__rt.__forIn; var url = require("url");















var util = require("util");
var child_process = require("child_process");

var GitHubApi = require("github");

exports.createClient = function(cli, name) {
  switch (name) {
  case "github": return new GithubClient(cli);
    break;
    default:
    throw new Error("Invalid client");
  };};



function LinkedRevisionControlClient(cli) {
  this.cli = cli;};


function GithubClient(cli) {
  GithubClient.super_.call(this, cli);

  this.client = new GitHubApi({ version: "3.0.0" });};


util.inherits(GithubClient, LinkedRevisionControlClient);

GithubClient.prototype.authenticate = function(username, password) {
  this.client.authenticate({
    type: "basic",
    username: username,
    password: password });};



GithubClient.prototype.init = function GithubClient_prototype_init__1(context, _) { var repositories, parsedRepositoryUri, pathParts, owner, name, localRepositories, __this = this; var __frame = { name: "GithubClient_prototype_init__1", line: 52 }; return __func(_, this, arguments, GithubClient_prototype_init__1, 1, __frame, function __$GithubClient_prototype_init__1() {
    return __this.getRepositories(context.username, __cb(_, __frame, 1, 21, function ___(__0, __1) { repositories = __1;

      return __this._getRemoteUri(context, __cb(_, __frame, 3, 22, function ___(__0, __2) { context.remoteUri = __2;

        console.log("este e que e");
        console.log(context);
        if (context.remoteUri) {
          parsedRepositoryUri = url.parse(context.remoteUri);
          pathParts = parsedRepositoryUri.pathname.split("/");
          if ((pathParts.length === 3)) {
            owner = pathParts[1];
            name = pathParts[2].split(".")[0];
            localRepositories = repositories.filter(function(repository) {
              return ((repository.name === name) && (repository.owner.login === owner)); });


            if ((localRepositories && (localRepositories.length > 0))) {
              context.repository = localRepositories[0]; } ; } ; } ; return (function __$GithubClient_prototype_init__1(__then) {




          if (!context.repository) {
            __this.cli.output.help("Choose a repository");
            return choose(repositories.map(function(repository) {
              return repository.full_name; }), __cb(_, __frame, 25, 38, function ___(__0, __3) { context.repository = repositories[__3]; __then(); }, true)); } else { __then(); } ; })(_); }, true)); }, true)); });};




GithubClient.prototype.deploy = function GithubClient_prototype_deploy__2(context, _) { var parsedRepositoryUri, hookUrl, gitUri, __this = this; var __frame = { name: "GithubClient_prototype_deploy__2", line: 83 }; return __func(_, this, arguments, GithubClient_prototype_deploy__2, 1, __frame, function __$GithubClient_prototype_deploy__2() {
    parsedRepositoryUri = url.parse(context.repositoryUri);
    parsedRepositoryUri.auth = context.repositoryAuth;
    parsedRepositoryUri.pathname = "/deploy";
    hookUrl = url.format(parsedRepositoryUri);

    return context.lvcClient.createOrUpdateHook(context.repository.owner.login, context.repository.name, hookUrl, __cb(_, __frame, 6, 2, function __$GithubClient_prototype_deploy__2() {




      console.log(context); return (function __$GithubClient_prototype_deploy__2(__then) {
        if (!context.remoteUri) {
          gitUri = context.repository.git_url;


          __this.cli.output.info((("Executing `git remote add azure " + gitUri) + "`"));
          return exec(("git remote add azure " + gitUri), __cb(_, __frame, 17, 4, __then, true)); } else { __then(); } ; })(_); }, true)); });};



GithubClient.prototype.getRepositories = function GithubClient_prototype_getRepositories__3(username, _) { var progress, userRepos, orgs, i, org, __this = this; var __frame = { name: "GithubClient_prototype_getRepositories__3", line: 104 }; return __func(_, this, arguments, GithubClient_prototype_getRepositories__3, 1, __frame, function __$GithubClient_prototype_getRepositories__3() {
    progress = __this.cli.progress("Retrieving repositories");
    userRepos = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$GithubClient_prototype_getRepositories__3() {


          return __this.client.repos.getFromUser({ user: username }, __cb(_, __frame, 5, 16, function ___(__0, __3) { userRepos = __3;
            return __this.client.orgs.getFromUser({ user: username }, __cb(_, __frame, 6, 15, function ___(__0, __4) { orgs = __4; return (function __$GithubClient_prototype_getRepositories__3(__then) {
                if (orgs) {
                  var __1 = __forIn(orgs); var __2 = 0; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$GithubClient_prototype_getRepositories__3() { __more = false; var __8 = (__2 < __1.length); if (__8) { i = __1[__2++]; return (function __$GithubClient_prototype_getRepositories__3(__then) {
                          if (orgs.hasOwnProperty(i)) {
                            org = orgs[i]; return (function __$GithubClient_prototype_getRepositories__3(__then) {
                              if (org.login) {
                                return __this.client.repos.getFromOrg({ org: org.login }, __cb(_, __frame, 12, 20, function ___(__0, __5) { repos = __5;

                                  userRepos = userRepos.concat(repos); __then(); }, true)); } else { __then(); } ; })(__then); } else { __then(); } ; })(function __$GithubClient_prototype_getRepositories__3() { while (__more) { __loop(); }; __more = true; }); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(__then); } else { __then(); } ; })(function __$GithubClient_prototype_getRepositories__3() { _(null, null, true); }); }, true)); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$GithubClient_prototype_getRepositories__3() {





            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$GithubClient_prototype_getRepositories__3() {


        return _(null, userRepos); }); }); });};


GithubClient.prototype.createOrUpdateHook = function GithubClient_prototype_createOrUpdateHook__4(username, repository, deployUri, _) { var hook, hooks, parsedDeployUri, existingHook, __this = this; var __frame = { name: "GithubClient_prototype_createOrUpdateHook__4", line: 130 }; return __func(_, this, arguments, GithubClient_prototype_createOrUpdateHook__4, 3, __frame, function __$GithubClient_prototype_createOrUpdateHook__4() {
    hook = {
      name: "web",
      user: username,
      repo: repository,
      active: true,
      events: ["push",],
      config: {
        url: deployUri,
        content_type: "json" } };



    return __this.getHooks(username, repository, __cb(_, __frame, 13, 14, function ___(__0, __1) { hooks = __1;
      parsedDeployUri = url.parse(deployUri);







      existingHook = hooks.filter(function(hook) { if (hook.config) { return ((hook.name === "web") && (url.parse(hook.config.url).hostname === parsedDeployUri.hostname)); } ; return false; })[0]; return (function __$GithubClient_prototype_createOrUpdateHook__4(__then) {

        if (existingHook) { return (function __$GithubClient_prototype_createOrUpdateHook__4(__then) {

            if ((existingHook.config.url !== hook.config.url)) {
              existingHook.config.url = hook.config.url;
              hook = existingHook;
              return __this.updateHook(hook, __cb(_, __frame, 29, 6, __then, true)); } else {

              __this.cli.output.info("Link already established"); __then(); } ; })(__then); } else {


          return __this.createHook(hook, __cb(_, __frame, 34, 4, __then, true)); } ; })(_); }, true)); });};



GithubClient.prototype.createHook = function GithubClient_prototype_createHook__5(hook, _) { var progress, __this = this; var __frame = { name: "GithubClient_prototype_createHook__5", line: 168 }; return __func(_, this, arguments, GithubClient_prototype_createHook__5, 1, __frame, function __$GithubClient_prototype_createHook__5() {
    progress = __this.cli.progress("Creating new hook"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$GithubClient_prototype_createHook__5() {


          return __this.client.repos.createHook(hook, __cb(_, __frame, 4, 4, function __$GithubClient_prototype_createHook__5() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$GithubClient_prototype_createHook__5() {

            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); });};



GithubClient.prototype.updateHook = function GithubClient_prototype_updateHook__6(hook, _) { var progress, __this = this; var __frame = { name: "GithubClient_prototype_updateHook__6", line: 178 }; return __func(_, this, arguments, GithubClient_prototype_updateHook__6, 1, __frame, function __$GithubClient_prototype_updateHook__6() {
    progress = __this.cli.progress("Updating hook"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$GithubClient_prototype_updateHook__6() {


          return __this.client.repos.updateHook(hook, __cb(_, __frame, 4, 4, function __$GithubClient_prototype_updateHook__6() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$GithubClient_prototype_updateHook__6() {

            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); });};



GithubClient.prototype.getHooks = function GithubClient_prototype_getHooks__7(username, repository, _) { var progress, __this = this; var __frame = { name: "GithubClient_prototype_getHooks__7", line: 188 }; return __func(_, this, arguments, GithubClient_prototype_getHooks__7, 2, __frame, function __$GithubClient_prototype_getHooks__7() {
    progress = __this.cli.progress("Retrieving website hooks"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$GithubClient_prototype_getHooks__7() {


          return __this.client.repos.getHooks({
            user: username,
            repo: repository }, __cb(_, __frame, 4, 11, _, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$GithubClient_prototype_getHooks__7() {


            progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, _); }); });};



GithubClient.prototype._getRemoteUri = function(context, callback) {
  var progress = this.cli.progress("Retrieving local git repositories");
  var originUri = null;

  function getRemote(name, cb) {
    exec("git remote -v", function(err, remotes) {
      var origin = ((remotes.stdout + remotes.stderr)).split("\n").filter(function(item) {
        return item.split("	").some(function(it) {
          return (it === name); }); });



      if ((origin && (origin.length > 0))) {
        cb(undefined, origin[0].split("	")[1].split(" ")[0]); } ;


      cb(undefined, null); }); };



  getRemote("azure", function(err, originUri) {
    if (originUri) {
      console.log(("calling back with: " + originUri));
      callback(err, originUri); }
     else {
      getRemote("origin", callback); } ; });};




function exec(cmd, cb) {
  child_process.exec(cmd, function(err, stdout, stderr) {
    cb(err, {
      stdout: stdout,
      stderr: stderr }); });};