/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Defines the url redirect action for the delivery rule.
 *
 * @extends models['DeliveryRuleAction']
 */
class UrlRedirectAction extends models['DeliveryRuleAction'] {
  /**
   * Create a UrlRedirectAction.
   * @property {object} parameters Defines the parameters for the action.
   * @property {string} [parameters.redirectType] The redirect type the rule
   * will use when redirecting traffic. Possible values include: 'Moved',
   * 'Found', 'TemporaryRedirect', 'PermanentRedirect'
   * @property {string} [parameters.destinationProtocol] Protocol to use for
   * the redirect. The default value is MatchRequest. Possible values include:
   * 'MatchRequest', 'Http', 'Https'
   * @property {string} [parameters.customPath] The full path to redirect. Path
   * cannot be empty and must start with /. Leave empty to use the incoming
   * path as destination path.
   * @property {string} [parameters.customHostname] Host to redirect. Leave
   * empty to use use the incoming host as the destination host.
   * @property {string} [parameters.customQueryString] The set of query strings
   * to be placed in the redirect URL. Setting this value would replace any
   * existing query string; leave empty to preserve the incoming query string.
   * Query string must be in <key>=<value> format. ? and & will be added
   * automatically so do not include them.
   * @property {string} [parameters.customFragment] Fragment to add to the
   * redirect URL. Fragment is the part of the URL that comes after #. Do not
   * include the #.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of UrlRedirectAction
   *
   * @returns {object} metadata of UrlRedirectAction
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'UrlRedirect',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'name',
          clientName: 'name'
        },
        uberParent: 'DeliveryRuleAction',
        className: 'UrlRedirectAction',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          parameters: {
            required: true,
            serializedName: 'parameters',
            defaultValue: {},
            type: {
              name: 'Composite',
              className: 'UrlRedirectActionParameters'
            }
          }
        }
      }
    };
  }
}

module.exports = UrlRedirectAction;
