/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * UsageMetrics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorClient.
 */
export interface UsageMetrics {

    /**
     * The List operation lists the usage metrics for the resource.<br>**WARNING**:
     * This operation will be *deprecated* in the next release.
     *
     * @param {string} resourceUri The identifier of the resource.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply on the
     * operation.<br>**WARNING**: $filter not documented since the operation will
     * be deprecated in the next release.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceUri: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsageMetricCollection>): void;
    list(resourceUri: string, callback: ServiceCallback<models.UsageMetricCollection>): void;
}

/**
 * @class
 * EventCategories
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorClient.
 */
export interface EventCategories {

    /**
     * Get the list of available event categories supported in the Activity Logs
     * Service.<br>The current list includes the following: Aministrative,
     * Security, ServiceHealth, Alert, Recommendation, Policy.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventCategoryCollection>): void;
    list(callback: ServiceCallback<models.EventCategoryCollection>): void;
}

/**
 * @class
 * ActivityLogs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorClient.
 */
export interface ActivityLogs {

    /**
     * Provides the list of records from the activity logs.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] Reduces the set of data collected.<br>The
     * **$filter** argument is very restricted and allows only the following
     * patterns.<br>- *List events for a resource group*: $filter=eventTimestamp ge
     * '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
     * '2014-07-20T04:36:37.6407898Z' and resourceGroupName eq
     * 'resourceGroupName'.<br>- *List events for resource*: $filter=eventTimestamp
     * ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
     * '2014-07-20T04:36:37.6407898Z' and resourceUri eq 'resourceURI'.<br>- *List
     * events for a subscription in a time range*: $filter=eventTimestamp ge
     * '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
     * '2014-07-20T04:36:37.6407898Z'.<br>- *List events for a resource provider*:
     * $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
     * le '2014-07-20T04:36:37.6407898Z' and resourceProvider eq
     * 'resourceProviderName'.<br>- *List events for a correlation Id*:
     * $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
     * le '2014-07-20T04:36:37.6407898Z' and correlationId eq
     * 'correlationID'.<br><br>**NOTE**: No other syntax is allowed.
     * 
     * @param {string} [options.select] Used to fetch events with only the given
     * properties.<br>The **$select** argument is a comma separated list of
     * property names to be returned. Possible values are: *authorization*,
     * *claims*, *correlationId*, *description*, *eventDataId*, *eventName*,
     * *eventTimestamp*, *httpRequest*, *level*, *operationId*, *operationName*,
     * *properties*, *resourceGroupName*, *resourceProviderName*, *resourceId*,
     * *status*, *submissionTimestamp*, *subStatus*, *subscriptionId*
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { filter? : string, select? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventDataCollection>): void;
    list(callback: ServiceCallback<models.EventDataCollection>): void;

    /**
     * Provides the list of records from the activity logs.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventDataCollection>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.EventDataCollection>): void;
}

/**
 * @class
 * TenantActivityLogs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorClient.
 */
export interface TenantActivityLogs {

    /**
     * Gets the Activity Logs for the Tenant.<br>Everything that is applicable to
     * the API to get the Activity Logs for the subscription is applicable to this
     * API (the parameters, $filter, etc.).<br>One thing to point out here is that
     * this API does *not* retrieve the logs at the individual subscription of the
     * tenant but only surfaces the logs that were generated at the tenant level.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] Reduces the set of data collected. <br>The
     * **$filter** is very restricted and allows only the following patterns.<br>-
     * List events for a resource group: $filter=eventTimestamp ge '<Start Time>'
     * and eventTimestamp le '<End Time>' and eventChannels eq 'Admin, Operation'
     * and resourceGroupName eq '<ResourceGroupName>'.<br>- List events for
     * resource: $filter=eventTimestamp ge '<Start Time>' and eventTimestamp le
     * '<End Time>' and eventChannels eq 'Admin, Operation' and resourceUri eq
     * '<ResourceURI>'.<br>- List events for a subscription: $filter=eventTimestamp
     * ge '<Start Time>' and eventTimestamp le '<End Time>' and eventChannels eq
     * 'Admin, Operation'.<br>- List evetns for a resource provider:
     * $filter=eventTimestamp ge '<Start Time>' and eventTimestamp le '<End Time>'
     * and eventChannels eq 'Admin, Operation' and resourceProvider eq
     * '<ResourceProviderName>'.<br>- List events for a correlation Id:
     * api-version=2014-04-01&$filter=eventTimestamp ge
     * '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
     * '2014-07-20T04:36:37.6407898Z' and eventChannels eq 'Admin, Operation' and
     * correlationId eq '<CorrelationID>'.<br>**NOTE**: No other syntax is allowed.
     * 
     * @param {string} [options.select] Used to fetch events with only the given
     * properties.<br>The **$select** argument is a comma separated list of
     * property names to be returned. Possible values are: *authorization*,
     * *claims*, *correlationId*, *description*, *eventDataId*, *eventName*,
     * *eventTimestamp*, *httpRequest*, *level*, *operationId*, *operationName*,
     * *properties*, *resourceGroupName*, *resourceProviderName*, *resourceId*,
     * *status*, *submissionTimestamp*, *subStatus*, *subscriptionId*
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { filter? : string, select? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventDataCollection>): void;
    list(callback: ServiceCallback<models.EventDataCollection>): void;

    /**
     * Gets the Activity Logs for the Tenant.<br>Everything that is applicable to
     * the API to get the Activity Logs for the subscription is applicable to this
     * API (the parameters, $filter, etc.).<br>One thing to point out here is that
     * this API does *not* retrieve the logs at the individual subscription of the
     * tenant but only surfaces the logs that were generated at the tenant level.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventDataCollection>): void;
    listNext(nextPageLink: string, callback: ServiceCallback<models.EventDataCollection>): void;
}

/**
 * @class
 * MetricDefinitions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorClient.
 */
export interface MetricDefinitions {

    /**
     * Lists the metric definitions for the resource.
     *
     * @param {string} resourceUri The identifier of the resource.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] Reduces the set of data collected by
     * retrieving particular metric definitions from all the definitions available
     * for the resource.<br>For example, to get just the definition for the 'CPU
     * percentage' counter: $filter=name.value eq '\Processor(_Total)\% Processor
     * Time'.<br>Multiple metrics can be retrieved by joining together *'name eq
     * <value>'* clauses separated by *or* logical operators.<br>**NOTE**: No other
     * syntax is allowed.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceUri: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionCollection>): void;
    list(resourceUri: string, callback: ServiceCallback<models.MetricDefinitionCollection>): void;
}

/**
 * @class
 * Metrics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorClient.
 */
export interface Metrics {

    /**
     * Lists the metric values for a resource.
     *
     * @param {string} resourceUri The identifier of the resource.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] Reduces the set of data collected.<br>The
     * filter is optional. If present it must contain a list of metric names to
     * retrieve of the form: *(name.value eq 'metricName' [or name.value eq
     * 'metricName' or ...])*. Optionally, the filter can contain conditions for
     * the following attributes *aggregationType*, *startTime*, *endTime*, and
     * *timeGrain* of the form *attributeName operator value*. Where operator is
     * one of *ne*, *eq*, *gt*, *lt*.<br>Several conditions can be combined with
     * parentheses and logical operators, e.g: *and*, *or*.<br>Some example filter
     * expressions are:<br>- $filter=(name.value eq 'RunsSucceeded') and
     * aggregationType eq 'Total' and startTime eq 2016-02-20 and endTime eq
     * 2016-02-21 and timeGrain eq duration'PT1M',<br>- $filter=(name.value eq
     * 'RunsSucceeded') and (aggregationType eq 'Total' or aggregationType eq
     * 'Average') and startTime eq 2016-02-20 and endTime eq 2016-02-21 and
     * timeGrain eq duration'PT1H',<br>- $filter=(name.value eq 'ActionsCompleted'
     * or name.value eq 'RunsSucceeded') and (aggregationType eq 'Total' or
     * aggregationType eq 'Average') and startTime eq 2016-02-20 and endTime eq
     * 2016-02-21 and timeGrain eq duration'PT1M'.<br><br>**NOTE**: When a metrics
     * query comes in with multiple metrics, but with no aggregation types defined,
     * the service will pick the Primary aggregation type of the first metrics to
     * be used as the default aggregation type for all the metrics.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(resourceUri: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricCollection>): void;
    list(resourceUri: string, callback: ServiceCallback<models.MetricCollection>): void;
}
