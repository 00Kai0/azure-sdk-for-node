/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Update Body schema to represent context to be updated
 *
 */
class UpdateContextDTO {
  /**
   * Create a UpdateContextDTO.
   * @property {array} [promptsToDelete] List of prompts associated with qna to
   * be deleted
   * @property {array} [promptsToAdd] List of prompts to be added to the qna.
   * @property {boolean} [isContextOnly] To mark if a prompt is relevant only
   * with a previous question or not.
   * true - Do not include this QnA as search result for queries without
   * context
   * false - ignores context and includes this QnA in search result
   */
  constructor() {
  }

  /**
   * Defines the metadata of UpdateContextDTO
   *
   * @returns {object} metadata of UpdateContextDTO
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'UpdateContextDTO',
      type: {
        name: 'Composite',
        className: 'UpdateContextDTO',
        modelProperties: {
          promptsToDelete: {
            required: false,
            serializedName: 'promptsToDelete',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NumberElementType',
                  type: {
                    name: 'Number'
                  }
              }
            }
          },
          promptsToAdd: {
            required: false,
            serializedName: 'promptsToAdd',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'PromptDTOElementType',
                  type: {
                    name: 'Composite',
                    className: 'PromptDTO'
                  }
              }
            }
          },
          isContextOnly: {
            required: false,
            serializedName: 'isContextOnly',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = UpdateContextDTO;
