/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Criterion for dynamic threshold.
 *
 * @extends models['MultiMetricCriteria']
 */
class DynamicMetricCriteria extends models['MultiMetricCriteria'] {
  /**
   * Create a DynamicMetricCriteria.
   * @property {object} operator The operator used to compare the metric value
   * against the threshold.
   * @property {object} alertSensitivity The extent of deviation required to
   * trigger an alert. This will affect how tight the threshold is to the
   * metric series pattern.
   * @property {object} failingPeriods The minimum number of violations
   * required within the selected lookback time window required to raise an
   * alert.
   * @property {number} [failingPeriods.numberOfEvaluationPeriods] The number
   * of aggregated lookback points. The lookback time window is calculated
   * based on the aggregation granularity (windowSize) and the selected number
   * of aggregated points.
   * @property {number} [failingPeriods.minFailingPeriodsToAlert] The number of
   * violations to trigger an alert. Should be smaller or equal to
   * numberOfEvaluationPeriods.
   * @property {date} [ignoreDataBefore] Use this option to set the date from
   * which to start learning the metric historical data and calculate the
   * dynamic thresholds (in ISO8601 format)
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of DynamicMetricCriteria
   *
   * @returns {object} metadata of DynamicMetricCriteria
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DynamicThresholdCriterion',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'criterionType',
          clientName: 'criterionType'
        },
        uberParent: 'MultiMetricCriteria',
        className: 'DynamicMetricCriteria',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          metricName: {
            required: true,
            serializedName: 'metricName',
            type: {
              name: 'String'
            }
          },
          metricNamespace: {
            required: false,
            serializedName: 'metricNamespace',
            type: {
              name: 'String'
            }
          },
          timeAggregation: {
            required: true,
            serializedName: 'timeAggregation',
            type: {
              name: 'Object'
            }
          },
          dimensions: {
            required: false,
            serializedName: 'dimensions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MetricDimensionElementType',
                  type: {
                    name: 'Composite',
                    className: 'MetricDimension'
                  }
              }
            }
          },
          criterionType: {
            required: true,
            serializedName: 'criterionType',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          operator: {
            required: true,
            serializedName: 'operator',
            type: {
              name: 'Object'
            }
          },
          alertSensitivity: {
            required: true,
            serializedName: 'alertSensitivity',
            type: {
              name: 'Object'
            }
          },
          failingPeriods: {
            required: true,
            serializedName: 'failingPeriods',
            type: {
              name: 'Composite',
              className: 'DynamicThresholdFailingPeriods'
            }
          },
          ignoreDataBefore: {
            required: false,
            serializedName: 'ignoreDataBefore',
            type: {
              name: 'DateTime'
            }
          }
        }
      }
    };
  }
}

module.exports = DynamicMetricCriteria;
