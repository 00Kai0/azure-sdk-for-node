/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ServiceDiagnosticSettingsResourcePatch class.
 * @constructor
 * Service diagnostic setting resource for patch operations
 *
 * @member {object} [tags] Resource tags
 * 
 * @member {string} [storageAccountId] The resource ID of the storage account
 * to which you would like to send Diagnostic Logs.
 * 
 * @member {string} [serviceBusRuleId] The service bus rule ID of the service
 * bus namespace in which you would like to have Event Hubs created for
 * streaming Diagnostic Logs. The rule ID is of the format: '{service bus
 * resource ID}/authorizationrules/{key name}'.
 * 
 * @member {string} [eventHubAuthorizationRuleId] The resource Id for the event
 * hub authorization rule.
 * 
 * @member {array} [metrics] the list of metric settings.
 * 
 * @member {array} [logs] the list of logs settings.
 * 
 * @member {string} [workspaceId] The workspace ID (resource ID of a Log
 * Analytics workspace) for a Log Analytics workspace to which you would like
 * to send Diagnostic Logs. Example:
 * /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
 * 
 */
function ServiceDiagnosticSettingsResourcePatch() {
}

/**
 * Defines the metadata of ServiceDiagnosticSettingsResourcePatch
 *
 * @returns {object} metadata of ServiceDiagnosticSettingsResourcePatch
 *
 */
ServiceDiagnosticSettingsResourcePatch.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ServiceDiagnosticSettingsResourcePatch',
    type: {
      name: 'Composite',
      className: 'ServiceDiagnosticSettingsResourcePatch',
      modelProperties: {
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        storageAccountId: {
          required: false,
          serializedName: 'properties.storageAccountId',
          type: {
            name: 'String'
          }
        },
        serviceBusRuleId: {
          required: false,
          serializedName: 'properties.serviceBusRuleId',
          type: {
            name: 'String'
          }
        },
        eventHubAuthorizationRuleId: {
          required: false,
          serializedName: 'properties.eventHubAuthorizationRuleId',
          type: {
            name: 'String'
          }
        },
        metrics: {
          required: false,
          serializedName: 'properties.metrics',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'MetricSettingsElementType',
                type: {
                  name: 'Composite',
                  className: 'MetricSettings'
                }
            }
          }
        },
        logs: {
          required: false,
          serializedName: 'properties.logs',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'LogSettingsElementType',
                type: {
                  name: 'Composite',
                  className: 'LogSettings'
                }
            }
          }
        },
        workspaceId: {
          required: false,
          serializedName: 'properties.workspaceId',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = ServiceDiagnosticSettingsResourcePatch;
