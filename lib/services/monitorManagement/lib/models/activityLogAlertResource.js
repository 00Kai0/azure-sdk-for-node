/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ActivityLogAlertResource class.
 * @constructor
 * An activity log alert resource.
 *
 * @member {array} scopes A list of resourceIds that will be used as prefixes.
 * The alert will only apply to activityLogs with resourceIds that fall under
 * one of these prefixes. This list must include at least one item.
 * 
 * @member {boolean} [enabled] Indicates whether this activity log alert is
 * enabled. If an activity log alert is not enabled, then none of its actions
 * will be activated. Default value: true .
 * 
 * @member {object} condition The conditon that will cause this alert to
 * activate.
 * 
 * @member {array} [condition.allOf] The list of activity log alert conditions.
 * 
 * @member {object} actions The actions that will activate when the condition
 * is met.
 * 
 * @member {array} [actions.actionGroups] The list of activity log alerts.
 * 
 * @member {string} [description] A description of this activity log alert.
 * 
 */
function ActivityLogAlertResource() {
  ActivityLogAlertResource['super_'].call(this);
}

util.inherits(ActivityLogAlertResource, models['Resource']);

/**
 * Defines the metadata of ActivityLogAlertResource
 *
 * @returns {object} metadata of ActivityLogAlertResource
 *
 */
ActivityLogAlertResource.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ActivityLogAlertResource',
    type: {
      name: 'Composite',
      className: 'ActivityLogAlertResource',
      modelProperties: {
        id: {
          required: false,
          readOnly: true,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          readOnly: true,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          readOnly: true,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        scopes: {
          required: true,
          serializedName: 'properties.scopes',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        enabled: {
          required: false,
          serializedName: 'properties.enabled',
          defaultValue: true,
          type: {
            name: 'Boolean'
          }
        },
        condition: {
          required: true,
          serializedName: 'properties.condition',
          type: {
            name: 'Composite',
            className: 'ActivityLogAlertAllOfCondition'
          }
        },
        actions: {
          required: true,
          serializedName: 'properties.actions',
          type: {
            name: 'Composite',
            className: 'ActivityLogAlertActionList'
          }
        },
        description: {
          required: false,
          serializedName: 'properties.description',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = ActivityLogAlertResource;
