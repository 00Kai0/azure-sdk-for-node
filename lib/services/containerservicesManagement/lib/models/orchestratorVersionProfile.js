/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The profile of an orchestrator and its available versions.
 *
 */
class OrchestratorVersionProfile {
  /**
   * Create a OrchestratorVersionProfile.
   * @property {string} orchestratorType Orchestrator type.
   * @property {string} orchestratorVersion Orchestrator version (major, minor,
   * patch).
   * @property {boolean} [default] Installed by default if version is not
   * specified.
   * @property {boolean} [isPreview] Whether Kubernetes version is currently in
   * preview.
   * @property {array} [upgrades] The list of available upgrade versions.
   */
  constructor() {
  }

  /**
   * Defines the metadata of OrchestratorVersionProfile
   *
   * @returns {object} metadata of OrchestratorVersionProfile
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'OrchestratorVersionProfile',
      type: {
        name: 'Composite',
        className: 'OrchestratorVersionProfile',
        modelProperties: {
          orchestratorType: {
            required: true,
            serializedName: 'orchestratorType',
            type: {
              name: 'String'
            }
          },
          orchestratorVersion: {
            required: true,
            serializedName: 'orchestratorVersion',
            type: {
              name: 'String'
            }
          },
          default: {
            required: false,
            serializedName: 'default',
            type: {
              name: 'Boolean'
            }
          },
          isPreview: {
            required: false,
            serializedName: 'isPreview',
            type: {
              name: 'Boolean'
            }
          },
          upgrades: {
            required: false,
            serializedName: 'upgrades',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'OrchestratorProfileElementType',
                  type: {
                    name: 'Composite',
                    className: 'OrchestratorProfile'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = OrchestratorVersionProfile;
