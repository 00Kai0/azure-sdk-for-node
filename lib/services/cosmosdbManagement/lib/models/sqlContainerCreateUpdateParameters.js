/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Parameters to create and update Cosmos DB container.
 *
 */
class SqlContainerCreateUpdateParameters {
  /**
   * Create a SqlContainerCreateUpdateParameters.
   * @property {object} resource The standard JSON format of a container
   * @property {string} [resource.id] Name of the Cosmos DB SQL container
   * @property {object} [resource.indexingPolicy] The configuration of the
   * indexing policy. By default, the indexing is automatic for all document
   * paths within the container
   * @property {boolean} [resource.indexingPolicy.automatic] Indicates if the
   * indexing policy is automatic
   * @property {string} [resource.indexingPolicy.indexingMode] Indicates the
   * indexing mode. Possible values include: 'Consistent', 'Lazy', 'None'
   * @property {array} [resource.indexingPolicy.includedPaths] List of paths to
   * include in the indexing
   * @property {array} [resource.indexingPolicy.excludedPaths] List of paths to
   * exclude from indexing
   * @property {object} [resource.partitionKey] The configuration of the
   * partition key to be used for partitioning data into multiple partitions
   * @property {array} [resource.partitionKey.paths] List of paths using which
   * data within the container can be partitioned
   * @property {string} [resource.partitionKey.kind] Indicates the kind of
   * algorithm used for partitioning. Possible values include: 'Hash', 'Range'
   * @property {number} [resource.defaultTtl] Default time to live
   * @property {object} [resource.uniqueKeyPolicy] The unique key policy
   * configuration for specifying uniqueness constraints on documents in the
   * collection in the Azure Cosmos DB service.
   * @property {array} [resource.uniqueKeyPolicy.uniqueKeys] List of unique
   * keys on that enforces uniqueness constraint on documents in the collection
   * in the Azure Cosmos DB service.
   * @property {object} [resource.conflictResolutionPolicy] The conflict
   * resolution policy for the container.
   * @property {string} [resource.conflictResolutionPolicy.mode] Indicates the
   * conflict resolution mode. Possible values include: 'LastWriterWins',
   * 'Custom'
   * @property {string}
   * [resource.conflictResolutionPolicy.conflictResolutionPath] The conflict
   * resolution path in the case of LastWriterWins mode.
   * @property {string}
   * [resource.conflictResolutionPolicy.conflictResolutionProcedure] The
   * procedure to resolve conflicts in the case of custom mode.
   * @property {object} options A key-value pair of options to be applied for
   * the request. This corresponds to the headers sent with the request.
   */
  constructor() {
  }

  /**
   * Defines the metadata of SqlContainerCreateUpdateParameters
   *
   * @returns {object} metadata of SqlContainerCreateUpdateParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SqlContainerCreateUpdateParameters',
      type: {
        name: 'Composite',
        className: 'SqlContainerCreateUpdateParameters',
        modelProperties: {
          resource: {
            required: true,
            serializedName: 'properties.resource',
            type: {
              name: 'Composite',
              className: 'SqlContainerResource'
            }
          },
          options: {
            required: true,
            serializedName: 'properties.options',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = SqlContainerCreateUpdateParameters;
