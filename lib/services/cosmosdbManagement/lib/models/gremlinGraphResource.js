/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Cosmos DB Gremlin graph resource object
 *
 */
class GremlinGraphResource {
  /**
   * Create a GremlinGraphResource.
   * @property {string} id Name of the Cosmos DB Gremlin graph
   * @property {object} [indexingPolicy] The configuration of the indexing
   * policy. By default, the indexing is automatic for all document paths
   * within the graph
   * @property {boolean} [indexingPolicy.automatic] Indicates if the indexing
   * policy is automatic
   * @property {string} [indexingPolicy.indexingMode] Indicates the indexing
   * mode. Possible values include: 'Consistent', 'Lazy', 'None'
   * @property {array} [indexingPolicy.includedPaths] List of paths to include
   * in the indexing
   * @property {array} [indexingPolicy.excludedPaths] List of paths to exclude
   * from indexing
   * @property {object} [partitionKey] The configuration of the partition key
   * to be used for partitioning data into multiple partitions
   * @property {array} [partitionKey.paths] List of paths using which data
   * within the container can be partitioned
   * @property {string} [partitionKey.kind] Indicates the kind of algorithm
   * used for partitioning. Possible values include: 'Hash', 'Range'
   * @property {number} [defaultTtl] Default time to live
   * @property {object} [uniqueKeyPolicy] The unique key policy configuration
   * for specifying uniqueness constraints on documents in the collection in
   * the Azure Cosmos DB service.
   * @property {array} [uniqueKeyPolicy.uniqueKeys] List of unique keys on that
   * enforces uniqueness constraint on documents in the collection in the Azure
   * Cosmos DB service.
   * @property {object} [conflictResolutionPolicy] The conflict resolution
   * policy for the graph.
   * @property {string} [conflictResolutionPolicy.mode] Indicates the conflict
   * resolution mode. Possible values include: 'LastWriterWins', 'Custom'
   * @property {string} [conflictResolutionPolicy.conflictResolutionPath] The
   * conflict resolution path in the case of LastWriterWins mode.
   * @property {string} [conflictResolutionPolicy.conflictResolutionProcedure]
   * The procedure to resolve conflicts in the case of custom mode.
   */
  constructor() {
  }

  /**
   * Defines the metadata of GremlinGraphResource
   *
   * @returns {object} metadata of GremlinGraphResource
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'GremlinGraphResource',
      type: {
        name: 'Composite',
        className: 'GremlinGraphResource',
        modelProperties: {
          id: {
            required: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          indexingPolicy: {
            required: false,
            serializedName: 'indexingPolicy',
            type: {
              name: 'Composite',
              className: 'IndexingPolicy'
            }
          },
          partitionKey: {
            required: false,
            serializedName: 'partitionKey',
            type: {
              name: 'Composite',
              className: 'ContainerPartitionKey'
            }
          },
          defaultTtl: {
            required: false,
            serializedName: 'defaultTtl',
            type: {
              name: 'Number'
            }
          },
          uniqueKeyPolicy: {
            required: false,
            serializedName: 'uniqueKeyPolicy',
            type: {
              name: 'Composite',
              className: 'UniqueKeyPolicy'
            }
          },
          conflictResolutionPolicy: {
            required: false,
            serializedName: 'conflictResolutionPolicy',
            type: {
              name: 'Composite',
              className: 'ConflictResolutionPolicy'
            }
          }
        }
      }
    };
  }
}

module.exports = GremlinGraphResource;
