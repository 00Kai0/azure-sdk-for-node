/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the DataLakeStoreAccountProperties class.
 * @constructor
 * Data Lake Store account properties information
 * @member {string} [provisioningState] Gets the status of the Data Lake Store
 * account while being provisioned. Possible values for this property
 * include: 'Failed', 'Creating', 'Running', 'Succeeded', 'Patching',
 * 'Suspending', 'Resuming', 'Deleting', 'Deleted'.
 * 
 * @member {string} [state] Gets the status of the Data Lake Account after
 * provisioning has completed. Possible values for this property include:
 * 'active', 'suspended'.
 * 
 * @member {date} [creationTime] Gets or sets the account creation time.
 * 
 * @member {date} [lastModifiedTime] Gets or sets the account last modified
 * time.
 * 
 * @member {string} [endpoint] Gets or sets the gateway host.
 * 
 * @member {string} [defaultGroup] Gets or sets the default owner group for
 * all new folders and files created in the DataLake.
 * 
 */
function DataLakeStoreAccountProperties(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
    if (parameters.state !== undefined) {
      this.state = parameters.state;
    }
    if (parameters.creationTime !== undefined) {
      this.creationTime = parameters.creationTime;
    }
    if (parameters.lastModifiedTime !== undefined) {
      this.lastModifiedTime = parameters.lastModifiedTime;
    }
    if (parameters.endpoint !== undefined) {
      this.endpoint = parameters.endpoint;
    }
    if (parameters.defaultGroup !== undefined) {
      this.defaultGroup = parameters.defaultGroup;
    }
  }    
}


/**
 * Validate the payload against the DataLakeStoreAccountProperties schema
 *
 * @param {JSON} payload
 *
 */
DataLakeStoreAccountProperties.prototype.serialize = function () {
  var payload = {};
  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    var allowedValues = [ 'Failed', 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted' ];
    var thisprovisioningState = this['provisioningState'];
    if (!allowedValues.some( function(item) { return item === thisprovisioningState; })) {
      throw new Error(this['provisioningState'] + ' is not a valid value. The valid values are: ' + allowedValues);
    }
    payload['provisioningState'] = this['provisioningState'];
  }

  if (this['state'] !== null && this['state'] !== undefined) {
    var allowedValues1 = [ 'active', 'suspended' ];
    var thisstate = this['state'];
    if (!allowedValues1.some( function(item) { return item === thisstate; })) {
      throw new Error(this['state'] + ' is not a valid value. The valid values are: ' + allowedValues1);
    }
    payload['state'] = this['state'];
  }

  if (this['creationTime']) {
    if (!(this['creationTime'] instanceof Date || typeof this['creationTime'].valueOf() === 'string' && !isNaN(Date.parse(this['creationTime'])))) {
      throw new Error('this[\'creationTime\'] must be of type date.');
    }
    payload['creationTime'] = (this['creationTime'] instanceof Date) ? this['creationTime'].toISOString() : this['creationTime'];
  }

  if (this['lastModifiedTime']) {
    if (!(this['lastModifiedTime'] instanceof Date || typeof this['lastModifiedTime'].valueOf() === 'string' && !isNaN(Date.parse(this['lastModifiedTime'])))) {
      throw new Error('this[\'lastModifiedTime\'] must be of type date.');
    }
    payload['lastModifiedTime'] = (this['lastModifiedTime'] instanceof Date) ? this['lastModifiedTime'].toISOString() : this['lastModifiedTime'];
  }

  if (this['endpoint'] !== null && this['endpoint'] !== undefined) {
    if (typeof this['endpoint'].valueOf() !== 'string') {
      throw new Error('this[\'endpoint\'] must be of type string.');
    }
    payload['endpoint'] = this['endpoint'];
  }

  if (this['defaultGroup'] !== null && this['defaultGroup'] !== undefined) {
    if (typeof this['defaultGroup'].valueOf() !== 'string') {
      throw new Error('this[\'defaultGroup\'] must be of type string.');
    }
    payload['defaultGroup'] = this['defaultGroup'];
  }

  return payload;
};

/**
 * Deserialize the instance to DataLakeStoreAccountProperties schema
 *
 * @param {JSON} instance
 *
 */
DataLakeStoreAccountProperties.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['provisioningState'] !== undefined) {
      this['provisioningState'] = instance['provisioningState'];
    }

    if (instance['state'] !== undefined) {
      this['state'] = instance['state'];
    }

    if (instance['creationTime']) {
      this['creationTime'] = new Date(instance['creationTime']);
    }
    else if (instance['creationTime'] !== undefined) {
      this['creationTime'] = instance['creationTime'];
    }

    if (instance['lastModifiedTime']) {
      this['lastModifiedTime'] = new Date(instance['lastModifiedTime']);
    }
    else if (instance['lastModifiedTime'] !== undefined) {
      this['lastModifiedTime'] = instance['lastModifiedTime'];
    }

    if (instance['endpoint'] !== undefined) {
      this['endpoint'] = instance['endpoint'];
    }

    if (instance['defaultGroup'] !== undefined) {
      this['defaultGroup'] = instance['defaultGroup'];
    }
  }

  return this;
};

module.exports = DataLakeStoreAccountProperties;
