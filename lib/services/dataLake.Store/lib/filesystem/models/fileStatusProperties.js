/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the FileStatusProperties class.
 * @constructor
 * Data Lake file status properties information
 * @member {number} [accessTime] Gets or sets the last access time.
 * 
 * @member {number} [blockSize] Gets or sets the block size for the file.
 * 
 * @member {number} [childrenNum] Gets or sets the number of children in the
 * directory.
 * 
 * @member {number} [fileId] Gets or sets the file identifier.
 * 
 * @member {string} [group] Gets or sets the group owner.
 * 
 * @member {number} [length] Gets or sets the number of bytes in a file.
 * 
 * @member {number} [modificationTime] Gets or sets the modification time.
 * 
 * @member {string} [owner] Gets or sets the user who is the owner.
 * 
 * @member {string} [pathSuffix] Gets or sets the path suffix.
 * 
 * @member {string} [permission] Gets or sets the permission represented as an
 * octal string.
 * 
 * @member {number} [replication] Gets or sets the number of replications of a
 * file.
 * 
 * @member {string} [type] Gets or sets the type of the path object. Possible
 * values for this property include: 'File', 'Directory'.
 * 
 */
function FileStatusProperties(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.accessTime !== undefined) {
      this.accessTime = parameters.accessTime;
    }
    if (parameters.blockSize !== undefined) {
      this.blockSize = parameters.blockSize;
    }
    if (parameters.childrenNum !== undefined) {
      this.childrenNum = parameters.childrenNum;
    }
    if (parameters.fileId !== undefined) {
      this.fileId = parameters.fileId;
    }
    if (parameters.group !== undefined) {
      this.group = parameters.group;
    }
    if (parameters.length !== undefined) {
      this.length = parameters.length;
    }
    if (parameters.modificationTime !== undefined) {
      this.modificationTime = parameters.modificationTime;
    }
    if (parameters.owner !== undefined) {
      this.owner = parameters.owner;
    }
    if (parameters.pathSuffix !== undefined) {
      this.pathSuffix = parameters.pathSuffix;
    }
    if (parameters.permission !== undefined) {
      this.permission = parameters.permission;
    }
    if (parameters.replication !== undefined) {
      this.replication = parameters.replication;
    }
    if (parameters.type !== undefined) {
      this.type = parameters.type;
    }
  }    
}


/**
 * Validate the payload against the FileStatusProperties schema
 *
 * @param {JSON} payload
 *
 */
FileStatusProperties.prototype.serialize = function () {
  var payload = {};
  if (this['accessTime'] !== null && this['accessTime'] !== undefined) {
    if (typeof this['accessTime'] !== 'number') {
      throw new Error('this[\'accessTime\'] must be of type number.');
    }
    payload['accessTime'] = this['accessTime'];
  }

  if (this['blockSize'] !== null && this['blockSize'] !== undefined) {
    if (typeof this['blockSize'] !== 'number') {
      throw new Error('this[\'blockSize\'] must be of type number.');
    }
    payload['blockSize'] = this['blockSize'];
  }

  if (this['childrenNum'] !== null && this['childrenNum'] !== undefined) {
    if (typeof this['childrenNum'] !== 'number') {
      throw new Error('this[\'childrenNum\'] must be of type number.');
    }
    payload['childrenNum'] = this['childrenNum'];
  }

  if (this['fileId'] !== null && this['fileId'] !== undefined) {
    if (typeof this['fileId'] !== 'number') {
      throw new Error('this[\'fileId\'] must be of type number.');
    }
    payload['fileId'] = this['fileId'];
  }

  if (this['group'] !== null && this['group'] !== undefined) {
    if (typeof this['group'].valueOf() !== 'string') {
      throw new Error('this[\'group\'] must be of type string.');
    }
    payload['group'] = this['group'];
  }

  if (this['length'] !== null && this['length'] !== undefined) {
    if (typeof this['length'] !== 'number') {
      throw new Error('this[\'length\'] must be of type number.');
    }
    payload['length'] = this['length'];
  }

  if (this['modificationTime'] !== null && this['modificationTime'] !== undefined) {
    if (typeof this['modificationTime'] !== 'number') {
      throw new Error('this[\'modificationTime\'] must be of type number.');
    }
    payload['modificationTime'] = this['modificationTime'];
  }

  if (this['owner'] !== null && this['owner'] !== undefined) {
    if (typeof this['owner'].valueOf() !== 'string') {
      throw new Error('this[\'owner\'] must be of type string.');
    }
    payload['owner'] = this['owner'];
  }

  if (this['pathSuffix'] !== null && this['pathSuffix'] !== undefined) {
    if (typeof this['pathSuffix'].valueOf() !== 'string') {
      throw new Error('this[\'pathSuffix\'] must be of type string.');
    }
    payload['pathSuffix'] = this['pathSuffix'];
  }

  if (this['permission'] !== null && this['permission'] !== undefined) {
    if (typeof this['permission'].valueOf() !== 'string') {
      throw new Error('this[\'permission\'] must be of type string.');
    }
    payload['permission'] = this['permission'];
  }

  if (this['replication'] !== null && this['replication'] !== undefined) {
    if (typeof this['replication'] !== 'number') {
      throw new Error('this[\'replication\'] must be of type number.');
    }
    payload['replication'] = this['replication'];
  }

  if (this['type'] !== null && this['type'] !== undefined) {
    var allowedValues = [ 'File', 'Directory' ];
    var thistype = this['type'];
    if (!allowedValues.some( function(item) { return item === thistype; })) {
      throw new Error(this['type'] + ' is not a valid value. The valid values are: ' + allowedValues);
    }
    payload['type'] = this['type'];
  }

  return payload;
};

/**
 * Deserialize the instance to FileStatusProperties schema
 *
 * @param {JSON} instance
 *
 */
FileStatusProperties.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['accessTime'] !== undefined) {
      this['accessTime'] = instance['accessTime'];
    }

    if (instance['blockSize'] !== undefined) {
      this['blockSize'] = instance['blockSize'];
    }

    if (instance['childrenNum'] !== undefined) {
      this['childrenNum'] = instance['childrenNum'];
    }

    if (instance['fileId'] !== undefined) {
      this['fileId'] = instance['fileId'];
    }

    if (instance['group'] !== undefined) {
      this['group'] = instance['group'];
    }

    if (instance['length'] !== undefined) {
      this['length'] = instance['length'];
    }

    if (instance['modificationTime'] !== undefined) {
      this['modificationTime'] = instance['modificationTime'];
    }

    if (instance['owner'] !== undefined) {
      this['owner'] = instance['owner'];
    }

    if (instance['pathSuffix'] !== undefined) {
      this['pathSuffix'] = instance['pathSuffix'];
    }

    if (instance['permission'] !== undefined) {
      this['permission'] = instance['permission'];
    }

    if (instance['replication'] !== undefined) {
      this['replication'] = instance['replication'];
    }

    if (instance['type'] !== undefined) {
      this['type'] = instance['type'];
    }
  }

  return this;
};

module.exports = FileStatusProperties;
