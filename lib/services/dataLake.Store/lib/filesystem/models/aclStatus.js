/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');

/**
 * @class
 * Initializes a new instance of the AclStatus class.
 * @constructor
 * Data Lake ACL status information
 * @member {array} [entries] Gets or sets the list of ACLSpec entries on a
 * file or folder.
 * 
 * @member {string} [group] Gets or sets the group owner.
 * 
 * @member {string} [owner] Gets or sets the user who is the owner.
 * 
 * @member {boolean} [stickyBit] Gets or sets the indicator of whether the
 * sticky bit is on or off.
 * 
 */
function AclStatus(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.entries) {
      var tempParametersentries = [];
      parameters.entries.forEach(function(element) {
        if (element !== undefined) {
          element = element;
        }
        tempParametersentries.push(element);
      });
      this.entries = tempParametersentries;
    }
    if (parameters.group !== undefined) {
      this.group = parameters.group;
    }
    if (parameters.owner !== undefined) {
      this.owner = parameters.owner;
    }
    if (parameters.stickyBit !== undefined) {
      this.stickyBit = parameters.stickyBit;
    }
  }    
}


/**
 * Validate the payload against the AclStatus schema
 *
 * @param {JSON} payload
 *
 */
AclStatus.prototype.serialize = function () {
  var payload = {};
  if (util.isArray(this['entries'])) {
    payload['entries'] = [];
    for (var i = 0; i < this['entries'].length; i++) {
      if (this['entries'][i] !== null && this['entries'][i] !== undefined) {
        if (typeof this['entries'][i].valueOf() !== 'string') {
          throw new Error('this[\'entries\'][i] must be of type string.');
        }
        if (payload['entries'] === null || payload['entries'] === undefined) {
          payload['entries'] = {};
        }
        payload['entries'][i] = this['entries'][i];
      }
    }
  }

  if (this['group'] !== null && this['group'] !== undefined) {
    if (typeof this['group'].valueOf() !== 'string') {
      throw new Error('this[\'group\'] must be of type string.');
    }
    payload['group'] = this['group'];
  }

  if (this['owner'] !== null && this['owner'] !== undefined) {
    if (typeof this['owner'].valueOf() !== 'string') {
      throw new Error('this[\'owner\'] must be of type string.');
    }
    payload['owner'] = this['owner'];
  }

  if (this['stickyBit'] !== null && this['stickyBit'] !== undefined) {
    if (typeof this['stickyBit'] !== 'boolean') {
      throw new Error('this[\'stickyBit\'] must be of type boolean.');
    }
    payload['stickyBit'] = this['stickyBit'];
  }

  return payload;
};

/**
 * Deserialize the instance to AclStatus schema
 *
 * @param {JSON} instance
 *
 */
AclStatus.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['entries']) {
      var tempInstanceentries = [];
      instance['entries'].forEach(function(element1) {
        if (element1 !== undefined) {
          element1 = element1;
        }
        tempInstanceentries.push(element1);
      });
      this['entries'] = tempInstanceentries;
    }

    if (instance['group'] !== undefined) {
      this['group'] = instance['group'];
    }

    if (instance['owner'] !== undefined) {
      this['owner'] = instance['owner'];
    }

    if (instance['stickyBit'] !== undefined) {
      this['stickyBit'] = instance['stickyBit'];
    }
  }

  return this;
};

module.exports = AclStatus;
