/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as stream from 'stream';
import * as models from '../models';


/**
 * @class
 * FileSystem
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataLakeStoreFileSystemManagementClient.
 */
export interface FileSystem {

    /**
     * Get the file information object used to check file expiration time for the
     * specified by the file path.
     *
     * @param {string} filePath The path to the file to retrieve expiration
     * information for.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getFileInfo(filePath: string, accountname: string, options: { op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileInfoResult>): void;
    getFileInfo(filePath: string, accountname: string, callback: ServiceCallback<models.FileInfoResult>): void;

    /**
     * Appends to the file specified. This method supports multiple concurrent
     * appends to the file. NOTE: that concurrent append and serial append CANNOT
     * be used interchangeably. Once a file has been appended to using either
     * one, it can only be appended to using that type of append.
     *
     * @param {string} filePath The path to the file to append to using concurrent
     * append.
     * 
     * @param {string} accountname The name of the data lake account that the file
     * lives in.
     * 
     * @param {object} streamContents The file contents to include when appending
     * to the file.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.appendMode] Indicates the concurrent append call
     * should create the file if it doesn't exist or just open the existing file
     * for append. Possible values for this parameter include: 'autocreate'
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    concurrentAppend(filePath: string, accountname: string, streamContents: stream.Readable, options: { appendMode? : string, op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    concurrentAppend(filePath: string, accountname: string, streamContents: stream.Readable, callback: ServiceCallback<void>): void;

    /**
     * Sets or removes the expiration time on the specified file. This operation
     * can only be executed against files. Folders are not supported.
     *
     * @param {string} filePath The path to the file to set or removes the
     * expiration time on.
     * 
     * @param {string} accountname The name of the data lake account that the file
     * lives in.
     * 
     * @param {string} expiryOption Indicates the type of expiration to use for
     * the file: 1. NeverExpire: ExpireTime is ignored. 2. RelativeToNow:
     * ExpireTime is an integer in milliseconds. 3. RelativeToCreationDate:
     * ExpireTime is an integer in milliseconds. 4. Absolute: ExpireTime is an
     * integer in milliseconds, as a unix timestamp relative to 1/1/1970
     * 00:00:00. Possible values for this parameter include: 'NeverExpire',
     * 'RelativeToNow', 'RelativeToCreationDate', 'Absolute'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.expireTime] The time, in seconds, that the file
     * will expire relative to the expiry option that was set.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    setFileExpiry(filePath: string, accountname: string, expiryOption: string, options: { expireTime? : number, op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    setFileExpiry(filePath: string, accountname: string, expiryOption: string, callback: ServiceCallback<void>): void;

    /**
     * Checks if the specified access is available at the given path.
     *
     * @param {string} path The path to the file or folder to check access for.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.fsaction] File system operation read/write/execute
     * in string form, matching regex pattern '[rwx-]{3}'
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    checkAccess(path: string, accountname: string, options: { fsaction? : string, op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    checkAccess(path: string, accountname: string, callback: ServiceCallback<void>): void;

    /**
     * Creates a directory.
     *
     * @param {string} path The path to the directory to create.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.permission] The optional permissions to set on the
     * directories
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    mkdirs(path: string, accountname: string, options: { permission? : string, op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileOperationResult>): void;
    mkdirs(path: string, accountname: string, callback: ServiceCallback<models.FileOperationResult>): void;

    /**
     * Concatenates the list of files into the target file.
     *
     * @param {string} destinationPath The path to the destination file resulting
     * from the concatenation.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {array} sources A list of comma seperated absolute FileSystem paths
     * without scheme and authority
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    concat(destinationPath: string, accountname: string, sources: string[], options: { op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    concat(destinationPath: string, accountname: string, sources: string[], callback: ServiceCallback<void>): void;

    /**
     * Concatenates the list of files into the target file. This API is NOT
     * webhdfs compliant, however supports a much larger list of files in the
     * concatenate list.
     *
     * @param {string} msConcatDestinationPath The path to the destination file
     * resulting from the concatenation.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {object} streamContents A list of comma seperated absolute
     * FileSystem paths without scheme and authority. In the format:
     * 'sources=<comma separated list>'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.deletesourcedirectory] Indicates two things to
     * the system which allow for optimizations and increased concatenate
     * performance. First, that all the streams being concatenated are in the
     * same source directory. Second, that the source directory ONLY has streams
     * in it that are being concatenated into the destination stream. Note that
     * only the first requirement is strictly enforced (concatenate will ignore
     * the flag and only delete the source streams, not the folder). If the first
     * option is met, ALL data that was not part of the set of streams being
     * concatenated WILL BE LOST. It is critical to only use this option if you
     * are certain the two requirements are met.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    msConcat(msConcatDestinationPath: string, accountname: string, streamContents: stream.Readable, options: { deletesourcedirectory? : boolean, op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    msConcat(msConcatDestinationPath: string, accountname: string, streamContents: stream.Readable, callback: ServiceCallback<void>): void;

    /**
     * Get the list of file status objects specified by the file path, with
     * optional pagination parameters
     *
     * @param {string} listFilePath The path to the file to retrieve status for.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.listSize] Gets or sets the number of items to
     * return. Optional.
     * 
     * @param {string} [options.listAfter] Gets or sets the item or lexographical
     * index to begin returning results after. For example, with a file list of
     * 'a','b','d' a listAfter='b' will return 'd' and a listAfter='c' will also
     * return 'd'. Optional.
     * 
     * @param {string} [options.listBefore] Gets or sets the item or lexographical
     * index to begin returning results before. For example, with a file list of
     * 'a','b','d' a listBefore='d' will return 'a','b' and a listBefore='c' will
     * also return 'a','b'. Optional.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listFileStatus(listFilePath: string, accountname: string, options: { listSize? : number, listAfter? : string, listBefore? : string, op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileStatusesResult>): void;
    listFileStatus(listFilePath: string, accountname: string, callback: ServiceCallback<models.FileStatusesResult>): void;

    /**
     * Gets the file content summary object specified by the file path.
     *
     * @param {string} getContentSummaryFilePath The path to the file to retrieve
     * the summary for.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getContentSummary(getContentSummaryFilePath: string, accountname: string, options: { op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContentSummaryResult>): void;
    getContentSummary(getContentSummaryFilePath: string, accountname: string, callback: ServiceCallback<models.ContentSummaryResult>): void;

    /**
     * Get the file status object specified by the file path.
     *
     * @param {string} getFilePath The path to the file to retrieve status for.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getFileStatus(getFilePath: string, accountname: string, options: { op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileStatusResult>): void;
    getFileStatus(getFilePath: string, accountname: string, callback: ServiceCallback<models.FileStatusResult>): void;

    /**
     * Directly appends to a file with the specified content, without requiring a
     * redirect. This API is NOT webhdfs compliant. It should be used only by
     * tools that do not rely on webhdfs interoperability.
     *
     * @param {string} directFilePath The path to the file to append to.
     * 
     * @param {string} accountname The name of the Data Lake Store account to
     * append to the file in
     * 
     * @param {object} streamContents The file contents to include when appending
     * to the file.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.buffersize] The optional buffer size to use when
     * appending data
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {boolean} [options.append] This is the REQUIRED value for this
     * parameter and method combination. Changing the value will result in
     * unexpected behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    append(directFilePath: string, accountname: string, streamContents: stream.Readable, options: { buffersize? : number, op? : string, append? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    append(directFilePath: string, accountname: string, streamContents: stream.Readable, callback: ServiceCallback<void>): void;

    /**
     * Directly creates a file with the specified content, without requiring a
     * redirect. This API is NOT webhdfs compliant. It should be used only by
     * tools that do not rely on webhdfs interoperability.
     *
     * @param {string} directFilePath The path to the file to create.
     * 
     * @param {string} accountname The name of the Data Lake Store account to
     * create the file in
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.streamContents] The file contents to include when
     * creating the file. This parameter is optional, resulting in an empty file
     * if not specified.
     * 
     * @param {number} [options.buffersize] The size of the buffer used in
     * transferring data.
     * 
     * @param {boolean} [options.overwrite] The indication of if the file should
     * be overwritten.
     * 
     * @param {number} [options.blocksize] The block size of a file, in bytes.
     * 
     * @param {number} [options.replication] The number of replications of a file.
     * 
     * @param {string} [options.permission] The permissions of a file or directory.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {boolean} [options.write] This is the REQUIRED value for this
     * parameter and method combination. Changing the value will result in
     * unexpected behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(directFilePath: string, accountname: string, options: { streamContents? : stream.Readable, buffersize? : number, overwrite? : boolean, blocksize? : number, replication? : number, permission? : string, op? : string, write? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    create(directFilePath: string, accountname: string, callback: ServiceCallback<void>): void;

    /**
     * Directly opens and reads from the specified file, without requiring a
     * redirect. This API is NOT webhdfs compliant. It should be used only by
     * tools that do not rely on webhdfs interoperability.
     *
     * @param {string} directFilePath The path to the file to open.
     * 
     * @param {string} accountname The name of the data lake account that the file
     * lives in.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.length]
     * 
     * @param {number} [options.offset]
     * 
     * @param {number} [options.buffersize]
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {boolean} [options.read] This is the REQUIRED value for this
     * parameter and method combination. Changing the value will result in
     * unexpected behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    open(directFilePath: string, accountname: string, options: { length? : number, offset? : number, buffersize? : number, op? : string, read? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;
    open(directFilePath: string, accountname: string, callback: ServiceCallback<stream.Readable>): void;

    /**
     * Sets ACL entries on a file or folder.
     *
     * @param {string} setAclFilePath The path to the directory or file to set
     * ACLs on.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {string} aclspec The ACL spec included in ACL creation operations in
     * the format '[default:]user|group|other::r|-w|-x|-'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    setAcl(setAclFilePath: string, accountname: string, aclspec: string, options: { op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    setAcl(setAclFilePath: string, accountname: string, aclspec: string, callback: ServiceCallback<void>): void;

    /**
     * Modifies existing ACL entries on a file or folder.
     *
     * @param {string} modifyAclFilePath The path to the directory or file to
     * modify ACLs on.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {string} aclspec The ACL spec included in ACL modification
     * operations in the format '[default:]user|group|other::r|-w|-x|-'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    modifyAclEntries(modifyAclFilePath: string, accountname: string, aclspec: string, options: { op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    modifyAclEntries(modifyAclFilePath: string, accountname: string, aclspec: string, callback: ServiceCallback<void>): void;

    /**
     * Removes existing ACL entries on a file or folder.
     *
     * @param {string} removeAclFilePath The path to the directory or file to
     * remove ACLs on.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {string} aclspec The ACL spec included in ACL removal operations in
     * the format '[default:]user|group|other'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    removeAclEntries(removeAclFilePath: string, accountname: string, aclspec: string, options: { op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    removeAclEntries(removeAclFilePath: string, accountname: string, aclspec: string, callback: ServiceCallback<void>): void;

    /**
     * Removes default ACL entries on a file or folder.
     *
     * @param {string} removeDefaultAclFilePath The path to the directory or file
     * to remove ACL on.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    removeDefaultAcl(removeDefaultAclFilePath: string, accountname: string, options: { op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    removeDefaultAcl(removeDefaultAclFilePath: string, accountname: string, callback: ServiceCallback<void>): void;

    /**
     * Removes the existing ACL on a file or folder.
     *
     * @param {string} aclFilePath The path to the directory or file to remove ACL
     * on.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    removeAcl(aclFilePath: string, accountname: string, options: { op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    removeAcl(aclFilePath: string, accountname: string, callback: ServiceCallback<void>): void;

    /**
     * Gets ACL entries on a file or folder.
     *
     * @param {string} aclFilePath The path to the directory or file to get ACLs
     * on.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAclStatus(aclFilePath: string, accountname: string, options: { op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AclStatusResult>): void;
    getAclStatus(aclFilePath: string, accountname: string, callback: ServiceCallback<models.AclStatusResult>): void;

    /**
     * Deletes the requested file or folder, optionally recursively.
     *
     * @param {string} filePath The path to the file or folder to delete.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.recursive] The optional switch indicating if the
     * delete should be recursive
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(filePath: string, accountname: string, options: { recursive? : boolean, op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileOperationResult>): void;
    deleteMethod(filePath: string, accountname: string, callback: ServiceCallback<models.FileOperationResult>): void;

    /**
     * Creates a symbolic link.
     *
     * @param {string} symLinkFilePath The path to the directory or file to create
     * a symlink of.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {string} destination The path to create the symlink at
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.createParent] If the parent directories do not
     * exist, indicates if they should be created.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createSymLink(symLinkFilePath: string, accountname: string, destination: string, options: { createParent? : boolean, op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    createSymLink(symLinkFilePath: string, accountname: string, destination: string, callback: ServiceCallback<void>): void;

    /**
     * Rename a directory or file.
     *
     * @param {string} renameFilePath The path to the directory to move/rename.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {string} destination The path to move/rename the file or folder to
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    rename(renameFilePath: string, accountname: string, destination: string, options: { op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileOperationResult>): void;
    rename(renameFilePath: string, accountname: string, destination: string, callback: ServiceCallback<models.FileOperationResult>): void;

    /**
     * Sets the owner of a file or folder.
     *
     * @param {string} setOwnerFilePath The path to the directory or file to set
     * the owner on.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.owner] The username who is the owner of a
     * file/directory, if empty remains unchanged.
     * 
     * @param {string} [options.group] The group who is the group owner of a
     * file/directory, if empty remains unchanged.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    setOwner(setOwnerFilePath: string, accountname: string, options: { owner? : string, group? : string, op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    setOwner(setOwnerFilePath: string, accountname: string, callback: ServiceCallback<void>): void;

    /**
     * Sets the permission of the file or folder.
     *
     * @param {string} setPermissionFilePath The path to the directory or file to
     * set permissions on.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.permission] A string octal representation of the
     * permission (i.e 'rwx'), if empty remains unchanged.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    setPermission(setPermissionFilePath: string, accountname: string, options: { permission? : string, op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    setPermission(setPermissionFilePath: string, accountname: string, callback: ServiceCallback<void>): void;

    /**
     * Sets the value of the replication factor.
     *
     * @param {string} setReplicationFilePath The path to the directory or file to
     * create a replication of.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.replication] The number of replications of a file.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    setReplication(setReplicationFilePath: string, accountname: string, options: { replication? : number, op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileOperationResult>): void;
    setReplication(setReplicationFilePath: string, accountname: string, callback: ServiceCallback<models.FileOperationResult>): void;

    /**
     * Sets the access or modification time on a file or folder.
     *
     * @param {string} sourcePath The path to the directory or file to set
     * permissions on.
     * 
     * @param {string} accountname The name of the account to use
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.modificationtime] The modification time of a
     * file/directory. If -1 remains unchanged
     * 
     * @param {number} [options.accesstime] The access time of a file/directory.
     * If -1 remains unchanged
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    setTimes(sourcePath: string, accountname: string, options: { modificationtime? : number, accesstime? : number, op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    setTimes(sourcePath: string, accountname: string, callback: ServiceCallback<void>): void;

    /**
     * Get the home directory for the specified account.
     *
     * @param {string} accountname The name of the account to use
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.op] This is the REQUIRED value for this parameter
     * and method combination. Changing the value will result in unexpected
     * behavior, please do not do so.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHomeDirectory(accountname: string, options: { op? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HomeDirectoryResult>): void;
    getHomeDirectory(accountname: string, callback: ServiceCallback<models.HomeDirectoryResult>): void;
}
