/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class representing a Patch.
 */
class Patch {
  /**
   * Create a Patch.
   * @property {string} [appliedScopeType] Possible values include: 'Single',
   * 'Shared'
   * @property {array} [appliedScopes]
   * @property {boolean} [renew]
   * @property {object} [renewProperties]
   * @property {object} [renewProperties.sku]
   * @property {string} [renewProperties.sku.name]
   * @property {string} [renewProperties.location] The Azure Region where the
   * reserved resource lives.
   * @property {string} [renewProperties.reservedResourceType] Possible values
   * include: 'VirtualMachines', 'SqlDatabases', 'SuseLinux', 'CosmosDb'
   * @property {string} [renewProperties.billingScopeId]
   * @property {string} [renewProperties.term] Possible values include: 'P1Y',
   * 'P3Y'
   * @property {number} [renewProperties.quantity]
   * @property {string} [renewProperties.displayName] Friendly name of the
   * Reservation
   * @property {string} [renewProperties.appliedScopeType] Possible values
   * include: 'Single', 'Shared'
   * @property {array} [renewProperties.appliedScopes]
   * @property {boolean} [renewProperties.renew]
   * @property {object} [renewProperties.reservedResourceProperties] Properties
   * specific to each reserved resource type. Not required if not applicable.
   * @property {string}
   * [renewProperties.reservedResourceProperties.instanceFlexibility] Possible
   * values include: 'On', 'Off'
   * @property {string} [instanceFlexibility] Possible values include: 'On',
   * 'Off'
   * @property {string} [name] Name of the Reservation
   */
  constructor() {
  }

  /**
   * Defines the metadata of Patch
   *
   * @returns {object} metadata of Patch
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Patch',
      type: {
        name: 'Composite',
        className: 'Patch',
        modelProperties: {
          appliedScopeType: {
            required: false,
            serializedName: 'properties.appliedScopeType',
            type: {
              name: 'String'
            }
          },
          appliedScopes: {
            required: false,
            serializedName: 'properties.appliedScopes',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          renew: {
            required: false,
            serializedName: 'properties.renew',
            type: {
              name: 'Boolean'
            }
          },
          renewProperties: {
            required: false,
            serializedName: 'properties.renewProperties',
            type: {
              name: 'Composite',
              className: 'PurchaseRequest'
            }
          },
          instanceFlexibility: {
            required: false,
            serializedName: 'properties.instanceFlexibility',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'properties.name',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Patch;
