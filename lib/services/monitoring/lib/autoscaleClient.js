/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var moment = require('moment');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var AutoscaleClient = ( /** @lends AutoscaleClient */ function() {
  /**
   * @class
   * Initializes a new instance of the AutoscaleClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials When you create a
   * Windows Azure subscription, it is uniquely identified by a subscription
   * ID. The subscription ID forms part of the URI for every call that you
   * make to the Service Management API.  The Windows Azure Service
   * ManagementAPI use mutual authentication of management certificates over
   * SSL to ensure that a request made to the service is secure.  No anonymous
   * requests are allowed.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Optional base uri parameter.
   * 
   * @param {Array} filters
   */
  function AutoscaleClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    AutoscaleClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.core.windows.net';
    }
    /**
     * Provides an instance of the [SettingOperations](-SettingOperations.html)
     * object.
     * @type {object}
     */
    this.settings = new SettingOperations(this);
  }
  
  util.inherits(AutoscaleClient, Service);
  
  
  return AutoscaleClient;
})();
exports.AutoscaleClient = AutoscaleClient;

var SettingOperations = ( /** @lends SettingOperations */ function() {
  /**
   * @class
   * Operations for managing the autoscale settings.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [AutoscaleClient] {@link AutoscaleClient~AutoscaleClient}.
   * See [settings] {@link AutoscaleClient~AutoscaleClient#settings}.
   * Initializes a new instance of the SettingOperations class.
   * @constructor
   * 
   * @param {AutoscaleClient} client Reference to the service client.
   */
  function SettingOperations(client) {
    this.client = client;
  }
  
  /**
   * 
   * @param {string} resourceId The resource ID.
   * 
   * @param {AutoscaleSettingCreateOrUpdateParameters} parameters Parameters
   * supplied to the operation.
   * 
   * @param {AutoscaleSetting} [parameters.setting] The setting to create or
   * update.
   * 
   * @param {array} [parameters.setting.profiles]
   * 
   * @param {boolean} [parameters.setting.enabled]
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SettingOperations.prototype.createOrUpdate = function(resourceId, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceId === null || resourceId === undefined) {
      return callback(new Error('resourceId cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.setting) {
      if (parameters.setting.enabled === null || parameters.setting.enabled === undefined) {
        return callback(new Error('parameters.setting.enabled cannot be null.'));
      }
      if (parameters.setting.profiles) {
        for (var loweredIndex1 = 0; loweredIndex1 < parameters.setting.profiles.length; loweredIndex1 = loweredIndex1 + 1) {
          var profilesParameterItem = parameters.setting.profiles[loweredIndex1];
          if (profilesParameterItem.fixedDate) {
            if (profilesParameterItem.fixedDate.end === null || profilesParameterItem.fixedDate.end === undefined) {
              return callback(new Error('parameters.setting.profiles.fixedDate.end cannot be null.'));
            }
            if (profilesParameterItem.fixedDate.start === null || profilesParameterItem.fixedDate.start === undefined) {
              return callback(new Error('parameters.setting.profiles.fixedDate.start cannot be null.'));
            }
          }
          if (profilesParameterItem.rules) {
            for (var loweredIndex2 = 0; loweredIndex2 < profilesParameterItem.rules.length; loweredIndex2 = loweredIndex2 + 1) {
              var rulesParameterItem = profilesParameterItem.rules[loweredIndex2];
              if (rulesParameterItem.metricTrigger) {
                if (rulesParameterItem.metricTrigger.threshold === null || rulesParameterItem.metricTrigger.threshold === undefined) {
                  return callback(new Error('parameters.setting.profiles.rules.metricTrigger.threshold cannot be null.'));
                }
                if (rulesParameterItem.metricTrigger.timeGrain === null || rulesParameterItem.metricTrigger.timeGrain === undefined) {
                  return callback(new Error('parameters.setting.profiles.rules.metricTrigger.timeGrain cannot be null.'));
                }
                if (rulesParameterItem.metricTrigger.timeWindow === null || rulesParameterItem.metricTrigger.timeWindow === undefined) {
                  return callback(new Error('parameters.setting.profiles.rules.metricTrigger.timeWindow cannot be null.'));
                }
              }
              if (rulesParameterItem.scaleAction) {
                if (rulesParameterItem.scaleAction.cooldown === null || rulesParameterItem.scaleAction.cooldown === undefined) {
                  return callback(new Error('parameters.setting.profiles.rules.scaleAction.cooldown cannot be null.'));
                }
              }
            }
          }
        }
      }
    }
    
    // Tracing
    
    // Construct URL
    var baseUrl = this.client.baseUri;
    var url2 = '/' + this.client.credentials.subscriptionId.trim() + '/services/monitoring/autoscalesettings?';
    url2 = url2 + 'resourceId=' + encodeURIComponent(resourceId.trim());
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json';
    httpRequest.headers['Content-Type'] = 'application/json';
    httpRequest.headers['x-ms-version'] = '2013-10-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var autoscaleSettingCreateOrUpdateParametersValue = {};
    requestDoc = autoscaleSettingCreateOrUpdateParametersValue;
    
    if (parameters.setting) {
      if (parameters.setting.profiles) {
        var profilesArray = [];
        for (var loweredIndex3 = 0; loweredIndex3 < parameters.setting.profiles.length; loweredIndex3 = loweredIndex3 + 1) {
          var profilesItem = parameters.setting.profiles[loweredIndex3];
          var autoscaleProfileValue = {};
          profilesArray.push(autoscaleProfileValue);
          
          if (profilesItem.name) {
            autoscaleProfileValue['Name'] = profilesItem.name;
          }
          
          if (profilesItem.capacity) {
            var capacityValue = {};
            autoscaleProfileValue['Capacity'] = capacityValue;
            
            if (profilesItem.capacity.minimum) {
              capacityValue['Minimum'] = profilesItem.capacity.minimum;
            }
            
            if (profilesItem.capacity.maximum) {
              capacityValue['Maximum'] = profilesItem.capacity.maximum;
            }
            
            if (profilesItem.capacity.default) {
              capacityValue['Default'] = profilesItem.capacity.default;
            }
          }
          
          if (profilesItem.rules) {
            var rulesArray = [];
            for (var loweredIndex4 = 0; loweredIndex4 < profilesItem.rules.length; loweredIndex4 = loweredIndex4 + 1) {
              var rulesItem = profilesItem.rules[loweredIndex4];
              var scaleRuleValue = {};
              rulesArray.push(scaleRuleValue);
              
              if (rulesItem.metricTrigger) {
                var metricTriggerValue = {};
                scaleRuleValue['MetricTrigger'] = metricTriggerValue;
                
                if (rulesItem.metricTrigger.metricName) {
                  metricTriggerValue['MetricName'] = rulesItem.metricTrigger.metricName;
                }
                
                if (rulesItem.metricTrigger.metricNamespace) {
                  metricTriggerValue['MetricNamespace'] = rulesItem.metricTrigger.metricNamespace;
                }
                
                if (rulesItem.metricTrigger.metricSource) {
                  metricTriggerValue['MetricSource'] = rulesItem.metricTrigger.metricSource;
                }
                
                metricTriggerValue['TimeGrain'] = rulesItem.metricTrigger.timeGrain.toIsoString();
                
                metricTriggerValue['Statistic'] = rulesItem.metricTrigger.statistic ? rulesItem.metricTrigger.statistic.toString() : 'Average';
                
                metricTriggerValue['TimeWindow'] = rulesItem.metricTrigger.timeWindow.toIsoString();
                
                metricTriggerValue['TimeAggregation'] = rulesItem.metricTrigger.timeAggregation ? rulesItem.metricTrigger.timeAggregation.toString() : 'Average';
                
                metricTriggerValue['Operator'] = rulesItem.metricTrigger.operator ? rulesItem.metricTrigger.operator.toString() : 'Equals';
                
                metricTriggerValue['Threshold'] = rulesItem.metricTrigger.threshold;
              }
              
              if (rulesItem.scaleAction) {
                var scaleActionValue = {};
                scaleRuleValue['ScaleAction'] = scaleActionValue;
                
                scaleActionValue['Direction'] = rulesItem.scaleAction.direction ? rulesItem.scaleAction.direction.toString() : 'None';
                
                scaleActionValue['Type'] = rulesItem.scaleAction.type ? rulesItem.scaleAction.type.toString() : 'ChangeSize';
                
                if (rulesItem.scaleAction.value) {
                  scaleActionValue['Value'] = rulesItem.scaleAction.value;
                }
                
                scaleActionValue['Cooldown'] = rulesItem.scaleAction.cooldown.toIsoString();
              }
            }
            autoscaleProfileValue['Rules'] = rulesArray;
          }
          
          if (profilesItem.fixedDate) {
            var fixedDateValue = {};
            autoscaleProfileValue['FixedDate'] = fixedDateValue;
            
            if (profilesItem.fixedDate.timeZone) {
              fixedDateValue['TimeZone'] = profilesItem.fixedDate.timeZone;
            }
            
            fixedDateValue['Start'] = profilesItem.fixedDate.start;
            
            fixedDateValue['End'] = profilesItem.fixedDate.end;
          }
          
          if (profilesItem.recurrence) {
            var recurrenceValue = {};
            autoscaleProfileValue['Recurrence'] = recurrenceValue;
            
            recurrenceValue['Frequency'] = profilesItem.recurrence.frequency ? profilesItem.recurrence.frequency.toString() : 'None';
            
            if (profilesItem.recurrence.schedule) {
              var scheduleValue = {};
              recurrenceValue['Schedule'] = scheduleValue;
              
              if (profilesItem.recurrence.schedule.timeZone) {
                scheduleValue['TimeZone'] = profilesItem.recurrence.schedule.timeZone;
              }
              
              if (profilesItem.recurrence.schedule.days) {
                var daysArray = [];
                for (var loweredIndex5 = 0; loweredIndex5 < profilesItem.recurrence.schedule.days.length; loweredIndex5 = loweredIndex5 + 1) {
                  var daysItem = profilesItem.recurrence.schedule.days[loweredIndex5];
                  daysArray.push(daysItem);
                }
                scheduleValue['Days'] = daysArray;
              }
              
              if (profilesItem.recurrence.schedule.hours) {
                var hoursArray = [];
                for (var loweredIndex6 = 0; loweredIndex6 < profilesItem.recurrence.schedule.hours.length; loweredIndex6 = loweredIndex6 + 1) {
                  var hoursItem = profilesItem.recurrence.schedule.hours[loweredIndex6];
                  hoursArray.push(hoursItem);
                }
                scheduleValue['Hours'] = hoursArray;
              }
              
              if (profilesItem.recurrence.schedule.minutes) {
                var minutesArray = [];
                for (var loweredIndex7 = 0; loweredIndex7 < profilesItem.recurrence.schedule.minutes.length; loweredIndex7 = loweredIndex7 + 1) {
                  var minutesItem = profilesItem.recurrence.schedule.minutes[loweredIndex7];
                  minutesArray.push(minutesItem);
                }
                scheduleValue['Minutes'] = minutesArray;
              }
            }
          }
        }
        autoscaleSettingCreateOrUpdateParametersValue['Profiles'] = profilesArray;
      }
      
      autoscaleSettingCreateOrUpdateParametersValue['Enabled'] = parameters.setting.enabled;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        return callback(new Error(body));
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceId The resource ID.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SettingOperations.prototype.delete = function(resourceId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceId === null || resourceId === undefined) {
      return callback(new Error('resourceId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var baseUrl = this.client.baseUri;
    var url2 = '/' + this.client.credentials.subscriptionId.trim() + '/services/monitoring/autoscalesettings?';
    url2 = url2 + 'resourceId=' + encodeURIComponent(resourceId.trim());
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json';
    httpRequest.headers['Content-Type'] = 'application/json';
    httpRequest.headers['x-ms-version'] = '2013-10-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(new Error(body));
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceId The resource ID.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SettingOperations.prototype.get = function(resourceId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceId === null || resourceId === undefined) {
      return callback(new Error('resourceId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var baseUrl = this.client.baseUri;
    var url2 = '/' + this.client.credentials.subscriptionId.trim() + '/services/monitoring/autoscalesettings?';
    url2 = url2 + 'resourceId=' + encodeURIComponent(resourceId.trim());
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Accept'] = 'application/json';
    httpRequest.headers['Content-Type'] = 'application/json';
    httpRequest.headers['x-ms-version'] = '2013-10-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(new Error(body));
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var settingInstance = { profiles: [] };
        result.setting = settingInstance;
        
        var profilesArray = responseDoc['Profiles'];
        if (profilesArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < profilesArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var profilesValue = profilesArray[loweredIndex1];
            var autoscaleProfileInstance = { rules: [] };
            settingInstance.profiles.push(autoscaleProfileInstance);
            
            var nameValue = profilesValue['Name'];
            if (nameValue) {
              var nameInstance = nameValue;
              autoscaleProfileInstance.name = nameInstance;
            }
            
            var capacityValue = profilesValue['Capacity'];
            if (capacityValue) {
              var capacityInstance = {};
              autoscaleProfileInstance.capacity = capacityInstance;
              
              var minimumValue = capacityValue['Minimum'];
              if (minimumValue) {
                var minimumInstance = minimumValue;
                capacityInstance.minimum = minimumInstance;
              }
              
              var maximumValue = capacityValue['Maximum'];
              if (maximumValue) {
                var maximumInstance = maximumValue;
                capacityInstance.maximum = maximumInstance;
              }
              
              var defaultValue = capacityValue['Default'];
              if (defaultValue) {
                var defaultInstance = defaultValue;
                capacityInstance.default = defaultInstance;
              }
            }
            
            var rulesArray = profilesValue['Rules'];
            if (rulesArray) {
              for (var loweredIndex2 = 0; loweredIndex2 < rulesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var rulesValue = rulesArray[loweredIndex2];
                var scaleRuleInstance = {};
                autoscaleProfileInstance.rules.push(scaleRuleInstance);
                
                var metricTriggerValue = rulesValue['MetricTrigger'];
                if (metricTriggerValue) {
                  var metricTriggerInstance = {};
                  scaleRuleInstance.metricTrigger = metricTriggerInstance;
                  
                  var metricNameValue = metricTriggerValue['MetricName'];
                  if (metricNameValue) {
                    var metricNameInstance = metricNameValue;
                    metricTriggerInstance.metricName = metricNameInstance;
                  }
                  
                  var metricNamespaceValue = metricTriggerValue['MetricNamespace'];
                  if (metricNamespaceValue) {
                    var metricNamespaceInstance = metricNamespaceValue;
                    metricTriggerInstance.metricNamespace = metricNamespaceInstance;
                  }
                  
                  var metricSourceValue = metricTriggerValue['MetricSource'];
                  if (metricSourceValue) {
                    var metricSourceInstance = metricSourceValue;
                    metricTriggerInstance.metricSource = metricSourceInstance;
                  }
                  
                  var timeGrainValue = metricTriggerValue['TimeGrain'];
                  if (timeGrainValue) {
                    var timeGrainInstance = moment.duration(timeGrainValue);
                    metricTriggerInstance.timeGrain = timeGrainInstance;
                  }
                  
                  var statisticValue = metricTriggerValue['Statistic'];
                  if (statisticValue) {
                    var statisticInstance = statisticValue;
                    metricTriggerInstance.statistic = statisticInstance;
                  }
                  
                  var timeWindowValue = metricTriggerValue['TimeWindow'];
                  if (timeWindowValue) {
                    var timeWindowInstance = moment.duration(timeWindowValue);
                    metricTriggerInstance.timeWindow = timeWindowInstance;
                  }
                  
                  var timeAggregationValue = metricTriggerValue['TimeAggregation'];
                  if (timeAggregationValue) {
                    var timeAggregationInstance = timeAggregationValue;
                    metricTriggerInstance.timeAggregation = timeAggregationInstance;
                  }
                  
                  var operatorValue = metricTriggerValue['Operator'];
                  if (operatorValue) {
                    var operatorInstance = operatorValue;
                    metricTriggerInstance.operator = operatorInstance;
                  }
                  
                  var thresholdValue = metricTriggerValue['Threshold'];
                  if (thresholdValue) {
                    var thresholdInstance = thresholdValue;
                    metricTriggerInstance.threshold = thresholdInstance;
                  }
                }
                
                var scaleActionValue = rulesValue['ScaleAction'];
                if (scaleActionValue) {
                  var scaleActionInstance = {};
                  scaleRuleInstance.scaleAction = scaleActionInstance;
                  
                  var directionValue = scaleActionValue['Direction'];
                  if (directionValue) {
                    var directionInstance = directionValue;
                    scaleActionInstance.direction = directionInstance;
                  }
                  
                  var typeValue = scaleActionValue['Type'];
                  if (typeValue) {
                    var typeInstance = typeValue;
                    scaleActionInstance.type = typeInstance;
                  }
                  
                  var valueValue = scaleActionValue['Value'];
                  if (valueValue) {
                    var valueInstance = valueValue;
                    scaleActionInstance.value = valueInstance;
                  }
                  
                  var cooldownValue = scaleActionValue['Cooldown'];
                  if (cooldownValue) {
                    var cooldownInstance = moment.duration(cooldownValue);
                    scaleActionInstance.cooldown = cooldownInstance;
                  }
                }
              }
            }
            
            var fixedDateValue = profilesValue['FixedDate'];
            if (fixedDateValue) {
              var fixedDateInstance = {};
              autoscaleProfileInstance.fixedDate = fixedDateInstance;
              
              var timeZoneValue = fixedDateValue['TimeZone'];
              if (timeZoneValue) {
                var timeZoneInstance = timeZoneValue;
                fixedDateInstance.timeZone = timeZoneInstance;
              }
              
              var startValue = fixedDateValue['Start'];
              if (startValue) {
                var startInstance = startValue;
                fixedDateInstance.start = startInstance;
              }
              
              var endValue = fixedDateValue['End'];
              if (endValue) {
                var endInstance = endValue;
                fixedDateInstance.end = endInstance;
              }
            }
            
            var recurrenceValue = profilesValue['Recurrence'];
            if (recurrenceValue) {
              var recurrenceInstance = {};
              autoscaleProfileInstance.recurrence = recurrenceInstance;
              
              var frequencyValue = recurrenceValue['Frequency'];
              if (frequencyValue) {
                var frequencyInstance = frequencyValue;
                recurrenceInstance.frequency = frequencyInstance;
              }
              
              var scheduleValue = recurrenceValue['Schedule'];
              if (scheduleValue) {
                var scheduleInstance = { days: [], hours: [], minutes: [] };
                recurrenceInstance.schedule = scheduleInstance;
                
                var timeZoneValue2 = scheduleValue['TimeZone'];
                if (timeZoneValue2) {
                  var timeZoneInstance2 = timeZoneValue2;
                  scheduleInstance.timeZone = timeZoneInstance2;
                }
                
                var daysArray = scheduleValue['Days'];
                if (daysArray) {
                  for (var loweredIndex3 = 0; loweredIndex3 < daysArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var daysValue = daysArray[loweredIndex3];
                    scheduleInstance.days.push(daysValue);
                  }
                }
                
                var hoursArray = scheduleValue['Hours'];
                if (hoursArray) {
                  for (var loweredIndex4 = 0; loweredIndex4 < hoursArray.length; loweredIndex4 = loweredIndex4 + 1) {
                    var hoursValue = hoursArray[loweredIndex4];
                    scheduleInstance.hours.push(hoursValue);
                  }
                }
                
                var minutesArray = scheduleValue['Minutes'];
                if (minutesArray) {
                  for (var loweredIndex5 = 0; loweredIndex5 < minutesArray.length; loweredIndex5 = loweredIndex5 + 1) {
                    var minutesValue = minutesArray[loweredIndex5];
                    scheduleInstance.minutes.push(minutesValue);
                  }
                }
              }
            }
          }
        }
        
        var enabledValue = responseDoc['Enabled'];
        if (enabledValue) {
          var enabledInstance = enabledValue;
          settingInstance.enabled = enabledInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return SettingOperations;
})();
