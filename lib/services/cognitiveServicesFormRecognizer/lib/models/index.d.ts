/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as moment from "moment";

/**
 * Contract to initiate a train request.
 */
export interface TrainRequest {
  /**
   * Get or set source path.
   */
  source: string;
}

export interface FormDocumentReport {
  /**
   * Reference to the data that the report is for.
  */
  documentName?: string;
  /**
   * Total number of pages trained on.
  */
  pages?: number;
  /**
   * List of errors per page.
  */
  errors?: string[];
  /**
   * Status of the training operation. Possible values include: 'success', 'partialSuccess',
   * 'failure'
  */
  status?: string;
}

/**
 * Error reported during an operation.
*/
export interface FormOperationError {
  /**
   * Message reported during the train operation.
  */
  errorMessage?: string;
}

/**
 * Response of the Train API call.
*/
export interface TrainResult {
  /**
   * Identifier of the model.
  */
  modelId?: string;
  /**
   * List of documents used to train the model and the
   * train operation error reported by each.
  */
  trainingDocuments?: FormDocumentReport[];
  /**
   * Errors returned during the training operation.
  */
  errors?: FormOperationError[];
}

/**
 * Result of an operation to get
 * the keys extracted by a model.
*/
export interface KeysResult {
  /**
   * Object mapping ClusterIds to Key lists.
  */
  clusters?: { [propertyName: string]: string[] };
}

/**
 * Result of a model status query operation.
*/
export interface ModelResult {
  /**
   * Get or set model identifier.
  */
  modelId?: string;
  /**
   * Get or set the status of model. Possible values include: 'created', 'ready', 'invalid'
  */
  status?: string;
  /**
   * Get or set the created date time of the model.
  */
  createdDateTime?: Date;
  /**
   * Get or set the model last updated datetime.
  */
  lastUpdatedDateTime?: Date;
}

/**
 * Result of query operation to fetch multiple models.
*/
export interface ModelsResult {
  /**
   * Collection of models.
  */
  modelsProperty?: ModelResult[];
}

export interface InnerError {
  requestId?: string;
}

export interface ErrorInformation {
  code?: string;
  innerError?: InnerError;
  message?: string;
}

export interface ErrorResponse {
  error?: ErrorInformation;
}

/**
 * Canonical representation of single extracted text.
*/
export interface ExtractedToken {
  /**
   * String value of the extracted text.
  */
  text?: string;
  /**
   * Bounding box of the extracted text. Represents the
   * location of the extracted text as a pair of
   * cartesian co-ordinates. The co-ordinate pairs are arranged by
   * top-left, top-right, bottom-right and bottom-left endpoints box
   * with origin reference from the bottom-left of the page.
  */
  boundingBox?: number[];
  /**
   * A measure of accuracy of the extracted text.
  */
  confidence?: number;
}

/**
 * Representation of a key-value pair as a list
 * of key and value tokens.
*/
export interface ExtractedKeyValuePair {
  /**
   * List of tokens for the extracted key in a key-value pair.
  */
  key?: ExtractedToken[];
  /**
   * List of tokens for the extracted value in a key-value pair.
  */
  value?: ExtractedToken[];
}

/**
 * Extraction information of a column in
 * a table.
*/
export interface ExtractedTableColumn {
  /**
   * List of extracted tokens for the column header.
  */
  header?: ExtractedToken[];
  /**
   * Extracted text for each cell of a column. Each cell
   * in the column can have a list of one or more tokens.
  */
  entries?: ExtractedToken[][];
}

/**
 * Extraction information about a table
 * contained in a page.
*/
export interface ExtractedTable {
  /**
   * Table identifier.
  */
  id?: string;
  /**
   * List of columns contained in the table.
  */
  columns?: ExtractedTableColumn[];
}

/**
 * Extraction information of a single page in a
 * with a document.
*/
export interface ExtractedPage {
  /**
   * Page number.
  */
  number?: number;
  /**
   * Height of the page (in pixels).
  */
  height?: number;
  /**
   * Width of the page (in pixels).
  */
  width?: number;
  /**
   * Cluster identifier.
  */
  clusterId?: number;
  /**
   * List of Key-Value pairs extracted from the page.
  */
  keyValuePairs?: ExtractedKeyValuePair[];
  /**
   * List of Tables and their information extracted from the page.
  */
  tables?: ExtractedTable[];
}

/**
 * Analyze API call result.
*/
export interface AnalyzeResult {
  /**
   * Status of the analyze operation. Possible values include: 'success', 'partialSuccess',
   * 'failure'
  */
  status?: string;
  /**
   * Page level information extracted in the analyzed
   * document.
  */
  pages?: ExtractedPage[];
  /**
   * List of errors reported during the analyze
   * operation.
  */
  errors?: FormOperationError[];
}

/**
 * An object representing a recognized word.
*/
export interface Word {
  /**
   * Bounding box of a recognized word.
  */
  boundingBox: number[];
  /**
   * The text content of the word.
  */
  text: string;
  /**
   * Qualitative confidence measure. Possible values include: 'High', 'Low'
  */
  confidence?: string;
}

/**
 * An object representing a recognized text line.
*/
export interface Line {
  /**
   * Bounding box of a recognized line.
  */
  boundingBox?: number[];
  /**
   * The text content of the line.
  */
  text?: string;
  /**
   * List of words in the text line.
  */
  words?: Word[];
}

/**
 * An object representing a recognized text region
*/
export interface TextRecognitionResult {
  /**
   * The 1-based page number of the recognition result.
  */
  page?: number;
  /**
   * The orientation of the image in degrees in the clockwise direction. Range between [0, 360).
  */
  clockwiseOrientation?: number;
  /**
   * The width of the image in pixels or the PDF in inches.
  */
  width?: number;
  /**
   * The height of the image in pixels or the PDF in inches.
  */
  height?: number;
  /**
   * The unit used in the Width, Height and BoundingBox. For images, the unit is 'pixel'. For PDF,
   * the unit is 'inch'. Possible values include: 'pixel', 'inch'
  */
  unit?: string;
  /**
   * A list of recognized text lines.
  */
  lines: Line[];
}

/**
 * Reference to an OCR word.
*/
export interface ElementReference {
  ref?: string;
}

/**
 * Base class representing a recognized field value.
*/
export interface FieldValue {
  /**
   * OCR text content of the recognized field.
  */
  text?: string;
  /**
   * List of references to OCR words comprising the recognized field value.
  */
  elements?: ElementReference[];
  /**
   * Polymorphic Discriminator
  */
  valueType: string;
}

/**
 * A set of extracted fields corresponding to a semantic object, such as a receipt, in the input
 * document.
*/
export interface UnderstandingResult {
  /**
   * List of pages where the document is found.
  */
  pages?: number[];
  /**
   * Dictionary of recognized field values.
  */
  fields?: { [propertyName: string]: FieldValue };
}

/**
 * Analysis result of the 'Batch Read Receipt' operation.
*/
export interface ReadReceiptResult {
  /**
   * Status of the read operation. Possible values include: 'Not Started', 'Running', 'Failed',
   * 'Succeeded'
  */
  status?: string;
  /**
   * Text recognition result of the 'Batch Read Receipt' operation.
  */
  recognitionResults?: TextRecognitionResult[];
  /**
   * Semantic understanding result of the 'Batch Read Receipt' operation.
  */
  understandingResults?: UnderstandingResult[];
}

/**
 * Recognized string field value.
*/
export interface StringValue extends FieldValue {
  /**
   * String value of the recognized field.
  */
  value?: string;
}

/**
 * Recognized numeric field value.
*/
export interface NumberValue extends FieldValue {
  /**
   * Numeric value of the recognized field.
  */
  value?: number;
}

/**
 * Details about the API request error.
*/
export interface ComputerVisionError {
  /**
   * The error code.
  */
  code: any;
  /**
   * A message explaining the error reported by the service.
  */
  message: string;
  /**
   * A unique request identifier.
  */
  requestId?: string;
}

export interface ImageUrl {
  /**
   * Publicly reachable URL of an image.
  */
  url: string;
}
