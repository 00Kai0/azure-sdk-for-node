/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

var util = require('util');
var _ = require('underscore');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var ResourceManagementClient = ( /** @lends ResourceManagementClient */ function() {
  /**
   * @class
   * Initializes a new instance of the ResourceManagementClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets or sets
   * subscription credentials which uniquely identify Windows  Azure
   * subscription. The subscription ID forms part of the URI for  every call
   * that you make to the Service Management API.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets or sets the URI used as the base for all
   * cloud service management requests.
   * 
   * @param {Array} filters
   */
  function ResourceManagementClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    ResourceManagementClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://TBD';
    }
    /**
     * Provides an instance of the
     * [DeploymentOperationOperations](-DeploymentOperationOperations.html)
     * object.
     * @type {object}
     */
    this.deploymentOperations = new DeploymentOperationOperations(this);
    /**
     * Provides an instance of the
     * [DeploymentOperations](-DeploymentOperations.html) object.
     * @type {object}
     */
    this.deployments = new DeploymentOperations(this);
    /**
     * Provides an instance of the
     * [ProviderOperations](-ProviderOperations.html) object.
     * @type {object}
     */
    this.providers = new ProviderOperations(this);
    /**
     * Provides an instance of the
     * [ResourceGroupOperations](-ResourceGroupOperations.html) object.
     * @type {object}
     */
    this.resourceGroups = new ResourceGroupOperations(this);
    /**
     * Provides an instance of the
     * [ResourceOperations](-ResourceOperations.html) object.
     * @type {object}
     */
    this.resources = new ResourceOperations(this);
  }
  
  util.inherits(ResourceManagementClient, Service);
  
  
  return ResourceManagementClient;
})();
exports.ResourceManagementClient = ResourceManagementClient;

var DeploymentOperationOperations = ( /** @lends DeploymentOperationOperations */ function() {
  /**
   * @class
   * Operations for managing deployment operations.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [ResourceManagementClient] {@link
   * ResourceManagementClient~ResourceManagementClient}.
   * See [deploymentOperations] {@link
   * ResourceManagementClient~ResourceManagementClient#deploymentOperations}.
   * Initializes a new instance of the DeploymentOperationOperations class.
   * @constructor
   * 
   * @param {ResourceManagementClient} client Reference to the service client.
   */
  function DeploymentOperationOperations(client) {
    this.client = client;
  }
  
  /**
   * Get a list of deployments operations.
   * 
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   * 
   * @param {string} deploymentName The name of the deployment.
   * 
   * @param {string} operationId Operation Id.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeploymentOperationOperations.prototype.get = function(resourceGroupName, deploymentName, operationId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (operationId === null || operationId === undefined) {
      return callback(new Error('operationId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '/deployments/' + deploymentName + '/operations/' + operationId + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var operationInstance = {};
        result.operation = operationInstance;
        
        var subscriptionIdValue = responseDoc['subscriptionId'];
        if (subscriptionIdValue) {
          var subscriptionIdInstance = subscriptionIdValue;
          operationInstance.subscriptionId = subscriptionIdInstance;
        }
        
        var resourceGroupValue = responseDoc['resourceGroup'];
        if (resourceGroupValue) {
          var resourceGroupInstance = resourceGroupValue;
          operationInstance.resourceGroup = resourceGroupInstance;
        }
        
        var deploymentNameValue = responseDoc['deploymentName'];
        if (deploymentNameValue) {
          var deploymentNameInstance = deploymentNameValue;
          operationInstance.deploymentName = deploymentNameInstance;
        }
        
        var operationIdValue = responseDoc['operationId'];
        if (operationIdValue) {
          var operationIdInstance = operationIdValue;
          operationInstance.operationId = operationIdInstance;
        }
        
        var propertiesValue = responseDoc['properties'];
        if (propertiesValue) {
          var propertiesInstance = {};
          operationInstance.properties = propertiesInstance;
          
          var provisioningStateValue = propertiesValue['provisioningState'];
          if (provisioningStateValue) {
            var provisioningStateInstance = provisioningStateValue;
            propertiesInstance.provisioningState = provisioningStateInstance;
          }
          
          var timestampValue = propertiesValue['timestamp'];
          if (timestampValue) {
            var timestampInstance = timestampValue;
            propertiesInstance.timestamp = timestampInstance;
          }
          
          var statusCodeValue = propertiesValue['statusCode'];
          if (statusCodeValue) {
            var statusCodeInstance = statusCodeValue;
            propertiesInstance.statusCode = statusCodeInstance;
          }
          
          var statusMessageValue = propertiesValue['statusMessage'];
          if (statusMessageValue) {
            var statusMessageInstance = statusMessageValue;
            propertiesInstance.statusMessage = statusMessageInstance;
          }
          
          var targetResourceValue = propertiesValue['targetResource'];
          if (targetResourceValue) {
            var targetResourceInstance = {};
            propertiesInstance.targetResource = targetResourceInstance;
            
            var subscriptionIdValue2 = targetResourceValue['subscriptionId'];
            if (subscriptionIdValue2) {
              var subscriptionIdInstance2 = subscriptionIdValue2;
              targetResourceInstance.subscriptionId = subscriptionIdInstance2;
            }
            
            var resourceGroupValue2 = targetResourceValue['resourceGroup'];
            if (resourceGroupValue2) {
              var resourceGroupInstance2 = resourceGroupValue2;
              targetResourceInstance.resourceGroup = resourceGroupInstance2;
            }
            
            var resourceNameValue = targetResourceValue['resourceName'];
            if (resourceNameValue) {
              var resourceNameInstance = resourceNameValue;
              targetResourceInstance.resourceName = resourceNameInstance;
            }
            
            var resourceTypeValue = targetResourceValue['resourceType'];
            if (resourceTypeValue) {
              var resourceTypeInstance = resourceTypeValue;
              targetResourceInstance.resourceType = resourceTypeInstance;
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets a list of deployments operations.
   * 
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   * 
   * @param {string} deploymentName The name of the deployment.
   * 
   * @param {DeploymentOperationsListParameters} [parametersOrCallback] Query
   * parameters.
   * 
   * @param {number} [parametersOrCallback.top] Get or sets the number of
   * records to return. Optional.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeploymentOperationOperations.prototype.list = function(resourceGroupName, deploymentName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '/deployments/' + deploymentName + '/operations?';
    if (parameters && parameters.top) {
      url2 = url2 + '$top=' + encodeURIComponent(parameters.top.toString());
    }
    url2 = url2 + '&api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { operations: [] };
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var deploymentOperationInstance = {};
            result.operations.push(deploymentOperationInstance);
            
            var subscriptionIdValue = valueValue['subscriptionId'];
            if (subscriptionIdValue) {
              var subscriptionIdInstance = subscriptionIdValue;
              deploymentOperationInstance.subscriptionId = subscriptionIdInstance;
            }
            
            var resourceGroupValue = valueValue['resourceGroup'];
            if (resourceGroupValue) {
              var resourceGroupInstance = resourceGroupValue;
              deploymentOperationInstance.resourceGroup = resourceGroupInstance;
            }
            
            var deploymentNameValue = valueValue['deploymentName'];
            if (deploymentNameValue) {
              var deploymentNameInstance = deploymentNameValue;
              deploymentOperationInstance.deploymentName = deploymentNameInstance;
            }
            
            var operationIdValue = valueValue['operationId'];
            if (operationIdValue) {
              var operationIdInstance = operationIdValue;
              deploymentOperationInstance.operationId = operationIdInstance;
            }
            
            var propertiesValue = valueValue['properties'];
            if (propertiesValue) {
              var propertiesInstance = {};
              deploymentOperationInstance.properties = propertiesInstance;
              
              var provisioningStateValue = propertiesValue['provisioningState'];
              if (provisioningStateValue) {
                var provisioningStateInstance = provisioningStateValue;
                propertiesInstance.provisioningState = provisioningStateInstance;
              }
              
              var timestampValue = propertiesValue['timestamp'];
              if (timestampValue) {
                var timestampInstance = timestampValue;
                propertiesInstance.timestamp = timestampInstance;
              }
              
              var statusCodeValue = propertiesValue['statusCode'];
              if (statusCodeValue) {
                var statusCodeInstance = statusCodeValue;
                propertiesInstance.statusCode = statusCodeInstance;
              }
              
              var statusMessageValue = propertiesValue['statusMessage'];
              if (statusMessageValue) {
                var statusMessageInstance = statusMessageValue;
                propertiesInstance.statusMessage = statusMessageInstance;
              }
              
              var targetResourceValue = propertiesValue['targetResource'];
              if (targetResourceValue) {
                var targetResourceInstance = {};
                propertiesInstance.targetResource = targetResourceInstance;
                
                var subscriptionIdValue2 = targetResourceValue['subscriptionId'];
                if (subscriptionIdValue2) {
                  var subscriptionIdInstance2 = subscriptionIdValue2;
                  targetResourceInstance.subscriptionId = subscriptionIdInstance2;
                }
                
                var resourceGroupValue2 = targetResourceValue['resourceGroup'];
                if (resourceGroupValue2) {
                  var resourceGroupInstance2 = resourceGroupValue2;
                  targetResourceInstance.resourceGroup = resourceGroupInstance2;
                }
                
                var resourceNameValue = targetResourceValue['resourceName'];
                if (resourceNameValue) {
                  var resourceNameInstance = resourceNameValue;
                  targetResourceInstance.resourceName = resourceNameInstance;
                }
                
                var resourceTypeValue = targetResourceValue['resourceType'];
                if (resourceTypeValue) {
                  var resourceTypeInstance = resourceTypeValue;
                  targetResourceInstance.resourceType = resourceTypeInstance;
                }
              }
            }
          }
        }
        
        var nextLinkValue = responseDoc['nextLink'];
        if (nextLinkValue) {
          var nextLinkInstance = nextLinkValue;
          result.nextLink = nextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets a next list of deployments operations.
   * 
   * @param {string} nextLink NextLink from the previous successful call to
   * List operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeploymentOperationOperations.prototype.listNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = nextLink;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { operations: [] };
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var deploymentOperationInstance = {};
            result.operations.push(deploymentOperationInstance);
            
            var subscriptionIdValue = valueValue['subscriptionId'];
            if (subscriptionIdValue) {
              var subscriptionIdInstance = subscriptionIdValue;
              deploymentOperationInstance.subscriptionId = subscriptionIdInstance;
            }
            
            var resourceGroupValue = valueValue['resourceGroup'];
            if (resourceGroupValue) {
              var resourceGroupInstance = resourceGroupValue;
              deploymentOperationInstance.resourceGroup = resourceGroupInstance;
            }
            
            var deploymentNameValue = valueValue['deploymentName'];
            if (deploymentNameValue) {
              var deploymentNameInstance = deploymentNameValue;
              deploymentOperationInstance.deploymentName = deploymentNameInstance;
            }
            
            var operationIdValue = valueValue['operationId'];
            if (operationIdValue) {
              var operationIdInstance = operationIdValue;
              deploymentOperationInstance.operationId = operationIdInstance;
            }
            
            var propertiesValue = valueValue['properties'];
            if (propertiesValue) {
              var propertiesInstance = {};
              deploymentOperationInstance.properties = propertiesInstance;
              
              var provisioningStateValue = propertiesValue['provisioningState'];
              if (provisioningStateValue) {
                var provisioningStateInstance = provisioningStateValue;
                propertiesInstance.provisioningState = provisioningStateInstance;
              }
              
              var timestampValue = propertiesValue['timestamp'];
              if (timestampValue) {
                var timestampInstance = timestampValue;
                propertiesInstance.timestamp = timestampInstance;
              }
              
              var statusCodeValue = propertiesValue['statusCode'];
              if (statusCodeValue) {
                var statusCodeInstance = statusCodeValue;
                propertiesInstance.statusCode = statusCodeInstance;
              }
              
              var statusMessageValue = propertiesValue['statusMessage'];
              if (statusMessageValue) {
                var statusMessageInstance = statusMessageValue;
                propertiesInstance.statusMessage = statusMessageInstance;
              }
              
              var targetResourceValue = propertiesValue['targetResource'];
              if (targetResourceValue) {
                var targetResourceInstance = {};
                propertiesInstance.targetResource = targetResourceInstance;
                
                var subscriptionIdValue2 = targetResourceValue['subscriptionId'];
                if (subscriptionIdValue2) {
                  var subscriptionIdInstance2 = subscriptionIdValue2;
                  targetResourceInstance.subscriptionId = subscriptionIdInstance2;
                }
                
                var resourceGroupValue2 = targetResourceValue['resourceGroup'];
                if (resourceGroupValue2) {
                  var resourceGroupInstance2 = resourceGroupValue2;
                  targetResourceInstance.resourceGroup = resourceGroupInstance2;
                }
                
                var resourceNameValue = targetResourceValue['resourceName'];
                if (resourceNameValue) {
                  var resourceNameInstance = resourceNameValue;
                  targetResourceInstance.resourceName = resourceNameInstance;
                }
                
                var resourceTypeValue = targetResourceValue['resourceType'];
                if (resourceTypeValue) {
                  var resourceTypeInstance = resourceTypeValue;
                  targetResourceInstance.resourceType = resourceTypeInstance;
                }
              }
            }
          }
        }
        
        var nextLinkValue = responseDoc['nextLink'];
        if (nextLinkValue) {
          var nextLinkInstance = nextLinkValue;
          result.nextLink = nextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return DeploymentOperationOperations;
})();

var DeploymentOperations = ( /** @lends DeploymentOperations */ function() {
  /**
   * @class
   * Operations for managing deployments.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [ResourceManagementClient] {@link
   * ResourceManagementClient~ResourceManagementClient}.
   * See [deployments] {@link
   * ResourceManagementClient~ResourceManagementClient#deployments}.
   * Initializes a new instance of the DeploymentOperations class.
   * @constructor
   * 
   * @param {ResourceManagementClient} client Reference to the service client.
   */
  function DeploymentOperations(client) {
    this.client = client;
  }
  
  /**
   * Cancel a currently running template deployment.
   * 
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   * 
   * @param {string} deploymentName The name of the deployment.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeploymentOperations.prototype.cancel = function(resourceGroupName, deploymentName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '/deployments/' + deploymentName + '/cancel?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 204) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Create a named template deployment using a template.
   * 
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   * 
   * @param {string} deploymentName The name of the deployment.
   * 
   * @param {BasicDeployment} parameters Additional parameters supplied to the
   * operation.
   * 
   * @param {TemplateLink} [parameters.templateLink] Gets or sets the URI
   * referencing the template. Use only one of Template or TemplateLink.
   * 
   * @param {string} [parameters.templateLink.uri] URI referencing the template.
   * 
   * @param {string} [parameters.templateLink.contentVersion] If included it
   * must match the ContentVersion in the template.
   * 
   * @param {ContentHash} [parameters.templateLink.contentHash] If included
   * must match hash of template.
   * 
   * @param {ContentHashAlgorithm}
   * [parameters.templateLink.contentHash.algorithm] Content hash algorithm
   * used to hash the content.
   * 
   * @param {string} [parameters.templateLink.contentHash.value] Expected hash
   * value of the content.
   * 
   * @param {string} [parameters.template] Template definition body. Use only
   * one of Template or TemplateLink.
   * 
   * @param {ParametersLink} [parameters.parametersLink] Gets or sets the URI
   * referencing the deployment parameters. Use only one of Parameters or
   * ParametersLink
   * 
   * @param {string} [parameters.parametersLink.uri] URI referencing the
   * template.
   * 
   * @param {string} [parameters.parametersLink.contentVersion] If included it
   * must match the ContentVersion in the template.
   * 
   * @param {ContentHash} [parameters.parametersLink.contentHash] If included
   * must match hash of template.
   * 
   * @param {ContentHashAlgorithm}
   * [parameters.parametersLink.contentHash.algorithm] Content hash algorithm
   * used to hash the content.
   * 
   * @param {string} [parameters.parametersLink.contentHash.value] Expected
   * hash value of the content.
   * 
   * @param {string} [parameters.parameters] Deployment parameters. Use only
   * one of Parameters or ParametersLink.
   * 
   * @param {DeploymentMode} parameters.mode Gets or sets the deployment mode.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeploymentOperations.prototype.create = function(resourceGroupName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.parametersLink) {
      if (parameters.parametersLink.contentHash) {
        if (parameters.parametersLink.contentHash.value === null || parameters.parametersLink.contentHash.value === undefined) {
          return callback(new Error('parameters.parametersLink.contentHash.value cannot be null.'));
        }
      }
      if (parameters.parametersLink.uri === null || parameters.parametersLink.uri === undefined) {
        return callback(new Error('parameters.parametersLink.uri cannot be null.'));
      }
    }
    if (parameters.templateLink) {
      if (parameters.templateLink.contentHash) {
        if (parameters.templateLink.contentHash.value === null || parameters.templateLink.contentHash.value === undefined) {
          return callback(new Error('parameters.templateLink.contentHash.value cannot be null.'));
        }
      }
      if (parameters.templateLink.uri === null || parameters.templateLink.uri === undefined) {
        return callback(new Error('parameters.templateLink.uri cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '/deployments/' + deploymentName + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var propertiesValue = {};
    requestDoc = {};
    requestDoc['properties'] = propertiesValue;
    
    if (parameters.templateLink) {
      var templateLinkValue = {};
      propertiesValue['templateLink'] = templateLinkValue;
      
      templateLinkValue['uri'] = parameters.templateLink.uri;
      
      if (parameters.templateLink.contentVersion) {
        templateLinkValue['contentVersion'] = parameters.templateLink.contentVersion;
      }
      
      if (parameters.templateLink.contentHash) {
        var contentHashValue = {};
        templateLinkValue['contentHash'] = contentHashValue;
        
        contentHashValue['algorithm'] = parameters.templateLink.contentHash.algorithm ? parameters.templateLink.contentHash.algorithm.toString() : 'Sha256';
        
        contentHashValue['value'] = parameters.templateLink.contentHash.value;
      }
    }
    
    if (parameters.template) {
      propertiesValue['template'] = parameters.template;
    }
    
    if (parameters.parametersLink) {
      var parametersLinkValue = {};
      propertiesValue['parametersLink'] = parametersLinkValue;
      
      parametersLinkValue['uri'] = parameters.parametersLink.uri;
      
      if (parameters.parametersLink.contentVersion) {
        parametersLinkValue['contentVersion'] = parameters.parametersLink.contentVersion;
      }
      
      if (parameters.parametersLink.contentHash) {
        var contentHashValue2 = {};
        parametersLinkValue['contentHash'] = contentHashValue2;
        
        contentHashValue2['algorithm'] = parameters.parametersLink.contentHash.algorithm ? parameters.parametersLink.contentHash.algorithm.toString() : 'Sha256';
        
        contentHashValue2['value'] = parameters.parametersLink.contentHash.value;
      }
    }
    
    if (parameters.parameters) {
      propertiesValue['parameters'] = parameters.parameters;
    }
    
    propertiesValue['mode'] = parameters.mode ? parameters.mode.toString() : 'Incremental';
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var resourceGroupValue = responseDoc['resourceGroup'];
        if (resourceGroupValue) {
          var resourceGroupInstance = resourceGroupValue;
          result.resourceGroup = resourceGroupInstance;
        }
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          result.name = nameInstance;
        }
        
        var propertiesValue2 = responseDoc['properties'];
        if (propertiesValue2) {
          var propertiesInstance = {};
          result.properties = propertiesInstance;
          
          var provisioningStateValue = propertiesValue2['provisioningState'];
          if (provisioningStateValue) {
            var provisioningStateInstance = provisioningStateValue;
            propertiesInstance.provisioningState = provisioningStateInstance;
          }
          
          var timestampValue = propertiesValue2['timestamp'];
          if (timestampValue) {
            var timestampInstance = timestampValue;
            propertiesInstance.timestamp = timestampInstance;
          }
          
          var outputsValue = propertiesValue2['outputs'];
          if (outputsValue) {
            var outputsInstance = outputsValue;
            propertiesInstance.outputs = outputsInstance;
          }
          
          var templateLinkValue2 = propertiesValue2['templateLink'];
          if (templateLinkValue2) {
            var templateLinkInstance = {};
            propertiesInstance.templateLink = templateLinkInstance;
            
            var uriValue = templateLinkValue2['uri'];
            if (uriValue) {
              var uriInstance = uriValue;
              templateLinkInstance.uri = uriInstance;
            }
            
            var contentVersionValue = templateLinkValue2['contentVersion'];
            if (contentVersionValue) {
              var contentVersionInstance = contentVersionValue;
              templateLinkInstance.contentVersion = contentVersionInstance;
            }
            
            var contentHashValue3 = templateLinkValue2['contentHash'];
            if (contentHashValue3) {
              var contentHashInstance = {};
              templateLinkInstance.contentHash = contentHashInstance;
              
              var algorithmValue = contentHashValue3['algorithm'];
              if (algorithmValue) {
                var algorithmInstance = algorithmValue;
                contentHashInstance.algorithm = algorithmInstance;
              }
              
              var valueValue = contentHashValue3['value'];
              if (valueValue) {
                var valueInstance = valueValue;
                contentHashInstance.value = valueInstance;
              }
            }
          }
          
          var templateValue = propertiesValue2['template'];
          if (templateValue) {
            var templateInstance = templateValue;
            propertiesInstance.template = templateInstance;
          }
          
          var parametersLinkValue2 = propertiesValue2['parametersLink'];
          if (parametersLinkValue2) {
            var parametersLinkInstance = {};
            propertiesInstance.parametersLink = parametersLinkInstance;
            
            var uriValue2 = parametersLinkValue2['uri'];
            if (uriValue2) {
              var uriInstance2 = uriValue2;
              parametersLinkInstance.uri = uriInstance2;
            }
            
            var contentVersionValue2 = parametersLinkValue2['contentVersion'];
            if (contentVersionValue2) {
              var contentVersionInstance2 = contentVersionValue2;
              parametersLinkInstance.contentVersion = contentVersionInstance2;
            }
            
            var contentHashValue4 = parametersLinkValue2['contentHash'];
            if (contentHashValue4) {
              var contentHashInstance2 = {};
              parametersLinkInstance.contentHash = contentHashInstance2;
              
              var algorithmValue2 = contentHashValue4['algorithm'];
              if (algorithmValue2) {
                var algorithmInstance2 = algorithmValue2;
                contentHashInstance2.algorithm = algorithmInstance2;
              }
              
              var valueValue2 = contentHashValue4['value'];
              if (valueValue2) {
                var valueInstance2 = valueValue2;
                contentHashInstance2.value = valueInstance2;
              }
            }
          }
          
          var parametersValue = propertiesValue2['parameters'];
          if (parametersValue) {
            var parametersInstance = parametersValue;
            propertiesInstance.parameters = parametersInstance;
          }
          
          var modeValue = propertiesValue2['mode'];
          if (modeValue) {
            var modeInstance = modeValue;
            propertiesInstance.mode = modeInstance;
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get a deployment.
   * 
   * @param {string} resourceGroupName The name of the resource group to get.
   * The name is case insensitive.
   * 
   * @param {string} deploymentName The name of the deployment.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeploymentOperations.prototype.get = function(resourceGroupName, deploymentName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '/deployments/' + deploymentName + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var resourceGroupValue = responseDoc['resourceGroup'];
        if (resourceGroupValue) {
          var resourceGroupInstance = resourceGroupValue;
          result.resourceGroup = resourceGroupInstance;
        }
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          result.name = nameInstance;
        }
        
        var propertiesValue = responseDoc['properties'];
        if (propertiesValue) {
          var propertiesInstance = {};
          result.properties = propertiesInstance;
          
          var provisioningStateValue = propertiesValue['provisioningState'];
          if (provisioningStateValue) {
            var provisioningStateInstance = provisioningStateValue;
            propertiesInstance.provisioningState = provisioningStateInstance;
          }
          
          var timestampValue = propertiesValue['timestamp'];
          if (timestampValue) {
            var timestampInstance = timestampValue;
            propertiesInstance.timestamp = timestampInstance;
          }
          
          var outputsValue = propertiesValue['outputs'];
          if (outputsValue) {
            var outputsInstance = outputsValue;
            propertiesInstance.outputs = outputsInstance;
          }
          
          var templateLinkValue = propertiesValue['templateLink'];
          if (templateLinkValue) {
            var templateLinkInstance = {};
            propertiesInstance.templateLink = templateLinkInstance;
            
            var uriValue = templateLinkValue['uri'];
            if (uriValue) {
              var uriInstance = uriValue;
              templateLinkInstance.uri = uriInstance;
            }
            
            var contentVersionValue = templateLinkValue['contentVersion'];
            if (contentVersionValue) {
              var contentVersionInstance = contentVersionValue;
              templateLinkInstance.contentVersion = contentVersionInstance;
            }
            
            var contentHashValue = templateLinkValue['contentHash'];
            if (contentHashValue) {
              var contentHashInstance = {};
              templateLinkInstance.contentHash = contentHashInstance;
              
              var algorithmValue = contentHashValue['algorithm'];
              if (algorithmValue) {
                var algorithmInstance = algorithmValue;
                contentHashInstance.algorithm = algorithmInstance;
              }
              
              var valueValue = contentHashValue['value'];
              if (valueValue) {
                var valueInstance = valueValue;
                contentHashInstance.value = valueInstance;
              }
            }
          }
          
          var templateValue = propertiesValue['template'];
          if (templateValue) {
            var templateInstance = templateValue;
            propertiesInstance.template = templateInstance;
          }
          
          var parametersLinkValue = propertiesValue['parametersLink'];
          if (parametersLinkValue) {
            var parametersLinkInstance = {};
            propertiesInstance.parametersLink = parametersLinkInstance;
            
            var uriValue2 = parametersLinkValue['uri'];
            if (uriValue2) {
              var uriInstance2 = uriValue2;
              parametersLinkInstance.uri = uriInstance2;
            }
            
            var contentVersionValue2 = parametersLinkValue['contentVersion'];
            if (contentVersionValue2) {
              var contentVersionInstance2 = contentVersionValue2;
              parametersLinkInstance.contentVersion = contentVersionInstance2;
            }
            
            var contentHashValue2 = parametersLinkValue['contentHash'];
            if (contentHashValue2) {
              var contentHashInstance2 = {};
              parametersLinkInstance.contentHash = contentHashInstance2;
              
              var algorithmValue2 = contentHashValue2['algorithm'];
              if (algorithmValue2) {
                var algorithmInstance2 = algorithmValue2;
                contentHashInstance2.algorithm = algorithmInstance2;
              }
              
              var valueValue2 = contentHashValue2['value'];
              if (valueValue2) {
                var valueInstance2 = valueValue2;
                contentHashInstance2.value = valueInstance2;
              }
            }
          }
          
          var parametersValue = propertiesValue['parameters'];
          if (parametersValue) {
            var parametersInstance = parametersValue;
            propertiesInstance.parameters = parametersInstance;
          }
          
          var modeValue = propertiesValue['mode'];
          if (modeValue) {
            var modeInstance = modeValue;
            propertiesInstance.mode = modeInstance;
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get a list of deployments.
   * 
   * @param {DeploymentListParameters} parameters Query parameters. If null is
   * passed returns all deployments.
   * 
   * @param {string} parameters.resourceGroupName The name of the resource
   * group to filter by. The name is case insensitive.
   * 
   * @param {number} [parameters.top] Get or sets the number of records to
   * return. Optional.
   * 
   * @param {string} [parameters.provisioningState] Get or sets the
   * provisioning state to filer by. Optional.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeploymentOperations.prototype.list = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.resourceGroupName === null || parameters.resourceGroupName === undefined) {
      return callback(new Error('parameters.resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/';
    url2 = url2 + 'resourcegroups/' + encodeURIComponent(parameters.resourceGroupName) + '/';
    url2 = url2 + 'deployments/?';
    if (parameters.provisioningState) {
      url2 = url2 + '$filter=provisioningState eq ' + encodeURIComponent(parameters.provisioningState);
    }
    if (parameters.top) {
      url2 = url2 + '&$top=' + encodeURIComponent(parameters.top.toString());
    }
    url2 = url2 + '&api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { deployments: [] };
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var deploymentInstance = {};
            result.deployments.push(deploymentInstance);
            
            var resourceGroupValue = valueValue['resourceGroup'];
            if (resourceGroupValue) {
              var resourceGroupInstance = resourceGroupValue;
              deploymentInstance.resourceGroup = resourceGroupInstance;
            }
            
            var nameValue = valueValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              deploymentInstance.deploymentName = nameInstance;
            }
            
            var propertiesValue = valueValue['properties'];
            if (propertiesValue) {
              var propertiesInstance = {};
              deploymentInstance.properties = propertiesInstance;
              
              var provisioningStateValue = propertiesValue['provisioningState'];
              if (provisioningStateValue) {
                var provisioningStateInstance = provisioningStateValue;
                propertiesInstance.provisioningState = provisioningStateInstance;
              }
              
              var timestampValue = propertiesValue['timestamp'];
              if (timestampValue) {
                var timestampInstance = timestampValue;
                propertiesInstance.timestamp = timestampInstance;
              }
              
              var outputsValue = propertiesValue['outputs'];
              if (outputsValue) {
                var outputsInstance = outputsValue;
                propertiesInstance.outputs = outputsInstance;
              }
              
              var templateLinkValue = propertiesValue['templateLink'];
              if (templateLinkValue) {
                var templateLinkInstance = {};
                propertiesInstance.templateLink = templateLinkInstance;
                
                var uriValue = templateLinkValue['uri'];
                if (uriValue) {
                  var uriInstance = uriValue;
                  templateLinkInstance.uri = uriInstance;
                }
                
                var contentVersionValue = templateLinkValue['contentVersion'];
                if (contentVersionValue) {
                  var contentVersionInstance = contentVersionValue;
                  templateLinkInstance.contentVersion = contentVersionInstance;
                }
                
                var contentHashValue = templateLinkValue['contentHash'];
                if (contentHashValue) {
                  var contentHashInstance = {};
                  templateLinkInstance.contentHash = contentHashInstance;
                  
                  var algorithmValue = contentHashValue['algorithm'];
                  if (algorithmValue) {
                    var algorithmInstance = algorithmValue;
                    contentHashInstance.algorithm = algorithmInstance;
                  }
                  
                  var valueValue2 = contentHashValue['value'];
                  if (valueValue2) {
                    var valueInstance = valueValue2;
                    contentHashInstance.value = valueInstance;
                  }
                }
              }
              
              var templateValue = propertiesValue['template'];
              if (templateValue) {
                var templateInstance = templateValue;
                propertiesInstance.template = templateInstance;
              }
              
              var parametersLinkValue = propertiesValue['parametersLink'];
              if (parametersLinkValue) {
                var parametersLinkInstance = {};
                propertiesInstance.parametersLink = parametersLinkInstance;
                
                var uriValue2 = parametersLinkValue['uri'];
                if (uriValue2) {
                  var uriInstance2 = uriValue2;
                  parametersLinkInstance.uri = uriInstance2;
                }
                
                var contentVersionValue2 = parametersLinkValue['contentVersion'];
                if (contentVersionValue2) {
                  var contentVersionInstance2 = contentVersionValue2;
                  parametersLinkInstance.contentVersion = contentVersionInstance2;
                }
                
                var contentHashValue2 = parametersLinkValue['contentHash'];
                if (contentHashValue2) {
                  var contentHashInstance2 = {};
                  parametersLinkInstance.contentHash = contentHashInstance2;
                  
                  var algorithmValue2 = contentHashValue2['algorithm'];
                  if (algorithmValue2) {
                    var algorithmInstance2 = algorithmValue2;
                    contentHashInstance2.algorithm = algorithmInstance2;
                  }
                  
                  var valueValue3 = contentHashValue2['value'];
                  if (valueValue3) {
                    var valueInstance2 = valueValue3;
                    contentHashInstance2.value = valueInstance2;
                  }
                }
              }
              
              var parametersValue = propertiesValue['parameters'];
              if (parametersValue) {
                var parametersInstance = parametersValue;
                propertiesInstance.parameters = parametersInstance;
              }
              
              var modeValue = propertiesValue['mode'];
              if (modeValue) {
                var modeInstance = modeValue;
                propertiesInstance.mode = modeInstance;
              }
            }
          }
        }
        
        var nextLinkValue = responseDoc['nextLink'];
        if (nextLinkValue) {
          var nextLinkInstance = nextLinkValue;
          result.nextLink = nextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get a list of deployments.
   * 
   * @param {string} nextLink NextLink from the previous successful call to
   * List operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeploymentOperations.prototype.listNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = nextLink;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { deployments: [] };
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var deploymentInstance = {};
            result.deployments.push(deploymentInstance);
            
            var resourceGroupValue = valueValue['resourceGroup'];
            if (resourceGroupValue) {
              var resourceGroupInstance = resourceGroupValue;
              deploymentInstance.resourceGroup = resourceGroupInstance;
            }
            
            var nameValue = valueValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              deploymentInstance.deploymentName = nameInstance;
            }
            
            var propertiesValue = valueValue['properties'];
            if (propertiesValue) {
              var propertiesInstance = {};
              deploymentInstance.properties = propertiesInstance;
              
              var provisioningStateValue = propertiesValue['provisioningState'];
              if (provisioningStateValue) {
                var provisioningStateInstance = provisioningStateValue;
                propertiesInstance.provisioningState = provisioningStateInstance;
              }
              
              var timestampValue = propertiesValue['timestamp'];
              if (timestampValue) {
                var timestampInstance = timestampValue;
                propertiesInstance.timestamp = timestampInstance;
              }
              
              var outputsValue = propertiesValue['outputs'];
              if (outputsValue) {
                var outputsInstance = outputsValue;
                propertiesInstance.outputs = outputsInstance;
              }
              
              var templateLinkValue = propertiesValue['templateLink'];
              if (templateLinkValue) {
                var templateLinkInstance = {};
                propertiesInstance.templateLink = templateLinkInstance;
                
                var uriValue = templateLinkValue['uri'];
                if (uriValue) {
                  var uriInstance = uriValue;
                  templateLinkInstance.uri = uriInstance;
                }
                
                var contentVersionValue = templateLinkValue['contentVersion'];
                if (contentVersionValue) {
                  var contentVersionInstance = contentVersionValue;
                  templateLinkInstance.contentVersion = contentVersionInstance;
                }
                
                var contentHashValue = templateLinkValue['contentHash'];
                if (contentHashValue) {
                  var contentHashInstance = {};
                  templateLinkInstance.contentHash = contentHashInstance;
                  
                  var algorithmValue = contentHashValue['algorithm'];
                  if (algorithmValue) {
                    var algorithmInstance = algorithmValue;
                    contentHashInstance.algorithm = algorithmInstance;
                  }
                  
                  var valueValue2 = contentHashValue['value'];
                  if (valueValue2) {
                    var valueInstance = valueValue2;
                    contentHashInstance.value = valueInstance;
                  }
                }
              }
              
              var templateValue = propertiesValue['template'];
              if (templateValue) {
                var templateInstance = templateValue;
                propertiesInstance.template = templateInstance;
              }
              
              var parametersLinkValue = propertiesValue['parametersLink'];
              if (parametersLinkValue) {
                var parametersLinkInstance = {};
                propertiesInstance.parametersLink = parametersLinkInstance;
                
                var uriValue2 = parametersLinkValue['uri'];
                if (uriValue2) {
                  var uriInstance2 = uriValue2;
                  parametersLinkInstance.uri = uriInstance2;
                }
                
                var contentVersionValue2 = parametersLinkValue['contentVersion'];
                if (contentVersionValue2) {
                  var contentVersionInstance2 = contentVersionValue2;
                  parametersLinkInstance.contentVersion = contentVersionInstance2;
                }
                
                var contentHashValue2 = parametersLinkValue['contentHash'];
                if (contentHashValue2) {
                  var contentHashInstance2 = {};
                  parametersLinkInstance.contentHash = contentHashInstance2;
                  
                  var algorithmValue2 = contentHashValue2['algorithm'];
                  if (algorithmValue2) {
                    var algorithmInstance2 = algorithmValue2;
                    contentHashInstance2.algorithm = algorithmInstance2;
                  }
                  
                  var valueValue3 = contentHashValue2['value'];
                  if (valueValue3) {
                    var valueInstance2 = valueValue3;
                    contentHashInstance2.value = valueInstance2;
                  }
                }
              }
              
              var parametersValue = propertiesValue['parameters'];
              if (parametersValue) {
                var parametersInstance = parametersValue;
                propertiesInstance.parameters = parametersInstance;
              }
              
              var modeValue = propertiesValue['mode'];
              if (modeValue) {
                var modeInstance = modeValue;
                propertiesInstance.mode = modeInstance;
              }
            }
          }
        }
        
        var nextLinkValue = responseDoc['nextLink'];
        if (nextLinkValue) {
          var nextLinkInstance = nextLinkValue;
          result.nextLink = nextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Validate a deployment template.
   * 
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   * 
   * @param {DeploymentValidationMode} deploymentValidationMode Type of
   * validation to perform.
   * 
   * @param {BasicDeployment} parameters Parameters supplied to the service
   * operation.
   * 
   * @param {TemplateLink} [parameters.templateLink] Gets or sets the URI
   * referencing the template. Use only one of Template or TemplateLink.
   * 
   * @param {string} [parameters.templateLink.uri] URI referencing the template.
   * 
   * @param {string} [parameters.templateLink.contentVersion] If included it
   * must match the ContentVersion in the template.
   * 
   * @param {ContentHash} [parameters.templateLink.contentHash] If included
   * must match hash of template.
   * 
   * @param {ContentHashAlgorithm}
   * [parameters.templateLink.contentHash.algorithm] Content hash algorithm
   * used to hash the content.
   * 
   * @param {string} [parameters.templateLink.contentHash.value] Expected hash
   * value of the content.
   * 
   * @param {string} [parameters.template] Template definition body. Use only
   * one of Template or TemplateLink.
   * 
   * @param {ParametersLink} [parameters.parametersLink] Gets or sets the URI
   * referencing the deployment parameters. Use only one of Parameters or
   * ParametersLink
   * 
   * @param {string} [parameters.parametersLink.uri] URI referencing the
   * template.
   * 
   * @param {string} [parameters.parametersLink.contentVersion] If included it
   * must match the ContentVersion in the template.
   * 
   * @param {ContentHash} [parameters.parametersLink.contentHash] If included
   * must match hash of template.
   * 
   * @param {ContentHashAlgorithm}
   * [parameters.parametersLink.contentHash.algorithm] Content hash algorithm
   * used to hash the content.
   * 
   * @param {string} [parameters.parametersLink.contentHash.value] Expected
   * hash value of the content.
   * 
   * @param {string} [parameters.parameters] Deployment parameters. Use only
   * one of Parameters or ParametersLink.
   * 
   * @param {DeploymentMode} parameters.mode Gets or sets the deployment mode.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeploymentOperations.prototype.validate = function(resourceGroupName, deploymentValidationMode, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.parametersLink) {
      if (parameters.parametersLink.contentHash) {
        if (parameters.parametersLink.contentHash.value === null || parameters.parametersLink.contentHash.value === undefined) {
          return callback(new Error('parameters.parametersLink.contentHash.value cannot be null.'));
        }
      }
      if (parameters.parametersLink.uri === null || parameters.parametersLink.uri === undefined) {
        return callback(new Error('parameters.parametersLink.uri cannot be null.'));
      }
    }
    if (parameters.templateLink) {
      if (parameters.templateLink.contentHash) {
        if (parameters.templateLink.contentHash.value === null || parameters.templateLink.contentHash.value === undefined) {
          return callback(new Error('parameters.templateLink.contentHash.value cannot be null.'));
        }
      }
      if (parameters.templateLink.uri === null || parameters.templateLink.uri === undefined) {
        return callback(new Error('parameters.templateLink.uri cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '/validate-template?';
    url2 = url2 + 'validationType=' + encodeURIComponent(deploymentValidationMode ? deploymentValidationMode.toString() : 'Full');
    url2 = url2 + '&api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var propertiesValue = {};
    requestDoc = {};
    requestDoc['properties'] = propertiesValue;
    
    if (parameters.templateLink) {
      var templateLinkValue = {};
      propertiesValue['templateLink'] = templateLinkValue;
      
      templateLinkValue['uri'] = parameters.templateLink.uri;
      
      if (parameters.templateLink.contentVersion) {
        templateLinkValue['contentVersion'] = parameters.templateLink.contentVersion;
      }
      
      if (parameters.templateLink.contentHash) {
        var contentHashValue = {};
        templateLinkValue['contentHash'] = contentHashValue;
        
        contentHashValue['algorithm'] = parameters.templateLink.contentHash.algorithm ? parameters.templateLink.contentHash.algorithm.toString() : 'Sha256';
        
        contentHashValue['value'] = parameters.templateLink.contentHash.value;
      }
    }
    
    if (parameters.template) {
      propertiesValue['template'] = parameters.template;
    }
    
    if (parameters.parametersLink) {
      var parametersLinkValue = {};
      propertiesValue['parametersLink'] = parametersLinkValue;
      
      parametersLinkValue['uri'] = parameters.parametersLink.uri;
      
      if (parameters.parametersLink.contentVersion) {
        parametersLinkValue['contentVersion'] = parameters.parametersLink.contentVersion;
      }
      
      if (parameters.parametersLink.contentHash) {
        var contentHashValue2 = {};
        parametersLinkValue['contentHash'] = contentHashValue2;
        
        contentHashValue2['algorithm'] = parameters.parametersLink.contentHash.algorithm ? parameters.parametersLink.contentHash.algorithm.toString() : 'Sha256';
        
        contentHashValue2['value'] = parameters.parametersLink.contentHash.value;
      }
    }
    
    if (parameters.parameters) {
      propertiesValue['parameters'] = parameters.parameters;
    }
    
    propertiesValue['mode'] = parameters.mode ? parameters.mode.toString() : 'Incremental';
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { errors: [] };
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var codeValue = responseDoc['code'];
        if (codeValue) {
          var codeInstance = codeValue;
          result.code = codeInstance;
        }
        
        var messageValue = responseDoc['message'];
        if (messageValue) {
          var messageInstance = messageValue;
          result.message = messageInstance;
        }
        
        var targetValue = responseDoc['target'];
        if (targetValue) {
          var targetInstance = targetValue;
          result.target = targetInstance;
        }
        
        var detailsArray = responseDoc['details'];
        if (detailsArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < detailsArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var detailsValue = detailsArray[loweredIndex1];
            var resourceManagementErrorInstance = {};
            result.errors.push(resourceManagementErrorInstance);
            
            var codeValue2 = detailsValue['code'];
            if (codeValue2) {
              var codeInstance2 = codeValue2;
              resourceManagementErrorInstance.code = codeInstance2;
            }
            
            var messageValue2 = detailsValue['message'];
            if (messageValue2) {
              var messageInstance2 = messageValue2;
              resourceManagementErrorInstance.message = messageInstance2;
            }
            
            var targetValue2 = detailsValue['target'];
            if (targetValue2) {
              var targetInstance2 = targetValue2;
              resourceManagementErrorInstance.target = targetInstance2;
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return DeploymentOperations;
})();

var ProviderOperations = ( /** @lends ProviderOperations */ function() {
  /**
   * @class
   * Operations for managing providers.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [ResourceManagementClient] {@link
   * ResourceManagementClient~ResourceManagementClient}.
   * See [providers] {@link
   * ResourceManagementClient~ResourceManagementClient#providers}.
   * Initializes a new instance of the ProviderOperations class.
   * @constructor
   * 
   * @param {ResourceManagementClient} client Reference to the service client.
   */
  function ProviderOperations(client) {
    this.client = client;
  }
  
  /**
   * Gets a resource provider.
   * 
   * @param {string} resourceProviderNamespace Namespace of the resource
   * provider.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ProviderOperations.prototype.get = function(resourceProviderNamespace, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceProviderNamespace === null || resourceProviderNamespace === undefined) {
      return callback(new Error('resourceProviderNamespace cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/providers/' + resourceProviderNamespace + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var providerInstance = { resourceTypes: [] };
        result.provider = providerInstance;
        
        var namespaceValue = responseDoc['namespace'];
        if (namespaceValue) {
          var namespaceInstance = namespaceValue;
          providerInstance.namespace = namespaceInstance;
        }
        
        var registrationStateValue = responseDoc['registrationState'];
        if (registrationStateValue) {
          var registrationStateInstance = registrationStateValue;
          providerInstance.registrationState = registrationStateInstance;
        }
        
        var resourceTypesArray = responseDoc['resourceTypes'];
        if (resourceTypesArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < resourceTypesArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var resourceTypesValue = resourceTypesArray[loweredIndex1];
            var providerResourceTypeInstance = { locations: [] };
            providerInstance.resourceTypes.push(providerResourceTypeInstance);
            
            var resourceTypeValue = resourceTypesValue['resourceType'];
            if (resourceTypeValue) {
              var resourceTypeInstance = resourceTypeValue;
              providerResourceTypeInstance.name = resourceTypeInstance;
            }
            
            var locationsArray = resourceTypesValue['locations'];
            if (locationsArray) {
              for (var loweredIndex2 = 0; loweredIndex2 < locationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var locationsValue = locationsArray[loweredIndex2];
                providerResourceTypeInstance.locations.push(locationsValue);
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets a list of resource providers.
   * 
   * @param {ProviderListParameters} [parametersOrCallback] Query parameters.
   * If null is passed returns all deployments.
   * 
   * @param {number} [parametersOrCallback.top] Get or sets the number of
   * records to return. Optional.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ProviderOperations.prototype.list = function(parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/providers?';
    if (parameters && parameters.top) {
      url2 = url2 + '$top=' + encodeURIComponent(parameters.top.toString());
    }
    url2 = url2 + '&api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { providers: [] };
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var providerInstance = { resourceTypes: [] };
            result.providers.push(providerInstance);
            
            var namespaceValue = valueValue['namespace'];
            if (namespaceValue) {
              var namespaceInstance = namespaceValue;
              providerInstance.namespace = namespaceInstance;
            }
            
            var registrationStateValue = valueValue['registrationState'];
            if (registrationStateValue) {
              var registrationStateInstance = registrationStateValue;
              providerInstance.registrationState = registrationStateInstance;
            }
            
            var resourceTypesArray = valueValue['resourceTypes'];
            if (resourceTypesArray) {
              for (var loweredIndex2 = 0; loweredIndex2 < resourceTypesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var resourceTypesValue = resourceTypesArray[loweredIndex2];
                var providerResourceTypeInstance = { locations: [] };
                providerInstance.resourceTypes.push(providerResourceTypeInstance);
                
                var resourceTypeValue = resourceTypesValue['resourceType'];
                if (resourceTypeValue) {
                  var resourceTypeInstance = resourceTypeValue;
                  providerResourceTypeInstance.name = resourceTypeInstance;
                }
                
                var locationsArray = resourceTypesValue['locations'];
                if (locationsArray) {
                  for (var loweredIndex3 = 0; loweredIndex3 < locationsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var locationsValue = locationsArray[loweredIndex3];
                    providerResourceTypeInstance.locations.push(locationsValue);
                  }
                }
              }
            }
          }
        }
        
        var nextLinkValue = responseDoc['nextLink'];
        if (nextLinkValue) {
          var nextLinkInstance = nextLinkValue;
          result.nextLink = nextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get a list of deployments.
   * 
   * @param {string} nextLink NextLink from the previous successful call to
   * List operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ProviderOperations.prototype.listNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = nextLink;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { providers: [] };
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var providerInstance = { resourceTypes: [] };
            result.providers.push(providerInstance);
            
            var namespaceValue = valueValue['namespace'];
            if (namespaceValue) {
              var namespaceInstance = namespaceValue;
              providerInstance.namespace = namespaceInstance;
            }
            
            var registrationStateValue = valueValue['registrationState'];
            if (registrationStateValue) {
              var registrationStateInstance = registrationStateValue;
              providerInstance.registrationState = registrationStateInstance;
            }
            
            var resourceTypesArray = valueValue['resourceTypes'];
            if (resourceTypesArray) {
              for (var loweredIndex2 = 0; loweredIndex2 < resourceTypesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var resourceTypesValue = resourceTypesArray[loweredIndex2];
                var providerResourceTypeInstance = { locations: [] };
                providerInstance.resourceTypes.push(providerResourceTypeInstance);
                
                var resourceTypeValue = resourceTypesValue['resourceType'];
                if (resourceTypeValue) {
                  var resourceTypeInstance = resourceTypeValue;
                  providerResourceTypeInstance.name = resourceTypeInstance;
                }
                
                var locationsArray = resourceTypesValue['locations'];
                if (locationsArray) {
                  for (var loweredIndex3 = 0; loweredIndex3 < locationsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var locationsValue = locationsArray[loweredIndex3];
                    providerResourceTypeInstance.locations.push(locationsValue);
                  }
                }
              }
            }
          }
        }
        
        var nextLinkValue = responseDoc['nextLink'];
        if (nextLinkValue) {
          var nextLinkInstance = nextLinkValue;
          result.nextLink = nextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Registers provider to be used with a subscription.
   * 
   * @param {string} resourceProviderNamespace Namespace of the resource
   * provider.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ProviderOperations.prototype.register = function(resourceProviderNamespace, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceProviderNamespace === null || resourceProviderNamespace === undefined) {
      return callback(new Error('resourceProviderNamespace cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/providers/' + resourceProviderNamespace + '/register?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Unregisters provider from a subscription.
   * 
   * @param {string} resourceProviderNamespace Namespace of the resource
   * provider.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ProviderOperations.prototype.unregister = function(resourceProviderNamespace, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceProviderNamespace === null || resourceProviderNamespace === undefined) {
      return callback(new Error('resourceProviderNamespace cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/providers/' + resourceProviderNamespace + '/unregister?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ProviderOperations;
})();

var ResourceGroupOperations = ( /** @lends ResourceGroupOperations */ function() {
  /**
   * @class
   * Operations for managing resource groups.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [ResourceManagementClient] {@link
   * ResourceManagementClient~ResourceManagementClient}.
   * See [resourceGroups] {@link
   * ResourceManagementClient~ResourceManagementClient#resourceGroups}.
   * Initializes a new instance of the ResourceGroupOperations class.
   * @constructor
   * 
   * @param {ResourceManagementClient} client Reference to the service client.
   */
  function ResourceGroupOperations(client) {
    this.client = client;
  }
  
  /**
   * Begin deleting resource group.To determine whether the operation has
   * finished processing the request, call GetOperationStatus.
   * 
   * @param {string} resourceGroupName The name of the resource group to be
   * deleted. The name is case insensitive.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceGroupOperations.prototype.beginDeleting = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.location = response.headers['location'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      if (statusCode === 409) {
        result.status = OperationStatus.Failed;
      }
      if (statusCode === 200) {
        result.status = OperationStatus.Succeeded;
      }
      
      return callback(null, result);
    });
  };
  
  /**
   * Checks whether resource group exists.
   * 
   * @param {string} resourceGroupName The name of the resource group to check.
   * The name is case insensitive.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceGroupOperations.prototype.checkExistence = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + 'subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'HEAD';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 204 && statusCode !== 404) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      if (statusCode === 204) {
        result.exists = true;
      }
      
      return callback(null, result);
    });
  };
  
  /**
   * Create a resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group to be
   * created or updated.
   * 
   * @param {BasicResourceGroup} parameters Parameters supplied to the create
   * or update resource group service operation.
   * 
   * @param {string} parameters.location Gets or sets the location of the
   * resource group. It cannot be changed after the resource group has been
   * created. Has to be one of the supported Azure Locations, such as West US,
   * East US, West Europe, East Asia, etc.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceGroupOperations.prototype.createOrUpdate = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.location === null || parameters.location === undefined) {
      return callback(new Error('parameters.location cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var basicResourceGroupValue = {};
    requestDoc = basicResourceGroupValue;
    
    basicResourceGroupValue['location'] = parameters.location;
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var resourceGroupInstance = {};
        result.resourceGroup = resourceGroupInstance;
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          resourceGroupInstance.name = nameInstance;
        }
        
        var locationValue = responseDoc['location'];
        if (locationValue) {
          var locationInstance = locationValue;
          resourceGroupInstance.location = locationInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Delete resource group and all of its resources.
   * 
   * @param {string} resourceGroupName The name of the resource group to be
   * deleted. The name is case insensitive.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceGroupOperations.prototype.delete = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.resourceGroups.beginDeleting(resourceGroupName, function (err, result) {
      if (err) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.resourceGroups.getDeleteOperationStatus(result.location, function (err2, result2) {
            if (err2) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * Get a resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group to get.
   * The name is case insensitive.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceGroupOperations.prototype.get = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var resourceGroupInstance = {};
        result.resourceGroup = resourceGroupInstance;
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          resourceGroupInstance.name = nameInstance;
        }
        
        var locationValue = responseDoc['location'];
        if (locationValue) {
          var locationInstance = locationValue;
          resourceGroupInstance.location = locationInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Get Operation Status operation returns the status of the specified
   * operation. After calling an asynchronous operation, you can call Get
   * Operation Status to determine whether the operation has succeeded,
   * failed, or is still in progress.
   * 
   * @param {string} location Location value returned by the Begin operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceGroupOperations.prototype.getDeleteOperationStatus = function(location, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (location === null || location === undefined) {
      return callback(new Error('location cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = location;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      if (statusCode === 409) {
        result.status = OperationStatus.Failed;
      }
      if (statusCode === 200) {
        result.status = OperationStatus.Succeeded;
      }
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets a collection of resource groups.
   * 
   * @param {ResourceGroupListParameters} [parametersOrCallback] Query
   * parameters. If null is passed returns all resource groups.
   * 
   * @param {number} [parametersOrCallback.top] Number of records to return.
   * Optional.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceGroupOperations.prototype.list = function(parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups?';
    url2 = url2 + 'api-version=2013-03-01';
    if (parameters && parameters.top) {
      url2 = url2 + '&$top=' + encodeURIComponent(parameters.top.toString());
    }
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { resourceGroups: [] };
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var resourceGroupInstance = {};
            result.resourceGroups.push(resourceGroupInstance);
            
            var nameValue = valueValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              resourceGroupInstance.name = nameInstance;
            }
            
            var locationValue = valueValue['location'];
            if (locationValue) {
              var locationInstance = locationValue;
              resourceGroupInstance.location = locationInstance;
            }
          }
        }
        
        var nextLinkValue = responseDoc['nextLink'];
        if (nextLinkValue) {
          var nextLinkInstance = nextLinkValue;
          result.nextLink = nextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get a list of deployments.
   * 
   * @param {string} nextLink NextLink from the previous successful call to
   * List operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceGroupOperations.prototype.listNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = nextLink;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { resourceGroups: [] };
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var resourceGroupInstance = {};
            result.resourceGroups.push(resourceGroupInstance);
            
            var nameValue = valueValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              resourceGroupInstance.name = nameInstance;
            }
            
            var locationValue = valueValue['location'];
            if (locationValue) {
              var locationInstance = locationValue;
              resourceGroupInstance.location = locationInstance;
            }
          }
        }
        
        var nextLinkValue = responseDoc['nextLink'];
        if (nextLinkValue) {
          var nextLinkInstance = nextLinkValue;
          result.nextLink = nextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Resource groups can be updated through a simple PATCH operation to a group
   * address. The format of the request is the same as that for creating a
   * resource groups, though if a field is unspecified current value will be
   * carried over.
   * 
   * @param {string} resourceGroupName The name of the resource group to be
   * created or updated. The name is case insensitive.
   * 
   * @param {BasicResourceGroup} parameters Parameters supplied to the update
   * state resource group service operation.
   * 
   * @param {string} parameters.location Gets or sets the location of the
   * resource group. It cannot be changed after the resource group has been
   * created. Has to be one of the supported Azure Locations, such as West US,
   * East US, West Europe, East Asia, etc.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceGroupOperations.prototype.patch = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.location === null || parameters.location === undefined) {
      return callback(new Error('parameters.location cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var basicResourceGroupValue = {};
    requestDoc = basicResourceGroupValue;
    
    basicResourceGroupValue['location'] = parameters.location;
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var resourceGroupInstance = {};
        result.resourceGroup = resourceGroupInstance;
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          resourceGroupInstance.name = nameInstance;
        }
        
        var locationValue = responseDoc['location'];
        if (locationValue) {
          var locationInstance = locationValue;
          resourceGroupInstance.location = locationInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ResourceGroupOperations;
})();

var ResourceOperations = ( /** @lends ResourceOperations */ function() {
  /**
   * @class
   * Operations for managing resources.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [ResourceManagementClient] {@link
   * ResourceManagementClient~ResourceManagementClient}.
   * See [resources] {@link
   * ResourceManagementClient~ResourceManagementClient#resources}.
   * Initializes a new instance of the ResourceOperations class.
   * @constructor
   * 
   * @param {ResourceManagementClient} client Reference to the service client.
   */
  function ResourceOperations(client) {
    this.client = client;
  }
  
  /**
   * Checks whether resource exists.
   * 
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   * 
   * @param {ResourceIdentity} identity Resource identity.
   * 
   * @param {string} identity.resourceName Gets or sets resource name.
   * 
   * @param {string} identity.resourceProviderNamespace Gets or sets namespace
   * of the resource provider.
   * 
   * @param {string} identity.resourceType Gets or sets resource type.
   * 
   * @param {string} [identity.parentResourcePath] Gets or sets parent resource
   * path (optional).
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceOperations.prototype.checkExistence = function(resourceGroupName, identity, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (identity === null || identity === undefined) {
      return callback(new Error('identity cannot be null.'));
    }
    if (identity.resourceName === null || identity.resourceName === undefined) {
      return callback(new Error('identity.resourceName cannot be null.'));
    }
    if (identity.resourceProviderNamespace === null || identity.resourceProviderNamespace === undefined) {
      return callback(new Error('identity.resourceProviderNamespace cannot be null.'));
    }
    if (identity.resourceType === null || identity.resourceType === undefined) {
      return callback(new Error('identity.resourceType cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '/providers/' + identity.resourceProviderNamespace + '/' + identity.parentResourcePath + '/' + identity.resourceType + '/' + identity.resourceName + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'HEAD';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 204 && statusCode !== 404) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      if (statusCode === 204) {
        result.exists = true;
      }
      
      return callback(null, result);
    });
  };
  
  /**
   * Create a resource.
   * 
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   * 
   * @param {ResourceIdentity} identity Resource identity.
   * 
   * @param {string} identity.resourceName Gets or sets resource name.
   * 
   * @param {string} identity.resourceProviderNamespace Gets or sets namespace
   * of the resource provider.
   * 
   * @param {string} identity.resourceType Gets or sets resource type.
   * 
   * @param {string} [identity.parentResourcePath] Gets or sets parent resource
   * path (optional).
   * 
   * @param {ResourceCreateOrUpdateParameters} parameters Create or update
   * resource parameters.
   * 
   * @param {ResourceValidationMode} parameters.validationMode Gets or sets
   * validation mode.
   * 
   * @param {BasicResource} parameters.resource Gets or sets information about
   * a resource being created of updated.
   * 
   * @param {string} parameters.resource.location Gets or sets the location of
   * the resource.
   * 
   * @param {string} [parameters.resource.properties] Gets or sets the resource
   * properties.
   * 
   * @param {string} [parameters.resource.provisioningState] Gets or sets
   * resource provisioning state.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceOperations.prototype.createOrUpdate = function(resourceGroupName, identity, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (identity === null || identity === undefined) {
      return callback(new Error('identity cannot be null.'));
    }
    if (identity.resourceName === null || identity.resourceName === undefined) {
      return callback(new Error('identity.resourceName cannot be null.'));
    }
    if (identity.resourceProviderNamespace === null || identity.resourceProviderNamespace === undefined) {
      return callback(new Error('identity.resourceProviderNamespace cannot be null.'));
    }
    if (identity.resourceType === null || identity.resourceType === undefined) {
      return callback(new Error('identity.resourceType cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.resource === null || parameters.resource === undefined) {
      return callback(new Error('parameters.resource cannot be null.'));
    }
    if (parameters.resource.location === null || parameters.resource.location === undefined) {
      return callback(new Error('parameters.resource.location cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '/providers/' + identity.resourceProviderNamespace + '/' + identity.parentResourcePath + '/' + identity.resourceType + '/' + identity.resourceName + '?';
    url2 = url2 + 'validating=' + encodeURIComponent(parameters.validationMode ? parameters.validationMode.toString() : 'NameValidation');
    url2 = url2 + '&api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    requestDoc = {};
    requestDoc['location'] = parameters.resource.location;
    
    if (parameters.resource.properties) {
      requestDoc['properties'] = parameters.resource.properties;
    }
    
    if (parameters.resource.provisioningState) {
      requestDoc['provisioningState'] = parameters.resource.provisioningState;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var resourceInstance = {};
        result.resource = resourceInstance;
        
        var propertiesValue = responseDoc['properties'];
        if (propertiesValue) {
          var provisioningStateValue = propertiesValue['provisioningState'];
          if (provisioningStateValue) {
            var provisioningStateInstance = provisioningStateValue;
            resourceInstance.provisioningState = provisioningStateInstance;
          }
        }
        
        var locationValue = responseDoc['location'];
        if (locationValue) {
          var locationInstance = locationValue;
          resourceInstance.location = locationInstance;
        }
        
        var propertiesValue2 = responseDoc['properties'];
        if (propertiesValue2) {
          var propertiesInstance = propertiesValue2;
          resourceInstance.properties = propertiesInstance;
        }
        
        var provisioningStateValue2 = responseDoc['provisioningState'];
        if (provisioningStateValue2) {
          var provisioningStateInstance2 = provisioningStateValue2;
          resourceInstance.provisioningState = provisioningStateInstance2;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Delete resource and all of its resources.
   * 
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   * 
   * @param {ResourceIdentity} identity Resource identity.
   * 
   * @param {string} identity.resourceName Gets or sets resource name.
   * 
   * @param {string} identity.resourceProviderNamespace Gets or sets namespace
   * of the resource provider.
   * 
   * @param {string} identity.resourceType Gets or sets resource type.
   * 
   * @param {string} [identity.parentResourcePath] Gets or sets parent resource
   * path (optional).
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceOperations.prototype.delete = function(resourceGroupName, identity, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (identity === null || identity === undefined) {
      return callback(new Error('identity cannot be null.'));
    }
    if (identity.resourceName === null || identity.resourceName === undefined) {
      return callback(new Error('identity.resourceName cannot be null.'));
    }
    if (identity.resourceProviderNamespace === null || identity.resourceProviderNamespace === undefined) {
      return callback(new Error('identity.resourceProviderNamespace cannot be null.'));
    }
    if (identity.resourceType === null || identity.resourceType === undefined) {
      return callback(new Error('identity.resourceType cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '/providers/' + identity.resourceProviderNamespace + '/' + identity.parentResourcePath + '/' + identity.resourceType + '/' + identity.resourceName + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Returns a resource belonging to a resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   * 
   * @param {ResourceIdentity} identity Resource identity.
   * 
   * @param {string} identity.resourceName Gets or sets resource name.
   * 
   * @param {string} identity.resourceProviderNamespace Gets or sets namespace
   * of the resource provider.
   * 
   * @param {string} identity.resourceType Gets or sets resource type.
   * 
   * @param {string} [identity.parentResourcePath] Gets or sets parent resource
   * path (optional).
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceOperations.prototype.get = function(resourceGroupName, identity, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (identity === null || identity === undefined) {
      return callback(new Error('identity cannot be null.'));
    }
    if (identity.resourceName === null || identity.resourceName === undefined) {
      return callback(new Error('identity.resourceName cannot be null.'));
    }
    if (identity.resourceProviderNamespace === null || identity.resourceProviderNamespace === undefined) {
      return callback(new Error('identity.resourceProviderNamespace cannot be null.'));
    }
    if (identity.resourceType === null || identity.resourceType === undefined) {
      return callback(new Error('identity.resourceType cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '/providers/' + identity.resourceProviderNamespace + '/' + identity.parentResourcePath + '/' + identity.resourceType + '/' + identity.resourceName + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var resourceInstance = {};
        result.resource = resourceInstance;
        
        var idValue = responseDoc['id'];
        if (idValue) {
          var idInstance = idValue;
          resourceInstance.id = idInstance;
        }
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          resourceInstance.name = nameInstance;
        }
        
        var typeValue = responseDoc['type'];
        if (typeValue) {
          var typeInstance = typeValue;
          resourceInstance.type = typeInstance;
        }
        
        var resourceGroupValue = responseDoc['resourceGroup'];
        if (resourceGroupValue) {
          var resourceGroupInstance = resourceGroupValue;
          resourceInstance.resourceGroup = resourceGroupInstance;
        }
        
        var propertiesValue = responseDoc['properties'];
        if (propertiesValue) {
          var provisioningStateValue = propertiesValue['provisioningState'];
          if (provisioningStateValue) {
            var provisioningStateInstance = provisioningStateValue;
            resourceInstance.provisioningState = provisioningStateInstance;
          }
        }
        
        var locationValue = responseDoc['location'];
        if (locationValue) {
          var locationInstance = locationValue;
          resourceInstance.location = locationInstance;
        }
        
        var propertiesValue2 = responseDoc['properties'];
        if (propertiesValue2) {
          var propertiesInstance = propertiesValue2;
          resourceInstance.properties = propertiesInstance;
        }
        
        var provisioningStateValue2 = responseDoc['provisioningState'];
        if (provisioningStateValue2) {
          var provisioningStateInstance2 = provisioningStateValue2;
          resourceInstance.provisioningState = provisioningStateInstance2;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get all of the resources under a subscription.
   * 
   * @param {ResourceListParameters} [parametersOrCallback] Query parameters.
   * If null is passed returns all resource groups.
   * 
   * @param {string} [parametersOrCallback.resourceGroupName] Gets or sets
   * resource resource group to filter by. Optional.
   * 
   * @param {string} [parametersOrCallback.resourceType] Filter the results for
   * a particular resource type. Optional.
   * 
   * @param {number} [parametersOrCallback.top] Number of records to return.
   * Optional.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceOperations.prototype.list = function(parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/';
    if (parameters && parameters.resourceGroupName) {
      url2 = url2 + 'resourceGroups/' + encodeURIComponent(parameters.resourceGroupName) + '/';
    }
    url2 = url2 + 'resources?';
    url2 = url2 + 'api-version=2013-03-01';
    if (parameters && parameters.top) {
      url2 = url2 + '&$top=' + encodeURIComponent(parameters.top.toString());
    }
    if (parameters && parameters.resourceType) {
      url2 = url2 + '&$filter=resourceType eq \'' + encodeURIComponent(parameters.resourceType) + '\'';
    }
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { resources: [] };
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var resourceJsonFormatInstance = {};
            result.resources.push(resourceJsonFormatInstance);
            
            var idValue = valueValue['id'];
            if (idValue) {
              var idInstance = idValue;
              resourceJsonFormatInstance.id = idInstance;
            }
            
            var nameValue = valueValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              resourceJsonFormatInstance.name = nameInstance;
            }
            
            var typeValue = valueValue['type'];
            if (typeValue) {
              var typeInstance = typeValue;
              resourceJsonFormatInstance.type = typeInstance;
            }
            
            var resourceGroupValue = valueValue['resourceGroup'];
            if (resourceGroupValue) {
              var resourceGroupInstance = resourceGroupValue;
              resourceJsonFormatInstance.resourceGroup = resourceGroupInstance;
            }
            
            var propertiesValue = valueValue['properties'];
            if (propertiesValue) {
              var provisioningStateValue = propertiesValue['provisioningState'];
              if (provisioningStateValue) {
                var provisioningStateInstance = provisioningStateValue;
                resourceJsonFormatInstance.provisioningState = provisioningStateInstance;
              }
            }
            
            var locationValue = valueValue['location'];
            if (locationValue) {
              var locationInstance = locationValue;
              resourceJsonFormatInstance.location = locationInstance;
            }
            
            var propertiesValue2 = valueValue['properties'];
            if (propertiesValue2) {
              var propertiesInstance = propertiesValue2;
              resourceJsonFormatInstance.properties = propertiesInstance;
            }
            
            var provisioningStateValue2 = valueValue['provisioningState'];
            if (provisioningStateValue2) {
              var provisioningStateInstance2 = provisioningStateValue2;
              resourceJsonFormatInstance.provisioningState = provisioningStateInstance2;
            }
          }
        }
        
        var nextLinkValue = responseDoc['nextLink'];
        if (nextLinkValue) {
          var nextLinkInstance = nextLinkValue;
          result.nextLink = nextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get a list of deployments.
   * 
   * @param {string} nextLink NextLink from the previous successful call to
   * List operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceOperations.prototype.listNext = function(nextLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (nextLink === null || nextLink === undefined) {
      return callback(new Error('nextLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = nextLink;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { resources: [] };
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var resourceJsonFormatInstance = {};
            result.resources.push(resourceJsonFormatInstance);
            
            var idValue = valueValue['id'];
            if (idValue) {
              var idInstance = idValue;
              resourceJsonFormatInstance.id = idInstance;
            }
            
            var nameValue = valueValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              resourceJsonFormatInstance.name = nameInstance;
            }
            
            var typeValue = valueValue['type'];
            if (typeValue) {
              var typeInstance = typeValue;
              resourceJsonFormatInstance.type = typeInstance;
            }
            
            var resourceGroupValue = valueValue['resourceGroup'];
            if (resourceGroupValue) {
              var resourceGroupInstance = resourceGroupValue;
              resourceJsonFormatInstance.resourceGroup = resourceGroupInstance;
            }
            
            var propertiesValue = valueValue['properties'];
            if (propertiesValue) {
              var provisioningStateValue = propertiesValue['provisioningState'];
              if (provisioningStateValue) {
                var provisioningStateInstance = provisioningStateValue;
                resourceJsonFormatInstance.provisioningState = provisioningStateInstance;
              }
            }
            
            var locationValue = valueValue['location'];
            if (locationValue) {
              var locationInstance = locationValue;
              resourceJsonFormatInstance.location = locationInstance;
            }
            
            var propertiesValue2 = valueValue['properties'];
            if (propertiesValue2) {
              var propertiesInstance = propertiesValue2;
              resourceJsonFormatInstance.properties = propertiesInstance;
            }
            
            var provisioningStateValue2 = valueValue['provisioningState'];
            if (provisioningStateValue2) {
              var provisioningStateInstance2 = provisioningStateValue2;
              resourceJsonFormatInstance.provisioningState = provisioningStateInstance2;
            }
          }
        }
        
        var nextLinkValue = responseDoc['nextLink'];
        if (nextLinkValue) {
          var nextLinkInstance = nextLinkValue;
          result.nextLink = nextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Resource can be updated through a simple PATCH operation to a group
   * address. The format of the request is the same as that for creating a
   * resource groups, though if a field is unspecified current value will be
   * carried over.
   * 
   * @param {string} resourceGroupName The name of the resource group. The name
   * is case insensitive.
   * 
   * @param {ResourceIdentity} identity Resource identity.
   * 
   * @param {string} identity.resourceName Gets or sets resource name.
   * 
   * @param {string} identity.resourceProviderNamespace Gets or sets namespace
   * of the resource provider.
   * 
   * @param {string} identity.resourceType Gets or sets resource type.
   * 
   * @param {string} [identity.parentResourcePath] Gets or sets parent resource
   * path (optional).
   * 
   * @param {ResourcePatchParameters} parameters Parameters supplied to the
   * update state resource group service operation.
   * 
   * @param {ResourceValidationMode} parameters.validationMode Gets or sets
   * validation mode.
   * 
   * @param {BasicResource} parameters.resource Gets or sets information about
   * a resource being created of updated.
   * 
   * @param {string} parameters.resource.location Gets or sets the location of
   * the resource.
   * 
   * @param {string} [parameters.resource.properties] Gets or sets the resource
   * properties.
   * 
   * @param {string} [parameters.resource.provisioningState] Gets or sets
   * resource provisioning state.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceOperations.prototype.patch = function(resourceGroupName, identity, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (identity === null || identity === undefined) {
      return callback(new Error('identity cannot be null.'));
    }
    if (identity.resourceName === null || identity.resourceName === undefined) {
      return callback(new Error('identity.resourceName cannot be null.'));
    }
    if (identity.resourceProviderNamespace === null || identity.resourceProviderNamespace === undefined) {
      return callback(new Error('identity.resourceProviderNamespace cannot be null.'));
    }
    if (identity.resourceType === null || identity.resourceType === undefined) {
      return callback(new Error('identity.resourceType cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.resource === null || parameters.resource === undefined) {
      return callback(new Error('parameters.resource cannot be null.'));
    }
    if (parameters.resource.location === null || parameters.resource.location === undefined) {
      return callback(new Error('parameters.resource.location cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + '/subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '/providers/' + identity.resourceProviderNamespace + '/' + identity.parentResourcePath + '/' + identity.resourceType + '/' + identity.resourceName + '?';
    url2 = url2 + 'validating=' + encodeURIComponent(parameters.validationMode ? parameters.validationMode.toString() : 'NameValidation');
    url2 = url2 + '&api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    requestDoc = {};
    requestDoc['location'] = parameters.resource.location;
    
    if (parameters.resource.properties) {
      requestDoc['properties'] = parameters.resource.properties;
    }
    
    if (parameters.resource.provisioningState) {
      requestDoc['provisioningState'] = parameters.resource.provisioningState;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var resourceInstance = {};
        result.resource = resourceInstance;
        
        var propertiesValue = responseDoc['properties'];
        if (propertiesValue) {
          var provisioningStateValue = propertiesValue['provisioningState'];
          if (provisioningStateValue) {
            var provisioningStateInstance = provisioningStateValue;
            resourceInstance.provisioningState = provisioningStateInstance;
          }
        }
        
        var locationValue = responseDoc['location'];
        if (locationValue) {
          var locationInstance = locationValue;
          resourceInstance.location = locationInstance;
        }
        
        var propertiesValue2 = responseDoc['properties'];
        if (propertiesValue2) {
          var propertiesInstance = propertiesValue2;
          resourceInstance.properties = propertiesInstance;
        }
        
        var provisioningStateValue2 = responseDoc['provisioningState'];
        if (provisioningStateValue2) {
          var provisioningStateInstance2 = provisioningStateValue2;
          resourceInstance.provisioningState = provisioningStateInstance2;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ResourceOperations;
})();
