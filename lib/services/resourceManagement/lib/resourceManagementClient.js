/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

var util = require('util');
var _ = require('underscore');
var azureCommon = require('azure-common');
var js2xml = azureCommon.js2xml;
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var ResourceManagementClient = ( /** @lends ResourceManagementClient */ function() {
  /**
   * @class
   * Initializes a new instance of the ResourceManagementClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets or sets
   * subscription credentials which uniquely identify Windows  Azure
   * subscription. The subscription ID forms part of the URI for  every call
   * that you make to the Service Management API.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] The URI used as the base for all cloud service
   * management requests.
   */
  function ResourceManagementClient(credentials, baseUri) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    ResourceManagementClient['super_'].call(this, credentials);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://TBD';
    }
    /**
     * Provides an instance of the
     * [DeploymentOperations](-DeploymentOperations.html) object.
     * @type {object}
     */
    this.deployments = new DeploymentOperations(this);
    /**
     * Provides an instance of the
     * [ResourceGroupOperations](-ResourceGroupOperations.html) object.
     * @type {object}
     */
    this.resourceGroups = new ResourceGroupOperations(this);
    /**
     * Provides an instance of the [TagsOperations](-TagsOperations.html)
     * object.
     * @type {object}
     */
    this.tags = new TagsOperations(this);
  }
  
  util.inherits(ResourceManagementClient, Service);
  
  /**
   * EntitleResource is used only for 3rd party Store providers. Each
   * subscription must be entitled for the resource before creating that
   * particular type of resource.
   * 
   * @param {EntitleResourceParameters} parameters Parameters provided to the
   * EntitleResource method.
   * 
   * @param {string} parameters.resourceNamespace Required NameSpace identifier
   * for the resource provider.
   * 
   * @param {string} parameters.resourceType Required type for the resource.
   * 
   * @param {date} parameters.registrationDate The required data when the
   * entitlement is performed.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceManagementClient.prototype.entitleResource = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.registrationDate === null || parameters.registrationDate === undefined) {
      return callback(new Error('parameters.registrationDate cannot be null.'));
    }
    if (parameters.resourceNamespace === null || parameters.resourceNamespace === undefined) {
      return callback(new Error('parameters.resourceNamespace cannot be null.'));
    }
    if (parameters.resourceType === null || parameters.resourceType === undefined) {
      return callback(new Error('parameters.resourceType cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.baseUri + this.credentials.subscriptionId + '/EntitleResource';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/xml';
    httpRequest.headers['x-ms-version'] = '2013-03-01';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = {};
    
    var entitleResourceElement = js2xml.createElement('EntitleResource', 'http://schemas.microsoft.com/windowsazure');
    js2xml.addChildElement(requestDoc, entitleResourceElement);
    
    var resourceProviderNameSpaceElement = js2xml.createElement('ResourceProviderNameSpace', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(resourceProviderNameSpaceElement, parameters.resourceNamespace);
    js2xml.addChildElement(entitleResourceElement, resourceProviderNameSpaceElement);
    
    var typeElement = js2xml.createElement('Type', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(typeElement, parameters.resourceType);
    js2xml.addChildElement(entitleResourceElement, typeElement);
    
    var registrationDateElement = js2xml.createElement('RegistrationDate', 'http://schemas.microsoft.com/windowsazure');
    js2xml.setElementValue(registrationDateElement, parameters.registrationDate.toString());
    js2xml.addChildElement(entitleResourceElement, registrationDateElement);
    
    requestContent = js2xml.serializeDocument(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ResourceManagementClient;
})();
exports.ResourceManagementClient = ResourceManagementClient;

var DeploymentOperations = ( /** @lends DeploymentOperations */ function() {
  /**
   * @class
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [ResourceManagementClient] {@link
   * ResourceManagementClient~ResourceManagementClient}.
   * See [deployments] {@link
   * ResourceManagementClient~ResourceManagementClient#deployments}.
   * Initializes a new instance of the DeploymentOperations class.
   * @constructor
   * 
   * @param {ResourceManagementClient} client Reference to the service client.
   */
  function DeploymentOperations(client) {
    this.client = client;
  }
  
  /**
   * Create a named deployment using a template.
   * 
   * @param {string} resourceGroupName The name of the resource group to be
   * created or updated. The name is case insensitive.
   * 
   * @param {string} deploymentName The name of the deployment.
   * 
   * @param {BasicDeployment} parameters Parameters supplied to the create or
   * update resource group service operation.
   * 
   * @param {string} parameters.templateLink Gets or sets the URI referencing
   * the template. The template will be retrieved from this URI so RPFD must
   * have permission to read from it and it canâ€™t require any unique headers.
   * 
   * @param {DeploymentMode} parameters.mode Gets or sets the deployment mode.
   * 
   * @param {string} [parameters.parameters] Gets or sets key/value pairs that
   * represent deploymentparameters.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeploymentOperations.prototype.create = function(resourceGroupName, deploymentName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.templateLink === null || parameters.templateLink === undefined) {
      return callback(new Error('parameters.templateLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + 'subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '/templateRun/' + deploymentName + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var propertiesValue = {};
    requestDoc = propertiesValue;
    
    propertiesValue['templateLink'] = parameters.templateLink;
    
    propertiesValue['mode'] = parameters.mode ? parameters.mode.toString() : 'Full';
    
    if (parameters.parameters) {
      propertiesValue['parameters'] = parameters.parameters;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Jobs can be updated through a simple PATCH operation to a job's address.
   * The format of the request is the same as that for creating a job, though
   * if a field is unspecified we will carry forward the current value.
   * 
   * @param {string} resourceGroupName The name of the resource group to be
   * deleted. The name is case insensitive.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeploymentOperations.prototype.delete = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + 'subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var tagsDictionary = {};
    requestDoc = tagsDictionary;
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get a deployment.
   * 
   * @param {string} resourceGroupName The name of the resource group to get.
   * The name is case insensitive.
   * 
   * @param {string} deploymentName The name of the deployment.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeploymentOperations.prototype.get = function(resourceGroupName, deploymentName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + 'subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '/deployments/' + deploymentName + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var resourceGroupValue = responseDoc['resourceGroup'];
        if (resourceGroupValue) {
          var resourceGroupInstance = resourceGroupValue;
          result.resourceGroup = resourceGroupInstance;
        }
        
        var deploymentNameValue = responseDoc['deploymentName'];
        if (deploymentNameValue) {
          var deploymentNameInstance = deploymentNameValue;
          result.deploymentName = deploymentNameInstance;
        }
        
        var propertiesValue = responseDoc['properties'];
        if (propertiesValue) {
          var propertiesInstance = {};
          result.deployment = propertiesInstance;
          
          var resourceGroupValue2 = propertiesValue['resourceGroup'];
          if (resourceGroupValue2) {
            var resourceGroupInstance2 = resourceGroupValue2;
            propertiesInstance.resourceGroup = resourceGroupInstance2;
          }
          
          var deploymentNameValue2 = propertiesValue['deploymentName'];
          if (deploymentNameValue2) {
            var deploymentNameInstance2 = deploymentNameValue2;
            propertiesInstance.deploymentName = deploymentNameInstance2;
          }
          
          var propertiesValue2 = propertiesValue['properties'];
          if (propertiesValue2) {
            var propertiesInstance2 = {};
            propertiesInstance.properties = propertiesInstance2;
            
            var provisioningStateValue = propertiesValue2['provisioningState'];
            if (provisioningStateValue) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance2.provisioningState = provisioningStateInstance;
            }
            
            var outputsValue = propertiesValue2['outputs'];
            if (outputsValue) {
              var outputsInstance = outputsValue;
              propertiesInstance2.outputs = outputsInstance;
            }
            
            var templateLinkValue = propertiesValue2['templateLink'];
            if (templateLinkValue) {
              // how
              var templateLinkInstance = templateLinkValue;
              propertiesInstance2.templateLink = templateLinkInstance;
            }
            
            var modeValue = propertiesValue2['mode'];
            if (modeValue) {
              // how
              var modeInstance = modeValue;
              propertiesInstance2.mode = modeInstance;
            }
            
            var parametersValue = propertiesValue2['parameters'];
            if (parametersValue) {
              var parametersInstance = parametersValue;
              propertiesInstance2.parameters = parametersInstance;
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get a deployment.
   * 
   * @param {string} resourceGroupName The name of the resource group to get.
   * The name is case insensitive.
   * 
   * @param {string} deploymentName The name of the deployment.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeploymentOperations.prototype.list = function(resourceGroupName, deploymentName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (deploymentName === null || deploymentName === undefined) {
      return callback(new Error('deploymentName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + 'subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '/deployments?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { deployments: [] };
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var deploymentInstance = {};
            result.deployments.push(deploymentInstance);
            
            var resourceGroupValue = valueValue['resourceGroup'];
            if (resourceGroupValue) {
              var resourceGroupInstance = resourceGroupValue;
              deploymentInstance.resourceGroup = resourceGroupInstance;
            }
            
            var deploymentNameValue = valueValue['deploymentName'];
            if (deploymentNameValue) {
              var deploymentNameInstance = deploymentNameValue;
              deploymentInstance.deploymentName = deploymentNameInstance;
            }
            
            var propertiesValue = valueValue['properties'];
            if (propertiesValue) {
              var propertiesInstance = {};
              deploymentInstance.properties = propertiesInstance;
              
              var provisioningStateValue = propertiesValue['provisioningState'];
              if (provisioningStateValue) {
                var provisioningStateInstance = provisioningStateValue;
                propertiesInstance.provisioningState = provisioningStateInstance;
              }
              
              var outputsValue = propertiesValue['outputs'];
              if (outputsValue) {
                var outputsInstance = outputsValue;
                propertiesInstance.outputs = outputsInstance;
              }
              
              var templateLinkValue = propertiesValue['templateLink'];
              if (templateLinkValue) {
                // how
                var templateLinkInstance = templateLinkValue;
                propertiesInstance.templateLink = templateLinkInstance;
              }
              
              var modeValue = propertiesValue['mode'];
              if (modeValue) {
                // how
                var modeInstance = modeValue;
                propertiesInstance.mode = modeInstance;
              }
              
              var parametersValue = propertiesValue['parameters'];
              if (parametersValue) {
                var parametersInstance = parametersValue;
                propertiesInstance.parameters = parametersInstance;
              }
            }
          }
        }
        
        var odatanextLinkValue = responseDoc['odata.nextLink'];
        if (odatanextLinkValue) {
          var odatanextLinkInstance = odatanextLinkValue;
          result.skipToken = odatanextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Validates a deployment template.
   * 
   * @param {string} resourceGroupName The name of the resource group to be
   * validated. The name is case insensitive.
   * 
   * @param {BasicDeployment} parameters Parameters supplied to the create or
   * update resource group service operation.
   * 
   * @param {string} parameters.templateLink Gets or sets the URI referencing
   * the template. The template will be retrieved from this URI so RPFD must
   * have permission to read from it and it canâ€™t require any unique headers.
   * 
   * @param {DeploymentMode} parameters.mode Gets or sets the deployment mode.
   * 
   * @param {string} [parameters.parameters] Gets or sets key/value pairs that
   * represent deploymentparameters.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  DeploymentOperations.prototype.validate = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.templateLink === null || parameters.templateLink === undefined) {
      return callback(new Error('parameters.templateLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + 'subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '/validate-template?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var propertiesValue = {};
    requestDoc = propertiesValue;
    
    propertiesValue['templateLink'] = parameters.templateLink;
    
    propertiesValue['mode'] = parameters.mode ? parameters.mode.toString() : 'Full';
    
    if (parameters.parameters) {
      propertiesValue['parameters'] = parameters.parameters;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { errors: [] };
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return DeploymentOperations;
})();

var ResourceGroupOperations = ( /** @lends ResourceGroupOperations */ function() {
  /**
   * @class
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [ResourceManagementClient] {@link
   * ResourceManagementClient~ResourceManagementClient}.
   * See [resourceGroups] {@link
   * ResourceManagementClient~ResourceManagementClient#resourceGroups}.
   * Initializes a new instance of the ResourceGroupOperations class.
   * @constructor
   * 
   * @param {ResourceManagementClient} client Reference to the service client.
   */
  function ResourceGroupOperations(client) {
    this.client = client;
  }
  
  /**
   * Create a resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group to be
   * created or updated.
   * 
   * @param {BasicResourceGroup} parameters Parameters supplied to the create
   * or update resource group service operation.
   * 
   * @param {string} parameters.location Gets or sets the location of the
   * resource group. It cannot be changed after the resource group has been
   * created. Has to be one of the supported Azure Locations, such as West US,
   * East US, West Europe, East Asia, etc.
   * 
   * @param {object} [parameters.tags] Gets or sets key/value pairs that
   * represent tagsfor a resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceGroupOperations.prototype.createOrUpdate = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.location === null || parameters.location === undefined) {
      return callback(new Error('parameters.location cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + 'subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var basicResourceGroupValue = {};
    requestDoc = basicResourceGroupValue;
    
    basicResourceGroupValue['location'] = parameters.location;
    
    var tagsDictionary = {};
    if (parameters.tags) {
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
    }
    basicResourceGroupValue['tags'] = tagsDictionary;
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var resourceGroupInstance = { tags: {} };
        result.resourceGroup = resourceGroupInstance;
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          resourceGroupInstance.name = nameInstance;
        }
        
        var locationValue = responseDoc['location'];
        if (locationValue) {
          var locationInstance = locationValue;
          resourceGroupInstance.location = locationInstance;
        }
        
        var tagsSequenceElement = responseDoc['tags'];
        if (tagsSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < tagsSequenceElement.length; loweredIndex1 = loweredIndex1 + 1) {
            var property = tagsSequenceElement[loweredIndex1];
            var tagsKey2 = property;
            var tagsValue2 = tagsSequenceElement[property];
            resourceGroupInstance.tags[tagsKey2] = tagsValue2;
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Jobs can be updated through a simple PATCH operation to a job's address.
   * The format of the request is the same as that for creating a job, though
   * if a field is unspecified we will carry forward the current value.
   * 
   * @param {string} resourceGroupName The name of the resource group to be
   * deleted. The name is case insensitive.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceGroupOperations.prototype.delete = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + 'subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var tagsDictionary = {};
    requestDoc = tagsDictionary;
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get a resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group to get.
   * The name is case insensitive.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceGroupOperations.prototype.get = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + 'subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var resourceGroupInstance = { tags: {} };
        result.resourceGroup = resourceGroupInstance;
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          resourceGroupInstance.name = nameInstance;
        }
        
        var locationValue = responseDoc['location'];
        if (locationValue) {
          var locationInstance = locationValue;
          resourceGroupInstance.location = locationInstance;
        }
        
        var tagsSequenceElement = responseDoc['tags'];
        if (tagsSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < tagsSequenceElement.length; loweredIndex1 = loweredIndex1 + 1) {
            var property = tagsSequenceElement[loweredIndex1];
            var tagsKey = property;
            var tagsValue = tagsSequenceElement[property];
            resourceGroupInstance.tags[tagsKey] = tagsValue;
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List Cloud Services operation enumerates services that are provisioned
   * for a subscription.
   * 
   * @param {ResourceGroupListParameter} parameters Query parameters.
   * 
   * @param {number} [parameters.top] Number of records to return.
   * 
   * @param {string} [parameters.skipToken] Token that identifies the first
   * record to start from.Returned by the successful previous List operation
   * (optional).
   * 
   * @param {string} [parameters.tagName] Tag name to filter by (optional).
   * 
   * @param {string} [parameters.tagValue] Tag value to filter by. If set
   * requires tag name to be present.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceGroupOperations.prototype.list = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.skipToken && parameters.skipToken.length > 1000) {
      return callback(new Error('parameters.skipToken is outside the valid range.'));
    }
    if (/^\$skiptoken=\w+$/.test(parameters.skipToken) === false) {
      return callback(new Error('parameters.skipToken is outside the valid range.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + 'subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups?';
    url2 = url2 + 'api-version=2013-03-01';
    if (parameters.top) {
      url2 = url2 + '&$top=' + encodeURIComponent(parameters.top.toString());
    }
    if (parameters.skipToken) {
      url2 = url2 + '&' + encodeURIComponent(parameters.skipToken);
    }
    if (parameters.tagName) {
      url2 = url2 + '&$filter=tagname eq ' + encodeURIComponent(parameters.tagName);
    }
    if (parameters.tagValue) {
      url2 = url2 + '&$filter=tagvalue eq ' + encodeURIComponent(parameters.tagValue);
    }
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    requestDoc = parameters.toString();
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { resourceGroups: [] };
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var resultsArray = responseDoc['results'];
        if (resultsArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < resultsArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var resultsValue = resultsArray[loweredIndex1];
            var resourceGroupInstance = { tags: {} };
            result.resourceGroups.push(resourceGroupInstance);
            
            var nameValue = resultsValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              resourceGroupInstance.name = nameInstance;
            }
            
            var locationValue = resultsValue['location'];
            if (locationValue) {
              var locationInstance = locationValue;
              resourceGroupInstance.location = locationInstance;
            }
            
            var tagsSequenceElement = resultsValue['tags'];
            if (tagsSequenceElement) {
              for (var loweredIndex2 = 0; loweredIndex2 < tagsSequenceElement.length; loweredIndex2 = loweredIndex2 + 1) {
                var property = tagsSequenceElement[loweredIndex2];
                var tagsKey = property;
                var tagsValue = tagsSequenceElement[property];
                resourceGroupInstance.tags[tagsKey] = tagsValue;
              }
            }
          }
        }
        
        var nextValue = responseDoc['__next'];
        if (nextValue) {
          var nextInstance = nextValue;
          result.skipToken = nextInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List Cloud Services operation enumerates services that are provisioned
   * for a subscription.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceGroupOperations.prototype.listAll = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + 'subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { resourceGroups: [] };
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var resultsArray = responseDoc['results'];
        if (resultsArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < resultsArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var resultsValue = resultsArray[loweredIndex1];
            var resourceGroupInstance = { tags: {} };
            result.resourceGroups.push(resourceGroupInstance);
            
            var nameValue = resultsValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              resourceGroupInstance.name = nameInstance;
            }
            
            var locationValue = resultsValue['location'];
            if (locationValue) {
              var locationInstance = locationValue;
              resourceGroupInstance.location = locationInstance;
            }
            
            var tagsSequenceElement = resultsValue['tags'];
            if (tagsSequenceElement) {
              for (var loweredIndex2 = 0; loweredIndex2 < tagsSequenceElement.length; loweredIndex2 = loweredIndex2 + 1) {
                var property = tagsSequenceElement[loweredIndex2];
                var tagsKey = property;
                var tagsValue = tagsSequenceElement[property];
                resourceGroupInstance.tags[tagsKey] = tagsValue;
              }
            }
          }
        }
        
        var nextValue = responseDoc['__next'];
        if (nextValue) {
          var nextInstance = nextValue;
          result.skipToken = nextInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Resource groups can be updated through a simple PATCH operation to a group
   * address. The format of the request is the same as that for creating a
   * resource groups, though if a field is unspecified current value will be
   * carried over.
   * 
   * @param {string} resourceGroupName The name of the resource group to be
   * created or updated. The name is case insensitive.
   * 
   * @param {BasicResourceGroup} parameters Parameters supplied to the update
   * state resource group service operation.
   * 
   * @param {string} parameters.location Gets or sets the location of the
   * resource group. It cannot be changed after the resource group has been
   * created. Has to be one of the supported Azure Locations, such as West US,
   * East US, West Europe, East Asia, etc.
   * 
   * @param {object} [parameters.tags] Gets or sets key/value pairs that
   * represent tagsfor a resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ResourceGroupOperations.prototype.patch = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.location === null || parameters.location === undefined) {
      return callback(new Error('parameters.location cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + 'subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '?';
    url2 = url2 + 'api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var basicResourceGroupValue = {};
    requestDoc = basicResourceGroupValue;
    
    basicResourceGroupValue['location'] = parameters.location;
    
    var tagsDictionary = {};
    if (parameters.tags) {
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
    }
    basicResourceGroupValue['tags'] = tagsDictionary;
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var resourceGroupInstance = { tags: {} };
        result.resourceGroup = resourceGroupInstance;
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          resourceGroupInstance.name = nameInstance;
        }
        
        var locationValue = responseDoc['location'];
        if (locationValue) {
          var locationInstance = locationValue;
          resourceGroupInstance.location = locationInstance;
        }
        
        var tagsSequenceElement = responseDoc['tags'];
        if (tagsSequenceElement) {
          for (var loweredIndex1 = 0; loweredIndex1 < tagsSequenceElement.length; loweredIndex1 = loweredIndex1 + 1) {
            var property = tagsSequenceElement[loweredIndex1];
            var tagsKey2 = property;
            var tagsValue2 = tagsSequenceElement[property];
            resourceGroupInstance.tags[tagsKey2] = tagsValue2;
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ResourceGroupOperations;
})();

var TagsOperations = ( /** @lends TagsOperations */ function() {
  /**
   * @class
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [ResourceManagementClient] {@link
   * ResourceManagementClient~ResourceManagementClient}.
   * See [tags] {@link ResourceManagementClient~ResourceManagementClient#tags}.
   * Initializes a new instance of the TagsOperations class.
   * @constructor
   * 
   * @param {ResourceManagementClient} client Reference to the service client.
   */
  function TagsOperations(client) {
    this.client = client;
  }
  
  /**
   * Create a resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group to be
   * created or updated. The name is case insensitive.
   * 
   * @param {boolean} validateTemplate Optional. Defaults to false. If set will
   * only validate that the template passed in the body is a syntactically
   * correct template.
   * 
   * @param {BasicResourceGroup} parameters Parameters supplied to the create
   * or update resource group service operation.
   * 
   * @param {string} parameters.location Gets or sets the location of the
   * resource group. It cannot be changed after the resource group has been
   * created. Has to be one of the supported Azure Locations, such as West US,
   * East US, West Europe, East Asia, etc.
   * 
   * @param {object} [parameters.tags] Gets or sets key/value pairs that
   * represent tagsfor a resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  TagsOperations.prototype.createOrUpdate = function(resourceGroupName, validateTemplate, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (resourceGroupName && resourceGroupName.length > 1000) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (/^[\w-_]+$/.test(resourceGroupName) === false) {
      return callback(new Error('resourceGroupName is outside the valid range.'));
    }
    if (validateTemplate === null || validateTemplate === undefined) {
      return callback(new Error('validateTemplate cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.location === null || parameters.location === undefined) {
      return callback(new Error('parameters.location cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + 'subscriptions/' + this.client.credentials.subscriptionId + '/resourcegroups/' + resourceGroupName + '?';
    url2 = url2 + 'validate-template=' + encodeURIComponent(validateTemplate.toString());
    url2 = url2 + '&api-version=2013-03-01';
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var basicResourceGroupValue = {};
    requestDoc = basicResourceGroupValue;
    
    basicResourceGroupValue['location'] = parameters.location;
    
    var tagsDictionary = {};
    if (parameters.tags) {
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
    }
    basicResourceGroupValue['tags'] = tagsDictionary;
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 201) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets the unique set of tag names used in a subscription.
   * 
   * @param {TagsOperationsListParameters} [parametersOrCallback] Optional
   * parameter to configure request.
   * 
   * @param {string} [parametersOrCallback.skipToken] Token that identifies the
   * first record to start from.Returned by the successful previous List
   * operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  TagsOperations.prototype.list = function(parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters) {
      if (parameters.skipToken === null || parameters.skipToken === undefined) {
        return callback(new Error('parameters.skipToken cannot be null.'));
      }
      if (parameters.skipToken && parameters.skipToken.length > 1000) {
        return callback(new Error('parameters.skipToken is outside the valid range.'));
      }
      if (/^\$skiptoken=\w+$/.test(parameters.skipToken) === false) {
        return callback(new Error('parameters.skipToken is outside the valid range.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = this.client.baseUri + 'subscriptions/' + this.client.credentials.subscriptionId + '/tagNames?';
    url2 = url2 + 'api-version=2013-03-01';
    if (parameters) {
      url2 = url2 + '&' + encodeURIComponent(parameters.skipToken);
    }
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        return callback(body);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { tags: [] };
      var responseDoc = JSON.parse(responseContent);
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            result.tags.push(valueValue);
          }
        }
        
        var odatanextLinkValue = responseDoc['odata.nextLink'];
        if (odatanextLinkValue) {
          var odatanextLinkInstance = odatanextLinkValue;
          result.skipToken = odatanextLinkInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return TagsOperations;
})();
