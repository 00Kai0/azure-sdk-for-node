/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the RedisCreateOrUpdateParameters class.
 * @constructor
 * Parameters supplied to the CreateOrUpdate Redis operation.
 * @member {string} [redisVersion] RedisVersion parameter has been deprecated.
 * As such, it is no longer necessary to provide this parameter and any value
 * specified is ignored.
 * 
 * @member {object} sku What sku of redis cache to deploy.
 * 
 * @member {string} [sku.name] What type of redis cache to deploy. Valid
 * values: (Basic, Standard, Premium). Possible values for this property
 * include: 'Basic', 'Standard', 'Premium'.
 * 
 * @member {string} [sku.family] Which family to use. Valid values: (C, P).
 * Possible values for this property include: 'C', 'P'.
 * 
 * @member {number} [sku.capacity] What size of redis cache to deploy. Valid
 * values: for C family (0, 1, 2, 3, 4, 5, 6), for P family (1, 2, 3, 4)
 * 
 * @member {object} [redisConfiguration] All Redis Settings. Few possible
 * keys: <para>rdb-backup-enabled</para><para>rdb-storage-connection-string</para><para>rdb-backup-frequency</para><para>maxmemory-delta</para><para>maxmemory-policy</para><para>notify-keyspace-events</para><para>maxmemory-samples</para><para>slowlog-log-slower-than</para><para>slowlog-max-len</para><para>list-max-ziplist-entries</para><para>list-max-ziplist-value</para><para>hash-max-ziplist-entries</para><para>hash-max-ziplist-value</para><para>set-max-intset-entries</para><para>zset-max-ziplist-entries</para><para>zset-max-ziplist-value
 * etc.</para>
 * 
 * @member {boolean} [enableNonSslPort] If the value is true, then the non-ssl
 * redis server port (6379) will be enabled.
 * 
 * @member {object} [tenantSettings] tenantSettings
 * 
 * @member {number} [shardCount] The number of shards to be created on a
 * Premium Cluster Cache.
 * 
 * @member {string} [virtualNetwork] The exact ARM resource ID of the virtual
 * network to deploy the redis cache in. Example format:
 * /subscriptions/{subid}/resourceGroups/{resourceGroupName}/Microsoft.ClassicNetwork/VirtualNetworks/vnet1
 * 
 * @member {string} [subnet] Required when deploying a redis cache inside an
 * existing Azure Virtual Network.
 * 
 * @member {string} [staticIP] Required when deploying a redis cache inside an
 * existing Azure Virtual Network.
 * 
 */
function RedisCreateOrUpdateParameters(parameters) {
  RedisCreateOrUpdateParameters['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.redisVersion !== undefined) {
      this.redisVersion = parameters.redisVersion;
    }
    if (parameters.sku) {
      this.sku = new models['Sku'](parameters.sku);
    }
    if (parameters.redisConfiguration) {
      this.redisConfiguration = {};
      for(var valueElement in parameters.redisConfiguration) {
        if (parameters.redisConfiguration[valueElement] !== undefined) {
          this.redisConfiguration[valueElement] = parameters.redisConfiguration[valueElement];
        }
      }
    }
    if (parameters.enableNonSslPort !== undefined) {
      this.enableNonSslPort = parameters.enableNonSslPort;
    }
    if (parameters.tenantSettings) {
      this.tenantSettings = {};
      for(var valueElement1 in parameters.tenantSettings) {
        if (parameters.tenantSettings[valueElement1] !== undefined) {
          this.tenantSettings[valueElement1] = parameters.tenantSettings[valueElement1];
        }
      }
    }
    if (parameters.shardCount !== undefined) {
      this.shardCount = parameters.shardCount;
    }
    if (parameters.virtualNetwork !== undefined) {
      this.virtualNetwork = parameters.virtualNetwork;
    }
    if (parameters.subnet !== undefined) {
      this.subnet = parameters.subnet;
    }
    if (parameters.staticIP !== undefined) {
      this.staticIP = parameters.staticIP;
    }
  }    
}

util.inherits(RedisCreateOrUpdateParameters, models['Resource']);

/**
 * Validate the payload against the RedisCreateOrUpdateParameters schema
 *
 * @param {JSON} payload
 *
 */
RedisCreateOrUpdateParameters.prototype.serialize = function () {
  var payload = RedisCreateOrUpdateParameters['super_'].prototype.serialize.call(this);
  if (this['redisVersion'] !== null && this['redisVersion'] !== undefined) {
    if (typeof this['redisVersion'].valueOf() !== 'string') {
      throw new Error('this[\'redisVersion\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['redisVersion'] = this['redisVersion'];
  }

  if (this['sku']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['sku'] = this['sku'].serialize();
  }
   else {  throw new Error('this[\'sku\'] cannot be null or undefined.');
  }

  if (this['redisConfiguration'] && typeof this['redisConfiguration'] === 'object') {
    payload['properties']['redisConfiguration'] = {};
    for(var valueElement2 in this['redisConfiguration']) {
      if (this['redisConfiguration'][valueElement2] !== null && this['redisConfiguration'][valueElement2] !== undefined) {
        if (typeof this['redisConfiguration'][valueElement2].valueOf() !== 'string') {
          throw new Error('this[\'redisConfiguration\'][valueElement2] must be of type string.');
        }
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['redisConfiguration'][valueElement2] = this['redisConfiguration'][valueElement2];
      }
      else {
        payload['properties']['redisConfiguration'][valueElement2] = this['redisConfiguration'][valueElement2];
      }
    }
  }

  if (this['enableNonSslPort'] !== null && this['enableNonSslPort'] !== undefined) {
    if (typeof this['enableNonSslPort'] !== 'boolean') {
      throw new Error('this[\'enableNonSslPort\'] must be of type boolean.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['enableNonSslPort'] = this['enableNonSslPort'];
  }

  if (this['tenantSettings'] && typeof this['tenantSettings'] === 'object') {
    payload['properties']['tenantSettings'] = {};
    for(var valueElement3 in this['tenantSettings']) {
      if (this['tenantSettings'][valueElement3] !== null && this['tenantSettings'][valueElement3] !== undefined) {
        if (typeof this['tenantSettings'][valueElement3].valueOf() !== 'string') {
          throw new Error('this[\'tenantSettings\'][valueElement3] must be of type string.');
        }
        if (payload['properties'] === null || payload['properties'] === undefined) {
          payload['properties'] = {};
        }
        payload['properties']['tenantSettings'][valueElement3] = this['tenantSettings'][valueElement3];
      }
      else {
        payload['properties']['tenantSettings'][valueElement3] = this['tenantSettings'][valueElement3];
      }
    }
  }

  if (this['shardCount'] !== null && this['shardCount'] !== undefined) {
    if (typeof this['shardCount'] !== 'number') {
      throw new Error('this[\'shardCount\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['shardCount'] = this['shardCount'];
  }

  if (this['virtualNetwork'] !== null && this['virtualNetwork'] !== undefined) {
    if (typeof this['virtualNetwork'].valueOf() !== 'string') {
      throw new Error('this[\'virtualNetwork\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['virtualNetwork'] = this['virtualNetwork'];
  }

  if (this['subnet'] !== null && this['subnet'] !== undefined) {
    if (typeof this['subnet'].valueOf() !== 'string') {
      throw new Error('this[\'subnet\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['subnet'] = this['subnet'];
  }

  if (this['staticIP'] !== null && this['staticIP'] !== undefined) {
    if (typeof this['staticIP'].valueOf() !== 'string') {
      throw new Error('this[\'staticIP\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['staticIP'] = this['staticIP'];
  }

  return payload;
};

/**
 * Deserialize the instance to RedisCreateOrUpdateParameters schema
 *
 * @param {JSON} instance
 *
 */
RedisCreateOrUpdateParameters.prototype.deserialize = function (instance) {
  RedisCreateOrUpdateParameters['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['redisVersion'] !== undefined) {
        this['redisVersion'] = instance['properties']['redisVersion'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['sku']) {
        this['sku'] = new models['Sku']().deserialize(instance['properties']['sku']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['redisConfiguration']) {
        this['redisConfiguration'] = {};
        for(var valueElement4 in instance['properties']['redisConfiguration']) {
          if (instance['properties'] !== null && instance['properties'] !== undefined) {
            if (instance['properties']['redisConfiguration'][valueElement4] !== undefined) {
              this['redisConfiguration'][valueElement4] = instance['properties']['redisConfiguration'][valueElement4];
            }
          }
        }
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['enableNonSslPort'] !== undefined) {
        this['enableNonSslPort'] = instance['properties']['enableNonSslPort'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['tenantSettings']) {
        this['tenantSettings'] = {};
        for(var valueElement5 in instance['properties']['tenantSettings']) {
          if (instance['properties'] !== null && instance['properties'] !== undefined) {
            if (instance['properties']['tenantSettings'][valueElement5] !== undefined) {
              this['tenantSettings'][valueElement5] = instance['properties']['tenantSettings'][valueElement5];
            }
          }
        }
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['shardCount'] !== undefined) {
        this['shardCount'] = instance['properties']['shardCount'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['virtualNetwork'] !== undefined) {
        this['virtualNetwork'] = instance['properties']['virtualNetwork'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['subnet'] !== undefined) {
        this['subnet'] = instance['properties']['subnet'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['staticIP'] !== undefined) {
        this['staticIP'] = instance['properties']['staticIP'];
      }
    }
  }

  return this;
};

module.exports = RedisCreateOrUpdateParameters;
