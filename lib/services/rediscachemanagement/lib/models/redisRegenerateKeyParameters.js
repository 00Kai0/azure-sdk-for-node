/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the RedisRegenerateKeyParameters class.
 * @constructor
 * Specifies which redis access keys to reset.
 * @member {string} keyType Which redis access key to reset. Possible values
 * for this property include: 'Primary', 'Secondary'.
 * 
 */
function RedisRegenerateKeyParameters(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.keyType !== undefined) {
      this.keyType = parameters.keyType;
    }
  }    
}


/**
 * Validate the payload against the RedisRegenerateKeyParameters schema
 *
 * @param {JSON} payload
 *
 */
RedisRegenerateKeyParameters.prototype.serialize = function () {
  var payload = {};
  if (this['keyType'] !== null && this['keyType'] !== undefined) {
    var allowedValues = [ 'Primary', 'Secondary' ];
    var thiskeyType = this['keyType'];
    if (!allowedValues.some( function(item) { return item === thiskeyType; })) {
      throw new Error(this['keyType'] + ' is not a valid value. The valid values are: ' + allowedValues);
    }
    payload['keyType'] = this['keyType'];
  }
   else {
    throw new Error('this[\'keyType\'] cannot be null or undefined.');
  }

  return payload;
};

/**
 * Deserialize the instance to RedisRegenerateKeyParameters schema
 *
 * @param {JSON} instance
 *
 */
RedisRegenerateKeyParameters.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['keyType'] !== undefined) {
      this['keyType'] = instance['keyType'];
    }
  }

  return this;
};

module.exports = RedisRegenerateKeyParameters;
