/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var PolicyManagementClient = ( /** @lends PolicyManagementClient */ function() {
  /**
   * @class
   * Initializes a new instance of the PolicyManagementClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function PolicyManagementClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    PolicyManagementClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.azure.com/';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2014-05-21';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the
     * [RoleAssignmentOperations](-RoleAssignmentOperations.html) object.
     * @type {object}
     */
    this.roleAssignments = new RoleAssignmentOperations(this);
    /**
     * Provides an instance of the
     * [RoleDefinitionOperations](-RoleDefinitionOperations.html) object.
     * @type {object}
     */
    this.roleDefinitions = new RoleDefinitionOperations(this);
  }
  
  util.inherits(PolicyManagementClient, Service);
  
  
  return PolicyManagementClient;
})();
exports.PolicyManagementClient = PolicyManagementClient;

var RoleAssignmentOperations = ( /** @lends RoleAssignmentOperations */ function() {
  /**
   * @class
   * TBD  (see http://TBD for more information)
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [PolicyManagementClient] {@link
   * PolicyManagementClient~PolicyManagementClient}.
   * See [roleAssignments] {@link
   * PolicyManagementClient~PolicyManagementClient#roleAssignments}.
   * Initializes a new instance of the RoleAssignmentOperations class.
   * @constructor
   * 
   * @param {PolicyManagementClient} client Reference to the service client.
   */
  function RoleAssignmentOperations(client) {
    this.client = client;
  }
  
  /**
   * TBD  (see http://TBD for more information)
   * 
   * @param {RoleAssignmentCreateParameters} parameters TBD
   * 
   * @param {RoleAssignment} parameters.roleAssignment TBD
   * 
   * @param {string} parameters.roleAssignment.roleAssignmentId TBD
   * 
   * @param {string} parameters.roleAssignment.appId TBD
   * 
   * @param {string} parameters.roleAssignment.roleId TBD
   * 
   * @param {string} parameters.roleAssignment.principalId TBD
   * 
   * @param {string} parameters.roleAssignment.scope TBD
   * 
   * @param {string} parameters.roleAssignment.principalType TBD
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleAssignmentOperations.prototype.createOrUpdate = function(parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.roleAssignment === null || parameters.roleAssignment === undefined) {
      return callback(new Error('parameters.roleAssignment cannot be null.'));
    }
    if (parameters.roleAssignment.appId === null || parameters.roleAssignment.appId === undefined) {
      return callback(new Error('parameters.roleAssignment.appId cannot be null.'));
    }
    if (parameters.roleAssignment.principalId === null || parameters.roleAssignment.principalId === undefined) {
      return callback(new Error('parameters.roleAssignment.principalId cannot be null.'));
    }
    if (parameters.roleAssignment.principalType === null || parameters.roleAssignment.principalType === undefined) {
      return callback(new Error('parameters.roleAssignment.principalType cannot be null.'));
    }
    if (parameters.roleAssignment.roleAssignmentId === null || parameters.roleAssignment.roleAssignmentId === undefined) {
      return callback(new Error('parameters.roleAssignment.roleAssignmentId cannot be null.'));
    }
    if (parameters.roleAssignment.roleId === null || parameters.roleAssignment.roleId === undefined) {
      return callback(new Error('parameters.roleAssignment.roleId cannot be null.'));
    }
    if (parameters.roleAssignment.scope === null || parameters.roleAssignment.scope === undefined) {
      return callback(new Error('parameters.roleAssignment.scope cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var baseUrl = this.client.baseUri;
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/RoleAssignments';
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    requestDoc = {};
    requestDoc['RoleAssignmentId'] = parameters.roleAssignment.roleAssignmentId;
    
    requestDoc['AppId'] = parameters.roleAssignment.appId;
    
    requestDoc['RoleId'] = parameters.roleAssignment.roleId;
    
    requestDoc['PrincipalId'] = parameters.roleAssignment.principalId;
    
    requestDoc['Scope'] = parameters.roleAssignment.scope;
    
    requestDoc['PrincipalType'] = parameters.roleAssignment.principalType;
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * TBD  (see http://TBD for more information)
   * 
   * @param {string} roleAssignmentId TBD
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleAssignmentOperations.prototype.delete = function(roleAssignmentId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (roleAssignmentId === null || roleAssignmentId === undefined) {
      return callback(new Error('roleAssignmentId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var baseUrl = this.client.baseUri;
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/RoleAssignments(guid\'' + roleAssignmentId.trim() + '\')';
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    httpRequest.headers['x-ms-version'] = '2014-05-21';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * TBD
   * 
   * @param {string} roleAssignmentId TBD
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleAssignmentOperations.prototype.get = function(roleAssignmentId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (roleAssignmentId === null || roleAssignmentId === undefined) {
      return callback(new Error('roleAssignmentId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var baseUrl = this.client.baseUri;
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/RoleAssignments(guid\'' + roleAssignmentId.trim() + '\')';
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    httpRequest.headers['x-ms-version'] = '2014-05-21';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var roleAssignmentInstance = {};
        result.roleAssignment = roleAssignmentInstance;
        
        var roleAssignmentIdValue = responseDoc['RoleAssignmentId'];
        if (roleAssignmentIdValue) {
          var roleAssignmentIdInstance = roleAssignmentIdValue;
          roleAssignmentInstance.roleAssignmentId = roleAssignmentIdInstance;
        }
        
        var appIdValue = responseDoc['AppId'];
        if (appIdValue) {
          var appIdInstance = appIdValue;
          roleAssignmentInstance.appId = appIdInstance;
        }
        
        var roleIdValue = responseDoc['RoleId'];
        if (roleIdValue) {
          var roleIdInstance = roleIdValue;
          roleAssignmentInstance.roleId = roleIdInstance;
        }
        
        var principalIdValue = responseDoc['PrincipalId'];
        if (principalIdValue) {
          var principalIdInstance = principalIdValue;
          roleAssignmentInstance.principalId = principalIdInstance;
        }
        
        var scopeValue = responseDoc['Scope'];
        if (scopeValue) {
          var scopeInstance = scopeValue;
          roleAssignmentInstance.scope = scopeInstance;
        }
        
        var principalTypeValue = responseDoc['PrincipalType'];
        if (principalTypeValue) {
          var principalTypeInstance = principalTypeValue;
          roleAssignmentInstance.principalType = principalTypeInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * TBD
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleAssignmentOperations.prototype.list = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var baseUrl = this.client.baseUri;
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/RoleAssignments';
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-05-21';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { roleAssignments: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var roleAssignmentInstance = {};
            result.roleAssignments.push(roleAssignmentInstance);
            
            var roleAssignmentIdValue = valueValue['RoleAssignmentId'];
            if (roleAssignmentIdValue) {
              var roleAssignmentIdInstance = roleAssignmentIdValue;
              roleAssignmentInstance.roleAssignmentId = roleAssignmentIdInstance;
            }
            
            var appIdValue = valueValue['AppId'];
            if (appIdValue) {
              var appIdInstance = appIdValue;
              roleAssignmentInstance.appId = appIdInstance;
            }
            
            var roleIdValue = valueValue['RoleId'];
            if (roleIdValue) {
              var roleIdInstance = roleIdValue;
              roleAssignmentInstance.roleId = roleIdInstance;
            }
            
            var principalIdValue = valueValue['PrincipalId'];
            if (principalIdValue) {
              var principalIdInstance = principalIdValue;
              roleAssignmentInstance.principalId = principalIdInstance;
            }
            
            var scopeValue = valueValue['Scope'];
            if (scopeValue) {
              var scopeInstance = scopeValue;
              roleAssignmentInstance.scope = scopeInstance;
            }
            
            var principalTypeValue = valueValue['PrincipalType'];
            if (principalTypeValue) {
              var principalTypeInstance = principalTypeValue;
              roleAssignmentInstance.principalType = principalTypeInstance;
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return RoleAssignmentOperations;
})();

var RoleDefinitionOperations = ( /** @lends RoleDefinitionOperations */ function() {
  /**
   * @class
   * TBD  (see http://TBD for more information)
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [PolicyManagementClient] {@link
   * PolicyManagementClient~PolicyManagementClient}.
   * See [roleDefinitions] {@link
   * PolicyManagementClient~PolicyManagementClient#roleDefinitions}.
   * Initializes a new instance of the RoleDefinitionOperations class.
   * @constructor
   * 
   * @param {PolicyManagementClient} client Reference to the service client.
   */
  function RoleDefinitionOperations(client) {
    this.client = client;
  }
  
  /**
   * TBD
   * 
   * @param {string} roleId TBD
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleDefinitionOperations.prototype.get = function(roleId, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (roleId === null || roleId === undefined) {
      return callback(new Error('roleId cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var baseUrl = this.client.baseUri;
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/RoleDefinitions(guid\'' + roleId.trim() + '\')';
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    httpRequest.headers['x-ms-version'] = '2014-05-21';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var roleDefinitionInstance = { permissions: [] };
        result.roleDefinition = roleDefinitionInstance;
        
        var roleIdValue = responseDoc['RoleId'];
        if (roleIdValue) {
          var roleIdInstance = roleIdValue;
          roleDefinitionInstance.roleId = roleIdInstance;
        }
        
        var appIdValue = responseDoc['AppId'];
        if (appIdValue) {
          var appIdInstance = appIdValue;
          roleDefinitionInstance.appId = appIdInstance;
        }
        
        var nameValue = responseDoc['Name'];
        if (nameValue) {
          var nameInstance = nameValue;
          roleDefinitionInstance.name = nameInstance;
        }
        
        var descriptionValue = responseDoc['Description'];
        if (descriptionValue) {
          var descriptionInstance = descriptionValue;
          roleDefinitionInstance.description = descriptionInstance;
        }
        
        var scopeValue = responseDoc['Scope'];
        if (scopeValue) {
          var scopeInstance = scopeValue;
          roleDefinitionInstance.scope = scopeInstance;
        }
        
        var permissionsArray = responseDoc['Permissions'];
        if (permissionsArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < permissionsArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var permissionsValue = permissionsArray[loweredIndex1];
            var permissionInstance = { actions: [] };
            roleDefinitionInstance.permissions.push(permissionInstance);
            
            var actionsArray = permissionsValue['Actions'];
            if (actionsArray) {
              for (var loweredIndex2 = 0; loweredIndex2 < actionsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var actionsValue = actionsArray[loweredIndex2];
                permissionInstance.actions.push(actionsValue);
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * TBD
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  RoleDefinitionOperations.prototype.list = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var baseUrl = this.client.baseUri;
    var url2 = '/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/RoleDefinitions';
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    httpRequest.headers['x-ms-version'] = '2014-05-21';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { roleDefinitions: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var valueArray = responseDoc['value'];
        if (valueArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var valueValue = valueArray[loweredIndex1];
            var roleDefinitionInstance = { permissions: [] };
            result.roleDefinitions.push(roleDefinitionInstance);
            
            var roleIdValue = valueValue['RoleId'];
            if (roleIdValue) {
              var roleIdInstance = roleIdValue;
              roleDefinitionInstance.roleId = roleIdInstance;
            }
            
            var appIdValue = valueValue['AppId'];
            if (appIdValue) {
              var appIdInstance = appIdValue;
              roleDefinitionInstance.appId = appIdInstance;
            }
            
            var nameValue = valueValue['Name'];
            if (nameValue) {
              var nameInstance = nameValue;
              roleDefinitionInstance.name = nameInstance;
            }
            
            var descriptionValue = valueValue['Description'];
            if (descriptionValue) {
              var descriptionInstance = descriptionValue;
              roleDefinitionInstance.description = descriptionInstance;
            }
            
            var scopeValue = valueValue['Scope'];
            if (scopeValue) {
              var scopeInstance = scopeValue;
              roleDefinitionInstance.scope = scopeInstance;
            }
            
            var permissionsArray = valueValue['Permissions'];
            if (permissionsArray) {
              for (var loweredIndex2 = 0; loweredIndex2 < permissionsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var permissionsValue = permissionsArray[loweredIndex2];
                var permissionInstance = { actions: [] };
                roleDefinitionInstance.permissions.push(permissionInstance);
                
                var actionsArray = permissionsValue['Actions'];
                if (actionsArray) {
                  for (var loweredIndex3 = 0; loweredIndex3 < actionsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var actionsValue = actionsArray[loweredIndex3];
                    permissionInstance.actions.push(actionsValue);
                  }
                }
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return RoleDefinitionOperations;
})();
