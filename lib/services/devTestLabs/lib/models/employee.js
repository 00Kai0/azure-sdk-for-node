/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class representing a Employee.
 */
class Employee {
  /**
   * Create a Employee.
   * @property {uuid} [id] The id property for the employee entity
   * @property {string} [number] The number property for the employee entity
   * @property {string} [displayName] The displayName property for the employee
   * entity
   * @property {string} [givenName] The givenName property for the employee
   * entity
   * @property {string} [middleName] The middleName property for the employee
   * entity
   * @property {string} [surname] The surname property for the employee entity
   * @property {string} [jobTitle] The jobTitle property for the employee
   * entity
   * @property {object} [address]
   * @property {string} [address.street] The street property for the
   * postaladdresstype entity
   * @property {string} [address.city] The city property for the
   * postaladdresstype entity
   * @property {string} [address.state] The state property for the
   * postaladdresstype entity
   * @property {string} [address.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   * @property {string} [address.postalCode] The postalCode property for the
   * postaladdresstype entity
   * @property {array} [address.customerFinancialDetails]
   * @property {array} [address.picture]
   * @property {array} [address.defaultDimensions]
   * @property {object} [address.currency]
   * @property {uuid} [address.currency.id] The id property for the currency
   * entity
   * @property {string} [address.currency.code] The code property for the
   * currency entity
   * @property {string} [address.currency.displayName] The displayName property
   * for the currency entity
   * @property {string} [address.currency.symbol] The symbol property for the
   * currency entity
   * @property {string} [address.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   * @property {number} [address.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   * @property {date} [address.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   * @property {object} [address.paymentTerm]
   * @property {uuid} [address.paymentTerm.id] The id property for the
   * paymentTerm entity
   * @property {string} [address.paymentTerm.code] The code property for the
   * paymentTerm entity
   * @property {string} [address.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   * @property {string} [address.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   * @property {string} [address.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   * @property {number} [address.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   * @property {boolean} [address.paymentTerm.calculateDiscountOnCreditMemos]
   * The calculateDiscountOnCreditMemos property for the paymentTerm entity
   * @property {date} [address.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   * @property {object} [address.shipmentMethod]
   * @property {uuid} [address.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   * @property {string} [address.shipmentMethod.code] The code property for the
   * shipmentMethod entity
   * @property {string} [address.shipmentMethod.displayName] The displayName
   * property for the shipmentMethod entity
   * @property {date} [address.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   * @property {object} [address.paymentMethod]
   * @property {uuid} [address.paymentMethod.id] The id property for the
   * paymentMethod entity
   * @property {string} [address.paymentMethod.code] The code property for the
   * paymentMethod entity
   * @property {string} [address.paymentMethod.displayName] The displayName
   * property for the paymentMethod entity
   * @property {date} [address.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   * @property {string} [phoneNumber] The phoneNumber property for the employee
   * entity
   * @property {string} [mobilePhone] The mobilePhone property for the employee
   * entity
   * @property {string} [email] The email property for the employee entity
   * @property {string} [personalEmail] The personalEmail property for the
   * employee entity
   * @property {date} [employmentDate] The employmentDate property for the
   * employee entity
   * @property {date} [terminationDate] The terminationDate property for the
   * employee entity
   * @property {string} [status] The status property for the employee entity
   * @property {date} [birthDate] The birthDate property for the employee
   * entity
   * @property {string} [statisticsGroupCode] The statisticsGroupCode property
   * for the employee entity
   * @property {date} [lastModifiedDateTime] The lastModifiedDateTime property
   * for the employee entity
   * @property {array} [picture]
   * @property {array} [defaultDimensions]
   * @property {array} [timeRegistrationEntries]
   */
  constructor() {
  }

  /**
   * Defines the metadata of Employee
   *
   * @returns {object} metadata of Employee
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'employee',
      type: {
        name: 'Composite',
        className: 'Employee',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          number: {
            required: false,
            serializedName: 'number',
            constraints: {
              MaxLength: 20
            },
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: false,
            serializedName: 'displayName',
            type: {
              name: 'String'
            }
          },
          givenName: {
            required: false,
            serializedName: 'givenName',
            constraints: {
              MaxLength: 30
            },
            type: {
              name: 'String'
            }
          },
          middleName: {
            required: false,
            serializedName: 'middleName',
            constraints: {
              MaxLength: 30
            },
            type: {
              name: 'String'
            }
          },
          surname: {
            required: false,
            serializedName: 'surname',
            constraints: {
              MaxLength: 30
            },
            type: {
              name: 'String'
            }
          },
          jobTitle: {
            required: false,
            serializedName: 'jobTitle',
            constraints: {
              MaxLength: 30
            },
            type: {
              name: 'String'
            }
          },
          address: {
            required: false,
            serializedName: 'address',
            type: {
              name: 'Composite',
              className: 'Postaladdresstype'
            }
          },
          phoneNumber: {
            required: false,
            serializedName: 'phoneNumber',
            constraints: {
              MaxLength: 30
            },
            type: {
              name: 'String'
            }
          },
          mobilePhone: {
            required: false,
            serializedName: 'mobilePhone',
            constraints: {
              MaxLength: 30
            },
            type: {
              name: 'String'
            }
          },
          email: {
            required: false,
            serializedName: 'email',
            constraints: {
              MaxLength: 80
            },
            type: {
              name: 'String'
            }
          },
          personalEmail: {
            required: false,
            serializedName: 'personalEmail',
            constraints: {
              MaxLength: 80
            },
            type: {
              name: 'String'
            }
          },
          employmentDate: {
            required: false,
            serializedName: 'employmentDate',
            type: {
              name: 'DateTime'
            }
          },
          terminationDate: {
            required: false,
            serializedName: 'terminationDate',
            type: {
              name: 'DateTime'
            }
          },
          status: {
            required: false,
            serializedName: 'status',
            type: {
              name: 'String'
            }
          },
          birthDate: {
            required: false,
            serializedName: 'birthDate',
            type: {
              name: 'DateTime'
            }
          },
          statisticsGroupCode: {
            required: false,
            serializedName: 'statisticsGroupCode',
            constraints: {
              MaxLength: 10
            },
            type: {
              name: 'String'
            }
          },
          lastModifiedDateTime: {
            required: false,
            serializedName: 'lastModifiedDateTime',
            type: {
              name: 'DateTime'
            }
          },
          picture: {
            required: false,
            serializedName: 'picture',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'PictureElementType',
                  type: {
                    name: 'Composite',
                    className: 'Picture'
                  }
              }
            }
          },
          defaultDimensions: {
            required: false,
            serializedName: 'defaultDimensions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'DefaultDimensionsElementType',
                  type: {
                    name: 'Composite',
                    className: 'DefaultDimensions'
                  }
              }
            }
          },
          timeRegistrationEntries: {
            required: false,
            serializedName: 'timeRegistrationEntries',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'TimeRegistrationEntryElementType',
                  type: {
                    name: 'Composite',
                    className: 'TimeRegistrationEntry'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = Employee;
