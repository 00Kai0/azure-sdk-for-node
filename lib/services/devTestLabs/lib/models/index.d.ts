/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * Properties of an artifact parameter.
 */
export interface ArtifactParameterProperties {
  /**
   * The name of the artifact parameter.
   */
  name?: string;
  /**
   * The value of the artifact parameter.
   */
  value?: string;
}

/**
 * Properties of an artifact.
 */
export interface ArtifactInstallProperties {
  /**
   * The artifact's identifier.
   */
  artifactId?: string;
  /**
   * The parameters of the artifact.
   */
  parameters?: ArtifactParameterProperties[];
}

/**
 * Request body for applying artifacts to a virtual machine.
 */
export interface ApplyArtifactsRequest {
  /**
   * The list of artifacts to apply.
   */
  artifacts?: ArtifactInstallProperties[];
}

/**
 * Information about a generated ARM template.
 */
export interface ArmTemplateInfo {
  /**
   * The template's contents.
   */
  template?: any;
  /**
   * The parameters of the ARM template.
   */
  parameters?: any;
}

/**
 * An artifact.
 */
export interface Artifact extends BaseResource {
  /**
   * The title of the artifact.
   */
  title?: string;
  /**
   * The description of the artifact.
   */
  description?: string;
  /**
   * The file path of the artifact.
   */
  filePath?: string;
  /**
   * The icon of the artifact.
   */
  icon?: string;
  /**
   * Gets or sets the type of the target os.
   */
  targetOsType?: string;
  /**
   * The parameters of the artifact.
   */
  parameters?: any;
  /**
   * The identifier of the resource.
   */
  id?: string;
  /**
   * The name of the resource.
   */
  name?: string;
  /**
   * The type of the resource.
   */
  type?: string;
  /**
   * The location of the resource.
   */
  location?: string;
  /**
   * The tags of the resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Properties of an artifact deployment.
 */
export interface ArtifactDeploymentStatusProperties {
  /**
   * The deployment status of the artifact.
   */
  deploymentStatus?: string;
  /**
   * The total count of the artifacts that were successfully applied.
   */
  artifactsApplied?: number;
  /**
   * The total count of the artifacts that were tentatively applied.
   */
  totalArtifacts?: number;
}

/**
 * Properties of an artifact source.
 */
export interface ArtifactSource extends BaseResource {
  /**
   * The display name of the artifact source.
   */
  displayName?: string;
  /**
   * The URI of the artifact source.
   */
  uri?: string;
  /**
   * The type of the artifact source. Possible values include: 'VsoGit', 'GitHub'
   */
  sourceType?: string;
  /**
   * The folder path of the artifact source.
   */
  folderPath?: string;
  /**
   * The branch reference of the artifact source.
   */
  branchRef?: string;
  /**
   * The security token of the artifact source.
   */
  securityToken?: string;
  /**
   * The status of the artifact source. Possible values include: 'Enabled', 'Disabled'
   */
  status?: string;
  /**
   * The provisioning status of the resource.
   */
  provisioningState?: string;
  /**
   * The identifier of the resource.
   */
  id?: string;
  /**
   * The name of the resource.
   */
  name?: string;
  /**
   * The type of the resource.
   */
  type?: string;
  /**
   * The location of the resource.
   */
  location?: string;
  /**
   * The tags of the resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The per-day properties of a cost item.
 */
export interface CostPerDayProperties {
  /**
   * The date of the cost item.
   */
  date?: Date;
  /**
   * The cost of the cost item.
   */
  cost?: number;
  /**
   * The type of the cost. Possible values include: 'Unavailable', 'Reported', 'Projected'
   */
  costType?: string;
}

/**
 * A cost item.
 */
export interface Cost extends BaseResource {
  /**
   * The currency code of the cost.
   */
  currencyCode?: string;
  /**
   * The per-day costs items of the cost.
   */
  costs?: CostPerDayProperties[];
  /**
   * The identifier of the resource.
   */
  id?: string;
  /**
   * The name of the resource.
   */
  name?: string;
  /**
   * The type of the resource.
   */
  type?: string;
  /**
   * The location of the resource.
   */
  location?: string;
  /**
   * The tags of the resource.
   */
  tags?: { [propertyName: string]: string };
}

export interface VMCostProperties {
  name?: string;
  resourceGroupName?: string;
  cost?: number;
}

export interface CostInsight extends BaseResource {
  currencyCode?: string;
  vmCosts?: VMCostProperties[];
  /**
   * The provisioning status of the resource.
  */
  provisioningState?: string;
  /**
   * The identifier of the resource.
  */
  id?: string;
  /**
   * The name of the resource.
  */
  name?: string;
  /**
   * The type of the resource.
  */
  type?: string;
  /**
   * The location of the resource.
  */
  location?: string;
  /**
   * The tags of the resource.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * Information about a Windows OS.
*/
export interface WindowsOsInfo {
  /**
   * The state of the Windows OS. Possible values include: 'NonSysprepped', 'SysprepRequested',
   * 'SysprepApplied'
  */
  windowsOsState?: string;
}

/**
 * Information about a Linux OS.
*/
export interface LinuxOsInfo {
  /**
   * The state of the Linux OS. Possible values include: 'NonDeprovisioned',
   * 'DeprovisionRequested', 'DeprovisionApplied'
  */
  linuxOsState?: string;
}

/**
 * Properties for creating a custom image from a virtual machine.
*/
export interface CustomImagePropertiesFromVm {
  /**
   * The source vm identifier.
  */
  sourceVmId?: string;
  /**
   * Indicates whether sysprep has been run on the VHD.
  */
  sysPrep?: boolean;
  /**
   * The Windows OS information of the VM.
  */
  windowsOsInfo?: WindowsOsInfo;
  /**
   * The Linux OS information of the VM.
  */
  linuxOsInfo?: LinuxOsInfo;
}

/**
 * Properties for creating a custom image from a VHD.
*/
export interface CustomImagePropertiesCustom {
  /**
   * The image name.
  */
  imageName?: string;
  /**
   * Indicates whether sysprep has been run on the VHD.
  */
  sysPrep?: boolean;
}

/**
 * A custom image.
*/
export interface CustomImage extends BaseResource {
  vm?: CustomImagePropertiesFromVm;
  /**
   * The VHD from which the image is to be created.
  */
  vhd?: CustomImagePropertiesCustom;
  /**
   * The description of the custom image.
  */
  description?: string;
  /**
   * The OS type of the custom image. Possible values include: 'Windows', 'Linux', 'None'
  */
  osType?: string;
  /**
   * The author of the custom image.
  */
  author?: string;
  /**
   * The creation date of the custom image.
  */
  creationDate?: Date;
  /**
   * The provisioning status of the resource.
  */
  provisioningState?: string;
  /**
   * The identifier of the resource.
  */
  id?: string;
  /**
   * The name of the resource.
  */
  name?: string;
  /**
   * The type of the resource.
  */
  type?: string;
  /**
   * The location of the resource.
  */
  location?: string;
  /**
   * The tags of the resource.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * Properties of a daily schedule.
*/
export interface DayDetails {
  time?: string;
}

/**
 * Properties for evaluating a policy set.
*/
export interface EvaluatePoliciesProperties {
  /**
   * The fact name.
  */
  factName?: string;
  /**
   * The fact data.
  */
  factData?: string;
  /**
   * The value offset.
  */
  valueOffset?: string;
}

/**
 * Request body for evaluating a policy set.
*/
export interface EvaluatePoliciesRequest {
  /**
   * Policies to evaluate.
  */
  policies?: EvaluatePoliciesProperties[];
}

/**
 * Policy violation.
*/
export interface PolicyViolation {
  /**
   * The code of the policy violation.
  */
  code?: string;
  /**
   * The message of the policy violation.
  */
  message?: string;
}

/**
 * Result of a policy set evaluation.
*/
export interface PolicySetResult {
  /**
   * A value indicating whether this policy set evaluation has discovered violations.
  */
  hasError?: boolean;
  /**
   * The list of policy violations.
  */
  policyViolations?: PolicyViolation[];
}

/**
 * Response body for evaluating a policy set.
*/
export interface EvaluatePoliciesResponse {
  /**
   * Results of evaluating a policy set.
  */
  results?: PolicySetResult[];
}

/**
 * The reference information for an Azure Marketplace image.
*/
export interface GalleryImageReference {
  /**
   * The offer of the gallery image.
  */
  offer?: string;
  /**
   * The publisher of the gallery image.
  */
  publisher?: string;
  /**
   * The SKU of the gallery image.
  */
  sku?: string;
  /**
   * The OS type of the gallery image.
  */
  osType?: string;
  /**
   * The version of the gallery image.
  */
  version?: string;
}

/**
 * A virtual machine.
*/
export interface LabVirtualMachine extends BaseResource {
  /**
   * The notes of the virtual machine.
  */
  notes?: string;
  /**
   * The object identifier of the owner of the virtual machine.
  */
  ownerObjectId?: string;
  /**
   * The object identifier of the creator of the virtual machine.
  */
  createdByUserId?: string;
  /**
   * The email address of creator of the virtual machine.
  */
  createdByUser?: string;
  /**
   * The resource identifier (Microsoft.Compute) of the virtual machine.
  */
  computeId?: string;
  /**
   * The custom image identifier of the virtual machine.
  */
  customImageId?: string;
  /**
   * The OS type of the virtual machine.
  */
  osType?: string;
  /**
   * The size of the virtual machine.
  */
  size?: string;
  /**
   * The user name of the virtual machine.
  */
  userName?: string;
  /**
   * The password of the virtual machine administrator.
  */
  password?: string;
  /**
   * The SSH key of the virtual machine administrator.
  */
  sshKey?: string;
  /**
   * A value indicating whether this virtual machine uses an SSH key for authentication.
  */
  isAuthenticationWithSshKey?: boolean;
  /**
   * The fully-qualified domain name of the virtual machine.
  */
  fqdn?: string;
  /**
   * The lab subnet name of the virtual machine.
  */
  labSubnetName?: string;
  /**
   * The lab virtual network identifier of the virtual machine.
  */
  labVirtualNetworkId?: string;
  /**
   * Indicates whether the virtual machine is to be created without a public IP address.
  */
  disallowPublicIpAddress?: boolean;
  /**
   * The artifacts to be installed on the virtual machine.
  */
  artifacts?: ArtifactInstallProperties[];
  /**
   * The artifact deployment status for the virtual machine.
  */
  artifactDeploymentStatus?: ArtifactDeploymentStatusProperties;
  /**
   * The Microsoft Azure Marketplace image reference of the virtual machine.
  */
  galleryImageReference?: GalleryImageReference;
  /**
   * The provisioning status of the resource.
  */
  provisioningState?: string;
  /**
   * The identifier of the resource.
  */
  id?: string;
  /**
   * The name of the resource.
  */
  name?: string;
  /**
   * The type of the resource.
  */
  type?: string;
  /**
   * The location of the resource.
  */
  location?: string;
  /**
   * The tags of the resource.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * Information about a VM from which a formula is to be created.
*/
export interface FormulaPropertiesFromVm {
  /**
   * The identifier of the VM from which a formula is to be created.
  */
  labVmId?: string;
}

/**
 * A formula.
*/
export interface Formula extends BaseResource {
  /**
   * The description of the formula.
  */
  description?: string;
  /**
   * The author of the formula.
  */
  author?: string;
  /**
   * The OS type of the formula.
  */
  osType?: string;
  /**
   * The creation date of the formula.
  */
  creationDate?: Date;
  /**
   * The content of the formula.
  */
  formulaContent?: LabVirtualMachine;
  /**
   * Information about a VM from which a formula is to be created.
  */
  vm?: FormulaPropertiesFromVm;
  /**
   * The provisioning status of the resource.
  */
  provisioningState?: string;
  /**
   * The identifier of the resource.
  */
  id?: string;
  /**
   * The name of the resource.
  */
  name?: string;
  /**
   * The type of the resource.
  */
  type?: string;
  /**
   * The location of the resource.
  */
  location?: string;
  /**
   * The tags of the resource.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * A gallery image.
*/
export interface GalleryImage extends BaseResource {
  /**
   * The author of the gallery image.
  */
  author?: string;
  /**
   * The creation date of the gallery image.
  */
  createdDate?: Date;
  /**
   * The description of the gallery image.
  */
  description?: string;
  /**
   * The image reference of the gallery image.
  */
  imageReference?: GalleryImageReference;
  /**
   * The icon of the gallery image.
  */
  icon?: string;
  /**
   * Indicates whether this gallery image is enabled.
  */
  enabled?: boolean;
  /**
   * The identifier of the resource.
  */
  id?: string;
  /**
   * The name of the resource.
  */
  name?: string;
  /**
   * The type of the resource.
  */
  type?: string;
  /**
   * The location of the resource.
  */
  location?: string;
  /**
   * The tags of the resource.
  */
  tags?: { [propertyName: string]: string };
}

export interface ParameterInfo {
  name?: string;
  value?: string;
}

/**
 * Parameters for generating an ARM template for deploying artifacts.
*/
export interface GenerateArmTemplateRequest {
  /**
   * The resource name of the virtual machine.
  */
  virtualMachineName?: string;
  /**
   * The parameters of the ARM template.
  */
  parameters?: ParameterInfo[];
  /**
   * The location of the virtual machine.
  */
  location?: string;
}

/**
 * Properties for generating an upload URI.
*/
export interface GenerateUploadUriParameter {
  /**
   * The blob name of the upload URI.
  */
  blobName?: string;
}

/**
 * Response body for generating an upload URI.
*/
export interface GenerateUploadUriResponse {
  /**
   * The upload URI for the VHD.
  */
  uploadUri?: string;
}

/**
 * Properties of an hourly schedule.
*/
export interface HourDetails {
  /**
   * Minutes of the hour the schedule will run.
  */
  minute?: number;
}

/**
 * A lab.
*/
export interface Lab extends BaseResource {
  /**
   * The lab's default storage account.
  */
  defaultStorageAccount?: string;
  /**
   * The artifact storage account of the lab.
  */
  artifactsStorageAccount?: string;
  /**
   * The storage accounts of the lab.
  */
  storageAccounts?: string[];
  /**
   * The name of the key vault of the lab.
  */
  vaultName?: string;
  /**
   * The type of the lab storage. Possible values include: 'Standard', 'Premium'
  */
  labStorageType?: string;
  /**
   * The default virtual network identifier of the lab.
  */
  defaultVirtualNetworkId?: string;
  /**
   * The creation date of the lab.
  */
  createdDate?: Date;
  /**
   * The provisioning status of the resource.
  */
  provisioningState?: string;
  /**
   * The identifier of the resource.
  */
  id?: string;
  /**
   * The name of the resource.
  */
  name?: string;
  /**
   * The type of the resource.
  */
  type?: string;
  /**
   * The location of the resource.
  */
  location?: string;
  /**
   * The tags of the resource.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * Properties of a VHD in the lab.
*/
export interface LabVhd {
  /**
   * The absolute URI of the VHD.
  */
  id?: string;
}

/**
 * A Policy.
*/
export interface Policy extends BaseResource {
  /**
   * The description of the policy.
  */
  description?: string;
  /**
   * The status of the policy. Possible values include: 'Enabled', 'Disabled'
  */
  status?: string;
  /**
   * The fact name of the policy. Possible values include: 'UserOwnedLabVmCount', 'LabVmCount',
   * 'LabVmSize', 'GalleryImage', 'UserOwnedLabVmCountInSubnet'
  */
  factName?: string;
  /**
   * The fact data of the policy.
  */
  factData?: string;
  /**
   * The threshold of the policy.
  */
  threshold?: string;
  /**
   * The evaluator type of the policy. Possible values include: 'AllowedValuesPolicy',
   * 'MaxValuePolicy'
  */
  evaluatorType?: string;
  /**
   * The provisioning status of the resource.
  */
  provisioningState?: string;
  /**
   * The identifier of the resource.
  */
  id?: string;
  /**
   * The name of the resource.
  */
  name?: string;
  /**
   * The type of the resource.
  */
  type?: string;
  /**
   * The location of the resource.
  */
  location?: string;
  /**
   * The tags of the resource.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * Properties of a weekly schedule.
*/
export interface WeekDetails {
  /**
   * The days of the week.
  */
  weekdays?: string[];
  /**
   * The time of the day.
  */
  time?: string;
}

/**
 * A schedule.
*/
export interface Schedule extends BaseResource {
  /**
   * The status of the schedule. Possible values include: 'Enabled', 'Disabled'
  */
  status?: string;
  /**
   * The task type of the schedule. Possible values include: 'LabVmsShutdownTask',
   * 'LabVmsStartupTask', 'LabBillingTask'
  */
  taskType?: string;
  /**
   * The weekly recurrence of the schedule.
  */
  weeklyRecurrence?: WeekDetails;
  /**
   * The daily recurrence of the schedule.
  */
  dailyRecurrence?: DayDetails;
  /**
   * The hourly recurrence of the schedule.
  */
  hourlyRecurrence?: HourDetails;
  /**
   * The time zone id.
  */
  timeZoneId?: string;
  /**
   * The provisioning status of the resource.
  */
  provisioningState?: string;
  /**
   * The identifier of the resource.
  */
  id?: string;
  /**
   * The name of the resource.
  */
  name?: string;
  /**
   * The type of the resource.
  */
  type?: string;
  /**
   * The location of the resource.
  */
  location?: string;
  /**
   * The tags of the resource.
  */
  tags?: { [propertyName: string]: string };
}

export interface Subnet {
  resourceId?: string;
  labSubnetName?: string;
  /**
   * Possible values include: 'Default', 'Deny', 'Allow'
  */
  allowPublicIp?: string;
}

/**
 * Property overrides on a subnet of a virtual network.
*/
export interface SubnetOverride {
  /**
   * The resource identifier of the subnet.
  */
  resourceId?: string;
  /**
   * The name given to the subnet within the lab.
  */
  labSubnetName?: string;
  /**
   * Indicates whether this subnet can be used during virtual machine creation. Possible values
   * include: 'Default', 'Deny', 'Allow'
  */
  useInVmCreationPermission?: string;
  /**
   * Indicates whether public IP addresses can be assigned to virtual machines on this subnet.
   * Possible values include: 'Default', 'Deny', 'Allow'
  */
  usePublicIpAddressPermission?: string;
}

export interface SubscriptionNotificationProperties {
  tenantId?: string;
}

export interface SubscriptionNotification {
  registrationDate?: string;
  /**
   * Possible values include: 'NotDefined', 'Registered', 'Unregistered', 'Warned', 'Suspended',
   * 'Deleted'
  */
  state?: string;
  properties?: SubscriptionNotificationProperties;
}

/**
 * A virtual network.
*/
export interface VirtualNetwork extends BaseResource {
  /**
   * The allowed subnets of the virtual network.
  */
  allowedSubnets?: Subnet[];
  /**
   * The description of the virtual network.
  */
  description?: string;
  /**
   * The Microsoft.Network resource identifier of the virtual network.
  */
  externalProviderResourceId?: string;
  /**
   * The subnet overrides of the virtual network.
  */
  subnetOverrides?: SubnetOverride[];
  /**
   * The provisioning status of the resource.
  */
  provisioningState?: string;
  /**
   * The identifier of the resource.
  */
  id?: string;
  /**
   * The name of the resource.
  */
  name?: string;
  /**
   * The type of the resource.
  */
  type?: string;
  /**
   * The location of the resource.
  */
  location?: string;
  /**
   * The tags of the resource.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * The response of a list operation.
*/
export interface ResponseWithContinuationLab extends Array<Lab> {
  /**
   * Link for next set of results.
  */
  nextLink?: string;
}

/**
 * The response of a list operation.
*/
export interface ResponseWithContinuationLabVhd extends Array<LabVhd> {
  /**
   * Link for next set of results.
  */
  nextLink?: string;
}

/**
 * The response of a list operation.
*/
export interface ResponseWithContinuationArtifactSource extends Array<ArtifactSource> {
  /**
   * Link for next set of results.
  */
  nextLink?: string;
}

/**
 * The response of a list operation.
*/
export interface ResponseWithContinuationArtifact extends Array<Artifact> {
  /**
   * Link for next set of results.
  */
  nextLink?: string;
}

/**
 * The response of a list operation.
*/
export interface ResponseWithContinuationCostInsight extends Array<CostInsight> {
  /**
   * Link for next set of results.
  */
  nextLink?: string;
}

/**
 * The response of a list operation.
*/
export interface ResponseWithContinuationCost extends Array<Cost> {
  /**
   * Link for next set of results.
  */
  nextLink?: string;
}

/**
 * The response of a list operation.
*/
export interface ResponseWithContinuationCustomImage extends Array<CustomImage> {
  /**
   * Link for next set of results.
  */
  nextLink?: string;
}

/**
 * The response of a list operation.
*/
export interface ResponseWithContinuationFormula extends Array<Formula> {
  /**
   * Link for next set of results.
  */
  nextLink?: string;
}

/**
 * The response of a list operation.
*/
export interface ResponseWithContinuationGalleryImage extends Array<GalleryImage> {
  /**
   * Link for next set of results.
  */
  nextLink?: string;
}

/**
 * The response of a list operation.
*/
export interface ResponseWithContinuationPolicy extends Array<Policy> {
  /**
   * Link for next set of results.
  */
  nextLink?: string;
}

/**
 * The response of a list operation.
*/
export interface ResponseWithContinuationSchedule extends Array<Schedule> {
  /**
   * Link for next set of results.
  */
  nextLink?: string;
}

/**
 * The response of a list operation.
*/
export interface ResponseWithContinuationLabVirtualMachine extends Array<LabVirtualMachine> {
  /**
   * Link for next set of results.
  */
  nextLink?: string;
}

/**
 * The response of a list operation.
*/
export interface ResponseWithContinuationVirtualNetwork extends Array<VirtualNetwork> {
  /**
   * Link for next set of results.
  */
  nextLink?: string;
}
