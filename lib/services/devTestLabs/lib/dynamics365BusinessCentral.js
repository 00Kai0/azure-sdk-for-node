/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const ServiceClient = msRestAzure.AzureServiceClient;
const WebResource = msRest.WebResource;

const models = require('./models');


/**
 * @summary Returns a list of companies
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetCompaniesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCompanies(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies';
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetCompaniesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an company object for
 * Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Company} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCompanyById(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Company']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of items
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetItemsOKResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getItems(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/items';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetItemsOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a item in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the item entity
 *
 * @param {string} [body.number] The number property for the item entity
 *
 * @param {string} [body.displayName] The displayName property for the item
 * entity
 *
 * @param {string} [body.type] The type property for the item entity
 *
 * @param {uuid} [body.itemCategoryId] The itemCategoryId property for the item
 * entity
 *
 * @param {string} [body.itemCategoryCode] The itemCategoryCode property for
 * the item entity
 *
 * @param {boolean} [body.blocked] The blocked property for the item entity
 *
 * @param {uuid} [body.baseUnitOfMeasureId] The baseUnitOfMeasureId property
 * for the item entity
 *
 * @param {object} [body.baseUnitOfMeasure]
 *
 * @param {string} [body.baseUnitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.baseUnitOfMeasure.displayName] The displayName
 * property for the unitofmeasuretype entity
 *
 * @param {string} [body.baseUnitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.baseUnitOfMeasure.unitConversion]
 *
 * @param {string} [body.baseUnitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.baseUnitOfMeasure.unitConversion.fromToConversionRate]
 * The fromToConversionRate property for the itemunitofmeasureconversiontype
 * entity
 *
 * @param {array} [body.baseUnitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.baseUnitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.baseUnitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.baseUnitOfMeasure.picture]
 *
 * @param {array} [body.baseUnitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.baseUnitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.baseUnitOfMeasure.itemCategory.id] The id property for
 * the itemCategory entity
 *
 * @param {string} [body.baseUnitOfMeasure.itemCategory.code] The code property
 * for the itemCategory entity
 *
 * @param {string} [body.baseUnitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.baseUnitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {string} [body.gtin] The gtin property for the item entity
 *
 * @param {number} [body.inventory] The inventory property for the item entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the item entity
 *
 * @param {boolean} [body.priceIncludesTax] The priceIncludesTax property for
 * the item entity
 *
 * @param {number} [body.unitCost] The unitCost property for the item entity
 *
 * @param {uuid} [body.taxGroupId] The taxGroupId property for the item entity
 *
 * @param {string} [body.taxGroupCode] The taxGroupCode property for the item
 * entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the item entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Item} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postItem(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/items';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['Body']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Item']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an item object for
 * Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} itemId id for item
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Item} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getItemById(companyId, itemId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (itemId === null || itemId === undefined || typeof itemId.valueOf() !== 'string' || !msRest.isValidUuid(itemId)) {
      throw new Error('itemId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/items({item_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{item_id}', encodeURIComponent(itemId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Item']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an item in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} itemId id for item
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteItemById(companyId, itemId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (itemId === null || itemId === undefined || typeof itemId.valueOf() !== 'string' || !msRest.isValidUuid(itemId)) {
      throw new Error('itemId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/items({item_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{item_id}', encodeURIComponent(itemId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified item
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the item entity
 *
 * @param {string} [body.number] The number property for the item entity
 *
 * @param {string} [body.displayName] The displayName property for the item
 * entity
 *
 * @param {string} [body.type] The type property for the item entity
 *
 * @param {uuid} [body.itemCategoryId] The itemCategoryId property for the item
 * entity
 *
 * @param {string} [body.itemCategoryCode] The itemCategoryCode property for
 * the item entity
 *
 * @param {boolean} [body.blocked] The blocked property for the item entity
 *
 * @param {uuid} [body.baseUnitOfMeasureId] The baseUnitOfMeasureId property
 * for the item entity
 *
 * @param {object} [body.baseUnitOfMeasure]
 *
 * @param {string} [body.baseUnitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.baseUnitOfMeasure.displayName] The displayName
 * property for the unitofmeasuretype entity
 *
 * @param {string} [body.baseUnitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.baseUnitOfMeasure.unitConversion]
 *
 * @param {string} [body.baseUnitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.baseUnitOfMeasure.unitConversion.fromToConversionRate]
 * The fromToConversionRate property for the itemunitofmeasureconversiontype
 * entity
 *
 * @param {array} [body.baseUnitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.baseUnitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.baseUnitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.baseUnitOfMeasure.picture]
 *
 * @param {array} [body.baseUnitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.baseUnitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.baseUnitOfMeasure.itemCategory.id] The id property for
 * the itemCategory entity
 *
 * @param {string} [body.baseUnitOfMeasure.itemCategory.code] The code property
 * for the itemCategory entity
 *
 * @param {string} [body.baseUnitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.baseUnitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {string} [body.gtin] The gtin property for the item entity
 *
 * @param {number} [body.inventory] The inventory property for the item entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the item entity
 *
 * @param {boolean} [body.priceIncludesTax] The priceIncludesTax property for
 * the item entity
 *
 * @param {number} [body.unitCost] The unitCost property for the item entity
 *
 * @param {uuid} [body.taxGroupId] The taxGroupId property for the item entity
 *
 * @param {string} [body.taxGroupCode] The taxGroupCode property for the item
 * entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the item entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} itemId id for item
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Item} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchItemById(body, companyId, itemId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (itemId === null || itemId === undefined || typeof itemId.valueOf() !== 'string' || !msRest.isValidUuid(itemId)) {
      throw new Error('itemId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/items({item_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{item_id}', encodeURIComponent(itemId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['Body']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Item']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of picture
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} itemId id for item
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetPictureForItemOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPictureForItem(companyId, itemId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (itemId === null || itemId === undefined || typeof itemId.valueOf() !== 'string' || !msRest.isValidUuid(itemId)) {
      throw new Error('itemId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/items({item_id})/picture';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{item_id}', encodeURIComponent(itemId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetPictureForItemOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an picture object for
 * Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} itemId id for item
 *
 * @param {uuid} pictureId id for picture
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Picture} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPictureForItemById(companyId, itemId, pictureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (itemId === null || itemId === undefined || typeof itemId.valueOf() !== 'string' || !msRest.isValidUuid(itemId)) {
      throw new Error('itemId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pictureId === null || pictureId === undefined || typeof pictureId.valueOf() !== 'string' || !msRest.isValidUuid(pictureId)) {
      throw new Error('pictureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/items({item_id})/picture({picture_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{item_id}', encodeURIComponent(itemId.toString()));
  requestUrl = requestUrl.replace('{picture_id}', encodeURIComponent(pictureId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Picture']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an picture in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} itemId id for item
 *
 * @param {uuid} pictureId id for picture
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deletePictureForItemByIdById(companyId, itemId, pictureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (itemId === null || itemId === undefined || typeof itemId.valueOf() !== 'string' || !msRest.isValidUuid(itemId)) {
      throw new Error('itemId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pictureId === null || pictureId === undefined || typeof pictureId.valueOf() !== 'string' || !msRest.isValidUuid(pictureId)) {
      throw new Error('pictureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/items({item_id})/picture({picture_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{item_id}', encodeURIComponent(itemId.toString()));
  requestUrl = requestUrl.replace('{picture_id}', encodeURIComponent(pictureId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified picture
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the picture entity
 *
 * @param {number} [body.width] The width property for the picture entity
 *
 * @param {number} [body.height] The height property for the picture entity
 *
 * @param {string} [body.contentType] The contentType property for the picture
 * entity
 *
 * @param {string} [body.content] The content property for the picture entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} itemId id for item
 *
 * @param {uuid} pictureId id for picture
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Picture} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchPictureForItemByIdById(body, companyId, itemId, pictureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (itemId === null || itemId === undefined || typeof itemId.valueOf() !== 'string' || !msRest.isValidUuid(itemId)) {
      throw new Error('itemId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pictureId === null || pictureId === undefined || typeof pictureId.valueOf() !== 'string' || !msRest.isValidUuid(pictureId)) {
      throw new Error('pictureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/items({item_id})/picture({picture_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{item_id}', encodeURIComponent(itemId.toString()));
  requestUrl = requestUrl.replace('{picture_id}', encodeURIComponent(pictureId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Picture']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of defaultDimensions
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} itemId id for item
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetDefaultDimensionsForItemOKResponse} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDefaultDimensionsForItem(companyId, itemId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (itemId === null || itemId === undefined || typeof itemId.valueOf() !== 'string' || !msRest.isValidUuid(itemId)) {
      throw new Error('itemId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/items({item_id})/defaultDimensions';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{item_id}', encodeURIComponent(itemId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetDefaultDimensionsForItemOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a defaultDimensions in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionId] The dimensionId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionCode] The dimensionCode property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionValueCode] The dimensionValueCode property
 * for the defaultDimensions entity
 *
 * @param {string} [body.postingValidation] The postingValidation property for
 * the defaultDimensions entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} itemId id for item
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DefaultDimensions} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postDefaultDimensionsForItem(body, companyId, itemId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (itemId === null || itemId === undefined || typeof itemId.valueOf() !== 'string' || !msRest.isValidUuid(itemId)) {
      throw new Error('itemId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/items({item_id})/defaultDimensions';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{item_id}', encodeURIComponent(itemId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DefaultDimensions']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an defaultDimensions
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} itemId id for item
 *
 * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
 *
 * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DefaultDimensions} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDefaultDimensionsForItemByDimensionIdByParentId(companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (itemId === null || itemId === undefined || typeof itemId.valueOf() !== 'string' || !msRest.isValidUuid(itemId)) {
      throw new Error('itemId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsParentId === null || defaultDimensionsParentId === undefined || typeof defaultDimensionsParentId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsParentId)) {
      throw new Error('defaultDimensionsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsDimensionId === null || defaultDimensionsDimensionId === undefined || typeof defaultDimensionsDimensionId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsDimensionId)) {
      throw new Error('defaultDimensionsDimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/items({item_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{item_id}', encodeURIComponent(itemId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_parentId}', encodeURIComponent(defaultDimensionsParentId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_dimensionId}', encodeURIComponent(defaultDimensionsDimensionId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DefaultDimensions']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an defaultDimensions in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} itemId id for item
 *
 * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
 *
 * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteDefaultDimensionsForItemByDimensionIdByParentIdById(companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (itemId === null || itemId === undefined || typeof itemId.valueOf() !== 'string' || !msRest.isValidUuid(itemId)) {
      throw new Error('itemId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsParentId === null || defaultDimensionsParentId === undefined || typeof defaultDimensionsParentId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsParentId)) {
      throw new Error('defaultDimensionsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsDimensionId === null || defaultDimensionsDimensionId === undefined || typeof defaultDimensionsDimensionId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsDimensionId)) {
      throw new Error('defaultDimensionsDimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/items({item_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{item_id}', encodeURIComponent(itemId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_parentId}', encodeURIComponent(defaultDimensionsParentId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_dimensionId}', encodeURIComponent(defaultDimensionsDimensionId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified defaultDimensions
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionId] The dimensionId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionCode] The dimensionCode property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionValueCode] The dimensionValueCode property
 * for the defaultDimensions entity
 *
 * @param {string} [body.postingValidation] The postingValidation property for
 * the defaultDimensions entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} itemId id for item
 *
 * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
 *
 * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DefaultDimensions} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchDefaultDimensionsForItemByDimensionIdByParentIdById(body, companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (itemId === null || itemId === undefined || typeof itemId.valueOf() !== 'string' || !msRest.isValidUuid(itemId)) {
      throw new Error('itemId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsParentId === null || defaultDimensionsParentId === undefined || typeof defaultDimensionsParentId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsParentId)) {
      throw new Error('defaultDimensionsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsDimensionId === null || defaultDimensionsDimensionId === undefined || typeof defaultDimensionsDimensionId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsDimensionId)) {
      throw new Error('defaultDimensionsDimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/items({item_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{item_id}', encodeURIComponent(itemId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_parentId}', encodeURIComponent(defaultDimensionsParentId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_dimensionId}', encodeURIComponent(defaultDimensionsDimensionId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DefaultDimensions']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of picture
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetPictureOKResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPicture(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/picture';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetPictureOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an picture object for
 * Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} pictureId id for picture
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Picture} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPictureById(companyId, pictureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pictureId === null || pictureId === undefined || typeof pictureId.valueOf() !== 'string' || !msRest.isValidUuid(pictureId)) {
      throw new Error('pictureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/picture({picture_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{picture_id}', encodeURIComponent(pictureId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Picture']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an picture in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} pictureId id for picture
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deletePictureById(companyId, pictureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pictureId === null || pictureId === undefined || typeof pictureId.valueOf() !== 'string' || !msRest.isValidUuid(pictureId)) {
      throw new Error('pictureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/picture({picture_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{picture_id}', encodeURIComponent(pictureId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified picture
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the picture entity
 *
 * @param {number} [body.width] The width property for the picture entity
 *
 * @param {number} [body.height] The height property for the picture entity
 *
 * @param {string} [body.contentType] The contentType property for the picture
 * entity
 *
 * @param {string} [body.content] The content property for the picture entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} pictureId id for picture
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Picture} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchPictureById(body, companyId, pictureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pictureId === null || pictureId === undefined || typeof pictureId.valueOf() !== 'string' || !msRest.isValidUuid(pictureId)) {
      throw new Error('pictureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/picture({picture_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{picture_id}', encodeURIComponent(pictureId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Picture']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of defaultDimensions
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetDefaultDimensionsOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDefaultDimensions(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/defaultDimensions';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetDefaultDimensionsOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a defaultDimensions in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionId] The dimensionId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionCode] The dimensionCode property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionValueCode] The dimensionValueCode property
 * for the defaultDimensions entity
 *
 * @param {string} [body.postingValidation] The postingValidation property for
 * the defaultDimensions entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DefaultDimensions} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postDefaultDimensions(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/defaultDimensions';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DefaultDimensions']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an defaultDimensions
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
 *
 * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DefaultDimensions} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDefaultDimensionsByDimensionIdByParentId(companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsParentId === null || defaultDimensionsParentId === undefined || typeof defaultDimensionsParentId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsParentId)) {
      throw new Error('defaultDimensionsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsDimensionId === null || defaultDimensionsDimensionId === undefined || typeof defaultDimensionsDimensionId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsDimensionId)) {
      throw new Error('defaultDimensionsDimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_parentId}', encodeURIComponent(defaultDimensionsParentId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_dimensionId}', encodeURIComponent(defaultDimensionsDimensionId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DefaultDimensions']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an defaultDimensions in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
 *
 * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteDefaultDimensionsByDimensionIdByParentId(companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsParentId === null || defaultDimensionsParentId === undefined || typeof defaultDimensionsParentId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsParentId)) {
      throw new Error('defaultDimensionsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsDimensionId === null || defaultDimensionsDimensionId === undefined || typeof defaultDimensionsDimensionId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsDimensionId)) {
      throw new Error('defaultDimensionsDimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_parentId}', encodeURIComponent(defaultDimensionsParentId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_dimensionId}', encodeURIComponent(defaultDimensionsDimensionId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified defaultDimensions
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionId] The dimensionId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionCode] The dimensionCode property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionValueCode] The dimensionValueCode property
 * for the defaultDimensions entity
 *
 * @param {string} [body.postingValidation] The postingValidation property for
 * the defaultDimensions entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
 *
 * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DefaultDimensions} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchDefaultDimensionsByDimensionIdByParentId(body, companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsParentId === null || defaultDimensionsParentId === undefined || typeof defaultDimensionsParentId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsParentId)) {
      throw new Error('defaultDimensionsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsDimensionId === null || defaultDimensionsDimensionId === undefined || typeof defaultDimensionsDimensionId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsDimensionId)) {
      throw new Error('defaultDimensionsDimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_parentId}', encodeURIComponent(defaultDimensionsParentId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_dimensionId}', encodeURIComponent(defaultDimensionsDimensionId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DefaultDimensions']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of customers
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetCustomersOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCustomers(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customers';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetCustomersOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a customer in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the customer entity
 *
 * @param {string} [body.number] The number property for the customer entity
 *
 * @param {string} [body.displayName] The displayName property for the customer
 * entity
 *
 * @param {string} [body.type] The type property for the customer entity
 *
 * @param {object} [body.address]
 *
 * @param {string} [body.address.street] The street property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.city] The city property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.state] The state property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.countryLetterCode] The countryLetterCode
 * property for the postaladdresstype entity
 *
 * @param {string} [body.address.postalCode] The postalCode property for the
 * postaladdresstype entity
 *
 * @param {array} [body.address.customerFinancialDetails]
 *
 * @param {array} [body.address.picture]
 *
 * @param {array} [body.address.defaultDimensions]
 *
 * @param {object} [body.address.currency]
 *
 * @param {uuid} [body.address.currency.id] The id property for the currency
 * entity
 *
 * @param {string} [body.address.currency.code] The code property for the
 * currency entity
 *
 * @param {string} [body.address.currency.displayName] The displayName property
 * for the currency entity
 *
 * @param {string} [body.address.currency.symbol] The symbol property for the
 * currency entity
 *
 * @param {string} [body.address.currency.amountDecimalPlaces] The
 * amountDecimalPlaces property for the currency entity
 *
 * @param {number} [body.address.currency.amountRoundingPrecision] The
 * amountRoundingPrecision property for the currency entity
 *
 * @param {date} [body.address.currency.lastModifiedDateTime] The
 * lastModifiedDateTime property for the currency entity
 *
 * @param {object} [body.address.paymentTerm]
 *
 * @param {uuid} [body.address.paymentTerm.id] The id property for the
 * paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.code] The code property for the
 * paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.displayName] The displayName
 * property for the paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.dueDateCalculation] The
 * dueDateCalculation property for the paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.discountDateCalculation] The
 * discountDateCalculation property for the paymentTerm entity
 *
 * @param {number} [body.address.paymentTerm.discountPercent] The
 * discountPercent property for the paymentTerm entity
 *
 * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
 * The calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentTerm entity
 *
 * @param {object} [body.address.shipmentMethod]
 *
 * @param {uuid} [body.address.shipmentMethod.id] The id property for the
 * shipmentMethod entity
 *
 * @param {string} [body.address.shipmentMethod.code] The code property for the
 * shipmentMethod entity
 *
 * @param {string} [body.address.shipmentMethod.displayName] The displayName
 * property for the shipmentMethod entity
 *
 * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the shipmentMethod entity
 *
 * @param {object} [body.address.paymentMethod]
 *
 * @param {uuid} [body.address.paymentMethod.id] The id property for the
 * paymentMethod entity
 *
 * @param {string} [body.address.paymentMethod.code] The code property for the
 * paymentMethod entity
 *
 * @param {string} [body.address.paymentMethod.displayName] The displayName
 * property for the paymentMethod entity
 *
 * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentMethod entity
 *
 * @param {string} [body.phoneNumber] The phoneNumber property for the customer
 * entity
 *
 * @param {string} [body.email] The email property for the customer entity
 *
 * @param {string} [body.website] The website property for the customer entity
 *
 * @param {boolean} [body.taxLiable] The taxLiable property for the customer
 * entity
 *
 * @param {uuid} [body.taxAreaId] The taxAreaId property for the customer
 * entity
 *
 * @param {string} [body.taxAreaDisplayName] The taxAreaDisplayName property
 * for the customer entity
 *
 * @param {string} [body.taxRegistrationNumber] The taxRegistrationNumber
 * property for the customer entity
 *
 * @param {uuid} [body.currencyId] The currencyId property for the customer
 * entity
 *
 * @param {string} [body.currencyCode] The currencyCode property for the
 * customer entity
 *
 * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
 * customer entity
 *
 * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
 * customer entity
 *
 * @param {uuid} [body.paymentMethodId] The paymentMethodId property for the
 * customer entity
 *
 * @param {string} [body.blocked] The blocked property for the customer entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the customer entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Customer} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postCustomer(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customers';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Customer']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an customer object for
 * Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerId id for customer
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Customer} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCustomerById(companyId, customerId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerId === null || customerId === undefined || typeof customerId.valueOf() !== 'string' || !msRest.isValidUuid(customerId)) {
      throw new Error('customerId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customers({customer_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customer_id}', encodeURIComponent(customerId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Customer']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an customer in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerId id for customer
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteCustomerById(companyId, customerId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerId === null || customerId === undefined || typeof customerId.valueOf() !== 'string' || !msRest.isValidUuid(customerId)) {
      throw new Error('customerId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customers({customer_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customer_id}', encodeURIComponent(customerId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified customer
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the customer entity
 *
 * @param {string} [body.number] The number property for the customer entity
 *
 * @param {string} [body.displayName] The displayName property for the customer
 * entity
 *
 * @param {string} [body.type] The type property for the customer entity
 *
 * @param {object} [body.address]
 *
 * @param {string} [body.address.street] The street property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.city] The city property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.state] The state property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.countryLetterCode] The countryLetterCode
 * property for the postaladdresstype entity
 *
 * @param {string} [body.address.postalCode] The postalCode property for the
 * postaladdresstype entity
 *
 * @param {array} [body.address.customerFinancialDetails]
 *
 * @param {array} [body.address.picture]
 *
 * @param {array} [body.address.defaultDimensions]
 *
 * @param {object} [body.address.currency]
 *
 * @param {uuid} [body.address.currency.id] The id property for the currency
 * entity
 *
 * @param {string} [body.address.currency.code] The code property for the
 * currency entity
 *
 * @param {string} [body.address.currency.displayName] The displayName property
 * for the currency entity
 *
 * @param {string} [body.address.currency.symbol] The symbol property for the
 * currency entity
 *
 * @param {string} [body.address.currency.amountDecimalPlaces] The
 * amountDecimalPlaces property for the currency entity
 *
 * @param {number} [body.address.currency.amountRoundingPrecision] The
 * amountRoundingPrecision property for the currency entity
 *
 * @param {date} [body.address.currency.lastModifiedDateTime] The
 * lastModifiedDateTime property for the currency entity
 *
 * @param {object} [body.address.paymentTerm]
 *
 * @param {uuid} [body.address.paymentTerm.id] The id property for the
 * paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.code] The code property for the
 * paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.displayName] The displayName
 * property for the paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.dueDateCalculation] The
 * dueDateCalculation property for the paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.discountDateCalculation] The
 * discountDateCalculation property for the paymentTerm entity
 *
 * @param {number} [body.address.paymentTerm.discountPercent] The
 * discountPercent property for the paymentTerm entity
 *
 * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
 * The calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentTerm entity
 *
 * @param {object} [body.address.shipmentMethod]
 *
 * @param {uuid} [body.address.shipmentMethod.id] The id property for the
 * shipmentMethod entity
 *
 * @param {string} [body.address.shipmentMethod.code] The code property for the
 * shipmentMethod entity
 *
 * @param {string} [body.address.shipmentMethod.displayName] The displayName
 * property for the shipmentMethod entity
 *
 * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the shipmentMethod entity
 *
 * @param {object} [body.address.paymentMethod]
 *
 * @param {uuid} [body.address.paymentMethod.id] The id property for the
 * paymentMethod entity
 *
 * @param {string} [body.address.paymentMethod.code] The code property for the
 * paymentMethod entity
 *
 * @param {string} [body.address.paymentMethod.displayName] The displayName
 * property for the paymentMethod entity
 *
 * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentMethod entity
 *
 * @param {string} [body.phoneNumber] The phoneNumber property for the customer
 * entity
 *
 * @param {string} [body.email] The email property for the customer entity
 *
 * @param {string} [body.website] The website property for the customer entity
 *
 * @param {boolean} [body.taxLiable] The taxLiable property for the customer
 * entity
 *
 * @param {uuid} [body.taxAreaId] The taxAreaId property for the customer
 * entity
 *
 * @param {string} [body.taxAreaDisplayName] The taxAreaDisplayName property
 * for the customer entity
 *
 * @param {string} [body.taxRegistrationNumber] The taxRegistrationNumber
 * property for the customer entity
 *
 * @param {uuid} [body.currencyId] The currencyId property for the customer
 * entity
 *
 * @param {string} [body.currencyCode] The currencyCode property for the
 * customer entity
 *
 * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
 * customer entity
 *
 * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
 * customer entity
 *
 * @param {uuid} [body.paymentMethodId] The paymentMethodId property for the
 * customer entity
 *
 * @param {string} [body.blocked] The blocked property for the customer entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the customer entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerId id for customer
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Customer} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchCustomerById(body, companyId, customerId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerId === null || customerId === undefined || typeof customerId.valueOf() !== 'string' || !msRest.isValidUuid(customerId)) {
      throw new Error('customerId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customers({customer_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customer_id}', encodeURIComponent(customerId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Customer']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of customerFinancialDetails
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerId id for customer
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link
 *                      GetCustomerFinancialDetailsForCustomerOKResponse} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCustomerFinancialDetailsForCustomer(companyId, customerId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerId === null || customerId === undefined || typeof customerId.valueOf() !== 'string' || !msRest.isValidUuid(customerId)) {
      throw new Error('customerId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customers({customer_id})/customerFinancialDetails';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customer_id}', encodeURIComponent(customerId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetCustomerFinancialDetailsForCustomerOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an
 * customerFinancialDetail object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerId id for customer
 *
 * @param {uuid} customerFinancialDetailId id for customerFinancialDetail
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CustomerFinancialDetail} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCustomerFinancialDetailForCustomerById(companyId, customerId, customerFinancialDetailId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerId === null || customerId === undefined || typeof customerId.valueOf() !== 'string' || !msRest.isValidUuid(customerId)) {
      throw new Error('customerId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerFinancialDetailId === null || customerFinancialDetailId === undefined || typeof customerFinancialDetailId.valueOf() !== 'string' || !msRest.isValidUuid(customerFinancialDetailId)) {
      throw new Error('customerFinancialDetailId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customers({customer_id})/customerFinancialDetails({customerFinancialDetail_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customer_id}', encodeURIComponent(customerId.toString()));
  requestUrl = requestUrl.replace('{customerFinancialDetail_id}', encodeURIComponent(customerFinancialDetailId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CustomerFinancialDetail']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of picture
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerId id for customer
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetPictureForCustomerOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPictureForCustomer(companyId, customerId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerId === null || customerId === undefined || typeof customerId.valueOf() !== 'string' || !msRest.isValidUuid(customerId)) {
      throw new Error('customerId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customers({customer_id})/picture';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customer_id}', encodeURIComponent(customerId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetPictureForCustomerOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an picture object for
 * Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerId id for customer
 *
 * @param {uuid} pictureId id for picture
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Picture} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPictureForCustomerById(companyId, customerId, pictureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerId === null || customerId === undefined || typeof customerId.valueOf() !== 'string' || !msRest.isValidUuid(customerId)) {
      throw new Error('customerId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pictureId === null || pictureId === undefined || typeof pictureId.valueOf() !== 'string' || !msRest.isValidUuid(pictureId)) {
      throw new Error('pictureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customers({customer_id})/picture({picture_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customer_id}', encodeURIComponent(customerId.toString()));
  requestUrl = requestUrl.replace('{picture_id}', encodeURIComponent(pictureId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Picture']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an picture in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerId id for customer
 *
 * @param {uuid} pictureId id for picture
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deletePictureForCustomerByIdById(companyId, customerId, pictureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerId === null || customerId === undefined || typeof customerId.valueOf() !== 'string' || !msRest.isValidUuid(customerId)) {
      throw new Error('customerId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pictureId === null || pictureId === undefined || typeof pictureId.valueOf() !== 'string' || !msRest.isValidUuid(pictureId)) {
      throw new Error('pictureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customers({customer_id})/picture({picture_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customer_id}', encodeURIComponent(customerId.toString()));
  requestUrl = requestUrl.replace('{picture_id}', encodeURIComponent(pictureId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified picture
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the picture entity
 *
 * @param {number} [body.width] The width property for the picture entity
 *
 * @param {number} [body.height] The height property for the picture entity
 *
 * @param {string} [body.contentType] The contentType property for the picture
 * entity
 *
 * @param {string} [body.content] The content property for the picture entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerId id for customer
 *
 * @param {uuid} pictureId id for picture
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Picture} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchPictureForCustomerByIdById(body, companyId, customerId, pictureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerId === null || customerId === undefined || typeof customerId.valueOf() !== 'string' || !msRest.isValidUuid(customerId)) {
      throw new Error('customerId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pictureId === null || pictureId === undefined || typeof pictureId.valueOf() !== 'string' || !msRest.isValidUuid(pictureId)) {
      throw new Error('pictureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customers({customer_id})/picture({picture_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customer_id}', encodeURIComponent(customerId.toString()));
  requestUrl = requestUrl.replace('{picture_id}', encodeURIComponent(pictureId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Picture']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of defaultDimensions
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerId id for customer
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetDefaultDimensionsForCustomerOKResponse}
 *                      for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDefaultDimensionsForCustomer(companyId, customerId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerId === null || customerId === undefined || typeof customerId.valueOf() !== 'string' || !msRest.isValidUuid(customerId)) {
      throw new Error('customerId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customers({customer_id})/defaultDimensions';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customer_id}', encodeURIComponent(customerId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetDefaultDimensionsForCustomerOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a defaultDimensions in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionId] The dimensionId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionCode] The dimensionCode property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionValueCode] The dimensionValueCode property
 * for the defaultDimensions entity
 *
 * @param {string} [body.postingValidation] The postingValidation property for
 * the defaultDimensions entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerId id for customer
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DefaultDimensions} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postDefaultDimensionsForCustomer(body, companyId, customerId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerId === null || customerId === undefined || typeof customerId.valueOf() !== 'string' || !msRest.isValidUuid(customerId)) {
      throw new Error('customerId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customers({customer_id})/defaultDimensions';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customer_id}', encodeURIComponent(customerId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DefaultDimensions']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an defaultDimensions
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerId id for customer
 *
 * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
 *
 * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DefaultDimensions} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDefaultDimensionsForCustomerByDimensionIdByParentId(companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerId === null || customerId === undefined || typeof customerId.valueOf() !== 'string' || !msRest.isValidUuid(customerId)) {
      throw new Error('customerId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsParentId === null || defaultDimensionsParentId === undefined || typeof defaultDimensionsParentId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsParentId)) {
      throw new Error('defaultDimensionsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsDimensionId === null || defaultDimensionsDimensionId === undefined || typeof defaultDimensionsDimensionId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsDimensionId)) {
      throw new Error('defaultDimensionsDimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customers({customer_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customer_id}', encodeURIComponent(customerId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_parentId}', encodeURIComponent(defaultDimensionsParentId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_dimensionId}', encodeURIComponent(defaultDimensionsDimensionId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DefaultDimensions']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an defaultDimensions in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerId id for customer
 *
 * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
 *
 * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteDefaultDimensionsForCustomerByDimensionIdByParentIdById(companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerId === null || customerId === undefined || typeof customerId.valueOf() !== 'string' || !msRest.isValidUuid(customerId)) {
      throw new Error('customerId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsParentId === null || defaultDimensionsParentId === undefined || typeof defaultDimensionsParentId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsParentId)) {
      throw new Error('defaultDimensionsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsDimensionId === null || defaultDimensionsDimensionId === undefined || typeof defaultDimensionsDimensionId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsDimensionId)) {
      throw new Error('defaultDimensionsDimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customers({customer_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customer_id}', encodeURIComponent(customerId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_parentId}', encodeURIComponent(defaultDimensionsParentId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_dimensionId}', encodeURIComponent(defaultDimensionsDimensionId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified defaultDimensions
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionId] The dimensionId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionCode] The dimensionCode property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionValueCode] The dimensionValueCode property
 * for the defaultDimensions entity
 *
 * @param {string} [body.postingValidation] The postingValidation property for
 * the defaultDimensions entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerId id for customer
 *
 * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
 *
 * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DefaultDimensions} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchDefaultDimensionsForCustomerByDimensionIdByParentIdById(body, companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerId === null || customerId === undefined || typeof customerId.valueOf() !== 'string' || !msRest.isValidUuid(customerId)) {
      throw new Error('customerId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsParentId === null || defaultDimensionsParentId === undefined || typeof defaultDimensionsParentId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsParentId)) {
      throw new Error('defaultDimensionsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsDimensionId === null || defaultDimensionsDimensionId === undefined || typeof defaultDimensionsDimensionId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsDimensionId)) {
      throw new Error('defaultDimensionsDimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customers({customer_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customer_id}', encodeURIComponent(customerId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_parentId}', encodeURIComponent(defaultDimensionsParentId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_dimensionId}', encodeURIComponent(defaultDimensionsDimensionId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DefaultDimensions']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of customerFinancialDetails
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetCustomerFinancialDetailsOKResponse} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCustomerFinancialDetails(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerFinancialDetails';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetCustomerFinancialDetailsOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an
 * customerFinancialDetail object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerFinancialDetailId id for customerFinancialDetail
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CustomerFinancialDetail} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCustomerFinancialDetailById(companyId, customerFinancialDetailId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerFinancialDetailId === null || customerFinancialDetailId === undefined || typeof customerFinancialDetailId.valueOf() !== 'string' || !msRest.isValidUuid(customerFinancialDetailId)) {
      throw new Error('customerFinancialDetailId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerFinancialDetails({customerFinancialDetail_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customerFinancialDetail_id}', encodeURIComponent(customerFinancialDetailId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CustomerFinancialDetail']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of vendors
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetVendorsOKResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getVendors(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/vendors';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetVendorsOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a vendor in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the vendor entity
 *
 * @param {string} [body.number] The number property for the vendor entity
 *
 * @param {string} [body.displayName] The displayName property for the vendor
 * entity
 *
 * @param {object} [body.address]
 *
 * @param {string} [body.address.street] The street property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.city] The city property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.state] The state property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.countryLetterCode] The countryLetterCode
 * property for the postaladdresstype entity
 *
 * @param {string} [body.address.postalCode] The postalCode property for the
 * postaladdresstype entity
 *
 * @param {array} [body.address.customerFinancialDetails]
 *
 * @param {array} [body.address.picture]
 *
 * @param {array} [body.address.defaultDimensions]
 *
 * @param {object} [body.address.currency]
 *
 * @param {uuid} [body.address.currency.id] The id property for the currency
 * entity
 *
 * @param {string} [body.address.currency.code] The code property for the
 * currency entity
 *
 * @param {string} [body.address.currency.displayName] The displayName property
 * for the currency entity
 *
 * @param {string} [body.address.currency.symbol] The symbol property for the
 * currency entity
 *
 * @param {string} [body.address.currency.amountDecimalPlaces] The
 * amountDecimalPlaces property for the currency entity
 *
 * @param {number} [body.address.currency.amountRoundingPrecision] The
 * amountRoundingPrecision property for the currency entity
 *
 * @param {date} [body.address.currency.lastModifiedDateTime] The
 * lastModifiedDateTime property for the currency entity
 *
 * @param {object} [body.address.paymentTerm]
 *
 * @param {uuid} [body.address.paymentTerm.id] The id property for the
 * paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.code] The code property for the
 * paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.displayName] The displayName
 * property for the paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.dueDateCalculation] The
 * dueDateCalculation property for the paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.discountDateCalculation] The
 * discountDateCalculation property for the paymentTerm entity
 *
 * @param {number} [body.address.paymentTerm.discountPercent] The
 * discountPercent property for the paymentTerm entity
 *
 * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
 * The calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentTerm entity
 *
 * @param {object} [body.address.shipmentMethod]
 *
 * @param {uuid} [body.address.shipmentMethod.id] The id property for the
 * shipmentMethod entity
 *
 * @param {string} [body.address.shipmentMethod.code] The code property for the
 * shipmentMethod entity
 *
 * @param {string} [body.address.shipmentMethod.displayName] The displayName
 * property for the shipmentMethod entity
 *
 * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the shipmentMethod entity
 *
 * @param {object} [body.address.paymentMethod]
 *
 * @param {uuid} [body.address.paymentMethod.id] The id property for the
 * paymentMethod entity
 *
 * @param {string} [body.address.paymentMethod.code] The code property for the
 * paymentMethod entity
 *
 * @param {string} [body.address.paymentMethod.displayName] The displayName
 * property for the paymentMethod entity
 *
 * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentMethod entity
 *
 * @param {string} [body.phoneNumber] The phoneNumber property for the vendor
 * entity
 *
 * @param {string} [body.email] The email property for the vendor entity
 *
 * @param {string} [body.website] The website property for the vendor entity
 *
 * @param {string} [body.taxRegistrationNumber] The taxRegistrationNumber
 * property for the vendor entity
 *
 * @param {uuid} [body.currencyId] The currencyId property for the vendor
 * entity
 *
 * @param {string} [body.currencyCode] The currencyCode property for the vendor
 * entity
 *
 * @param {string} [body.irs1099Code] The irs1099Code property for the vendor
 * entity
 *
 * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
 * vendor entity
 *
 * @param {uuid} [body.paymentMethodId] The paymentMethodId property for the
 * vendor entity
 *
 * @param {boolean} [body.taxLiable] The taxLiable property for the vendor
 * entity
 *
 * @param {string} [body.blocked] The blocked property for the vendor entity
 *
 * @param {number} [body.balance] The balance property for the vendor entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the vendor entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Vendor} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postVendor(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/vendors';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Vendor']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an vendor object for
 * Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} vendorId id for vendor
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Vendor} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getVendorById(companyId, vendorId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (vendorId === null || vendorId === undefined || typeof vendorId.valueOf() !== 'string' || !msRest.isValidUuid(vendorId)) {
      throw new Error('vendorId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/vendors({vendor_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{vendor_id}', encodeURIComponent(vendorId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Vendor']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an vendor in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} vendorId id for vendor
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteVendorById(companyId, vendorId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (vendorId === null || vendorId === undefined || typeof vendorId.valueOf() !== 'string' || !msRest.isValidUuid(vendorId)) {
      throw new Error('vendorId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/vendors({vendor_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{vendor_id}', encodeURIComponent(vendorId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified vendor
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the vendor entity
 *
 * @param {string} [body.number] The number property for the vendor entity
 *
 * @param {string} [body.displayName] The displayName property for the vendor
 * entity
 *
 * @param {object} [body.address]
 *
 * @param {string} [body.address.street] The street property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.city] The city property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.state] The state property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.countryLetterCode] The countryLetterCode
 * property for the postaladdresstype entity
 *
 * @param {string} [body.address.postalCode] The postalCode property for the
 * postaladdresstype entity
 *
 * @param {array} [body.address.customerFinancialDetails]
 *
 * @param {array} [body.address.picture]
 *
 * @param {array} [body.address.defaultDimensions]
 *
 * @param {object} [body.address.currency]
 *
 * @param {uuid} [body.address.currency.id] The id property for the currency
 * entity
 *
 * @param {string} [body.address.currency.code] The code property for the
 * currency entity
 *
 * @param {string} [body.address.currency.displayName] The displayName property
 * for the currency entity
 *
 * @param {string} [body.address.currency.symbol] The symbol property for the
 * currency entity
 *
 * @param {string} [body.address.currency.amountDecimalPlaces] The
 * amountDecimalPlaces property for the currency entity
 *
 * @param {number} [body.address.currency.amountRoundingPrecision] The
 * amountRoundingPrecision property for the currency entity
 *
 * @param {date} [body.address.currency.lastModifiedDateTime] The
 * lastModifiedDateTime property for the currency entity
 *
 * @param {object} [body.address.paymentTerm]
 *
 * @param {uuid} [body.address.paymentTerm.id] The id property for the
 * paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.code] The code property for the
 * paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.displayName] The displayName
 * property for the paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.dueDateCalculation] The
 * dueDateCalculation property for the paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.discountDateCalculation] The
 * discountDateCalculation property for the paymentTerm entity
 *
 * @param {number} [body.address.paymentTerm.discountPercent] The
 * discountPercent property for the paymentTerm entity
 *
 * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
 * The calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentTerm entity
 *
 * @param {object} [body.address.shipmentMethod]
 *
 * @param {uuid} [body.address.shipmentMethod.id] The id property for the
 * shipmentMethod entity
 *
 * @param {string} [body.address.shipmentMethod.code] The code property for the
 * shipmentMethod entity
 *
 * @param {string} [body.address.shipmentMethod.displayName] The displayName
 * property for the shipmentMethod entity
 *
 * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the shipmentMethod entity
 *
 * @param {object} [body.address.paymentMethod]
 *
 * @param {uuid} [body.address.paymentMethod.id] The id property for the
 * paymentMethod entity
 *
 * @param {string} [body.address.paymentMethod.code] The code property for the
 * paymentMethod entity
 *
 * @param {string} [body.address.paymentMethod.displayName] The displayName
 * property for the paymentMethod entity
 *
 * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentMethod entity
 *
 * @param {string} [body.phoneNumber] The phoneNumber property for the vendor
 * entity
 *
 * @param {string} [body.email] The email property for the vendor entity
 *
 * @param {string} [body.website] The website property for the vendor entity
 *
 * @param {string} [body.taxRegistrationNumber] The taxRegistrationNumber
 * property for the vendor entity
 *
 * @param {uuid} [body.currencyId] The currencyId property for the vendor
 * entity
 *
 * @param {string} [body.currencyCode] The currencyCode property for the vendor
 * entity
 *
 * @param {string} [body.irs1099Code] The irs1099Code property for the vendor
 * entity
 *
 * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
 * vendor entity
 *
 * @param {uuid} [body.paymentMethodId] The paymentMethodId property for the
 * vendor entity
 *
 * @param {boolean} [body.taxLiable] The taxLiable property for the vendor
 * entity
 *
 * @param {string} [body.blocked] The blocked property for the vendor entity
 *
 * @param {number} [body.balance] The balance property for the vendor entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the vendor entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} vendorId id for vendor
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Vendor} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchVendorById(body, companyId, vendorId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (vendorId === null || vendorId === undefined || typeof vendorId.valueOf() !== 'string' || !msRest.isValidUuid(vendorId)) {
      throw new Error('vendorId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/vendors({vendor_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{vendor_id}', encodeURIComponent(vendorId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Vendor']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of picture
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} vendorId id for vendor
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetPictureForVendorOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPictureForVendor(companyId, vendorId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (vendorId === null || vendorId === undefined || typeof vendorId.valueOf() !== 'string' || !msRest.isValidUuid(vendorId)) {
      throw new Error('vendorId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/vendors({vendor_id})/picture';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{vendor_id}', encodeURIComponent(vendorId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetPictureForVendorOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an picture object for
 * Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} vendorId id for vendor
 *
 * @param {uuid} pictureId id for picture
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Picture} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPictureForVendorById(companyId, vendorId, pictureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (vendorId === null || vendorId === undefined || typeof vendorId.valueOf() !== 'string' || !msRest.isValidUuid(vendorId)) {
      throw new Error('vendorId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pictureId === null || pictureId === undefined || typeof pictureId.valueOf() !== 'string' || !msRest.isValidUuid(pictureId)) {
      throw new Error('pictureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/vendors({vendor_id})/picture({picture_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{vendor_id}', encodeURIComponent(vendorId.toString()));
  requestUrl = requestUrl.replace('{picture_id}', encodeURIComponent(pictureId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Picture']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an picture in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} vendorId id for vendor
 *
 * @param {uuid} pictureId id for picture
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deletePictureForVendorByIdById(companyId, vendorId, pictureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (vendorId === null || vendorId === undefined || typeof vendorId.valueOf() !== 'string' || !msRest.isValidUuid(vendorId)) {
      throw new Error('vendorId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pictureId === null || pictureId === undefined || typeof pictureId.valueOf() !== 'string' || !msRest.isValidUuid(pictureId)) {
      throw new Error('pictureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/vendors({vendor_id})/picture({picture_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{vendor_id}', encodeURIComponent(vendorId.toString()));
  requestUrl = requestUrl.replace('{picture_id}', encodeURIComponent(pictureId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified picture
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the picture entity
 *
 * @param {number} [body.width] The width property for the picture entity
 *
 * @param {number} [body.height] The height property for the picture entity
 *
 * @param {string} [body.contentType] The contentType property for the picture
 * entity
 *
 * @param {string} [body.content] The content property for the picture entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} vendorId id for vendor
 *
 * @param {uuid} pictureId id for picture
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Picture} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchPictureForVendorByIdById(body, companyId, vendorId, pictureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (vendorId === null || vendorId === undefined || typeof vendorId.valueOf() !== 'string' || !msRest.isValidUuid(vendorId)) {
      throw new Error('vendorId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pictureId === null || pictureId === undefined || typeof pictureId.valueOf() !== 'string' || !msRest.isValidUuid(pictureId)) {
      throw new Error('pictureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/vendors({vendor_id})/picture({picture_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{vendor_id}', encodeURIComponent(vendorId.toString()));
  requestUrl = requestUrl.replace('{picture_id}', encodeURIComponent(pictureId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Picture']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of defaultDimensions
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} vendorId id for vendor
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetDefaultDimensionsForVendorOKResponse} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDefaultDimensionsForVendor(companyId, vendorId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (vendorId === null || vendorId === undefined || typeof vendorId.valueOf() !== 'string' || !msRest.isValidUuid(vendorId)) {
      throw new Error('vendorId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/vendors({vendor_id})/defaultDimensions';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{vendor_id}', encodeURIComponent(vendorId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetDefaultDimensionsForVendorOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a defaultDimensions in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionId] The dimensionId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionCode] The dimensionCode property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionValueCode] The dimensionValueCode property
 * for the defaultDimensions entity
 *
 * @param {string} [body.postingValidation] The postingValidation property for
 * the defaultDimensions entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} vendorId id for vendor
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DefaultDimensions} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postDefaultDimensionsForVendor(body, companyId, vendorId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (vendorId === null || vendorId === undefined || typeof vendorId.valueOf() !== 'string' || !msRest.isValidUuid(vendorId)) {
      throw new Error('vendorId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/vendors({vendor_id})/defaultDimensions';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{vendor_id}', encodeURIComponent(vendorId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DefaultDimensions']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an defaultDimensions
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} vendorId id for vendor
 *
 * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
 *
 * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DefaultDimensions} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDefaultDimensionsForVendorByDimensionIdByParentId(companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (vendorId === null || vendorId === undefined || typeof vendorId.valueOf() !== 'string' || !msRest.isValidUuid(vendorId)) {
      throw new Error('vendorId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsParentId === null || defaultDimensionsParentId === undefined || typeof defaultDimensionsParentId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsParentId)) {
      throw new Error('defaultDimensionsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsDimensionId === null || defaultDimensionsDimensionId === undefined || typeof defaultDimensionsDimensionId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsDimensionId)) {
      throw new Error('defaultDimensionsDimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/vendors({vendor_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{vendor_id}', encodeURIComponent(vendorId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_parentId}', encodeURIComponent(defaultDimensionsParentId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_dimensionId}', encodeURIComponent(defaultDimensionsDimensionId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DefaultDimensions']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an defaultDimensions in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} vendorId id for vendor
 *
 * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
 *
 * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteDefaultDimensionsForVendorByDimensionIdByParentIdById(companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (vendorId === null || vendorId === undefined || typeof vendorId.valueOf() !== 'string' || !msRest.isValidUuid(vendorId)) {
      throw new Error('vendorId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsParentId === null || defaultDimensionsParentId === undefined || typeof defaultDimensionsParentId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsParentId)) {
      throw new Error('defaultDimensionsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsDimensionId === null || defaultDimensionsDimensionId === undefined || typeof defaultDimensionsDimensionId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsDimensionId)) {
      throw new Error('defaultDimensionsDimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/vendors({vendor_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{vendor_id}', encodeURIComponent(vendorId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_parentId}', encodeURIComponent(defaultDimensionsParentId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_dimensionId}', encodeURIComponent(defaultDimensionsDimensionId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified defaultDimensions
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionId] The dimensionId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionCode] The dimensionCode property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionValueCode] The dimensionValueCode property
 * for the defaultDimensions entity
 *
 * @param {string} [body.postingValidation] The postingValidation property for
 * the defaultDimensions entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} vendorId id for vendor
 *
 * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
 *
 * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DefaultDimensions} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchDefaultDimensionsForVendorByDimensionIdByParentIdById(body, companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (vendorId === null || vendorId === undefined || typeof vendorId.valueOf() !== 'string' || !msRest.isValidUuid(vendorId)) {
      throw new Error('vendorId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsParentId === null || defaultDimensionsParentId === undefined || typeof defaultDimensionsParentId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsParentId)) {
      throw new Error('defaultDimensionsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsDimensionId === null || defaultDimensionsDimensionId === undefined || typeof defaultDimensionsDimensionId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsDimensionId)) {
      throw new Error('defaultDimensionsDimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/vendors({vendor_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{vendor_id}', encodeURIComponent(vendorId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_parentId}', encodeURIComponent(defaultDimensionsParentId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_dimensionId}', encodeURIComponent(defaultDimensionsDimensionId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DefaultDimensions']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of companyInformation
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetCompanyInformationOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCompanyInformation(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/companyInformation';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetCompanyInformationOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an companyInformation
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} companyInformationId id for companyInformation
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CompanyInformation} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCompanyInformationById(companyId, companyInformationId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (companyInformationId === null || companyInformationId === undefined || typeof companyInformationId.valueOf() !== 'string' || !msRest.isValidUuid(companyInformationId)) {
      throw new Error('companyInformationId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/companyInformation({companyInformation_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{companyInformation_id}', encodeURIComponent(companyInformationId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CompanyInformation']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified companyInformation
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the companyInformation entity
 *
 * @param {string} [body.displayName] The displayName property for the
 * companyInformation entity
 *
 * @param {object} [body.address]
 *
 * @param {string} [body.address.street] The street property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.city] The city property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.state] The state property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.countryLetterCode] The countryLetterCode
 * property for the postaladdresstype entity
 *
 * @param {string} [body.address.postalCode] The postalCode property for the
 * postaladdresstype entity
 *
 * @param {array} [body.address.customerFinancialDetails]
 *
 * @param {array} [body.address.picture]
 *
 * @param {array} [body.address.defaultDimensions]
 *
 * @param {object} [body.address.currency]
 *
 * @param {uuid} [body.address.currency.id] The id property for the currency
 * entity
 *
 * @param {string} [body.address.currency.code] The code property for the
 * currency entity
 *
 * @param {string} [body.address.currency.displayName] The displayName property
 * for the currency entity
 *
 * @param {string} [body.address.currency.symbol] The symbol property for the
 * currency entity
 *
 * @param {string} [body.address.currency.amountDecimalPlaces] The
 * amountDecimalPlaces property for the currency entity
 *
 * @param {number} [body.address.currency.amountRoundingPrecision] The
 * amountRoundingPrecision property for the currency entity
 *
 * @param {date} [body.address.currency.lastModifiedDateTime] The
 * lastModifiedDateTime property for the currency entity
 *
 * @param {object} [body.address.paymentTerm]
 *
 * @param {uuid} [body.address.paymentTerm.id] The id property for the
 * paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.code] The code property for the
 * paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.displayName] The displayName
 * property for the paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.dueDateCalculation] The
 * dueDateCalculation property for the paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.discountDateCalculation] The
 * discountDateCalculation property for the paymentTerm entity
 *
 * @param {number} [body.address.paymentTerm.discountPercent] The
 * discountPercent property for the paymentTerm entity
 *
 * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
 * The calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentTerm entity
 *
 * @param {object} [body.address.shipmentMethod]
 *
 * @param {uuid} [body.address.shipmentMethod.id] The id property for the
 * shipmentMethod entity
 *
 * @param {string} [body.address.shipmentMethod.code] The code property for the
 * shipmentMethod entity
 *
 * @param {string} [body.address.shipmentMethod.displayName] The displayName
 * property for the shipmentMethod entity
 *
 * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the shipmentMethod entity
 *
 * @param {object} [body.address.paymentMethod]
 *
 * @param {uuid} [body.address.paymentMethod.id] The id property for the
 * paymentMethod entity
 *
 * @param {string} [body.address.paymentMethod.code] The code property for the
 * paymentMethod entity
 *
 * @param {string} [body.address.paymentMethod.displayName] The displayName
 * property for the paymentMethod entity
 *
 * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentMethod entity
 *
 * @param {string} [body.phoneNumber] The phoneNumber property for the
 * companyInformation entity
 *
 * @param {string} [body.faxNumber] The faxNumber property for the
 * companyInformation entity
 *
 * @param {string} [body.email] The email property for the companyInformation
 * entity
 *
 * @param {string} [body.website] The website property for the
 * companyInformation entity
 *
 * @param {string} [body.taxRegistrationNumber] The taxRegistrationNumber
 * property for the companyInformation entity
 *
 * @param {string} [body.currencyCode] The currencyCode property for the
 * companyInformation entity
 *
 * @param {date} [body.currentFiscalYearStartDate] The
 * currentFiscalYearStartDate property for the companyInformation entity
 *
 * @param {string} [body.industry] The industry property for the
 * companyInformation entity
 *
 * @param {string} [body.picture] The picture property for the
 * companyInformation entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the companyInformation entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} companyInformationId id for companyInformation
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CompanyInformation} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchCompanyInformationById(body, companyId, companyInformationId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (companyInformationId === null || companyInformationId === undefined || typeof companyInformationId.valueOf() !== 'string' || !msRest.isValidUuid(companyInformationId)) {
      throw new Error('companyInformationId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/companyInformation({companyInformation_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{companyInformation_id}', encodeURIComponent(companyInformationId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CompanyInformation']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of salesInvoices
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetSalesInvoicesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesInvoices(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoices';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetSalesInvoicesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a salesInvoice in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the salesInvoice entity
 *
 * @param {string} [body.number] The number property for the salesInvoice
 * entity
 *
 * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
 * property for the salesInvoice entity
 *
 * @param {date} [body.invoiceDate] The invoiceDate property for the
 * salesInvoice entity
 *
 * @param {date} [body.dueDate] The dueDate property for the salesInvoice
 * entity
 *
 * @param {string} [body.customerPurchaseOrderReference] The
 * customerPurchaseOrderReference property for the salesInvoice entity
 *
 * @param {uuid} [body.customerId] The customerId property for the salesInvoice
 * entity
 *
 * @param {string} [body.contactId] The contactId property for the salesInvoice
 * entity
 *
 * @param {string} [body.customerNumber] The customerNumber property for the
 * salesInvoice entity
 *
 * @param {string} [body.customerName] The customerName property for the
 * salesInvoice entity
 *
 * @param {string} [body.billToName] The billToName property for the
 * salesInvoice entity
 *
 * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
 * salesInvoice entity
 *
 * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
 * property for the salesInvoice entity
 *
 * @param {string} [body.shipToName] The shipToName property for the
 * salesInvoice entity
 *
 * @param {string} [body.shipToContact] The shipToContact property for the
 * salesInvoice entity
 *
 * @param {object} [body.sellingPostalAddress]
 *
 * @param {object} [body.billingPostalAddress]
 *
 * @param {object} [body.shippingPostalAddress]
 *
 * @param {string} [body.shippingPostalAddress.street] The street property for
 * the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.city] The city property for the
 * postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.state] The state property for
 * the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.countryLetterCode] The
 * countryLetterCode property for the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
 * property for the postaladdresstype entity
 *
 * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
 *
 * @param {array} [body.shippingPostalAddress.picture]
 *
 * @param {array} [body.shippingPostalAddress.defaultDimensions]
 *
 * @param {object} [body.shippingPostalAddress.currency]
 *
 * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
 * the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.code] The code property
 * for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.displayName] The
 * displayName property for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
 * property for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
 * The amountDecimalPlaces property for the currency entity
 *
 * @param {number}
 * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
 * amountRoundingPrecision property for the currency entity
 *
 * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
 * lastModifiedDateTime property for the currency entity
 *
 * @param {object} [body.shippingPostalAddress.paymentTerm]
 *
 * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
 * for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
 * property for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
 * displayName property for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
 * The dueDateCalculation property for the paymentTerm entity
 *
 * @param {string}
 * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
 * discountDateCalculation property for the paymentTerm entity
 *
 * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
 * discountPercent property for the paymentTerm entity
 *
 * @param {boolean}
 * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
 * calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
 * The lastModifiedDateTime property for the paymentTerm entity
 *
 * @param {object} [body.shippingPostalAddress.shipmentMethod]
 *
 * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
 * for the shipmentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
 * property for the shipmentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
 * displayName property for the shipmentMethod entity
 *
 * @param {date}
 * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the shipmentMethod entity
 *
 * @param {object} [body.shippingPostalAddress.paymentMethod]
 *
 * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
 * for the paymentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
 * property for the paymentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
 * displayName property for the paymentMethod entity
 *
 * @param {date}
 * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentMethod entity
 *
 * @param {uuid} [body.currencyId] The currencyId property for the salesInvoice
 * entity
 *
 * @param {string} [body.currencyCode] The currencyCode property for the
 * salesInvoice entity
 *
 * @param {uuid} [body.orderId] The orderId property for the salesInvoice
 * entity
 *
 * @param {string} [body.orderNumber] The orderNumber property for the
 * salesInvoice entity
 *
 * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
 * salesInvoice entity
 *
 * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
 * salesInvoice entity
 *
 * @param {string} [body.salesperson] The salesperson property for the
 * salesInvoice entity
 *
 * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
 * the salesInvoice entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesInvoice entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesInvoice entity
 *
 * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
 * property for the salesInvoice entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesInvoice entity
 *
 * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
 * property for the salesInvoice entity
 *
 * @param {string} [body.status] The status property for the salesInvoice
 * entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the salesInvoice entity
 *
 * @param {string} [body.phoneNumber] The phoneNumber property for the
 * salesInvoice entity
 *
 * @param {string} [body.email] The email property for the salesInvoice entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesInvoice} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postSalesInvoice(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoices';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesInvoice']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an salesInvoice object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesInvoiceId id for salesInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesInvoice} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesInvoiceById(companyId, salesInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceId === null || salesInvoiceId === undefined || typeof salesInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(salesInvoiceId)) {
      throw new Error('salesInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoices({salesInvoice_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoice_id}', encodeURIComponent(salesInvoiceId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesInvoice']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an salesInvoice in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesInvoiceId id for salesInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteSalesInvoiceById(companyId, salesInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceId === null || salesInvoiceId === undefined || typeof salesInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(salesInvoiceId)) {
      throw new Error('salesInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoices({salesInvoice_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoice_id}', encodeURIComponent(salesInvoiceId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified salesInvoice
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the salesInvoice entity
 *
 * @param {string} [body.number] The number property for the salesInvoice
 * entity
 *
 * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
 * property for the salesInvoice entity
 *
 * @param {date} [body.invoiceDate] The invoiceDate property for the
 * salesInvoice entity
 *
 * @param {date} [body.dueDate] The dueDate property for the salesInvoice
 * entity
 *
 * @param {string} [body.customerPurchaseOrderReference] The
 * customerPurchaseOrderReference property for the salesInvoice entity
 *
 * @param {uuid} [body.customerId] The customerId property for the salesInvoice
 * entity
 *
 * @param {string} [body.contactId] The contactId property for the salesInvoice
 * entity
 *
 * @param {string} [body.customerNumber] The customerNumber property for the
 * salesInvoice entity
 *
 * @param {string} [body.customerName] The customerName property for the
 * salesInvoice entity
 *
 * @param {string} [body.billToName] The billToName property for the
 * salesInvoice entity
 *
 * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
 * salesInvoice entity
 *
 * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
 * property for the salesInvoice entity
 *
 * @param {string} [body.shipToName] The shipToName property for the
 * salesInvoice entity
 *
 * @param {string} [body.shipToContact] The shipToContact property for the
 * salesInvoice entity
 *
 * @param {object} [body.sellingPostalAddress]
 *
 * @param {object} [body.billingPostalAddress]
 *
 * @param {object} [body.shippingPostalAddress]
 *
 * @param {string} [body.shippingPostalAddress.street] The street property for
 * the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.city] The city property for the
 * postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.state] The state property for
 * the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.countryLetterCode] The
 * countryLetterCode property for the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
 * property for the postaladdresstype entity
 *
 * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
 *
 * @param {array} [body.shippingPostalAddress.picture]
 *
 * @param {array} [body.shippingPostalAddress.defaultDimensions]
 *
 * @param {object} [body.shippingPostalAddress.currency]
 *
 * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
 * the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.code] The code property
 * for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.displayName] The
 * displayName property for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
 * property for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
 * The amountDecimalPlaces property for the currency entity
 *
 * @param {number}
 * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
 * amountRoundingPrecision property for the currency entity
 *
 * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
 * lastModifiedDateTime property for the currency entity
 *
 * @param {object} [body.shippingPostalAddress.paymentTerm]
 *
 * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
 * for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
 * property for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
 * displayName property for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
 * The dueDateCalculation property for the paymentTerm entity
 *
 * @param {string}
 * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
 * discountDateCalculation property for the paymentTerm entity
 *
 * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
 * discountPercent property for the paymentTerm entity
 *
 * @param {boolean}
 * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
 * calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
 * The lastModifiedDateTime property for the paymentTerm entity
 *
 * @param {object} [body.shippingPostalAddress.shipmentMethod]
 *
 * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
 * for the shipmentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
 * property for the shipmentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
 * displayName property for the shipmentMethod entity
 *
 * @param {date}
 * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the shipmentMethod entity
 *
 * @param {object} [body.shippingPostalAddress.paymentMethod]
 *
 * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
 * for the paymentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
 * property for the paymentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
 * displayName property for the paymentMethod entity
 *
 * @param {date}
 * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentMethod entity
 *
 * @param {uuid} [body.currencyId] The currencyId property for the salesInvoice
 * entity
 *
 * @param {string} [body.currencyCode] The currencyCode property for the
 * salesInvoice entity
 *
 * @param {uuid} [body.orderId] The orderId property for the salesInvoice
 * entity
 *
 * @param {string} [body.orderNumber] The orderNumber property for the
 * salesInvoice entity
 *
 * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
 * salesInvoice entity
 *
 * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
 * salesInvoice entity
 *
 * @param {string} [body.salesperson] The salesperson property for the
 * salesInvoice entity
 *
 * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
 * the salesInvoice entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesInvoice entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesInvoice entity
 *
 * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
 * property for the salesInvoice entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesInvoice entity
 *
 * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
 * property for the salesInvoice entity
 *
 * @param {string} [body.status] The status property for the salesInvoice
 * entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the salesInvoice entity
 *
 * @param {string} [body.phoneNumber] The phoneNumber property for the
 * salesInvoice entity
 *
 * @param {string} [body.email] The email property for the salesInvoice entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesInvoiceId id for salesInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesInvoice} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchSalesInvoiceById(body, companyId, salesInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceId === null || salesInvoiceId === undefined || typeof salesInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(salesInvoiceId)) {
      throw new Error('salesInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoices({salesInvoice_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoice_id}', encodeURIComponent(salesInvoiceId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesInvoice']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Performs the cancelAndSend action for salesInvoices entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesInvoiceId id for salesInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _cancelAndSendActionSalesInvoices(companyId, salesInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceId === null || salesInvoiceId === undefined || typeof salesInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(salesInvoiceId)) {
      throw new Error('salesInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.cancelAndSend';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoice_id}', encodeURIComponent(salesInvoiceId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Performs the cancel action for salesInvoices entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesInvoiceId id for salesInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _cancelActionSalesInvoices(companyId, salesInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceId === null || salesInvoiceId === undefined || typeof salesInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(salesInvoiceId)) {
      throw new Error('salesInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.cancel';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoice_id}', encodeURIComponent(salesInvoiceId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Performs the postAndSend action for salesInvoices entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesInvoiceId id for salesInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postAndSendActionSalesInvoices(companyId, salesInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceId === null || salesInvoiceId === undefined || typeof salesInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(salesInvoiceId)) {
      throw new Error('salesInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.postAndSend';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoice_id}', encodeURIComponent(salesInvoiceId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Performs the post action for salesInvoices entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesInvoiceId id for salesInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postActionSalesInvoices(companyId, salesInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceId === null || salesInvoiceId === undefined || typeof salesInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(salesInvoiceId)) {
      throw new Error('salesInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.post';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoice_id}', encodeURIComponent(salesInvoiceId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Performs the send action for salesInvoices entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesInvoiceId id for salesInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _sendActionSalesInvoices(companyId, salesInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceId === null || salesInvoiceId === undefined || typeof salesInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(salesInvoiceId)) {
      throw new Error('salesInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.send';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoice_id}', encodeURIComponent(salesInvoiceId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of salesInvoiceLines
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesInvoiceId id for salesInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link
 *                      GetSalesInvoiceLinesForSalesInvoiceOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesInvoiceLinesForSalesInvoice(companyId, salesInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceId === null || salesInvoiceId === undefined || typeof salesInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(salesInvoiceId)) {
      throw new Error('salesInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoice_id}', encodeURIComponent(salesInvoiceId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetSalesInvoiceLinesForSalesInvoiceOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a salesInvoiceLine in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the salesInvoiceLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.sequence] The sequence property for the
 * salesInvoiceLine entity
 *
 * @param {uuid} [body.itemId] The itemId property for the salesInvoiceLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the
 * salesInvoiceLine entity
 *
 * @param {string} [body.lineType] The lineType property for the
 * salesInvoiceLine entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * salesInvoiceLine entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * salesInvoiceLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.quantity] The quantity property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * salesInvoiceLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesInvoiceLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the salesInvoiceLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the salesInvoiceLine
 * entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the salesInvoiceLine entity
 *
 * @param {number} [body.invoiceDiscountAllocation] The
 * invoiceDiscountAllocation property for the salesInvoiceLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the salesInvoiceLine entity
 *
 * @param {date} [body.shipmentDate] The shipmentDate property for the
 * salesInvoiceLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesInvoiceId id for salesInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesInvoiceLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postSalesInvoiceLineForSalesInvoice(body, companyId, salesInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceId === null || salesInvoiceId === undefined || typeof salesInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(salesInvoiceId)) {
      throw new Error('salesInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoice_id}', encodeURIComponent(salesInvoiceId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesInvoiceLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an salesInvoiceLine
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesInvoiceId id for salesInvoice
 *
 * @param {string} salesInvoiceLineId id for salesInvoiceLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesInvoiceLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesInvoiceLineForSalesInvoiceById(companyId, salesInvoiceId, salesInvoiceLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceId === null || salesInvoiceId === undefined || typeof salesInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(salesInvoiceId)) {
      throw new Error('salesInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceLineId === null || salesInvoiceLineId === undefined || typeof salesInvoiceLineId.valueOf() !== 'string') {
      throw new Error('salesInvoiceLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines(\'{salesInvoiceLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoice_id}', encodeURIComponent(salesInvoiceId.toString()));
  requestUrl = requestUrl.replace('{salesInvoiceLine_id}', encodeURIComponent(salesInvoiceLineId));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesInvoiceLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an salesInvoiceLine in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesInvoiceId id for salesInvoice
 *
 * @param {string} salesInvoiceLineId id for salesInvoiceLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteSalesInvoiceLineForSalesInvoiceByIdById(companyId, salesInvoiceId, salesInvoiceLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceId === null || salesInvoiceId === undefined || typeof salesInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(salesInvoiceId)) {
      throw new Error('salesInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceLineId === null || salesInvoiceLineId === undefined || typeof salesInvoiceLineId.valueOf() !== 'string') {
      throw new Error('salesInvoiceLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines(\'{salesInvoiceLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoice_id}', encodeURIComponent(salesInvoiceId.toString()));
  requestUrl = requestUrl.replace('{salesInvoiceLine_id}', encodeURIComponent(salesInvoiceLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified salesInvoiceLine
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the salesInvoiceLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.sequence] The sequence property for the
 * salesInvoiceLine entity
 *
 * @param {uuid} [body.itemId] The itemId property for the salesInvoiceLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the
 * salesInvoiceLine entity
 *
 * @param {string} [body.lineType] The lineType property for the
 * salesInvoiceLine entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * salesInvoiceLine entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * salesInvoiceLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.quantity] The quantity property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * salesInvoiceLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesInvoiceLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the salesInvoiceLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the salesInvoiceLine
 * entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the salesInvoiceLine entity
 *
 * @param {number} [body.invoiceDiscountAllocation] The
 * invoiceDiscountAllocation property for the salesInvoiceLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the salesInvoiceLine entity
 *
 * @param {date} [body.shipmentDate] The shipmentDate property for the
 * salesInvoiceLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesInvoiceId id for salesInvoice
 *
 * @param {string} salesInvoiceLineId id for salesInvoiceLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesInvoiceLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchSalesInvoiceLineForSalesInvoiceByIdById(body, companyId, salesInvoiceId, salesInvoiceLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceId === null || salesInvoiceId === undefined || typeof salesInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(salesInvoiceId)) {
      throw new Error('salesInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceLineId === null || salesInvoiceLineId === undefined || typeof salesInvoiceLineId.valueOf() !== 'string') {
      throw new Error('salesInvoiceLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines(\'{salesInvoiceLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoice_id}', encodeURIComponent(salesInvoiceId.toString()));
  requestUrl = requestUrl.replace('{salesInvoiceLine_id}', encodeURIComponent(salesInvoiceLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesInvoiceLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of pdfDocument
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesInvoiceId id for salesInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetPdfDocumentForSalesInvoiceOKResponse} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPdfDocumentForSalesInvoice(companyId, salesInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceId === null || salesInvoiceId === undefined || typeof salesInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(salesInvoiceId)) {
      throw new Error('salesInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoices({salesInvoice_id})/pdfDocument';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoice_id}', encodeURIComponent(salesInvoiceId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetPdfDocumentForSalesInvoiceOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an pdfDocument object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesInvoiceId id for salesInvoice
 *
 * @param {uuid} pdfDocumentId id for pdfDocument
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PdfDocument} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPdfDocumentForSalesInvoiceById(companyId, salesInvoiceId, pdfDocumentId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceId === null || salesInvoiceId === undefined || typeof salesInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(salesInvoiceId)) {
      throw new Error('salesInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pdfDocumentId === null || pdfDocumentId === undefined || typeof pdfDocumentId.valueOf() !== 'string' || !msRest.isValidUuid(pdfDocumentId)) {
      throw new Error('pdfDocumentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoices({salesInvoice_id})/pdfDocument({pdfDocument_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoice_id}', encodeURIComponent(salesInvoiceId.toString()));
  requestUrl = requestUrl.replace('{pdfDocument_id}', encodeURIComponent(pdfDocumentId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PdfDocument']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of salesInvoiceLines
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetSalesInvoiceLinesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesInvoiceLines(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoiceLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetSalesInvoiceLinesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a salesInvoiceLine in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the salesInvoiceLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.sequence] The sequence property for the
 * salesInvoiceLine entity
 *
 * @param {uuid} [body.itemId] The itemId property for the salesInvoiceLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the
 * salesInvoiceLine entity
 *
 * @param {string} [body.lineType] The lineType property for the
 * salesInvoiceLine entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * salesInvoiceLine entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * salesInvoiceLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.quantity] The quantity property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * salesInvoiceLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesInvoiceLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the salesInvoiceLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the salesInvoiceLine
 * entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the salesInvoiceLine entity
 *
 * @param {number} [body.invoiceDiscountAllocation] The
 * invoiceDiscountAllocation property for the salesInvoiceLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the salesInvoiceLine entity
 *
 * @param {date} [body.shipmentDate] The shipmentDate property for the
 * salesInvoiceLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesInvoiceLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postSalesInvoiceLine(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoiceLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesInvoiceLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an salesInvoiceLine
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {string} salesInvoiceLineId id for salesInvoiceLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesInvoiceLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesInvoiceLineById(companyId, salesInvoiceLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceLineId === null || salesInvoiceLineId === undefined || typeof salesInvoiceLineId.valueOf() !== 'string') {
      throw new Error('salesInvoiceLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoiceLines(\'{salesInvoiceLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoiceLine_id}', encodeURIComponent(salesInvoiceLineId));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesInvoiceLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an salesInvoiceLine in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {string} salesInvoiceLineId id for salesInvoiceLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteSalesInvoiceLineById(companyId, salesInvoiceLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceLineId === null || salesInvoiceLineId === undefined || typeof salesInvoiceLineId.valueOf() !== 'string') {
      throw new Error('salesInvoiceLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoiceLines(\'{salesInvoiceLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoiceLine_id}', encodeURIComponent(salesInvoiceLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified salesInvoiceLine
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the salesInvoiceLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.sequence] The sequence property for the
 * salesInvoiceLine entity
 *
 * @param {uuid} [body.itemId] The itemId property for the salesInvoiceLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the
 * salesInvoiceLine entity
 *
 * @param {string} [body.lineType] The lineType property for the
 * salesInvoiceLine entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * salesInvoiceLine entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * salesInvoiceLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.quantity] The quantity property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * salesInvoiceLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesInvoiceLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the salesInvoiceLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the salesInvoiceLine
 * entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the salesInvoiceLine entity
 *
 * @param {number} [body.invoiceDiscountAllocation] The
 * invoiceDiscountAllocation property for the salesInvoiceLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * salesInvoiceLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the salesInvoiceLine entity
 *
 * @param {date} [body.shipmentDate] The shipmentDate property for the
 * salesInvoiceLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {string} salesInvoiceLineId id for salesInvoiceLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesInvoiceLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchSalesInvoiceLineById(body, companyId, salesInvoiceLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesInvoiceLineId === null || salesInvoiceLineId === undefined || typeof salesInvoiceLineId.valueOf() !== 'string') {
      throw new Error('salesInvoiceLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesInvoiceLines(\'{salesInvoiceLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesInvoiceLine_id}', encodeURIComponent(salesInvoiceLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesInvoiceLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of pdfDocument
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetPdfDocumentOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPdfDocument(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/pdfDocument';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetPdfDocumentOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an pdfDocument object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} pdfDocumentId id for pdfDocument
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PdfDocument} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPdfDocumentById(companyId, pdfDocumentId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pdfDocumentId === null || pdfDocumentId === undefined || typeof pdfDocumentId.valueOf() !== 'string' || !msRest.isValidUuid(pdfDocumentId)) {
      throw new Error('pdfDocumentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/pdfDocument({pdfDocument_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{pdfDocument_id}', encodeURIComponent(pdfDocumentId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PdfDocument']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of customerPaymentJournals
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetCustomerPaymentJournalsOKResponse} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCustomerPaymentJournals(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerPaymentJournals';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetCustomerPaymentJournalsOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a customerPaymentJournal in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the customerPaymentJournal
 * entity
 *
 * @param {string} [body.code] The code property for the customerPaymentJournal
 * entity
 *
 * @param {string} [body.displayName] The displayName property for the
 * customerPaymentJournal entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the customerPaymentJournal entity
 *
 * @param {uuid} [body.balancingAccountId] The balancingAccountId property for
 * the customerPaymentJournal entity
 *
 * @param {string} [body.balancingAccountNumber] The balancingAccountNumber
 * property for the customerPaymentJournal entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CustomerPaymentJournal} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postCustomerPaymentJournal(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerPaymentJournals';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CustomerPaymentJournal']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an
 * customerPaymentJournal object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CustomerPaymentJournal} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCustomerPaymentJournalById(companyId, customerPaymentJournalId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerPaymentJournalId === null || customerPaymentJournalId === undefined || typeof customerPaymentJournalId.valueOf() !== 'string' || !msRest.isValidUuid(customerPaymentJournalId)) {
      throw new Error('customerPaymentJournalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customerPaymentJournal_id}', encodeURIComponent(customerPaymentJournalId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CustomerPaymentJournal']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an customerPaymentJournal in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteCustomerPaymentJournalById(companyId, customerPaymentJournalId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerPaymentJournalId === null || customerPaymentJournalId === undefined || typeof customerPaymentJournalId.valueOf() !== 'string' || !msRest.isValidUuid(customerPaymentJournalId)) {
      throw new Error('customerPaymentJournalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customerPaymentJournal_id}', encodeURIComponent(customerPaymentJournalId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified customerPaymentJournal
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the customerPaymentJournal
 * entity
 *
 * @param {string} [body.code] The code property for the customerPaymentJournal
 * entity
 *
 * @param {string} [body.displayName] The displayName property for the
 * customerPaymentJournal entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the customerPaymentJournal entity
 *
 * @param {uuid} [body.balancingAccountId] The balancingAccountId property for
 * the customerPaymentJournal entity
 *
 * @param {string} [body.balancingAccountNumber] The balancingAccountNumber
 * property for the customerPaymentJournal entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CustomerPaymentJournal} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchCustomerPaymentJournalById(body, companyId, customerPaymentJournalId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerPaymentJournalId === null || customerPaymentJournalId === undefined || typeof customerPaymentJournalId.valueOf() !== 'string' || !msRest.isValidUuid(customerPaymentJournalId)) {
      throw new Error('customerPaymentJournalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customerPaymentJournal_id}', encodeURIComponent(customerPaymentJournalId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CustomerPaymentJournal']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of customerPayments
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link
 *                      GetCustomerPaymentsForCustomerPaymentJournalOKResponse}
 *                      for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCustomerPaymentsForCustomerPaymentJournal(companyId, customerPaymentJournalId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerPaymentJournalId === null || customerPaymentJournalId === undefined || typeof customerPaymentJournalId.valueOf() !== 'string' || !msRest.isValidUuid(customerPaymentJournalId)) {
      throw new Error('customerPaymentJournalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customerPaymentJournal_id}', encodeURIComponent(customerPaymentJournalId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetCustomerPaymentsForCustomerPaymentJournalOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a customerPayment in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the customerPayment entity
 *
 * @param {string} [body.journalDisplayName] The journalDisplayName property
 * for the customerPayment entity
 *
 * @param {number} [body.lineNumber] The lineNumber property for the
 * customerPayment entity
 *
 * @param {uuid} [body.customerId] The customerId property for the
 * customerPayment entity
 *
 * @param {string} [body.customerNumber] The customerNumber property for the
 * customerPayment entity
 *
 * @param {string} [body.contactId] The contactId property for the
 * customerPayment entity
 *
 * @param {date} [body.postingDate] The postingDate property for the
 * customerPayment entity
 *
 * @param {string} [body.documentNumber] The documentNumber property for the
 * customerPayment entity
 *
 * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
 * property for the customerPayment entity
 *
 * @param {number} [body.amount] The amount property for the customerPayment
 * entity
 *
 * @param {uuid} [body.appliesToInvoiceId] The appliesToInvoiceId property for
 * the customerPayment entity
 *
 * @param {string} [body.appliesToInvoiceNumber] The appliesToInvoiceNumber
 * property for the customerPayment entity
 *
 * @param {string} [body.description] The description property for the
 * customerPayment entity
 *
 * @param {string} [body.comment] The comment property for the customerPayment
 * entity
 *
 * @param {array} [body.dimensions]
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the customerPayment entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CustomerPayment} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postCustomerPaymentForCustomerPaymentJournal(body, companyId, customerPaymentJournalId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerPaymentJournalId === null || customerPaymentJournalId === undefined || typeof customerPaymentJournalId.valueOf() !== 'string' || !msRest.isValidUuid(customerPaymentJournalId)) {
      throw new Error('customerPaymentJournalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customerPaymentJournal_id}', encodeURIComponent(customerPaymentJournalId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CustomerPayment']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an customerPayment
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
 *
 * @param {uuid} customerPaymentId id for customerPayment
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CustomerPayment} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCustomerPaymentForCustomerPaymentJournalById(companyId, customerPaymentJournalId, customerPaymentId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerPaymentJournalId === null || customerPaymentJournalId === undefined || typeof customerPaymentJournalId.valueOf() !== 'string' || !msRest.isValidUuid(customerPaymentJournalId)) {
      throw new Error('customerPaymentJournalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerPaymentId === null || customerPaymentId === undefined || typeof customerPaymentId.valueOf() !== 'string' || !msRest.isValidUuid(customerPaymentId)) {
      throw new Error('customerPaymentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments({customerPayment_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customerPaymentJournal_id}', encodeURIComponent(customerPaymentJournalId.toString()));
  requestUrl = requestUrl.replace('{customerPayment_id}', encodeURIComponent(customerPaymentId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CustomerPayment']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an customerPayment in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
 *
 * @param {uuid} customerPaymentId id for customerPayment
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteCustomerPaymentForCustomerPaymentJournalByIdById(companyId, customerPaymentJournalId, customerPaymentId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerPaymentJournalId === null || customerPaymentJournalId === undefined || typeof customerPaymentJournalId.valueOf() !== 'string' || !msRest.isValidUuid(customerPaymentJournalId)) {
      throw new Error('customerPaymentJournalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerPaymentId === null || customerPaymentId === undefined || typeof customerPaymentId.valueOf() !== 'string' || !msRest.isValidUuid(customerPaymentId)) {
      throw new Error('customerPaymentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments({customerPayment_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customerPaymentJournal_id}', encodeURIComponent(customerPaymentJournalId.toString()));
  requestUrl = requestUrl.replace('{customerPayment_id}', encodeURIComponent(customerPaymentId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified customerPayment
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the customerPayment entity
 *
 * @param {string} [body.journalDisplayName] The journalDisplayName property
 * for the customerPayment entity
 *
 * @param {number} [body.lineNumber] The lineNumber property for the
 * customerPayment entity
 *
 * @param {uuid} [body.customerId] The customerId property for the
 * customerPayment entity
 *
 * @param {string} [body.customerNumber] The customerNumber property for the
 * customerPayment entity
 *
 * @param {string} [body.contactId] The contactId property for the
 * customerPayment entity
 *
 * @param {date} [body.postingDate] The postingDate property for the
 * customerPayment entity
 *
 * @param {string} [body.documentNumber] The documentNumber property for the
 * customerPayment entity
 *
 * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
 * property for the customerPayment entity
 *
 * @param {number} [body.amount] The amount property for the customerPayment
 * entity
 *
 * @param {uuid} [body.appliesToInvoiceId] The appliesToInvoiceId property for
 * the customerPayment entity
 *
 * @param {string} [body.appliesToInvoiceNumber] The appliesToInvoiceNumber
 * property for the customerPayment entity
 *
 * @param {string} [body.description] The description property for the
 * customerPayment entity
 *
 * @param {string} [body.comment] The comment property for the customerPayment
 * entity
 *
 * @param {array} [body.dimensions]
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the customerPayment entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
 *
 * @param {uuid} customerPaymentId id for customerPayment
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CustomerPayment} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchCustomerPaymentForCustomerPaymentJournalByIdById(body, companyId, customerPaymentJournalId, customerPaymentId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerPaymentJournalId === null || customerPaymentJournalId === undefined || typeof customerPaymentJournalId.valueOf() !== 'string' || !msRest.isValidUuid(customerPaymentJournalId)) {
      throw new Error('customerPaymentJournalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerPaymentId === null || customerPaymentId === undefined || typeof customerPaymentId.valueOf() !== 'string' || !msRest.isValidUuid(customerPaymentId)) {
      throw new Error('customerPaymentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments({customerPayment_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customerPaymentJournal_id}', encodeURIComponent(customerPaymentJournalId.toString()));
  requestUrl = requestUrl.replace('{customerPayment_id}', encodeURIComponent(customerPaymentId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CustomerPayment']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of customerPayments
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetCustomerPaymentsOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCustomerPayments(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerPayments';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetCustomerPaymentsOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a customerPayment in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the customerPayment entity
 *
 * @param {string} [body.journalDisplayName] The journalDisplayName property
 * for the customerPayment entity
 *
 * @param {number} [body.lineNumber] The lineNumber property for the
 * customerPayment entity
 *
 * @param {uuid} [body.customerId] The customerId property for the
 * customerPayment entity
 *
 * @param {string} [body.customerNumber] The customerNumber property for the
 * customerPayment entity
 *
 * @param {string} [body.contactId] The contactId property for the
 * customerPayment entity
 *
 * @param {date} [body.postingDate] The postingDate property for the
 * customerPayment entity
 *
 * @param {string} [body.documentNumber] The documentNumber property for the
 * customerPayment entity
 *
 * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
 * property for the customerPayment entity
 *
 * @param {number} [body.amount] The amount property for the customerPayment
 * entity
 *
 * @param {uuid} [body.appliesToInvoiceId] The appliesToInvoiceId property for
 * the customerPayment entity
 *
 * @param {string} [body.appliesToInvoiceNumber] The appliesToInvoiceNumber
 * property for the customerPayment entity
 *
 * @param {string} [body.description] The description property for the
 * customerPayment entity
 *
 * @param {string} [body.comment] The comment property for the customerPayment
 * entity
 *
 * @param {array} [body.dimensions]
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the customerPayment entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CustomerPayment} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postCustomerPayment(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerPayments';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CustomerPayment']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an customerPayment
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerPaymentId id for customerPayment
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CustomerPayment} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCustomerPaymentById(companyId, customerPaymentId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerPaymentId === null || customerPaymentId === undefined || typeof customerPaymentId.valueOf() !== 'string' || !msRest.isValidUuid(customerPaymentId)) {
      throw new Error('customerPaymentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerPayments({customerPayment_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customerPayment_id}', encodeURIComponent(customerPaymentId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CustomerPayment']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an customerPayment in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerPaymentId id for customerPayment
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteCustomerPaymentById(companyId, customerPaymentId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerPaymentId === null || customerPaymentId === undefined || typeof customerPaymentId.valueOf() !== 'string' || !msRest.isValidUuid(customerPaymentId)) {
      throw new Error('customerPaymentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerPayments({customerPayment_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customerPayment_id}', encodeURIComponent(customerPaymentId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified customerPayment
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the customerPayment entity
 *
 * @param {string} [body.journalDisplayName] The journalDisplayName property
 * for the customerPayment entity
 *
 * @param {number} [body.lineNumber] The lineNumber property for the
 * customerPayment entity
 *
 * @param {uuid} [body.customerId] The customerId property for the
 * customerPayment entity
 *
 * @param {string} [body.customerNumber] The customerNumber property for the
 * customerPayment entity
 *
 * @param {string} [body.contactId] The contactId property for the
 * customerPayment entity
 *
 * @param {date} [body.postingDate] The postingDate property for the
 * customerPayment entity
 *
 * @param {string} [body.documentNumber] The documentNumber property for the
 * customerPayment entity
 *
 * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
 * property for the customerPayment entity
 *
 * @param {number} [body.amount] The amount property for the customerPayment
 * entity
 *
 * @param {uuid} [body.appliesToInvoiceId] The appliesToInvoiceId property for
 * the customerPayment entity
 *
 * @param {string} [body.appliesToInvoiceNumber] The appliesToInvoiceNumber
 * property for the customerPayment entity
 *
 * @param {string} [body.description] The description property for the
 * customerPayment entity
 *
 * @param {string} [body.comment] The comment property for the customerPayment
 * entity
 *
 * @param {array} [body.dimensions]
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the customerPayment entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerPaymentId id for customerPayment
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CustomerPayment} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchCustomerPaymentById(body, companyId, customerPaymentId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerPaymentId === null || customerPaymentId === undefined || typeof customerPaymentId.valueOf() !== 'string' || !msRest.isValidUuid(customerPaymentId)) {
      throw new Error('customerPaymentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerPayments({customerPayment_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customerPayment_id}', encodeURIComponent(customerPaymentId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CustomerPayment']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of accounts
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetAccountsOKResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getAccounts(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/accounts';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetAccountsOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an account object for
 * Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} accountId id for account
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Account} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getAccountById(companyId, accountId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (accountId === null || accountId === undefined || typeof accountId.valueOf() !== 'string' || !msRest.isValidUuid(accountId)) {
      throw new Error('accountId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/accounts({account_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{account_id}', encodeURIComponent(accountId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Account']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of taxGroups
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetTaxGroupsOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getTaxGroups(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/taxGroups';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetTaxGroupsOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a taxGroup in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the taxGroup entity
 *
 * @param {string} [body.code] The code property for the taxGroup entity
 *
 * @param {string} [body.displayName] The displayName property for the taxGroup
 * entity
 *
 * @param {string} [body.taxType] The taxType property for the taxGroup entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the taxGroup entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link TaxGroup} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postTaxGroup(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/taxGroups';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['TaxGroup']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an taxGroup object for
 * Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} taxGroupId id for taxGroup
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link TaxGroup} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getTaxGroupById(companyId, taxGroupId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (taxGroupId === null || taxGroupId === undefined || typeof taxGroupId.valueOf() !== 'string' || !msRest.isValidUuid(taxGroupId)) {
      throw new Error('taxGroupId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/taxGroups({taxGroup_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{taxGroup_id}', encodeURIComponent(taxGroupId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['TaxGroup']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an taxGroup in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} taxGroupId id for taxGroup
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteTaxGroupById(companyId, taxGroupId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (taxGroupId === null || taxGroupId === undefined || typeof taxGroupId.valueOf() !== 'string' || !msRest.isValidUuid(taxGroupId)) {
      throw new Error('taxGroupId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/taxGroups({taxGroup_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{taxGroup_id}', encodeURIComponent(taxGroupId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified taxGroup
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the taxGroup entity
 *
 * @param {string} [body.code] The code property for the taxGroup entity
 *
 * @param {string} [body.displayName] The displayName property for the taxGroup
 * entity
 *
 * @param {string} [body.taxType] The taxType property for the taxGroup entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the taxGroup entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} taxGroupId id for taxGroup
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link TaxGroup} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchTaxGroupById(body, companyId, taxGroupId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (taxGroupId === null || taxGroupId === undefined || typeof taxGroupId.valueOf() !== 'string' || !msRest.isValidUuid(taxGroupId)) {
      throw new Error('taxGroupId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/taxGroups({taxGroup_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{taxGroup_id}', encodeURIComponent(taxGroupId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['TaxGroup']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of journals
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetJournalsOKResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getJournals(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journals';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetJournalsOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a journal in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the journal entity
 *
 * @param {string} [body.code] The code property for the journal entity
 *
 * @param {string} [body.displayName] The displayName property for the journal
 * entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the journal entity
 *
 * @param {uuid} [body.balancingAccountId] The balancingAccountId property for
 * the journal entity
 *
 * @param {string} [body.balancingAccountNumber] The balancingAccountNumber
 * property for the journal entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Journal} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postJournal(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journals';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Journal']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an journal object for
 * Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalId id for journal
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Journal} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getJournalById(companyId, journalId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalId === null || journalId === undefined || typeof journalId.valueOf() !== 'string' || !msRest.isValidUuid(journalId)) {
      throw new Error('journalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journals({journal_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journal_id}', encodeURIComponent(journalId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Journal']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an journal in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalId id for journal
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteJournalById(companyId, journalId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalId === null || journalId === undefined || typeof journalId.valueOf() !== 'string' || !msRest.isValidUuid(journalId)) {
      throw new Error('journalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journals({journal_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journal_id}', encodeURIComponent(journalId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified journal
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the journal entity
 *
 * @param {string} [body.code] The code property for the journal entity
 *
 * @param {string} [body.displayName] The displayName property for the journal
 * entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the journal entity
 *
 * @param {uuid} [body.balancingAccountId] The balancingAccountId property for
 * the journal entity
 *
 * @param {string} [body.balancingAccountNumber] The balancingAccountNumber
 * property for the journal entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalId id for journal
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Journal} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchJournalById(body, companyId, journalId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalId === null || journalId === undefined || typeof journalId.valueOf() !== 'string' || !msRest.isValidUuid(journalId)) {
      throw new Error('journalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journals({journal_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journal_id}', encodeURIComponent(journalId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Journal']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Performs the post action for journals entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalId id for journal
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postActionJournals(companyId, journalId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalId === null || journalId === undefined || typeof journalId.valueOf() !== 'string' || !msRest.isValidUuid(journalId)) {
      throw new Error('journalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journals({journal_id})/Microsoft.NAV.post';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journal_id}', encodeURIComponent(journalId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of journalLines
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalId id for journal
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetJournalLinesForJournalOKResponse} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getJournalLinesForJournal(companyId, journalId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalId === null || journalId === undefined || typeof journalId.valueOf() !== 'string' || !msRest.isValidUuid(journalId)) {
      throw new Error('journalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journals({journal_id})/journalLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journal_id}', encodeURIComponent(journalId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetJournalLinesForJournalOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a journalLine in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the journalLine entity
 *
 * @param {string} [body.journalDisplayName] The journalDisplayName property
 * for the journalLine entity
 *
 * @param {number} [body.lineNumber] The lineNumber property for the
 * journalLine entity
 *
 * @param {uuid} [body.accountId] The accountId property for the journalLine
 * entity
 *
 * @param {string} [body.accountNumber] The accountNumber property for the
 * journalLine entity
 *
 * @param {date} [body.postingDate] The postingDate property for the
 * journalLine entity
 *
 * @param {string} [body.documentNumber] The documentNumber property for the
 * journalLine entity
 *
 * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
 * property for the journalLine entity
 *
 * @param {number} [body.amount] The amount property for the journalLine entity
 *
 * @param {string} [body.description] The description property for the
 * journalLine entity
 *
 * @param {string} [body.comment] The comment property for the journalLine
 * entity
 *
 * @param {array} [body.dimensions]
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the journalLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalId id for journal
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JournalLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postJournalLineForJournal(body, companyId, journalId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalId === null || journalId === undefined || typeof journalId.valueOf() !== 'string' || !msRest.isValidUuid(journalId)) {
      throw new Error('journalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journals({journal_id})/journalLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journal_id}', encodeURIComponent(journalId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JournalLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an journalLine object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalId id for journal
 *
 * @param {uuid} journalLineId id for journalLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JournalLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getJournalLineForJournalById(companyId, journalId, journalLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalId === null || journalId === undefined || typeof journalId.valueOf() !== 'string' || !msRest.isValidUuid(journalId)) {
      throw new Error('journalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalLineId === null || journalLineId === undefined || typeof journalLineId.valueOf() !== 'string' || !msRest.isValidUuid(journalLineId)) {
      throw new Error('journalLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journals({journal_id})/journalLines({journalLine_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journal_id}', encodeURIComponent(journalId.toString()));
  requestUrl = requestUrl.replace('{journalLine_id}', encodeURIComponent(journalLineId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JournalLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an journalLine in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalId id for journal
 *
 * @param {uuid} journalLineId id for journalLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteJournalLineForJournalByIdById(companyId, journalId, journalLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalId === null || journalId === undefined || typeof journalId.valueOf() !== 'string' || !msRest.isValidUuid(journalId)) {
      throw new Error('journalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalLineId === null || journalLineId === undefined || typeof journalLineId.valueOf() !== 'string' || !msRest.isValidUuid(journalLineId)) {
      throw new Error('journalLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journals({journal_id})/journalLines({journalLine_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journal_id}', encodeURIComponent(journalId.toString()));
  requestUrl = requestUrl.replace('{journalLine_id}', encodeURIComponent(journalLineId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified journalLine
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the journalLine entity
 *
 * @param {string} [body.journalDisplayName] The journalDisplayName property
 * for the journalLine entity
 *
 * @param {number} [body.lineNumber] The lineNumber property for the
 * journalLine entity
 *
 * @param {uuid} [body.accountId] The accountId property for the journalLine
 * entity
 *
 * @param {string} [body.accountNumber] The accountNumber property for the
 * journalLine entity
 *
 * @param {date} [body.postingDate] The postingDate property for the
 * journalLine entity
 *
 * @param {string} [body.documentNumber] The documentNumber property for the
 * journalLine entity
 *
 * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
 * property for the journalLine entity
 *
 * @param {number} [body.amount] The amount property for the journalLine entity
 *
 * @param {string} [body.description] The description property for the
 * journalLine entity
 *
 * @param {string} [body.comment] The comment property for the journalLine
 * entity
 *
 * @param {array} [body.dimensions]
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the journalLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalId id for journal
 *
 * @param {uuid} journalLineId id for journalLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JournalLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchJournalLineForJournalByIdById(body, companyId, journalId, journalLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalId === null || journalId === undefined || typeof journalId.valueOf() !== 'string' || !msRest.isValidUuid(journalId)) {
      throw new Error('journalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalLineId === null || journalLineId === undefined || typeof journalLineId.valueOf() !== 'string' || !msRest.isValidUuid(journalLineId)) {
      throw new Error('journalLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journals({journal_id})/journalLines({journalLine_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journal_id}', encodeURIComponent(journalId.toString()));
  requestUrl = requestUrl.replace('{journalLine_id}', encodeURIComponent(journalLineId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JournalLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of attachments
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalId id for journal
 *
 * @param {uuid} journalLineId id for journalLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link
 *                      GetAttachmentsForJournalLineForJournalOKResponse} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getAttachmentsForJournalLineForJournal(companyId, journalId, journalLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalId === null || journalId === undefined || typeof journalId.valueOf() !== 'string' || !msRest.isValidUuid(journalId)) {
      throw new Error('journalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalLineId === null || journalLineId === undefined || typeof journalLineId.valueOf() !== 'string' || !msRest.isValidUuid(journalLineId)) {
      throw new Error('journalLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journal_id}', encodeURIComponent(journalId.toString()));
  requestUrl = requestUrl.replace('{journalLine_id}', encodeURIComponent(journalLineId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetAttachmentsForJournalLineForJournalOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a attachments in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the attachments
 * entity
 *
 * @param {uuid} [body.id] The id property for the attachments entity
 *
 * @param {string} [body.fileName] The fileName property for the attachments
 * entity
 *
 * @param {number} [body.byteSize] The byteSize property for the attachments
 * entity
 *
 * @param {string} [body.content] The content property for the attachments
 * entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the attachments entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalId id for journal
 *
 * @param {uuid} journalLineId id for journalLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Attachments} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postAttachmentsForJournalLineForJournal(body, companyId, journalId, journalLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalId === null || journalId === undefined || typeof journalId.valueOf() !== 'string' || !msRest.isValidUuid(journalId)) {
      throw new Error('journalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalLineId === null || journalLineId === undefined || typeof journalLineId.valueOf() !== 'string' || !msRest.isValidUuid(journalLineId)) {
      throw new Error('journalLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journal_id}', encodeURIComponent(journalId.toString()));
  requestUrl = requestUrl.replace('{journalLine_id}', encodeURIComponent(journalLineId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Attachments']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an attachments object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalId id for journal
 *
 * @param {uuid} journalLineId id for journalLine
 *
 * @param {uuid} attachmentsParentId parentId for attachments
 *
 * @param {uuid} attachmentsId id for attachments
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Attachments} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getAttachmentsForJournalLineForJournalByIdByParentId(companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalId === null || journalId === undefined || typeof journalId.valueOf() !== 'string' || !msRest.isValidUuid(journalId)) {
      throw new Error('journalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalLineId === null || journalLineId === undefined || typeof journalLineId.valueOf() !== 'string' || !msRest.isValidUuid(journalLineId)) {
      throw new Error('journalLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsParentId === null || attachmentsParentId === undefined || typeof attachmentsParentId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsParentId)) {
      throw new Error('attachmentsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsId === null || attachmentsId === undefined || typeof attachmentsId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsId)) {
      throw new Error('attachmentsId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journal_id}', encodeURIComponent(journalId.toString()));
  requestUrl = requestUrl.replace('{journalLine_id}', encodeURIComponent(journalLineId.toString()));
  requestUrl = requestUrl.replace('{attachments_parentId}', encodeURIComponent(attachmentsParentId.toString()));
  requestUrl = requestUrl.replace('{attachments_id}', encodeURIComponent(attachmentsId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Attachments']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an attachments in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalId id for journal
 *
 * @param {uuid} journalLineId id for journalLine
 *
 * @param {uuid} attachmentsParentId parentId for attachments
 *
 * @param {uuid} attachmentsId id for attachments
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteAttachmentsForJournalLineForJournalByIdByParentIdByIdById(companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalId === null || journalId === undefined || typeof journalId.valueOf() !== 'string' || !msRest.isValidUuid(journalId)) {
      throw new Error('journalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalLineId === null || journalLineId === undefined || typeof journalLineId.valueOf() !== 'string' || !msRest.isValidUuid(journalLineId)) {
      throw new Error('journalLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsParentId === null || attachmentsParentId === undefined || typeof attachmentsParentId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsParentId)) {
      throw new Error('attachmentsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsId === null || attachmentsId === undefined || typeof attachmentsId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsId)) {
      throw new Error('attachmentsId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journal_id}', encodeURIComponent(journalId.toString()));
  requestUrl = requestUrl.replace('{journalLine_id}', encodeURIComponent(journalLineId.toString()));
  requestUrl = requestUrl.replace('{attachments_parentId}', encodeURIComponent(attachmentsParentId.toString()));
  requestUrl = requestUrl.replace('{attachments_id}', encodeURIComponent(attachmentsId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified attachments
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the attachments
 * entity
 *
 * @param {uuid} [body.id] The id property for the attachments entity
 *
 * @param {string} [body.fileName] The fileName property for the attachments
 * entity
 *
 * @param {number} [body.byteSize] The byteSize property for the attachments
 * entity
 *
 * @param {string} [body.content] The content property for the attachments
 * entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the attachments entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalId id for journal
 *
 * @param {uuid} journalLineId id for journalLine
 *
 * @param {uuid} attachmentsParentId parentId for attachments
 *
 * @param {uuid} attachmentsId id for attachments
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Attachments} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchAttachmentsForJournalLineForJournalByIdByParentIdByIdById(body, companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalId === null || journalId === undefined || typeof journalId.valueOf() !== 'string' || !msRest.isValidUuid(journalId)) {
      throw new Error('journalId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalLineId === null || journalLineId === undefined || typeof journalLineId.valueOf() !== 'string' || !msRest.isValidUuid(journalLineId)) {
      throw new Error('journalLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsParentId === null || attachmentsParentId === undefined || typeof attachmentsParentId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsParentId)) {
      throw new Error('attachmentsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsId === null || attachmentsId === undefined || typeof attachmentsId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsId)) {
      throw new Error('attachmentsId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journal_id}', encodeURIComponent(journalId.toString()));
  requestUrl = requestUrl.replace('{journalLine_id}', encodeURIComponent(journalLineId.toString()));
  requestUrl = requestUrl.replace('{attachments_parentId}', encodeURIComponent(attachmentsParentId.toString()));
  requestUrl = requestUrl.replace('{attachments_id}', encodeURIComponent(attachmentsId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Attachments']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of journalLines
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetJournalLinesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getJournalLines(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journalLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetJournalLinesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a journalLine in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the journalLine entity
 *
 * @param {string} [body.journalDisplayName] The journalDisplayName property
 * for the journalLine entity
 *
 * @param {number} [body.lineNumber] The lineNumber property for the
 * journalLine entity
 *
 * @param {uuid} [body.accountId] The accountId property for the journalLine
 * entity
 *
 * @param {string} [body.accountNumber] The accountNumber property for the
 * journalLine entity
 *
 * @param {date} [body.postingDate] The postingDate property for the
 * journalLine entity
 *
 * @param {string} [body.documentNumber] The documentNumber property for the
 * journalLine entity
 *
 * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
 * property for the journalLine entity
 *
 * @param {number} [body.amount] The amount property for the journalLine entity
 *
 * @param {string} [body.description] The description property for the
 * journalLine entity
 *
 * @param {string} [body.comment] The comment property for the journalLine
 * entity
 *
 * @param {array} [body.dimensions]
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the journalLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JournalLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postJournalLine(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journalLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JournalLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an journalLine object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalLineId id for journalLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JournalLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getJournalLineById(companyId, journalLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalLineId === null || journalLineId === undefined || typeof journalLineId.valueOf() !== 'string' || !msRest.isValidUuid(journalLineId)) {
      throw new Error('journalLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journalLines({journalLine_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journalLine_id}', encodeURIComponent(journalLineId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JournalLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an journalLine in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalLineId id for journalLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteJournalLineById(companyId, journalLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalLineId === null || journalLineId === undefined || typeof journalLineId.valueOf() !== 'string' || !msRest.isValidUuid(journalLineId)) {
      throw new Error('journalLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journalLines({journalLine_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journalLine_id}', encodeURIComponent(journalLineId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified journalLine
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the journalLine entity
 *
 * @param {string} [body.journalDisplayName] The journalDisplayName property
 * for the journalLine entity
 *
 * @param {number} [body.lineNumber] The lineNumber property for the
 * journalLine entity
 *
 * @param {uuid} [body.accountId] The accountId property for the journalLine
 * entity
 *
 * @param {string} [body.accountNumber] The accountNumber property for the
 * journalLine entity
 *
 * @param {date} [body.postingDate] The postingDate property for the
 * journalLine entity
 *
 * @param {string} [body.documentNumber] The documentNumber property for the
 * journalLine entity
 *
 * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
 * property for the journalLine entity
 *
 * @param {number} [body.amount] The amount property for the journalLine entity
 *
 * @param {string} [body.description] The description property for the
 * journalLine entity
 *
 * @param {string} [body.comment] The comment property for the journalLine
 * entity
 *
 * @param {array} [body.dimensions]
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the journalLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalLineId id for journalLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JournalLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchJournalLineById(body, companyId, journalLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalLineId === null || journalLineId === undefined || typeof journalLineId.valueOf() !== 'string' || !msRest.isValidUuid(journalLineId)) {
      throw new Error('journalLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journalLines({journalLine_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journalLine_id}', encodeURIComponent(journalLineId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JournalLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of attachments
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalLineId id for journalLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetAttachmentsForJournalLineOKResponse} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getAttachmentsForJournalLine(companyId, journalLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalLineId === null || journalLineId === undefined || typeof journalLineId.valueOf() !== 'string' || !msRest.isValidUuid(journalLineId)) {
      throw new Error('journalLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journalLines({journalLine_id})/attachments';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journalLine_id}', encodeURIComponent(journalLineId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetAttachmentsForJournalLineOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a attachments in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the attachments
 * entity
 *
 * @param {uuid} [body.id] The id property for the attachments entity
 *
 * @param {string} [body.fileName] The fileName property for the attachments
 * entity
 *
 * @param {number} [body.byteSize] The byteSize property for the attachments
 * entity
 *
 * @param {string} [body.content] The content property for the attachments
 * entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the attachments entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalLineId id for journalLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Attachments} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postAttachmentsForJournalLine(body, companyId, journalLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalLineId === null || journalLineId === undefined || typeof journalLineId.valueOf() !== 'string' || !msRest.isValidUuid(journalLineId)) {
      throw new Error('journalLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journalLines({journalLine_id})/attachments';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journalLine_id}', encodeURIComponent(journalLineId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Attachments']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an attachments object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalLineId id for journalLine
 *
 * @param {uuid} attachmentsParentId parentId for attachments
 *
 * @param {uuid} attachmentsId id for attachments
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Attachments} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getAttachmentsForJournalLineByIdByParentId(companyId, journalLineId, attachmentsParentId, attachmentsId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalLineId === null || journalLineId === undefined || typeof journalLineId.valueOf() !== 'string' || !msRest.isValidUuid(journalLineId)) {
      throw new Error('journalLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsParentId === null || attachmentsParentId === undefined || typeof attachmentsParentId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsParentId)) {
      throw new Error('attachmentsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsId === null || attachmentsId === undefined || typeof attachmentsId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsId)) {
      throw new Error('attachmentsId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journalLine_id}', encodeURIComponent(journalLineId.toString()));
  requestUrl = requestUrl.replace('{attachments_parentId}', encodeURIComponent(attachmentsParentId.toString()));
  requestUrl = requestUrl.replace('{attachments_id}', encodeURIComponent(attachmentsId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Attachments']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an attachments in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalLineId id for journalLine
 *
 * @param {uuid} attachmentsParentId parentId for attachments
 *
 * @param {uuid} attachmentsId id for attachments
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteAttachmentsForJournalLineByIdByParentIdById(companyId, journalLineId, attachmentsParentId, attachmentsId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalLineId === null || journalLineId === undefined || typeof journalLineId.valueOf() !== 'string' || !msRest.isValidUuid(journalLineId)) {
      throw new Error('journalLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsParentId === null || attachmentsParentId === undefined || typeof attachmentsParentId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsParentId)) {
      throw new Error('attachmentsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsId === null || attachmentsId === undefined || typeof attachmentsId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsId)) {
      throw new Error('attachmentsId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journalLine_id}', encodeURIComponent(journalLineId.toString()));
  requestUrl = requestUrl.replace('{attachments_parentId}', encodeURIComponent(attachmentsParentId.toString()));
  requestUrl = requestUrl.replace('{attachments_id}', encodeURIComponent(attachmentsId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified attachments
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the attachments
 * entity
 *
 * @param {uuid} [body.id] The id property for the attachments entity
 *
 * @param {string} [body.fileName] The fileName property for the attachments
 * entity
 *
 * @param {number} [body.byteSize] The byteSize property for the attachments
 * entity
 *
 * @param {string} [body.content] The content property for the attachments
 * entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the attachments entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} journalLineId id for journalLine
 *
 * @param {uuid} attachmentsParentId parentId for attachments
 *
 * @param {uuid} attachmentsId id for attachments
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Attachments} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchAttachmentsForJournalLineByIdByParentIdById(body, companyId, journalLineId, attachmentsParentId, attachmentsId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (journalLineId === null || journalLineId === undefined || typeof journalLineId.valueOf() !== 'string' || !msRest.isValidUuid(journalLineId)) {
      throw new Error('journalLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsParentId === null || attachmentsParentId === undefined || typeof attachmentsParentId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsParentId)) {
      throw new Error('attachmentsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsId === null || attachmentsId === undefined || typeof attachmentsId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsId)) {
      throw new Error('attachmentsId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{journalLine_id}', encodeURIComponent(journalLineId.toString()));
  requestUrl = requestUrl.replace('{attachments_parentId}', encodeURIComponent(attachmentsParentId.toString()));
  requestUrl = requestUrl.replace('{attachments_id}', encodeURIComponent(attachmentsId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Attachments']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of attachments
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetAttachmentsOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getAttachments(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/attachments';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetAttachmentsOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a attachments in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the attachments
 * entity
 *
 * @param {uuid} [body.id] The id property for the attachments entity
 *
 * @param {string} [body.fileName] The fileName property for the attachments
 * entity
 *
 * @param {number} [body.byteSize] The byteSize property for the attachments
 * entity
 *
 * @param {string} [body.content] The content property for the attachments
 * entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the attachments entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Attachments} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postAttachments(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/attachments';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Attachments']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an attachments object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} attachmentsParentId parentId for attachments
 *
 * @param {uuid} attachmentsId id for attachments
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Attachments} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getAttachmentsByIdByParentId(companyId, attachmentsParentId, attachmentsId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsParentId === null || attachmentsParentId === undefined || typeof attachmentsParentId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsParentId)) {
      throw new Error('attachmentsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsId === null || attachmentsId === undefined || typeof attachmentsId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsId)) {
      throw new Error('attachmentsId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/attachments({attachments_parentId},{attachments_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{attachments_parentId}', encodeURIComponent(attachmentsParentId.toString()));
  requestUrl = requestUrl.replace('{attachments_id}', encodeURIComponent(attachmentsId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Attachments']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an attachments in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} attachmentsParentId parentId for attachments
 *
 * @param {uuid} attachmentsId id for attachments
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteAttachmentsByIdByParentId(companyId, attachmentsParentId, attachmentsId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsParentId === null || attachmentsParentId === undefined || typeof attachmentsParentId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsParentId)) {
      throw new Error('attachmentsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsId === null || attachmentsId === undefined || typeof attachmentsId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsId)) {
      throw new Error('attachmentsId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/attachments({attachments_parentId},{attachments_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{attachments_parentId}', encodeURIComponent(attachmentsParentId.toString()));
  requestUrl = requestUrl.replace('{attachments_id}', encodeURIComponent(attachmentsId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified attachments
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the attachments
 * entity
 *
 * @param {uuid} [body.id] The id property for the attachments entity
 *
 * @param {string} [body.fileName] The fileName property for the attachments
 * entity
 *
 * @param {number} [body.byteSize] The byteSize property for the attachments
 * entity
 *
 * @param {string} [body.content] The content property for the attachments
 * entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the attachments entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} attachmentsParentId parentId for attachments
 *
 * @param {uuid} attachmentsId id for attachments
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Attachments} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchAttachmentsByIdByParentId(body, companyId, attachmentsParentId, attachmentsId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsParentId === null || attachmentsParentId === undefined || typeof attachmentsParentId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsParentId)) {
      throw new Error('attachmentsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (attachmentsId === null || attachmentsId === undefined || typeof attachmentsId.valueOf() !== 'string' || !msRest.isValidUuid(attachmentsId)) {
      throw new Error('attachmentsId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/attachments({attachments_parentId},{attachments_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{attachments_parentId}', encodeURIComponent(attachmentsParentId.toString()));
  requestUrl = requestUrl.replace('{attachments_id}', encodeURIComponent(attachmentsId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Attachments']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of employees
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetEmployeesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getEmployees(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetEmployeesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a employee in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the employee entity
 *
 * @param {string} [body.number] The number property for the employee entity
 *
 * @param {string} [body.displayName] The displayName property for the employee
 * entity
 *
 * @param {string} [body.givenName] The givenName property for the employee
 * entity
 *
 * @param {string} [body.middleName] The middleName property for the employee
 * entity
 *
 * @param {string} [body.surname] The surname property for the employee entity
 *
 * @param {string} [body.jobTitle] The jobTitle property for the employee
 * entity
 *
 * @param {object} [body.address]
 *
 * @param {string} [body.address.street] The street property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.city] The city property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.state] The state property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.countryLetterCode] The countryLetterCode
 * property for the postaladdresstype entity
 *
 * @param {string} [body.address.postalCode] The postalCode property for the
 * postaladdresstype entity
 *
 * @param {array} [body.address.customerFinancialDetails]
 *
 * @param {array} [body.address.picture]
 *
 * @param {array} [body.address.defaultDimensions]
 *
 * @param {object} [body.address.currency]
 *
 * @param {uuid} [body.address.currency.id] The id property for the currency
 * entity
 *
 * @param {string} [body.address.currency.code] The code property for the
 * currency entity
 *
 * @param {string} [body.address.currency.displayName] The displayName property
 * for the currency entity
 *
 * @param {string} [body.address.currency.symbol] The symbol property for the
 * currency entity
 *
 * @param {string} [body.address.currency.amountDecimalPlaces] The
 * amountDecimalPlaces property for the currency entity
 *
 * @param {number} [body.address.currency.amountRoundingPrecision] The
 * amountRoundingPrecision property for the currency entity
 *
 * @param {date} [body.address.currency.lastModifiedDateTime] The
 * lastModifiedDateTime property for the currency entity
 *
 * @param {object} [body.address.paymentTerm]
 *
 * @param {uuid} [body.address.paymentTerm.id] The id property for the
 * paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.code] The code property for the
 * paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.displayName] The displayName
 * property for the paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.dueDateCalculation] The
 * dueDateCalculation property for the paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.discountDateCalculation] The
 * discountDateCalculation property for the paymentTerm entity
 *
 * @param {number} [body.address.paymentTerm.discountPercent] The
 * discountPercent property for the paymentTerm entity
 *
 * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
 * The calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentTerm entity
 *
 * @param {object} [body.address.shipmentMethod]
 *
 * @param {uuid} [body.address.shipmentMethod.id] The id property for the
 * shipmentMethod entity
 *
 * @param {string} [body.address.shipmentMethod.code] The code property for the
 * shipmentMethod entity
 *
 * @param {string} [body.address.shipmentMethod.displayName] The displayName
 * property for the shipmentMethod entity
 *
 * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the shipmentMethod entity
 *
 * @param {object} [body.address.paymentMethod]
 *
 * @param {uuid} [body.address.paymentMethod.id] The id property for the
 * paymentMethod entity
 *
 * @param {string} [body.address.paymentMethod.code] The code property for the
 * paymentMethod entity
 *
 * @param {string} [body.address.paymentMethod.displayName] The displayName
 * property for the paymentMethod entity
 *
 * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentMethod entity
 *
 * @param {string} [body.phoneNumber] The phoneNumber property for the employee
 * entity
 *
 * @param {string} [body.mobilePhone] The mobilePhone property for the employee
 * entity
 *
 * @param {string} [body.email] The email property for the employee entity
 *
 * @param {string} [body.personalEmail] The personalEmail property for the
 * employee entity
 *
 * @param {date} [body.employmentDate] The employmentDate property for the
 * employee entity
 *
 * @param {date} [body.terminationDate] The terminationDate property for the
 * employee entity
 *
 * @param {string} [body.status] The status property for the employee entity
 *
 * @param {date} [body.birthDate] The birthDate property for the employee
 * entity
 *
 * @param {string} [body.statisticsGroupCode] The statisticsGroupCode property
 * for the employee entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the employee entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Employee} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postEmployee(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Employee']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an employee object for
 * Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} employeeId id for employee
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Employee} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getEmployeeById(companyId, employeeId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (employeeId === null || employeeId === undefined || typeof employeeId.valueOf() !== 'string' || !msRest.isValidUuid(employeeId)) {
      throw new Error('employeeId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees({employee_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{employee_id}', encodeURIComponent(employeeId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Employee']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an employee in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} employeeId id for employee
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteEmployeeById(companyId, employeeId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (employeeId === null || employeeId === undefined || typeof employeeId.valueOf() !== 'string' || !msRest.isValidUuid(employeeId)) {
      throw new Error('employeeId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees({employee_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{employee_id}', encodeURIComponent(employeeId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified employee
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the employee entity
 *
 * @param {string} [body.number] The number property for the employee entity
 *
 * @param {string} [body.displayName] The displayName property for the employee
 * entity
 *
 * @param {string} [body.givenName] The givenName property for the employee
 * entity
 *
 * @param {string} [body.middleName] The middleName property for the employee
 * entity
 *
 * @param {string} [body.surname] The surname property for the employee entity
 *
 * @param {string} [body.jobTitle] The jobTitle property for the employee
 * entity
 *
 * @param {object} [body.address]
 *
 * @param {string} [body.address.street] The street property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.city] The city property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.state] The state property for the
 * postaladdresstype entity
 *
 * @param {string} [body.address.countryLetterCode] The countryLetterCode
 * property for the postaladdresstype entity
 *
 * @param {string} [body.address.postalCode] The postalCode property for the
 * postaladdresstype entity
 *
 * @param {array} [body.address.customerFinancialDetails]
 *
 * @param {array} [body.address.picture]
 *
 * @param {array} [body.address.defaultDimensions]
 *
 * @param {object} [body.address.currency]
 *
 * @param {uuid} [body.address.currency.id] The id property for the currency
 * entity
 *
 * @param {string} [body.address.currency.code] The code property for the
 * currency entity
 *
 * @param {string} [body.address.currency.displayName] The displayName property
 * for the currency entity
 *
 * @param {string} [body.address.currency.symbol] The symbol property for the
 * currency entity
 *
 * @param {string} [body.address.currency.amountDecimalPlaces] The
 * amountDecimalPlaces property for the currency entity
 *
 * @param {number} [body.address.currency.amountRoundingPrecision] The
 * amountRoundingPrecision property for the currency entity
 *
 * @param {date} [body.address.currency.lastModifiedDateTime] The
 * lastModifiedDateTime property for the currency entity
 *
 * @param {object} [body.address.paymentTerm]
 *
 * @param {uuid} [body.address.paymentTerm.id] The id property for the
 * paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.code] The code property for the
 * paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.displayName] The displayName
 * property for the paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.dueDateCalculation] The
 * dueDateCalculation property for the paymentTerm entity
 *
 * @param {string} [body.address.paymentTerm.discountDateCalculation] The
 * discountDateCalculation property for the paymentTerm entity
 *
 * @param {number} [body.address.paymentTerm.discountPercent] The
 * discountPercent property for the paymentTerm entity
 *
 * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
 * The calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentTerm entity
 *
 * @param {object} [body.address.shipmentMethod]
 *
 * @param {uuid} [body.address.shipmentMethod.id] The id property for the
 * shipmentMethod entity
 *
 * @param {string} [body.address.shipmentMethod.code] The code property for the
 * shipmentMethod entity
 *
 * @param {string} [body.address.shipmentMethod.displayName] The displayName
 * property for the shipmentMethod entity
 *
 * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the shipmentMethod entity
 *
 * @param {object} [body.address.paymentMethod]
 *
 * @param {uuid} [body.address.paymentMethod.id] The id property for the
 * paymentMethod entity
 *
 * @param {string} [body.address.paymentMethod.code] The code property for the
 * paymentMethod entity
 *
 * @param {string} [body.address.paymentMethod.displayName] The displayName
 * property for the paymentMethod entity
 *
 * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentMethod entity
 *
 * @param {string} [body.phoneNumber] The phoneNumber property for the employee
 * entity
 *
 * @param {string} [body.mobilePhone] The mobilePhone property for the employee
 * entity
 *
 * @param {string} [body.email] The email property for the employee entity
 *
 * @param {string} [body.personalEmail] The personalEmail property for the
 * employee entity
 *
 * @param {date} [body.employmentDate] The employmentDate property for the
 * employee entity
 *
 * @param {date} [body.terminationDate] The terminationDate property for the
 * employee entity
 *
 * @param {string} [body.status] The status property for the employee entity
 *
 * @param {date} [body.birthDate] The birthDate property for the employee
 * entity
 *
 * @param {string} [body.statisticsGroupCode] The statisticsGroupCode property
 * for the employee entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the employee entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} employeeId id for employee
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Employee} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchEmployeeById(body, companyId, employeeId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (employeeId === null || employeeId === undefined || typeof employeeId.valueOf() !== 'string' || !msRest.isValidUuid(employeeId)) {
      throw new Error('employeeId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees({employee_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{employee_id}', encodeURIComponent(employeeId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Employee']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of picture
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} employeeId id for employee
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetPictureForEmployeeOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPictureForEmployee(companyId, employeeId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (employeeId === null || employeeId === undefined || typeof employeeId.valueOf() !== 'string' || !msRest.isValidUuid(employeeId)) {
      throw new Error('employeeId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees({employee_id})/picture';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{employee_id}', encodeURIComponent(employeeId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetPictureForEmployeeOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an picture object for
 * Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} employeeId id for employee
 *
 * @param {uuid} pictureId id for picture
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Picture} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPictureForEmployeeById(companyId, employeeId, pictureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (employeeId === null || employeeId === undefined || typeof employeeId.valueOf() !== 'string' || !msRest.isValidUuid(employeeId)) {
      throw new Error('employeeId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pictureId === null || pictureId === undefined || typeof pictureId.valueOf() !== 'string' || !msRest.isValidUuid(pictureId)) {
      throw new Error('pictureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees({employee_id})/picture({picture_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{employee_id}', encodeURIComponent(employeeId.toString()));
  requestUrl = requestUrl.replace('{picture_id}', encodeURIComponent(pictureId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Picture']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an picture in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} employeeId id for employee
 *
 * @param {uuid} pictureId id for picture
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deletePictureForEmployeeByIdById(companyId, employeeId, pictureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (employeeId === null || employeeId === undefined || typeof employeeId.valueOf() !== 'string' || !msRest.isValidUuid(employeeId)) {
      throw new Error('employeeId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pictureId === null || pictureId === undefined || typeof pictureId.valueOf() !== 'string' || !msRest.isValidUuid(pictureId)) {
      throw new Error('pictureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees({employee_id})/picture({picture_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{employee_id}', encodeURIComponent(employeeId.toString()));
  requestUrl = requestUrl.replace('{picture_id}', encodeURIComponent(pictureId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified picture
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the picture entity
 *
 * @param {number} [body.width] The width property for the picture entity
 *
 * @param {number} [body.height] The height property for the picture entity
 *
 * @param {string} [body.contentType] The contentType property for the picture
 * entity
 *
 * @param {string} [body.content] The content property for the picture entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} employeeId id for employee
 *
 * @param {uuid} pictureId id for picture
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Picture} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchPictureForEmployeeByIdById(body, companyId, employeeId, pictureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (employeeId === null || employeeId === undefined || typeof employeeId.valueOf() !== 'string' || !msRest.isValidUuid(employeeId)) {
      throw new Error('employeeId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pictureId === null || pictureId === undefined || typeof pictureId.valueOf() !== 'string' || !msRest.isValidUuid(pictureId)) {
      throw new Error('pictureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees({employee_id})/picture({picture_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{employee_id}', encodeURIComponent(employeeId.toString()));
  requestUrl = requestUrl.replace('{picture_id}', encodeURIComponent(pictureId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Picture']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of defaultDimensions
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} employeeId id for employee
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetDefaultDimensionsForEmployeeOKResponse}
 *                      for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDefaultDimensionsForEmployee(companyId, employeeId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (employeeId === null || employeeId === undefined || typeof employeeId.valueOf() !== 'string' || !msRest.isValidUuid(employeeId)) {
      throw new Error('employeeId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees({employee_id})/defaultDimensions';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{employee_id}', encodeURIComponent(employeeId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetDefaultDimensionsForEmployeeOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a defaultDimensions in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionId] The dimensionId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionCode] The dimensionCode property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionValueCode] The dimensionValueCode property
 * for the defaultDimensions entity
 *
 * @param {string} [body.postingValidation] The postingValidation property for
 * the defaultDimensions entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} employeeId id for employee
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DefaultDimensions} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postDefaultDimensionsForEmployee(body, companyId, employeeId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (employeeId === null || employeeId === undefined || typeof employeeId.valueOf() !== 'string' || !msRest.isValidUuid(employeeId)) {
      throw new Error('employeeId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees({employee_id})/defaultDimensions';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{employee_id}', encodeURIComponent(employeeId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DefaultDimensions']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an defaultDimensions
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} employeeId id for employee
 *
 * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
 *
 * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DefaultDimensions} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDefaultDimensionsForEmployeeByDimensionIdByParentId(companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (employeeId === null || employeeId === undefined || typeof employeeId.valueOf() !== 'string' || !msRest.isValidUuid(employeeId)) {
      throw new Error('employeeId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsParentId === null || defaultDimensionsParentId === undefined || typeof defaultDimensionsParentId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsParentId)) {
      throw new Error('defaultDimensionsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsDimensionId === null || defaultDimensionsDimensionId === undefined || typeof defaultDimensionsDimensionId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsDimensionId)) {
      throw new Error('defaultDimensionsDimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees({employee_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{employee_id}', encodeURIComponent(employeeId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_parentId}', encodeURIComponent(defaultDimensionsParentId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_dimensionId}', encodeURIComponent(defaultDimensionsDimensionId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DefaultDimensions']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an defaultDimensions in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} employeeId id for employee
 *
 * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
 *
 * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteDefaultDimensionsForEmployeeByDimensionIdByParentIdById(companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (employeeId === null || employeeId === undefined || typeof employeeId.valueOf() !== 'string' || !msRest.isValidUuid(employeeId)) {
      throw new Error('employeeId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsParentId === null || defaultDimensionsParentId === undefined || typeof defaultDimensionsParentId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsParentId)) {
      throw new Error('defaultDimensionsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsDimensionId === null || defaultDimensionsDimensionId === undefined || typeof defaultDimensionsDimensionId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsDimensionId)) {
      throw new Error('defaultDimensionsDimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees({employee_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{employee_id}', encodeURIComponent(employeeId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_parentId}', encodeURIComponent(defaultDimensionsParentId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_dimensionId}', encodeURIComponent(defaultDimensionsDimensionId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified defaultDimensions
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionId] The dimensionId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionCode] The dimensionCode property for the
 * defaultDimensions entity
 *
 * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
 * defaultDimensions entity
 *
 * @param {string} [body.dimensionValueCode] The dimensionValueCode property
 * for the defaultDimensions entity
 *
 * @param {string} [body.postingValidation] The postingValidation property for
 * the defaultDimensions entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} employeeId id for employee
 *
 * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
 *
 * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DefaultDimensions} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchDefaultDimensionsForEmployeeByDimensionIdByParentIdById(body, companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (employeeId === null || employeeId === undefined || typeof employeeId.valueOf() !== 'string' || !msRest.isValidUuid(employeeId)) {
      throw new Error('employeeId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsParentId === null || defaultDimensionsParentId === undefined || typeof defaultDimensionsParentId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsParentId)) {
      throw new Error('defaultDimensionsParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (defaultDimensionsDimensionId === null || defaultDimensionsDimensionId === undefined || typeof defaultDimensionsDimensionId.valueOf() !== 'string' || !msRest.isValidUuid(defaultDimensionsDimensionId)) {
      throw new Error('defaultDimensionsDimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees({employee_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{employee_id}', encodeURIComponent(employeeId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_parentId}', encodeURIComponent(defaultDimensionsParentId.toString()));
  requestUrl = requestUrl.replace('{defaultDimensions_dimensionId}', encodeURIComponent(defaultDimensionsDimensionId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DefaultDimensions']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of timeRegistrationEntries
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} employeeId id for employee
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link
 *                      GetTimeRegistrationEntriesForEmployeeOKResponse} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getTimeRegistrationEntriesForEmployee(companyId, employeeId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (employeeId === null || employeeId === undefined || typeof employeeId.valueOf() !== 'string' || !msRest.isValidUuid(employeeId)) {
      throw new Error('employeeId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees({employee_id})/timeRegistrationEntries';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{employee_id}', encodeURIComponent(employeeId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetTimeRegistrationEntriesForEmployeeOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a timeRegistrationEntry in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the timeRegistrationEntry entity
 *
 * @param {uuid} [body.employeeId] The employeeId property for the
 * timeRegistrationEntry entity
 *
 * @param {string} [body.employeeNumber] The employeeNumber property for the
 * timeRegistrationEntry entity
 *
 * @param {number} [body.lineNumber] The lineNumber property for the
 * timeRegistrationEntry entity
 *
 * @param {date} [body.date] The date property for the timeRegistrationEntry
 * entity
 *
 * @param {number} [body.quantity] The quantity property for the
 * timeRegistrationEntry entity
 *
 * @param {string} [body.status] The status property for the
 * timeRegistrationEntry entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * timeRegistrationEntry entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {date} [body.lastModfiedDateTime] The lastModfiedDateTime property
 * for the timeRegistrationEntry entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} employeeId id for employee
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link TimeRegistrationEntry} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postTimeRegistrationEntryForEmployee(body, companyId, employeeId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (employeeId === null || employeeId === undefined || typeof employeeId.valueOf() !== 'string' || !msRest.isValidUuid(employeeId)) {
      throw new Error('employeeId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees({employee_id})/timeRegistrationEntries';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{employee_id}', encodeURIComponent(employeeId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['TimeRegistrationEntry']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an
 * timeRegistrationEntry object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} employeeId id for employee
 *
 * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link TimeRegistrationEntry} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getTimeRegistrationEntryForEmployeeById(companyId, employeeId, timeRegistrationEntryId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (employeeId === null || employeeId === undefined || typeof employeeId.valueOf() !== 'string' || !msRest.isValidUuid(employeeId)) {
      throw new Error('employeeId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (timeRegistrationEntryId === null || timeRegistrationEntryId === undefined || typeof timeRegistrationEntryId.valueOf() !== 'string' || !msRest.isValidUuid(timeRegistrationEntryId)) {
      throw new Error('timeRegistrationEntryId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees({employee_id})/timeRegistrationEntries({timeRegistrationEntry_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{employee_id}', encodeURIComponent(employeeId.toString()));
  requestUrl = requestUrl.replace('{timeRegistrationEntry_id}', encodeURIComponent(timeRegistrationEntryId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['TimeRegistrationEntry']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an timeRegistrationEntry in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} employeeId id for employee
 *
 * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteTimeRegistrationEntryForEmployeeByIdById(companyId, employeeId, timeRegistrationEntryId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (employeeId === null || employeeId === undefined || typeof employeeId.valueOf() !== 'string' || !msRest.isValidUuid(employeeId)) {
      throw new Error('employeeId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (timeRegistrationEntryId === null || timeRegistrationEntryId === undefined || typeof timeRegistrationEntryId.valueOf() !== 'string' || !msRest.isValidUuid(timeRegistrationEntryId)) {
      throw new Error('timeRegistrationEntryId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees({employee_id})/timeRegistrationEntries({timeRegistrationEntry_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{employee_id}', encodeURIComponent(employeeId.toString()));
  requestUrl = requestUrl.replace('{timeRegistrationEntry_id}', encodeURIComponent(timeRegistrationEntryId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified timeRegistrationEntry
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the timeRegistrationEntry entity
 *
 * @param {uuid} [body.employeeId] The employeeId property for the
 * timeRegistrationEntry entity
 *
 * @param {string} [body.employeeNumber] The employeeNumber property for the
 * timeRegistrationEntry entity
 *
 * @param {number} [body.lineNumber] The lineNumber property for the
 * timeRegistrationEntry entity
 *
 * @param {date} [body.date] The date property for the timeRegistrationEntry
 * entity
 *
 * @param {number} [body.quantity] The quantity property for the
 * timeRegistrationEntry entity
 *
 * @param {string} [body.status] The status property for the
 * timeRegistrationEntry entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * timeRegistrationEntry entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {date} [body.lastModfiedDateTime] The lastModfiedDateTime property
 * for the timeRegistrationEntry entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} employeeId id for employee
 *
 * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link TimeRegistrationEntry} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchTimeRegistrationEntryForEmployeeByIdById(body, companyId, employeeId, timeRegistrationEntryId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (employeeId === null || employeeId === undefined || typeof employeeId.valueOf() !== 'string' || !msRest.isValidUuid(employeeId)) {
      throw new Error('employeeId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (timeRegistrationEntryId === null || timeRegistrationEntryId === undefined || typeof timeRegistrationEntryId.valueOf() !== 'string' || !msRest.isValidUuid(timeRegistrationEntryId)) {
      throw new Error('timeRegistrationEntryId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/employees({employee_id})/timeRegistrationEntries({timeRegistrationEntry_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{employee_id}', encodeURIComponent(employeeId.toString()));
  requestUrl = requestUrl.replace('{timeRegistrationEntry_id}', encodeURIComponent(timeRegistrationEntryId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['TimeRegistrationEntry']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of timeRegistrationEntries
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetTimeRegistrationEntriesOKResponse} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getTimeRegistrationEntries(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/timeRegistrationEntries';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetTimeRegistrationEntriesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a timeRegistrationEntry in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the timeRegistrationEntry entity
 *
 * @param {uuid} [body.employeeId] The employeeId property for the
 * timeRegistrationEntry entity
 *
 * @param {string} [body.employeeNumber] The employeeNumber property for the
 * timeRegistrationEntry entity
 *
 * @param {number} [body.lineNumber] The lineNumber property for the
 * timeRegistrationEntry entity
 *
 * @param {date} [body.date] The date property for the timeRegistrationEntry
 * entity
 *
 * @param {number} [body.quantity] The quantity property for the
 * timeRegistrationEntry entity
 *
 * @param {string} [body.status] The status property for the
 * timeRegistrationEntry entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * timeRegistrationEntry entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {date} [body.lastModfiedDateTime] The lastModfiedDateTime property
 * for the timeRegistrationEntry entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link TimeRegistrationEntry} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postTimeRegistrationEntry(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/timeRegistrationEntries';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['TimeRegistrationEntry']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an
 * timeRegistrationEntry object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link TimeRegistrationEntry} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getTimeRegistrationEntryById(companyId, timeRegistrationEntryId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (timeRegistrationEntryId === null || timeRegistrationEntryId === undefined || typeof timeRegistrationEntryId.valueOf() !== 'string' || !msRest.isValidUuid(timeRegistrationEntryId)) {
      throw new Error('timeRegistrationEntryId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/timeRegistrationEntries({timeRegistrationEntry_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{timeRegistrationEntry_id}', encodeURIComponent(timeRegistrationEntryId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['TimeRegistrationEntry']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an timeRegistrationEntry in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteTimeRegistrationEntryById(companyId, timeRegistrationEntryId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (timeRegistrationEntryId === null || timeRegistrationEntryId === undefined || typeof timeRegistrationEntryId.valueOf() !== 'string' || !msRest.isValidUuid(timeRegistrationEntryId)) {
      throw new Error('timeRegistrationEntryId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/timeRegistrationEntries({timeRegistrationEntry_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{timeRegistrationEntry_id}', encodeURIComponent(timeRegistrationEntryId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified timeRegistrationEntry
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the timeRegistrationEntry entity
 *
 * @param {uuid} [body.employeeId] The employeeId property for the
 * timeRegistrationEntry entity
 *
 * @param {string} [body.employeeNumber] The employeeNumber property for the
 * timeRegistrationEntry entity
 *
 * @param {number} [body.lineNumber] The lineNumber property for the
 * timeRegistrationEntry entity
 *
 * @param {date} [body.date] The date property for the timeRegistrationEntry
 * entity
 *
 * @param {number} [body.quantity] The quantity property for the
 * timeRegistrationEntry entity
 *
 * @param {string} [body.status] The status property for the
 * timeRegistrationEntry entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * timeRegistrationEntry entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {date} [body.lastModfiedDateTime] The lastModfiedDateTime property
 * for the timeRegistrationEntry entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link TimeRegistrationEntry} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchTimeRegistrationEntryById(body, companyId, timeRegistrationEntryId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (timeRegistrationEntryId === null || timeRegistrationEntryId === undefined || typeof timeRegistrationEntryId.valueOf() !== 'string' || !msRest.isValidUuid(timeRegistrationEntryId)) {
      throw new Error('timeRegistrationEntryId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/timeRegistrationEntries({timeRegistrationEntry_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{timeRegistrationEntry_id}', encodeURIComponent(timeRegistrationEntryId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['TimeRegistrationEntry']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of generalLedgerEntries
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetGeneralLedgerEntriesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getGeneralLedgerEntries(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/generalLedgerEntries';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetGeneralLedgerEntriesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an generalLedgerEntry
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {number} generalLedgerEntryId id for generalLedgerEntry
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GeneralLedgerEntry} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getGeneralLedgerEntryById(companyId, generalLedgerEntryId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (generalLedgerEntryId === null || generalLedgerEntryId === undefined || typeof generalLedgerEntryId !== 'number') {
      throw new Error('generalLedgerEntryId cannot be null or undefined and it must be of type number.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/generalLedgerEntries({generalLedgerEntry_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{generalLedgerEntry_id}', encodeURIComponent(generalLedgerEntryId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GeneralLedgerEntry']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of currencies
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetCurrenciesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCurrencies(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/currencies';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetCurrenciesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a currency in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the currency entity
 *
 * @param {string} [body.code] The code property for the currency entity
 *
 * @param {string} [body.displayName] The displayName property for the currency
 * entity
 *
 * @param {string} [body.symbol] The symbol property for the currency entity
 *
 * @param {string} [body.amountDecimalPlaces] The amountDecimalPlaces property
 * for the currency entity
 *
 * @param {number} [body.amountRoundingPrecision] The amountRoundingPrecision
 * property for the currency entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the currency entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Currency} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postCurrency(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/currencies';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Currency']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an currency object for
 * Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} currencyId id for currency
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Currency} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCurrencyById(companyId, currencyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (currencyId === null || currencyId === undefined || typeof currencyId.valueOf() !== 'string' || !msRest.isValidUuid(currencyId)) {
      throw new Error('currencyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/currencies({currency_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{currency_id}', encodeURIComponent(currencyId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Currency']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an currency in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} currencyId id for currency
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteCurrencyById(companyId, currencyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (currencyId === null || currencyId === undefined || typeof currencyId.valueOf() !== 'string' || !msRest.isValidUuid(currencyId)) {
      throw new Error('currencyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/currencies({currency_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{currency_id}', encodeURIComponent(currencyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified currency
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the currency entity
 *
 * @param {string} [body.code] The code property for the currency entity
 *
 * @param {string} [body.displayName] The displayName property for the currency
 * entity
 *
 * @param {string} [body.symbol] The symbol property for the currency entity
 *
 * @param {string} [body.amountDecimalPlaces] The amountDecimalPlaces property
 * for the currency entity
 *
 * @param {number} [body.amountRoundingPrecision] The amountRoundingPrecision
 * property for the currency entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the currency entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} currencyId id for currency
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Currency} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchCurrencyById(body, companyId, currencyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (currencyId === null || currencyId === undefined || typeof currencyId.valueOf() !== 'string' || !msRest.isValidUuid(currencyId)) {
      throw new Error('currencyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/currencies({currency_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{currency_id}', encodeURIComponent(currencyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Currency']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of paymentMethods
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetPaymentMethodsOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPaymentMethods(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/paymentMethods';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetPaymentMethodsOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a paymentMethod in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the paymentMethod entity
 *
 * @param {string} [body.code] The code property for the paymentMethod entity
 *
 * @param {string} [body.displayName] The displayName property for the
 * paymentMethod entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the paymentMethod entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PaymentMethod} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postPaymentMethod(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/paymentMethods';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PaymentMethod']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an paymentMethod
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} paymentMethodId id for paymentMethod
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PaymentMethod} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPaymentMethodById(companyId, paymentMethodId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (paymentMethodId === null || paymentMethodId === undefined || typeof paymentMethodId.valueOf() !== 'string' || !msRest.isValidUuid(paymentMethodId)) {
      throw new Error('paymentMethodId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/paymentMethods({paymentMethod_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{paymentMethod_id}', encodeURIComponent(paymentMethodId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PaymentMethod']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an paymentMethod in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} paymentMethodId id for paymentMethod
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deletePaymentMethodById(companyId, paymentMethodId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (paymentMethodId === null || paymentMethodId === undefined || typeof paymentMethodId.valueOf() !== 'string' || !msRest.isValidUuid(paymentMethodId)) {
      throw new Error('paymentMethodId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/paymentMethods({paymentMethod_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{paymentMethod_id}', encodeURIComponent(paymentMethodId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified paymentMethod
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the paymentMethod entity
 *
 * @param {string} [body.code] The code property for the paymentMethod entity
 *
 * @param {string} [body.displayName] The displayName property for the
 * paymentMethod entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the paymentMethod entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} paymentMethodId id for paymentMethod
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PaymentMethod} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchPaymentMethodById(body, companyId, paymentMethodId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (paymentMethodId === null || paymentMethodId === undefined || typeof paymentMethodId.valueOf() !== 'string' || !msRest.isValidUuid(paymentMethodId)) {
      throw new Error('paymentMethodId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/paymentMethods({paymentMethod_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{paymentMethod_id}', encodeURIComponent(paymentMethodId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PaymentMethod']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of dimensions
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetDimensionsOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDimensions(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/dimensions';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetDimensionsOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an dimension object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} dimensionId id for dimension
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Dimension} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDimensionById(companyId, dimensionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (dimensionId === null || dimensionId === undefined || typeof dimensionId.valueOf() !== 'string' || !msRest.isValidUuid(dimensionId)) {
      throw new Error('dimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/dimensions({dimension_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{dimension_id}', encodeURIComponent(dimensionId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Dimension']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of dimensionValues
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} dimensionId id for dimension
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetDimensionValuesForDimensionOKResponse}
 *                      for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDimensionValuesForDimension(companyId, dimensionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (dimensionId === null || dimensionId === undefined || typeof dimensionId.valueOf() !== 'string' || !msRest.isValidUuid(dimensionId)) {
      throw new Error('dimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/dimensions({dimension_id})/dimensionValues';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{dimension_id}', encodeURIComponent(dimensionId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetDimensionValuesForDimensionOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an dimensionValue
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} dimensionId id for dimension
 *
 * @param {uuid} dimensionValueId id for dimensionValue
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DimensionValue} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDimensionValueForDimensionById(companyId, dimensionId, dimensionValueId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (dimensionId === null || dimensionId === undefined || typeof dimensionId.valueOf() !== 'string' || !msRest.isValidUuid(dimensionId)) {
      throw new Error('dimensionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (dimensionValueId === null || dimensionValueId === undefined || typeof dimensionValueId.valueOf() !== 'string' || !msRest.isValidUuid(dimensionValueId)) {
      throw new Error('dimensionValueId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/dimensions({dimension_id})/dimensionValues({dimensionValue_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{dimension_id}', encodeURIComponent(dimensionId.toString()));
  requestUrl = requestUrl.replace('{dimensionValue_id}', encodeURIComponent(dimensionValueId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DimensionValue']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of dimensionValues
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetDimensionValuesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDimensionValues(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/dimensionValues';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetDimensionValuesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an dimensionValue
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} dimensionValueId id for dimensionValue
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DimensionValue} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDimensionValueById(companyId, dimensionValueId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (dimensionValueId === null || dimensionValueId === undefined || typeof dimensionValueId.valueOf() !== 'string' || !msRest.isValidUuid(dimensionValueId)) {
      throw new Error('dimensionValueId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/dimensionValues({dimensionValue_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{dimensionValue_id}', encodeURIComponent(dimensionValueId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DimensionValue']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of dimensionLines
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetDimensionLinesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDimensionLines(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/dimensionLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetDimensionLinesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a dimensionLine in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the dimensionLine
 * entity
 *
 * @param {uuid} [body.id] The id property for the dimensionLine entity
 *
 * @param {string} [body.code] The code property for the dimensionLine entity
 *
 * @param {string} [body.displayName] The displayName property for the
 * dimensionLine entity
 *
 * @param {uuid} [body.valueId] The valueId property for the dimensionLine
 * entity
 *
 * @param {string} [body.valueCode] The valueCode property for the
 * dimensionLine entity
 *
 * @param {string} [body.valueDisplayName] The valueDisplayName property for
 * the dimensionLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DimensionLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postDimensionLine(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/dimensionLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DimensionLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an dimensionLine
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} dimensionLineParentId parentId for dimensionLine
 *
 * @param {uuid} dimensionLineId id for dimensionLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DimensionLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDimensionLineByIdByParentId(companyId, dimensionLineParentId, dimensionLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (dimensionLineParentId === null || dimensionLineParentId === undefined || typeof dimensionLineParentId.valueOf() !== 'string' || !msRest.isValidUuid(dimensionLineParentId)) {
      throw new Error('dimensionLineParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (dimensionLineId === null || dimensionLineId === undefined || typeof dimensionLineId.valueOf() !== 'string' || !msRest.isValidUuid(dimensionLineId)) {
      throw new Error('dimensionLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/dimensionLines({dimensionLine_parentId},{dimensionLine_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{dimensionLine_parentId}', encodeURIComponent(dimensionLineParentId.toString()));
  requestUrl = requestUrl.replace('{dimensionLine_id}', encodeURIComponent(dimensionLineId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DimensionLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an dimensionLine in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} dimensionLineParentId parentId for dimensionLine
 *
 * @param {uuid} dimensionLineId id for dimensionLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteDimensionLineByIdByParentId(companyId, dimensionLineParentId, dimensionLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (dimensionLineParentId === null || dimensionLineParentId === undefined || typeof dimensionLineParentId.valueOf() !== 'string' || !msRest.isValidUuid(dimensionLineParentId)) {
      throw new Error('dimensionLineParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (dimensionLineId === null || dimensionLineId === undefined || typeof dimensionLineId.valueOf() !== 'string' || !msRest.isValidUuid(dimensionLineId)) {
      throw new Error('dimensionLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/dimensionLines({dimensionLine_parentId},{dimensionLine_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{dimensionLine_parentId}', encodeURIComponent(dimensionLineParentId.toString()));
  requestUrl = requestUrl.replace('{dimensionLine_id}', encodeURIComponent(dimensionLineId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified dimensionLine
 *
 * @param {object} body
 *
 * @param {uuid} [body.parentId] The parentId property for the dimensionLine
 * entity
 *
 * @param {uuid} [body.id] The id property for the dimensionLine entity
 *
 * @param {string} [body.code] The code property for the dimensionLine entity
 *
 * @param {string} [body.displayName] The displayName property for the
 * dimensionLine entity
 *
 * @param {uuid} [body.valueId] The valueId property for the dimensionLine
 * entity
 *
 * @param {string} [body.valueCode] The valueCode property for the
 * dimensionLine entity
 *
 * @param {string} [body.valueDisplayName] The valueDisplayName property for
 * the dimensionLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} dimensionLineParentId parentId for dimensionLine
 *
 * @param {uuid} dimensionLineId id for dimensionLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DimensionLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchDimensionLineByIdByParentId(body, companyId, dimensionLineParentId, dimensionLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (dimensionLineParentId === null || dimensionLineParentId === undefined || typeof dimensionLineParentId.valueOf() !== 'string' || !msRest.isValidUuid(dimensionLineParentId)) {
      throw new Error('dimensionLineParentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (dimensionLineId === null || dimensionLineId === undefined || typeof dimensionLineId.valueOf() !== 'string' || !msRest.isValidUuid(dimensionLineId)) {
      throw new Error('dimensionLineId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/dimensionLines({dimensionLine_parentId},{dimensionLine_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{dimensionLine_parentId}', encodeURIComponent(dimensionLineParentId.toString()));
  requestUrl = requestUrl.replace('{dimensionLine_id}', encodeURIComponent(dimensionLineId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DimensionLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of paymentTerms
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetPaymentTermsOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPaymentTerms(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/paymentTerms';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetPaymentTermsOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a paymentTerm in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the paymentTerm entity
 *
 * @param {string} [body.code] The code property for the paymentTerm entity
 *
 * @param {string} [body.displayName] The displayName property for the
 * paymentTerm entity
 *
 * @param {string} [body.dueDateCalculation] The dueDateCalculation property
 * for the paymentTerm entity
 *
 * @param {string} [body.discountDateCalculation] The discountDateCalculation
 * property for the paymentTerm entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * paymentTerm entity
 *
 * @param {boolean} [body.calculateDiscountOnCreditMemos] The
 * calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the paymentTerm entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PaymentTerm} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postPaymentTerm(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/paymentTerms';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PaymentTerm']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an paymentTerm object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} paymentTermId id for paymentTerm
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PaymentTerm} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPaymentTermById(companyId, paymentTermId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (paymentTermId === null || paymentTermId === undefined || typeof paymentTermId.valueOf() !== 'string' || !msRest.isValidUuid(paymentTermId)) {
      throw new Error('paymentTermId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/paymentTerms({paymentTerm_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{paymentTerm_id}', encodeURIComponent(paymentTermId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PaymentTerm']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an paymentTerm in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} paymentTermId id for paymentTerm
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deletePaymentTermById(companyId, paymentTermId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (paymentTermId === null || paymentTermId === undefined || typeof paymentTermId.valueOf() !== 'string' || !msRest.isValidUuid(paymentTermId)) {
      throw new Error('paymentTermId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/paymentTerms({paymentTerm_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{paymentTerm_id}', encodeURIComponent(paymentTermId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified paymentTerm
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the paymentTerm entity
 *
 * @param {string} [body.code] The code property for the paymentTerm entity
 *
 * @param {string} [body.displayName] The displayName property for the
 * paymentTerm entity
 *
 * @param {string} [body.dueDateCalculation] The dueDateCalculation property
 * for the paymentTerm entity
 *
 * @param {string} [body.discountDateCalculation] The discountDateCalculation
 * property for the paymentTerm entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * paymentTerm entity
 *
 * @param {boolean} [body.calculateDiscountOnCreditMemos] The
 * calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the paymentTerm entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} paymentTermId id for paymentTerm
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PaymentTerm} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchPaymentTermById(body, companyId, paymentTermId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (paymentTermId === null || paymentTermId === undefined || typeof paymentTermId.valueOf() !== 'string' || !msRest.isValidUuid(paymentTermId)) {
      throw new Error('paymentTermId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/paymentTerms({paymentTerm_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{paymentTerm_id}', encodeURIComponent(paymentTermId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PaymentTerm']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of shipmentMethods
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetShipmentMethodsOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getShipmentMethods(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/shipmentMethods';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetShipmentMethodsOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a shipmentMethod in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the shipmentMethod entity
 *
 * @param {string} [body.code] The code property for the shipmentMethod entity
 *
 * @param {string} [body.displayName] The displayName property for the
 * shipmentMethod entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the shipmentMethod entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ShipmentMethod} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postShipmentMethod(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/shipmentMethods';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ShipmentMethod']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an shipmentMethod
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} shipmentMethodId id for shipmentMethod
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ShipmentMethod} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getShipmentMethodById(companyId, shipmentMethodId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (shipmentMethodId === null || shipmentMethodId === undefined || typeof shipmentMethodId.valueOf() !== 'string' || !msRest.isValidUuid(shipmentMethodId)) {
      throw new Error('shipmentMethodId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/shipmentMethods({shipmentMethod_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{shipmentMethod_id}', encodeURIComponent(shipmentMethodId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ShipmentMethod']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an shipmentMethod in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} shipmentMethodId id for shipmentMethod
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteShipmentMethodById(companyId, shipmentMethodId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (shipmentMethodId === null || shipmentMethodId === undefined || typeof shipmentMethodId.valueOf() !== 'string' || !msRest.isValidUuid(shipmentMethodId)) {
      throw new Error('shipmentMethodId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/shipmentMethods({shipmentMethod_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{shipmentMethod_id}', encodeURIComponent(shipmentMethodId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified shipmentMethod
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the shipmentMethod entity
 *
 * @param {string} [body.code] The code property for the shipmentMethod entity
 *
 * @param {string} [body.displayName] The displayName property for the
 * shipmentMethod entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the shipmentMethod entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} shipmentMethodId id for shipmentMethod
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ShipmentMethod} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchShipmentMethodById(body, companyId, shipmentMethodId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (shipmentMethodId === null || shipmentMethodId === undefined || typeof shipmentMethodId.valueOf() !== 'string' || !msRest.isValidUuid(shipmentMethodId)) {
      throw new Error('shipmentMethodId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/shipmentMethods({shipmentMethod_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{shipmentMethod_id}', encodeURIComponent(shipmentMethodId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ShipmentMethod']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of itemCategories
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetItemCategoriesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getItemCategories(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/itemCategories';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetItemCategoriesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a itemCategory in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the itemCategory entity
 *
 * @param {string} [body.code] The code property for the itemCategory entity
 *
 * @param {string} [body.displayName] The displayName property for the
 * itemCategory entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the itemCategory entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ItemCategory} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postItemCategory(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/itemCategories';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ItemCategory']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an itemCategory object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} itemCategoryId id for itemCategory
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ItemCategory} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getItemCategoryById(companyId, itemCategoryId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (itemCategoryId === null || itemCategoryId === undefined || typeof itemCategoryId.valueOf() !== 'string' || !msRest.isValidUuid(itemCategoryId)) {
      throw new Error('itemCategoryId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/itemCategories({itemCategory_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{itemCategory_id}', encodeURIComponent(itemCategoryId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ItemCategory']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an itemCategory in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} itemCategoryId id for itemCategory
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteItemCategoryById(companyId, itemCategoryId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (itemCategoryId === null || itemCategoryId === undefined || typeof itemCategoryId.valueOf() !== 'string' || !msRest.isValidUuid(itemCategoryId)) {
      throw new Error('itemCategoryId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/itemCategories({itemCategory_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{itemCategory_id}', encodeURIComponent(itemCategoryId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified itemCategory
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the itemCategory entity
 *
 * @param {string} [body.code] The code property for the itemCategory entity
 *
 * @param {string} [body.displayName] The displayName property for the
 * itemCategory entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the itemCategory entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} itemCategoryId id for itemCategory
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ItemCategory} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchItemCategoryById(body, companyId, itemCategoryId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (itemCategoryId === null || itemCategoryId === undefined || typeof itemCategoryId.valueOf() !== 'string' || !msRest.isValidUuid(itemCategoryId)) {
      throw new Error('itemCategoryId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/itemCategories({itemCategory_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{itemCategory_id}', encodeURIComponent(itemCategoryId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ItemCategory']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of cashFlowStatement
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetCashFlowStatementOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCashFlowStatement(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/cashFlowStatement';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetCashFlowStatementOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an cashFlowStatement
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {number} cashFlowStatementLineNumber lineNumber for cashFlowStatement
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CashFlowStatement} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCashFlowStatementByLineNumber(companyId, cashFlowStatementLineNumber, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (cashFlowStatementLineNumber === null || cashFlowStatementLineNumber === undefined || typeof cashFlowStatementLineNumber !== 'number') {
      throw new Error('cashFlowStatementLineNumber cannot be null or undefined and it must be of type number.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/cashFlowStatement({cashFlowStatement_lineNumber})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{cashFlowStatement_lineNumber}', encodeURIComponent(cashFlowStatementLineNumber.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CashFlowStatement']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of countriesRegions
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetCountriesRegionsOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCountriesRegions(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/countriesRegions';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetCountriesRegionsOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a countryRegion in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the countryRegion entity
 *
 * @param {string} [body.code] The code property for the countryRegion entity
 *
 * @param {string} [body.displayName] The displayName property for the
 * countryRegion entity
 *
 * @param {string} [body.addressFormat] The addressFormat property for the
 * countryRegion entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the countryRegion entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CountryRegion} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postCountryRegion(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/countriesRegions';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CountryRegion']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an countryRegion
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} countryRegionId id for countryRegion
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CountryRegion} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCountryRegionById(companyId, countryRegionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (countryRegionId === null || countryRegionId === undefined || typeof countryRegionId.valueOf() !== 'string' || !msRest.isValidUuid(countryRegionId)) {
      throw new Error('countryRegionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/countriesRegions({countryRegion_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{countryRegion_id}', encodeURIComponent(countryRegionId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CountryRegion']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an countryRegion in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} countryRegionId id for countryRegion
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteCountryRegionById(companyId, countryRegionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (countryRegionId === null || countryRegionId === undefined || typeof countryRegionId.valueOf() !== 'string' || !msRest.isValidUuid(countryRegionId)) {
      throw new Error('countryRegionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/countriesRegions({countryRegion_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{countryRegion_id}', encodeURIComponent(countryRegionId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified countryRegion
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the countryRegion entity
 *
 * @param {string} [body.code] The code property for the countryRegion entity
 *
 * @param {string} [body.displayName] The displayName property for the
 * countryRegion entity
 *
 * @param {string} [body.addressFormat] The addressFormat property for the
 * countryRegion entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the countryRegion entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} countryRegionId id for countryRegion
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CountryRegion} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchCountryRegionById(body, companyId, countryRegionId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (countryRegionId === null || countryRegionId === undefined || typeof countryRegionId.valueOf() !== 'string' || !msRest.isValidUuid(countryRegionId)) {
      throw new Error('countryRegionId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/countriesRegions({countryRegion_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{countryRegion_id}', encodeURIComponent(countryRegionId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CountryRegion']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of salesOrders
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetSalesOrdersOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesOrders(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesOrders';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetSalesOrdersOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a salesOrder in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the salesOrder entity
 *
 * @param {string} [body.number] The number property for the salesOrder entity
 *
 * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
 * property for the salesOrder entity
 *
 * @param {date} [body.orderDate] The orderDate property for the salesOrder
 * entity
 *
 * @param {uuid} [body.customerId] The customerId property for the salesOrder
 * entity
 *
 * @param {string} [body.contactId] The contactId property for the salesOrder
 * entity
 *
 * @param {string} [body.customerNumber] The customerNumber property for the
 * salesOrder entity
 *
 * @param {string} [body.customerName] The customerName property for the
 * salesOrder entity
 *
 * @param {string} [body.billToName] The billToName property for the salesOrder
 * entity
 *
 * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
 * salesOrder entity
 *
 * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
 * property for the salesOrder entity
 *
 * @param {string} [body.shipToName] The shipToName property for the salesOrder
 * entity
 *
 * @param {string} [body.shipToContact] The shipToContact property for the
 * salesOrder entity
 *
 * @param {object} [body.sellingPostalAddress]
 *
 * @param {object} [body.billingPostalAddress]
 *
 * @param {object} [body.shippingPostalAddress]
 *
 * @param {string} [body.shippingPostalAddress.street] The street property for
 * the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.city] The city property for the
 * postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.state] The state property for
 * the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.countryLetterCode] The
 * countryLetterCode property for the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
 * property for the postaladdresstype entity
 *
 * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
 *
 * @param {array} [body.shippingPostalAddress.picture]
 *
 * @param {array} [body.shippingPostalAddress.defaultDimensions]
 *
 * @param {object} [body.shippingPostalAddress.currency]
 *
 * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
 * the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.code] The code property
 * for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.displayName] The
 * displayName property for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
 * property for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
 * The amountDecimalPlaces property for the currency entity
 *
 * @param {number}
 * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
 * amountRoundingPrecision property for the currency entity
 *
 * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
 * lastModifiedDateTime property for the currency entity
 *
 * @param {object} [body.shippingPostalAddress.paymentTerm]
 *
 * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
 * for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
 * property for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
 * displayName property for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
 * The dueDateCalculation property for the paymentTerm entity
 *
 * @param {string}
 * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
 * discountDateCalculation property for the paymentTerm entity
 *
 * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
 * discountPercent property for the paymentTerm entity
 *
 * @param {boolean}
 * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
 * calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
 * The lastModifiedDateTime property for the paymentTerm entity
 *
 * @param {object} [body.shippingPostalAddress.shipmentMethod]
 *
 * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
 * for the shipmentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
 * property for the shipmentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
 * displayName property for the shipmentMethod entity
 *
 * @param {date}
 * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the shipmentMethod entity
 *
 * @param {object} [body.shippingPostalAddress.paymentMethod]
 *
 * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
 * for the paymentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
 * property for the paymentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
 * displayName property for the paymentMethod entity
 *
 * @param {date}
 * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentMethod entity
 *
 * @param {uuid} [body.currencyId] The currencyId property for the salesOrder
 * entity
 *
 * @param {string} [body.currencyCode] The currencyCode property for the
 * salesOrder entity
 *
 * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
 * the salesOrder entity
 *
 * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
 * salesOrder entity
 *
 * @param {string} [body.salesperson] The salesperson property for the
 * salesOrder entity
 *
 * @param {boolean} [body.partialShipping] The partialShipping property for the
 * salesOrder entity
 *
 * @param {date} [body.requestedDeliveryDate] The requestedDeliveryDate
 * property for the salesOrder entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesOrder entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesOrder entity
 *
 * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
 * property for the salesOrder entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesOrder entity
 *
 * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
 * property for the salesOrder entity
 *
 * @param {boolean} [body.fullyShipped] The fullyShipped property for the
 * salesOrder entity
 *
 * @param {string} [body.status] The status property for the salesOrder entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the salesOrder entity
 *
 * @param {string} [body.phoneNumber] The phoneNumber property for the
 * salesOrder entity
 *
 * @param {string} [body.email] The email property for the salesOrder entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesOrder} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postSalesOrder(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesOrders';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesOrder']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an salesOrder object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesOrderId id for salesOrder
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesOrder} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesOrderById(companyId, salesOrderId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesOrderId === null || salesOrderId === undefined || typeof salesOrderId.valueOf() !== 'string' || !msRest.isValidUuid(salesOrderId)) {
      throw new Error('salesOrderId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesOrders({salesOrder_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesOrder_id}', encodeURIComponent(salesOrderId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesOrder']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an salesOrder in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesOrderId id for salesOrder
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteSalesOrderById(companyId, salesOrderId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesOrderId === null || salesOrderId === undefined || typeof salesOrderId.valueOf() !== 'string' || !msRest.isValidUuid(salesOrderId)) {
      throw new Error('salesOrderId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesOrders({salesOrder_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesOrder_id}', encodeURIComponent(salesOrderId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified salesOrder
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the salesOrder entity
 *
 * @param {string} [body.number] The number property for the salesOrder entity
 *
 * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
 * property for the salesOrder entity
 *
 * @param {date} [body.orderDate] The orderDate property for the salesOrder
 * entity
 *
 * @param {uuid} [body.customerId] The customerId property for the salesOrder
 * entity
 *
 * @param {string} [body.contactId] The contactId property for the salesOrder
 * entity
 *
 * @param {string} [body.customerNumber] The customerNumber property for the
 * salesOrder entity
 *
 * @param {string} [body.customerName] The customerName property for the
 * salesOrder entity
 *
 * @param {string} [body.billToName] The billToName property for the salesOrder
 * entity
 *
 * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
 * salesOrder entity
 *
 * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
 * property for the salesOrder entity
 *
 * @param {string} [body.shipToName] The shipToName property for the salesOrder
 * entity
 *
 * @param {string} [body.shipToContact] The shipToContact property for the
 * salesOrder entity
 *
 * @param {object} [body.sellingPostalAddress]
 *
 * @param {object} [body.billingPostalAddress]
 *
 * @param {object} [body.shippingPostalAddress]
 *
 * @param {string} [body.shippingPostalAddress.street] The street property for
 * the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.city] The city property for the
 * postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.state] The state property for
 * the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.countryLetterCode] The
 * countryLetterCode property for the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
 * property for the postaladdresstype entity
 *
 * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
 *
 * @param {array} [body.shippingPostalAddress.picture]
 *
 * @param {array} [body.shippingPostalAddress.defaultDimensions]
 *
 * @param {object} [body.shippingPostalAddress.currency]
 *
 * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
 * the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.code] The code property
 * for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.displayName] The
 * displayName property for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
 * property for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
 * The amountDecimalPlaces property for the currency entity
 *
 * @param {number}
 * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
 * amountRoundingPrecision property for the currency entity
 *
 * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
 * lastModifiedDateTime property for the currency entity
 *
 * @param {object} [body.shippingPostalAddress.paymentTerm]
 *
 * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
 * for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
 * property for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
 * displayName property for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
 * The dueDateCalculation property for the paymentTerm entity
 *
 * @param {string}
 * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
 * discountDateCalculation property for the paymentTerm entity
 *
 * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
 * discountPercent property for the paymentTerm entity
 *
 * @param {boolean}
 * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
 * calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
 * The lastModifiedDateTime property for the paymentTerm entity
 *
 * @param {object} [body.shippingPostalAddress.shipmentMethod]
 *
 * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
 * for the shipmentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
 * property for the shipmentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
 * displayName property for the shipmentMethod entity
 *
 * @param {date}
 * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the shipmentMethod entity
 *
 * @param {object} [body.shippingPostalAddress.paymentMethod]
 *
 * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
 * for the paymentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
 * property for the paymentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
 * displayName property for the paymentMethod entity
 *
 * @param {date}
 * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentMethod entity
 *
 * @param {uuid} [body.currencyId] The currencyId property for the salesOrder
 * entity
 *
 * @param {string} [body.currencyCode] The currencyCode property for the
 * salesOrder entity
 *
 * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
 * the salesOrder entity
 *
 * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
 * salesOrder entity
 *
 * @param {string} [body.salesperson] The salesperson property for the
 * salesOrder entity
 *
 * @param {boolean} [body.partialShipping] The partialShipping property for the
 * salesOrder entity
 *
 * @param {date} [body.requestedDeliveryDate] The requestedDeliveryDate
 * property for the salesOrder entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesOrder entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesOrder entity
 *
 * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
 * property for the salesOrder entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesOrder entity
 *
 * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
 * property for the salesOrder entity
 *
 * @param {boolean} [body.fullyShipped] The fullyShipped property for the
 * salesOrder entity
 *
 * @param {string} [body.status] The status property for the salesOrder entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the salesOrder entity
 *
 * @param {string} [body.phoneNumber] The phoneNumber property for the
 * salesOrder entity
 *
 * @param {string} [body.email] The email property for the salesOrder entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesOrderId id for salesOrder
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesOrder} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchSalesOrderById(body, companyId, salesOrderId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesOrderId === null || salesOrderId === undefined || typeof salesOrderId.valueOf() !== 'string' || !msRest.isValidUuid(salesOrderId)) {
      throw new Error('salesOrderId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesOrders({salesOrder_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesOrder_id}', encodeURIComponent(salesOrderId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesOrder']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of salesOrderLines
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesOrderId id for salesOrder
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetSalesOrderLinesForSalesOrderOKResponse}
 *                      for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesOrderLinesForSalesOrder(companyId, salesOrderId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesOrderId === null || salesOrderId === undefined || typeof salesOrderId.valueOf() !== 'string' || !msRest.isValidUuid(salesOrderId)) {
      throw new Error('salesOrderId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesOrder_id}', encodeURIComponent(salesOrderId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetSalesOrderLinesForSalesOrderOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a salesOrderLine in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the salesOrderLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * salesOrderLine entity
 *
 * @param {number} [body.sequence] The sequence property for the salesOrderLine
 * entity
 *
 * @param {uuid} [body.itemId] The itemId property for the salesOrderLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the salesOrderLine
 * entity
 *
 * @param {string} [body.lineType] The lineType property for the salesOrderLine
 * entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * salesOrderLine entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * salesOrderLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.quantity] The quantity property for the salesOrderLine
 * entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the
 * salesOrderLine entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesOrderLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * salesOrderLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesOrderLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the salesOrderLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the salesOrderLine
 * entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * salesOrderLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesOrderLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the salesOrderLine entity
 *
 * @param {number} [body.invoiceDiscountAllocation] The
 * invoiceDiscountAllocation property for the salesOrderLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * salesOrderLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * salesOrderLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the salesOrderLine entity
 *
 * @param {date} [body.shipmentDate] The shipmentDate property for the
 * salesOrderLine entity
 *
 * @param {number} [body.shippedQuantity] The shippedQuantity property for the
 * salesOrderLine entity
 *
 * @param {number} [body.invoicedQuantity] The invoicedQuantity property for
 * the salesOrderLine entity
 *
 * @param {number} [body.invoiceQuantity] The invoiceQuantity property for the
 * salesOrderLine entity
 *
 * @param {number} [body.shipQuantity] The shipQuantity property for the
 * salesOrderLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesOrderId id for salesOrder
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesOrderLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postSalesOrderLineForSalesOrder(body, companyId, salesOrderId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesOrderId === null || salesOrderId === undefined || typeof salesOrderId.valueOf() !== 'string' || !msRest.isValidUuid(salesOrderId)) {
      throw new Error('salesOrderId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesOrder_id}', encodeURIComponent(salesOrderId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesOrderLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an salesOrderLine
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesOrderId id for salesOrder
 *
 * @param {string} salesOrderLineId id for salesOrderLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesOrderLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesOrderLineForSalesOrderById(companyId, salesOrderId, salesOrderLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesOrderId === null || salesOrderId === undefined || typeof salesOrderId.valueOf() !== 'string' || !msRest.isValidUuid(salesOrderId)) {
      throw new Error('salesOrderId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesOrderLineId === null || salesOrderLineId === undefined || typeof salesOrderLineId.valueOf() !== 'string') {
      throw new Error('salesOrderLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines(\'{salesOrderLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesOrder_id}', encodeURIComponent(salesOrderId.toString()));
  requestUrl = requestUrl.replace('{salesOrderLine_id}', encodeURIComponent(salesOrderLineId));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesOrderLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an salesOrderLine in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesOrderId id for salesOrder
 *
 * @param {string} salesOrderLineId id for salesOrderLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteSalesOrderLineForSalesOrderByIdById(companyId, salesOrderId, salesOrderLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesOrderId === null || salesOrderId === undefined || typeof salesOrderId.valueOf() !== 'string' || !msRest.isValidUuid(salesOrderId)) {
      throw new Error('salesOrderId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesOrderLineId === null || salesOrderLineId === undefined || typeof salesOrderLineId.valueOf() !== 'string') {
      throw new Error('salesOrderLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines(\'{salesOrderLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesOrder_id}', encodeURIComponent(salesOrderId.toString()));
  requestUrl = requestUrl.replace('{salesOrderLine_id}', encodeURIComponent(salesOrderLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified salesOrderLine
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the salesOrderLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * salesOrderLine entity
 *
 * @param {number} [body.sequence] The sequence property for the salesOrderLine
 * entity
 *
 * @param {uuid} [body.itemId] The itemId property for the salesOrderLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the salesOrderLine
 * entity
 *
 * @param {string} [body.lineType] The lineType property for the salesOrderLine
 * entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * salesOrderLine entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * salesOrderLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.quantity] The quantity property for the salesOrderLine
 * entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the
 * salesOrderLine entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesOrderLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * salesOrderLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesOrderLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the salesOrderLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the salesOrderLine
 * entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * salesOrderLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesOrderLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the salesOrderLine entity
 *
 * @param {number} [body.invoiceDiscountAllocation] The
 * invoiceDiscountAllocation property for the salesOrderLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * salesOrderLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * salesOrderLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the salesOrderLine entity
 *
 * @param {date} [body.shipmentDate] The shipmentDate property for the
 * salesOrderLine entity
 *
 * @param {number} [body.shippedQuantity] The shippedQuantity property for the
 * salesOrderLine entity
 *
 * @param {number} [body.invoicedQuantity] The invoicedQuantity property for
 * the salesOrderLine entity
 *
 * @param {number} [body.invoiceQuantity] The invoiceQuantity property for the
 * salesOrderLine entity
 *
 * @param {number} [body.shipQuantity] The shipQuantity property for the
 * salesOrderLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesOrderId id for salesOrder
 *
 * @param {string} salesOrderLineId id for salesOrderLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesOrderLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchSalesOrderLineForSalesOrderByIdById(body, companyId, salesOrderId, salesOrderLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesOrderId === null || salesOrderId === undefined || typeof salesOrderId.valueOf() !== 'string' || !msRest.isValidUuid(salesOrderId)) {
      throw new Error('salesOrderId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesOrderLineId === null || salesOrderLineId === undefined || typeof salesOrderLineId.valueOf() !== 'string') {
      throw new Error('salesOrderLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines(\'{salesOrderLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesOrder_id}', encodeURIComponent(salesOrderId.toString()));
  requestUrl = requestUrl.replace('{salesOrderLine_id}', encodeURIComponent(salesOrderLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesOrderLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of salesOrderLines
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetSalesOrderLinesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesOrderLines(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesOrderLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetSalesOrderLinesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a salesOrderLine in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the salesOrderLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * salesOrderLine entity
 *
 * @param {number} [body.sequence] The sequence property for the salesOrderLine
 * entity
 *
 * @param {uuid} [body.itemId] The itemId property for the salesOrderLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the salesOrderLine
 * entity
 *
 * @param {string} [body.lineType] The lineType property for the salesOrderLine
 * entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * salesOrderLine entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * salesOrderLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.quantity] The quantity property for the salesOrderLine
 * entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the
 * salesOrderLine entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesOrderLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * salesOrderLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesOrderLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the salesOrderLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the salesOrderLine
 * entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * salesOrderLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesOrderLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the salesOrderLine entity
 *
 * @param {number} [body.invoiceDiscountAllocation] The
 * invoiceDiscountAllocation property for the salesOrderLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * salesOrderLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * salesOrderLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the salesOrderLine entity
 *
 * @param {date} [body.shipmentDate] The shipmentDate property for the
 * salesOrderLine entity
 *
 * @param {number} [body.shippedQuantity] The shippedQuantity property for the
 * salesOrderLine entity
 *
 * @param {number} [body.invoicedQuantity] The invoicedQuantity property for
 * the salesOrderLine entity
 *
 * @param {number} [body.invoiceQuantity] The invoiceQuantity property for the
 * salesOrderLine entity
 *
 * @param {number} [body.shipQuantity] The shipQuantity property for the
 * salesOrderLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesOrderLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postSalesOrderLine(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesOrderLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesOrderLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an salesOrderLine
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {string} salesOrderLineId id for salesOrderLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesOrderLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesOrderLineById(companyId, salesOrderLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesOrderLineId === null || salesOrderLineId === undefined || typeof salesOrderLineId.valueOf() !== 'string') {
      throw new Error('salesOrderLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesOrderLines(\'{salesOrderLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesOrderLine_id}', encodeURIComponent(salesOrderLineId));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesOrderLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an salesOrderLine in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {string} salesOrderLineId id for salesOrderLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteSalesOrderLineById(companyId, salesOrderLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesOrderLineId === null || salesOrderLineId === undefined || typeof salesOrderLineId.valueOf() !== 'string') {
      throw new Error('salesOrderLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesOrderLines(\'{salesOrderLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesOrderLine_id}', encodeURIComponent(salesOrderLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified salesOrderLine
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the salesOrderLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * salesOrderLine entity
 *
 * @param {number} [body.sequence] The sequence property for the salesOrderLine
 * entity
 *
 * @param {uuid} [body.itemId] The itemId property for the salesOrderLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the salesOrderLine
 * entity
 *
 * @param {string} [body.lineType] The lineType property for the salesOrderLine
 * entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * salesOrderLine entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * salesOrderLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.quantity] The quantity property for the salesOrderLine
 * entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the
 * salesOrderLine entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesOrderLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * salesOrderLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesOrderLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the salesOrderLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the salesOrderLine
 * entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * salesOrderLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesOrderLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the salesOrderLine entity
 *
 * @param {number} [body.invoiceDiscountAllocation] The
 * invoiceDiscountAllocation property for the salesOrderLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * salesOrderLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * salesOrderLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the salesOrderLine entity
 *
 * @param {date} [body.shipmentDate] The shipmentDate property for the
 * salesOrderLine entity
 *
 * @param {number} [body.shippedQuantity] The shippedQuantity property for the
 * salesOrderLine entity
 *
 * @param {number} [body.invoicedQuantity] The invoicedQuantity property for
 * the salesOrderLine entity
 *
 * @param {number} [body.invoiceQuantity] The invoiceQuantity property for the
 * salesOrderLine entity
 *
 * @param {number} [body.shipQuantity] The shipQuantity property for the
 * salesOrderLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {string} salesOrderLineId id for salesOrderLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesOrderLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchSalesOrderLineById(body, companyId, salesOrderLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesOrderLineId === null || salesOrderLineId === undefined || typeof salesOrderLineId.valueOf() !== 'string') {
      throw new Error('salesOrderLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesOrderLines(\'{salesOrderLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesOrderLine_id}', encodeURIComponent(salesOrderLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesOrderLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of retainedEarningsStatement
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetRetainedEarningsStatementOKResponse} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getRetainedEarningsStatement(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/retainedEarningsStatement';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetRetainedEarningsStatementOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an
 * retainedEarningsStatement object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {number} retainedEarningsStatementLineNumber lineNumber for
 * retainedEarningsStatement
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link RetainedEarningsStatement} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getRetainedEarningsStatementByLineNumber(companyId, retainedEarningsStatementLineNumber, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (retainedEarningsStatementLineNumber === null || retainedEarningsStatementLineNumber === undefined || typeof retainedEarningsStatementLineNumber !== 'number') {
      throw new Error('retainedEarningsStatementLineNumber cannot be null or undefined and it must be of type number.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/retainedEarningsStatement({retainedEarningsStatement_lineNumber})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{retainedEarningsStatement_lineNumber}', encodeURIComponent(retainedEarningsStatementLineNumber.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['RetainedEarningsStatement']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of unitsOfMeasure
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetUnitsOfMeasureOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getUnitsOfMeasure(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/unitsOfMeasure';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetUnitsOfMeasureOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a unitOfMeasure in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the unitOfMeasure entity
 *
 * @param {string} [body.code] The code property for the unitOfMeasure entity
 *
 * @param {string} [body.displayName] The displayName property for the
 * unitOfMeasure entity
 *
 * @param {string} [body.internationalStandardCode] The
 * internationalStandardCode property for the unitOfMeasure entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the unitOfMeasure entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link UnitOfMeasure} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postUnitOfMeasure(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/unitsOfMeasure';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['UnitOfMeasure']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an unitOfMeasure
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} unitOfMeasureId id for unitOfMeasure
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link UnitOfMeasure} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getUnitOfMeasureById(companyId, unitOfMeasureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (unitOfMeasureId === null || unitOfMeasureId === undefined || typeof unitOfMeasureId.valueOf() !== 'string' || !msRest.isValidUuid(unitOfMeasureId)) {
      throw new Error('unitOfMeasureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/unitsOfMeasure({unitOfMeasure_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{unitOfMeasure_id}', encodeURIComponent(unitOfMeasureId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['UnitOfMeasure']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an unitOfMeasure in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} unitOfMeasureId id for unitOfMeasure
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteUnitOfMeasureById(companyId, unitOfMeasureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (unitOfMeasureId === null || unitOfMeasureId === undefined || typeof unitOfMeasureId.valueOf() !== 'string' || !msRest.isValidUuid(unitOfMeasureId)) {
      throw new Error('unitOfMeasureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/unitsOfMeasure({unitOfMeasure_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{unitOfMeasure_id}', encodeURIComponent(unitOfMeasureId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified unitOfMeasure
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the unitOfMeasure entity
 *
 * @param {string} [body.code] The code property for the unitOfMeasure entity
 *
 * @param {string} [body.displayName] The displayName property for the
 * unitOfMeasure entity
 *
 * @param {string} [body.internationalStandardCode] The
 * internationalStandardCode property for the unitOfMeasure entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the unitOfMeasure entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} unitOfMeasureId id for unitOfMeasure
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link UnitOfMeasure} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchUnitOfMeasureById(body, companyId, unitOfMeasureId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (unitOfMeasureId === null || unitOfMeasureId === undefined || typeof unitOfMeasureId.valueOf() !== 'string' || !msRest.isValidUuid(unitOfMeasureId)) {
      throw new Error('unitOfMeasureId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/unitsOfMeasure({unitOfMeasure_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{unitOfMeasure_id}', encodeURIComponent(unitOfMeasureId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['UnitOfMeasure']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of agedAccountsReceivable
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetAgedAccountsReceivableOKResponse} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getAgedAccountsReceivable(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/agedAccountsReceivable';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetAgedAccountsReceivableOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an
 * agedAccountsReceivable object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} agedAccountsReceivableCustomerId customerId for
 * agedAccountsReceivable
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link AgedAccountsReceivable} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getAgedAccountsReceivableByCustomerId(companyId, agedAccountsReceivableCustomerId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (agedAccountsReceivableCustomerId === null || agedAccountsReceivableCustomerId === undefined || typeof agedAccountsReceivableCustomerId.valueOf() !== 'string' || !msRest.isValidUuid(agedAccountsReceivableCustomerId)) {
      throw new Error('agedAccountsReceivableCustomerId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/agedAccountsReceivable({agedAccountsReceivable_customerId})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{agedAccountsReceivable_customerId}', encodeURIComponent(agedAccountsReceivableCustomerId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['AgedAccountsReceivable']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of agedAccountsPayable
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetAgedAccountsPayableOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getAgedAccountsPayable(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/agedAccountsPayable';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetAgedAccountsPayableOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an agedAccountsPayable
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} agedAccountsPayableVendorId vendorId for agedAccountsPayable
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link AgedAccountsPayable} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getAgedAccountsPayableByVendorId(companyId, agedAccountsPayableVendorId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (agedAccountsPayableVendorId === null || agedAccountsPayableVendorId === undefined || typeof agedAccountsPayableVendorId.valueOf() !== 'string' || !msRest.isValidUuid(agedAccountsPayableVendorId)) {
      throw new Error('agedAccountsPayableVendorId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/agedAccountsPayable({agedAccountsPayable_vendorId})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{agedAccountsPayable_vendorId}', encodeURIComponent(agedAccountsPayableVendorId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['AgedAccountsPayable']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of balanceSheet
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetBalanceSheetOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getBalanceSheet(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/balanceSheet';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetBalanceSheetOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an balanceSheet object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {number} balanceSheetLineNumber lineNumber for balanceSheet
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BalanceSheet} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getBalanceSheetByLineNumber(companyId, balanceSheetLineNumber, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (balanceSheetLineNumber === null || balanceSheetLineNumber === undefined || typeof balanceSheetLineNumber !== 'number') {
      throw new Error('balanceSheetLineNumber cannot be null or undefined and it must be of type number.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/balanceSheet({balanceSheet_lineNumber})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{balanceSheet_lineNumber}', encodeURIComponent(balanceSheetLineNumber.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BalanceSheet']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of trialBalance
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetTrialBalanceOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getTrialBalance(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/trialBalance';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetTrialBalanceOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an trialBalance object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {string} trialBalanceNumber number for trialBalance
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link TrialBalance} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getTrialBalanceByNumber(companyId, trialBalanceNumber, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (trialBalanceNumber === null || trialBalanceNumber === undefined || typeof trialBalanceNumber.valueOf() !== 'string') {
      throw new Error('trialBalanceNumber cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/trialBalance(\'{trialBalance_number}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{trialBalance_number}', encodeURIComponent(trialBalanceNumber));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['TrialBalance']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of incomeStatement
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetIncomeStatementOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getIncomeStatement(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/incomeStatement';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetIncomeStatementOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an incomeStatement
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {number} incomeStatementLineNumber lineNumber for incomeStatement
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link IncomeStatement} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getIncomeStatementByLineNumber(companyId, incomeStatementLineNumber, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (incomeStatementLineNumber === null || incomeStatementLineNumber === undefined || typeof incomeStatementLineNumber !== 'number') {
      throw new Error('incomeStatementLineNumber cannot be null or undefined and it must be of type number.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/incomeStatement({incomeStatement_lineNumber})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{incomeStatement_lineNumber}', encodeURIComponent(incomeStatementLineNumber.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['IncomeStatement']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of taxAreas
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetTaxAreasOKResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getTaxAreas(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/taxAreas';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetTaxAreasOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a taxArea in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the taxArea entity
 *
 * @param {string} [body.code] The code property for the taxArea entity
 *
 * @param {string} [body.displayName] The displayName property for the taxArea
 * entity
 *
 * @param {string} [body.taxType] The taxType property for the taxArea entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the taxArea entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link TaxArea} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postTaxArea(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/taxAreas';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['TaxArea']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an taxArea object for
 * Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} taxAreaId id for taxArea
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link TaxArea} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getTaxAreaById(companyId, taxAreaId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (taxAreaId === null || taxAreaId === undefined || typeof taxAreaId.valueOf() !== 'string' || !msRest.isValidUuid(taxAreaId)) {
      throw new Error('taxAreaId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/taxAreas({taxArea_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{taxArea_id}', encodeURIComponent(taxAreaId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['TaxArea']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an taxArea in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} taxAreaId id for taxArea
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteTaxAreaById(companyId, taxAreaId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (taxAreaId === null || taxAreaId === undefined || typeof taxAreaId.valueOf() !== 'string' || !msRest.isValidUuid(taxAreaId)) {
      throw new Error('taxAreaId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/taxAreas({taxArea_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{taxArea_id}', encodeURIComponent(taxAreaId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified taxArea
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the taxArea entity
 *
 * @param {string} [body.code] The code property for the taxArea entity
 *
 * @param {string} [body.displayName] The displayName property for the taxArea
 * entity
 *
 * @param {string} [body.taxType] The taxType property for the taxArea entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the taxArea entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} taxAreaId id for taxArea
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link TaxArea} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchTaxAreaById(body, companyId, taxAreaId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (taxAreaId === null || taxAreaId === undefined || typeof taxAreaId.valueOf() !== 'string' || !msRest.isValidUuid(taxAreaId)) {
      throw new Error('taxAreaId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/taxAreas({taxArea_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{taxArea_id}', encodeURIComponent(taxAreaId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['TaxArea']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of salesQuotes
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetSalesQuotesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesQuotes(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuotes';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetSalesQuotesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a salesQuote in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the salesQuote entity
 *
 * @param {string} [body.number] The number property for the salesQuote entity
 *
 * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
 * property for the salesQuote entity
 *
 * @param {date} [body.documentDate] The documentDate property for the
 * salesQuote entity
 *
 * @param {date} [body.dueDate] The dueDate property for the salesQuote entity
 *
 * @param {uuid} [body.customerId] The customerId property for the salesQuote
 * entity
 *
 * @param {string} [body.contactId] The contactId property for the salesQuote
 * entity
 *
 * @param {string} [body.customerNumber] The customerNumber property for the
 * salesQuote entity
 *
 * @param {string} [body.customerName] The customerName property for the
 * salesQuote entity
 *
 * @param {string} [body.billToName] The billToName property for the salesQuote
 * entity
 *
 * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
 * salesQuote entity
 *
 * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
 * property for the salesQuote entity
 *
 * @param {string} [body.shipToName] The shipToName property for the salesQuote
 * entity
 *
 * @param {string} [body.shipToContact] The shipToContact property for the
 * salesQuote entity
 *
 * @param {object} [body.sellingPostalAddress]
 *
 * @param {object} [body.billingPostalAddress]
 *
 * @param {object} [body.shippingPostalAddress]
 *
 * @param {string} [body.shippingPostalAddress.street] The street property for
 * the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.city] The city property for the
 * postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.state] The state property for
 * the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.countryLetterCode] The
 * countryLetterCode property for the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
 * property for the postaladdresstype entity
 *
 * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
 *
 * @param {array} [body.shippingPostalAddress.picture]
 *
 * @param {array} [body.shippingPostalAddress.defaultDimensions]
 *
 * @param {object} [body.shippingPostalAddress.currency]
 *
 * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
 * the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.code] The code property
 * for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.displayName] The
 * displayName property for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
 * property for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
 * The amountDecimalPlaces property for the currency entity
 *
 * @param {number}
 * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
 * amountRoundingPrecision property for the currency entity
 *
 * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
 * lastModifiedDateTime property for the currency entity
 *
 * @param {object} [body.shippingPostalAddress.paymentTerm]
 *
 * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
 * for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
 * property for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
 * displayName property for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
 * The dueDateCalculation property for the paymentTerm entity
 *
 * @param {string}
 * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
 * discountDateCalculation property for the paymentTerm entity
 *
 * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
 * discountPercent property for the paymentTerm entity
 *
 * @param {boolean}
 * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
 * calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
 * The lastModifiedDateTime property for the paymentTerm entity
 *
 * @param {object} [body.shippingPostalAddress.shipmentMethod]
 *
 * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
 * for the shipmentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
 * property for the shipmentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
 * displayName property for the shipmentMethod entity
 *
 * @param {date}
 * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the shipmentMethod entity
 *
 * @param {object} [body.shippingPostalAddress.paymentMethod]
 *
 * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
 * for the paymentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
 * property for the paymentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
 * displayName property for the paymentMethod entity
 *
 * @param {date}
 * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentMethod entity
 *
 * @param {uuid} [body.currencyId] The currencyId property for the salesQuote
 * entity
 *
 * @param {string} [body.currencyCode] The currencyCode property for the
 * salesQuote entity
 *
 * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
 * salesQuote entity
 *
 * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
 * salesQuote entity
 *
 * @param {string} [body.salesperson] The salesperson property for the
 * salesQuote entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesQuote entity
 *
 * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
 * property for the salesQuote entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesQuote entity
 *
 * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
 * property for the salesQuote entity
 *
 * @param {string} [body.status] The status property for the salesQuote entity
 *
 * @param {date} [body.sentDate] The sentDate property for the salesQuote
 * entity
 *
 * @param {date} [body.validUntilDate] The validUntilDate property for the
 * salesQuote entity
 *
 * @param {date} [body.acceptedDate] The acceptedDate property for the
 * salesQuote entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the salesQuote entity
 *
 * @param {string} [body.phoneNumber] The phoneNumber property for the
 * salesQuote entity
 *
 * @param {string} [body.email] The email property for the salesQuote entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesQuote} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postSalesQuote(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuotes';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesQuote']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an salesQuote object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesQuoteId id for salesQuote
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesQuote} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesQuoteById(companyId, salesQuoteId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteId === null || salesQuoteId === undefined || typeof salesQuoteId.valueOf() !== 'string' || !msRest.isValidUuid(salesQuoteId)) {
      throw new Error('salesQuoteId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuotes({salesQuote_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesQuote_id}', encodeURIComponent(salesQuoteId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesQuote']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an salesQuote in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesQuoteId id for salesQuote
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteSalesQuoteById(companyId, salesQuoteId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteId === null || salesQuoteId === undefined || typeof salesQuoteId.valueOf() !== 'string' || !msRest.isValidUuid(salesQuoteId)) {
      throw new Error('salesQuoteId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuotes({salesQuote_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesQuote_id}', encodeURIComponent(salesQuoteId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified salesQuote
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the salesQuote entity
 *
 * @param {string} [body.number] The number property for the salesQuote entity
 *
 * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
 * property for the salesQuote entity
 *
 * @param {date} [body.documentDate] The documentDate property for the
 * salesQuote entity
 *
 * @param {date} [body.dueDate] The dueDate property for the salesQuote entity
 *
 * @param {uuid} [body.customerId] The customerId property for the salesQuote
 * entity
 *
 * @param {string} [body.contactId] The contactId property for the salesQuote
 * entity
 *
 * @param {string} [body.customerNumber] The customerNumber property for the
 * salesQuote entity
 *
 * @param {string} [body.customerName] The customerName property for the
 * salesQuote entity
 *
 * @param {string} [body.billToName] The billToName property for the salesQuote
 * entity
 *
 * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
 * salesQuote entity
 *
 * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
 * property for the salesQuote entity
 *
 * @param {string} [body.shipToName] The shipToName property for the salesQuote
 * entity
 *
 * @param {string} [body.shipToContact] The shipToContact property for the
 * salesQuote entity
 *
 * @param {object} [body.sellingPostalAddress]
 *
 * @param {object} [body.billingPostalAddress]
 *
 * @param {object} [body.shippingPostalAddress]
 *
 * @param {string} [body.shippingPostalAddress.street] The street property for
 * the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.city] The city property for the
 * postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.state] The state property for
 * the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.countryLetterCode] The
 * countryLetterCode property for the postaladdresstype entity
 *
 * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
 * property for the postaladdresstype entity
 *
 * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
 *
 * @param {array} [body.shippingPostalAddress.picture]
 *
 * @param {array} [body.shippingPostalAddress.defaultDimensions]
 *
 * @param {object} [body.shippingPostalAddress.currency]
 *
 * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
 * the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.code] The code property
 * for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.displayName] The
 * displayName property for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
 * property for the currency entity
 *
 * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
 * The amountDecimalPlaces property for the currency entity
 *
 * @param {number}
 * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
 * amountRoundingPrecision property for the currency entity
 *
 * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
 * lastModifiedDateTime property for the currency entity
 *
 * @param {object} [body.shippingPostalAddress.paymentTerm]
 *
 * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
 * for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
 * property for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
 * displayName property for the paymentTerm entity
 *
 * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
 * The dueDateCalculation property for the paymentTerm entity
 *
 * @param {string}
 * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
 * discountDateCalculation property for the paymentTerm entity
 *
 * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
 * discountPercent property for the paymentTerm entity
 *
 * @param {boolean}
 * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
 * calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
 * The lastModifiedDateTime property for the paymentTerm entity
 *
 * @param {object} [body.shippingPostalAddress.shipmentMethod]
 *
 * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
 * for the shipmentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
 * property for the shipmentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
 * displayName property for the shipmentMethod entity
 *
 * @param {date}
 * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the shipmentMethod entity
 *
 * @param {object} [body.shippingPostalAddress.paymentMethod]
 *
 * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
 * for the paymentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
 * property for the paymentMethod entity
 *
 * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
 * displayName property for the paymentMethod entity
 *
 * @param {date}
 * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentMethod entity
 *
 * @param {uuid} [body.currencyId] The currencyId property for the salesQuote
 * entity
 *
 * @param {string} [body.currencyCode] The currencyCode property for the
 * salesQuote entity
 *
 * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
 * salesQuote entity
 *
 * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
 * salesQuote entity
 *
 * @param {string} [body.salesperson] The salesperson property for the
 * salesQuote entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesQuote entity
 *
 * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
 * property for the salesQuote entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesQuote entity
 *
 * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
 * property for the salesQuote entity
 *
 * @param {string} [body.status] The status property for the salesQuote entity
 *
 * @param {date} [body.sentDate] The sentDate property for the salesQuote
 * entity
 *
 * @param {date} [body.validUntilDate] The validUntilDate property for the
 * salesQuote entity
 *
 * @param {date} [body.acceptedDate] The acceptedDate property for the
 * salesQuote entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the salesQuote entity
 *
 * @param {string} [body.phoneNumber] The phoneNumber property for the
 * salesQuote entity
 *
 * @param {string} [body.email] The email property for the salesQuote entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesQuoteId id for salesQuote
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesQuote} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchSalesQuoteById(body, companyId, salesQuoteId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteId === null || salesQuoteId === undefined || typeof salesQuoteId.valueOf() !== 'string' || !msRest.isValidUuid(salesQuoteId)) {
      throw new Error('salesQuoteId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuotes({salesQuote_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesQuote_id}', encodeURIComponent(salesQuoteId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesQuote']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Performs the makeInvoice action for salesQuotes entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesQuoteId id for salesQuote
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _makeInvoiceActionSalesQuotes(companyId, salesQuoteId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteId === null || salesQuoteId === undefined || typeof salesQuoteId.valueOf() !== 'string' || !msRest.isValidUuid(salesQuoteId)) {
      throw new Error('salesQuoteId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuotes({salesQuote_id})/Microsoft.NAV.makeInvoice';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesQuote_id}', encodeURIComponent(salesQuoteId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Performs the send action for salesQuotes entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesQuoteId id for salesQuote
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _sendActionSalesQuotes(companyId, salesQuoteId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteId === null || salesQuoteId === undefined || typeof salesQuoteId.valueOf() !== 'string' || !msRest.isValidUuid(salesQuoteId)) {
      throw new Error('salesQuoteId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuotes({salesQuote_id})/Microsoft.NAV.send';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesQuote_id}', encodeURIComponent(salesQuoteId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of salesQuoteLines
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesQuoteId id for salesQuote
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetSalesQuoteLinesForSalesQuoteOKResponse}
 *                      for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesQuoteLinesForSalesQuote(companyId, salesQuoteId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteId === null || salesQuoteId === undefined || typeof salesQuoteId.valueOf() !== 'string' || !msRest.isValidUuid(salesQuoteId)) {
      throw new Error('salesQuoteId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesQuote_id}', encodeURIComponent(salesQuoteId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetSalesQuoteLinesForSalesQuoteOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a salesQuoteLine in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the salesQuoteLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.sequence] The sequence property for the salesQuoteLine
 * entity
 *
 * @param {uuid} [body.itemId] The itemId property for the salesQuoteLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the salesQuoteLine
 * entity
 *
 * @param {string} [body.lineType] The lineType property for the salesQuoteLine
 * entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * salesQuoteLine entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * salesQuoteLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.quantity] The quantity property for the salesQuoteLine
 * entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * salesQuoteLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesQuoteLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the salesQuoteLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the salesQuoteLine
 * entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the salesQuoteLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the salesQuoteLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesQuoteId id for salesQuote
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesQuoteLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postSalesQuoteLineForSalesQuote(body, companyId, salesQuoteId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteId === null || salesQuoteId === undefined || typeof salesQuoteId.valueOf() !== 'string' || !msRest.isValidUuid(salesQuoteId)) {
      throw new Error('salesQuoteId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesQuote_id}', encodeURIComponent(salesQuoteId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesQuoteLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an salesQuoteLine
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesQuoteId id for salesQuote
 *
 * @param {string} salesQuoteLineId id for salesQuoteLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesQuoteLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesQuoteLineForSalesQuoteById(companyId, salesQuoteId, salesQuoteLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteId === null || salesQuoteId === undefined || typeof salesQuoteId.valueOf() !== 'string' || !msRest.isValidUuid(salesQuoteId)) {
      throw new Error('salesQuoteId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteLineId === null || salesQuoteLineId === undefined || typeof salesQuoteLineId.valueOf() !== 'string') {
      throw new Error('salesQuoteLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines(\'{salesQuoteLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesQuote_id}', encodeURIComponent(salesQuoteId.toString()));
  requestUrl = requestUrl.replace('{salesQuoteLine_id}', encodeURIComponent(salesQuoteLineId));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesQuoteLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an salesQuoteLine in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesQuoteId id for salesQuote
 *
 * @param {string} salesQuoteLineId id for salesQuoteLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteSalesQuoteLineForSalesQuoteByIdById(companyId, salesQuoteId, salesQuoteLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteId === null || salesQuoteId === undefined || typeof salesQuoteId.valueOf() !== 'string' || !msRest.isValidUuid(salesQuoteId)) {
      throw new Error('salesQuoteId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteLineId === null || salesQuoteLineId === undefined || typeof salesQuoteLineId.valueOf() !== 'string') {
      throw new Error('salesQuoteLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines(\'{salesQuoteLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesQuote_id}', encodeURIComponent(salesQuoteId.toString()));
  requestUrl = requestUrl.replace('{salesQuoteLine_id}', encodeURIComponent(salesQuoteLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified salesQuoteLine
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the salesQuoteLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.sequence] The sequence property for the salesQuoteLine
 * entity
 *
 * @param {uuid} [body.itemId] The itemId property for the salesQuoteLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the salesQuoteLine
 * entity
 *
 * @param {string} [body.lineType] The lineType property for the salesQuoteLine
 * entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * salesQuoteLine entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * salesQuoteLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.quantity] The quantity property for the salesQuoteLine
 * entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * salesQuoteLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesQuoteLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the salesQuoteLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the salesQuoteLine
 * entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the salesQuoteLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the salesQuoteLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesQuoteId id for salesQuote
 *
 * @param {string} salesQuoteLineId id for salesQuoteLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesQuoteLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchSalesQuoteLineForSalesQuoteByIdById(body, companyId, salesQuoteId, salesQuoteLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteId === null || salesQuoteId === undefined || typeof salesQuoteId.valueOf() !== 'string' || !msRest.isValidUuid(salesQuoteId)) {
      throw new Error('salesQuoteId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteLineId === null || salesQuoteLineId === undefined || typeof salesQuoteLineId.valueOf() !== 'string') {
      throw new Error('salesQuoteLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines(\'{salesQuoteLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesQuote_id}', encodeURIComponent(salesQuoteId.toString()));
  requestUrl = requestUrl.replace('{salesQuoteLine_id}', encodeURIComponent(salesQuoteLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesQuoteLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of pdfDocument
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesQuoteId id for salesQuote
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetPdfDocumentForSalesQuoteOKResponse} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPdfDocumentForSalesQuote(companyId, salesQuoteId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteId === null || salesQuoteId === undefined || typeof salesQuoteId.valueOf() !== 'string' || !msRest.isValidUuid(salesQuoteId)) {
      throw new Error('salesQuoteId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuotes({salesQuote_id})/pdfDocument';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesQuote_id}', encodeURIComponent(salesQuoteId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetPdfDocumentForSalesQuoteOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an pdfDocument object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesQuoteId id for salesQuote
 *
 * @param {uuid} pdfDocumentId id for pdfDocument
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PdfDocument} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPdfDocumentForSalesQuoteById(companyId, salesQuoteId, pdfDocumentId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteId === null || salesQuoteId === undefined || typeof salesQuoteId.valueOf() !== 'string' || !msRest.isValidUuid(salesQuoteId)) {
      throw new Error('salesQuoteId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pdfDocumentId === null || pdfDocumentId === undefined || typeof pdfDocumentId.valueOf() !== 'string' || !msRest.isValidUuid(pdfDocumentId)) {
      throw new Error('pdfDocumentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuotes({salesQuote_id})/pdfDocument({pdfDocument_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesQuote_id}', encodeURIComponent(salesQuoteId.toString()));
  requestUrl = requestUrl.replace('{pdfDocument_id}', encodeURIComponent(pdfDocumentId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PdfDocument']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of salesQuoteLines
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetSalesQuoteLinesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesQuoteLines(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuoteLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetSalesQuoteLinesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a salesQuoteLine in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the salesQuoteLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.sequence] The sequence property for the salesQuoteLine
 * entity
 *
 * @param {uuid} [body.itemId] The itemId property for the salesQuoteLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the salesQuoteLine
 * entity
 *
 * @param {string} [body.lineType] The lineType property for the salesQuoteLine
 * entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * salesQuoteLine entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * salesQuoteLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.quantity] The quantity property for the salesQuoteLine
 * entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * salesQuoteLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesQuoteLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the salesQuoteLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the salesQuoteLine
 * entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the salesQuoteLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the salesQuoteLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesQuoteLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postSalesQuoteLine(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuoteLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesQuoteLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an salesQuoteLine
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {string} salesQuoteLineId id for salesQuoteLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesQuoteLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesQuoteLineById(companyId, salesQuoteLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteLineId === null || salesQuoteLineId === undefined || typeof salesQuoteLineId.valueOf() !== 'string') {
      throw new Error('salesQuoteLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuoteLines(\'{salesQuoteLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesQuoteLine_id}', encodeURIComponent(salesQuoteLineId));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesQuoteLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an salesQuoteLine in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {string} salesQuoteLineId id for salesQuoteLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteSalesQuoteLineById(companyId, salesQuoteLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteLineId === null || salesQuoteLineId === undefined || typeof salesQuoteLineId.valueOf() !== 'string') {
      throw new Error('salesQuoteLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuoteLines(\'{salesQuoteLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesQuoteLine_id}', encodeURIComponent(salesQuoteLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified salesQuoteLine
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the salesQuoteLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.sequence] The sequence property for the salesQuoteLine
 * entity
 *
 * @param {uuid} [body.itemId] The itemId property for the salesQuoteLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the salesQuoteLine
 * entity
 *
 * @param {string} [body.lineType] The lineType property for the salesQuoteLine
 * entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * salesQuoteLine entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * salesQuoteLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.quantity] The quantity property for the salesQuoteLine
 * entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * salesQuoteLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesQuoteLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the salesQuoteLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the salesQuoteLine
 * entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the salesQuoteLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * salesQuoteLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the salesQuoteLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {string} salesQuoteLineId id for salesQuoteLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesQuoteLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchSalesQuoteLineById(body, companyId, salesQuoteLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesQuoteLineId === null || salesQuoteLineId === undefined || typeof salesQuoteLineId.valueOf() !== 'string') {
      throw new Error('salesQuoteLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesQuoteLines(\'{salesQuoteLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesQuoteLine_id}', encodeURIComponent(salesQuoteLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesQuoteLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of salesCreditMemos
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetSalesCreditMemosOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesCreditMemos(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesCreditMemos';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetSalesCreditMemosOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a salesCreditMemo in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the salesCreditMemo entity
 *
 * @param {string} [body.number] The number property for the salesCreditMemo
 * entity
 *
 * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
 * property for the salesCreditMemo entity
 *
 * @param {date} [body.creditMemoDate] The creditMemoDate property for the
 * salesCreditMemo entity
 *
 * @param {date} [body.dueDate] The dueDate property for the salesCreditMemo
 * entity
 *
 * @param {uuid} [body.customerId] The customerId property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.contactId] The contactId property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.customerNumber] The customerNumber property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.customerName] The customerName property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.billToName] The billToName property for the
 * salesCreditMemo entity
 *
 * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
 * property for the salesCreditMemo entity
 *
 * @param {object} [body.sellingPostalAddress]
 *
 * @param {object} [body.billingPostalAddress]
 *
 * @param {string} [body.billingPostalAddress.street] The street property for
 * the postaladdresstype entity
 *
 * @param {string} [body.billingPostalAddress.city] The city property for the
 * postaladdresstype entity
 *
 * @param {string} [body.billingPostalAddress.state] The state property for the
 * postaladdresstype entity
 *
 * @param {string} [body.billingPostalAddress.countryLetterCode] The
 * countryLetterCode property for the postaladdresstype entity
 *
 * @param {string} [body.billingPostalAddress.postalCode] The postalCode
 * property for the postaladdresstype entity
 *
 * @param {array} [body.billingPostalAddress.customerFinancialDetails]
 *
 * @param {array} [body.billingPostalAddress.picture]
 *
 * @param {array} [body.billingPostalAddress.defaultDimensions]
 *
 * @param {object} [body.billingPostalAddress.currency]
 *
 * @param {uuid} [body.billingPostalAddress.currency.id] The id property for
 * the currency entity
 *
 * @param {string} [body.billingPostalAddress.currency.code] The code property
 * for the currency entity
 *
 * @param {string} [body.billingPostalAddress.currency.displayName] The
 * displayName property for the currency entity
 *
 * @param {string} [body.billingPostalAddress.currency.symbol] The symbol
 * property for the currency entity
 *
 * @param {string} [body.billingPostalAddress.currency.amountDecimalPlaces] The
 * amountDecimalPlaces property for the currency entity
 *
 * @param {number} [body.billingPostalAddress.currency.amountRoundingPrecision]
 * The amountRoundingPrecision property for the currency entity
 *
 * @param {date} [body.billingPostalAddress.currency.lastModifiedDateTime] The
 * lastModifiedDateTime property for the currency entity
 *
 * @param {object} [body.billingPostalAddress.paymentTerm]
 *
 * @param {uuid} [body.billingPostalAddress.paymentTerm.id] The id property for
 * the paymentTerm entity
 *
 * @param {string} [body.billingPostalAddress.paymentTerm.code] The code
 * property for the paymentTerm entity
 *
 * @param {string} [body.billingPostalAddress.paymentTerm.displayName] The
 * displayName property for the paymentTerm entity
 *
 * @param {string} [body.billingPostalAddress.paymentTerm.dueDateCalculation]
 * The dueDateCalculation property for the paymentTerm entity
 *
 * @param {string}
 * [body.billingPostalAddress.paymentTerm.discountDateCalculation] The
 * discountDateCalculation property for the paymentTerm entity
 *
 * @param {number} [body.billingPostalAddress.paymentTerm.discountPercent] The
 * discountPercent property for the paymentTerm entity
 *
 * @param {boolean}
 * [body.billingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
 * calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.billingPostalAddress.paymentTerm.lastModifiedDateTime]
 * The lastModifiedDateTime property for the paymentTerm entity
 *
 * @param {object} [body.billingPostalAddress.shipmentMethod]
 *
 * @param {uuid} [body.billingPostalAddress.shipmentMethod.id] The id property
 * for the shipmentMethod entity
 *
 * @param {string} [body.billingPostalAddress.shipmentMethod.code] The code
 * property for the shipmentMethod entity
 *
 * @param {string} [body.billingPostalAddress.shipmentMethod.displayName] The
 * displayName property for the shipmentMethod entity
 *
 * @param {date}
 * [body.billingPostalAddress.shipmentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the shipmentMethod entity
 *
 * @param {object} [body.billingPostalAddress.paymentMethod]
 *
 * @param {uuid} [body.billingPostalAddress.paymentMethod.id] The id property
 * for the paymentMethod entity
 *
 * @param {string} [body.billingPostalAddress.paymentMethod.code] The code
 * property for the paymentMethod entity
 *
 * @param {string} [body.billingPostalAddress.paymentMethod.displayName] The
 * displayName property for the paymentMethod entity
 *
 * @param {date} [body.billingPostalAddress.paymentMethod.lastModifiedDateTime]
 * The lastModifiedDateTime property for the paymentMethod entity
 *
 * @param {uuid} [body.currencyId] The currencyId property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.currencyCode] The currencyCode property for the
 * salesCreditMemo entity
 *
 * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.salesperson] The salesperson property for the
 * salesCreditMemo entity
 *
 * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
 * the salesCreditMemo entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesCreditMemo entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesCreditMemo entity
 *
 * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
 * property for the salesCreditMemo entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesCreditMemo entity
 *
 * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
 * property for the salesCreditMemo entity
 *
 * @param {string} [body.status] The status property for the salesCreditMemo
 * entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the salesCreditMemo entity
 *
 * @param {uuid} [body.invoiceId] The invoiceId property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.invoiceNumber] The invoiceNumber property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.phoneNumber] The phoneNumber property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.email] The email property for the salesCreditMemo
 * entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesCreditMemo} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postSalesCreditMemo(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesCreditMemos';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesCreditMemo']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an salesCreditMemo
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesCreditMemoId id for salesCreditMemo
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesCreditMemo} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesCreditMemoById(companyId, salesCreditMemoId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesCreditMemoId === null || salesCreditMemoId === undefined || typeof salesCreditMemoId.valueOf() !== 'string' || !msRest.isValidUuid(salesCreditMemoId)) {
      throw new Error('salesCreditMemoId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesCreditMemos({salesCreditMemo_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesCreditMemo_id}', encodeURIComponent(salesCreditMemoId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesCreditMemo']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an salesCreditMemo in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesCreditMemoId id for salesCreditMemo
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteSalesCreditMemoById(companyId, salesCreditMemoId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesCreditMemoId === null || salesCreditMemoId === undefined || typeof salesCreditMemoId.valueOf() !== 'string' || !msRest.isValidUuid(salesCreditMemoId)) {
      throw new Error('salesCreditMemoId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesCreditMemos({salesCreditMemo_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesCreditMemo_id}', encodeURIComponent(salesCreditMemoId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified salesCreditMemo
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the salesCreditMemo entity
 *
 * @param {string} [body.number] The number property for the salesCreditMemo
 * entity
 *
 * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
 * property for the salesCreditMemo entity
 *
 * @param {date} [body.creditMemoDate] The creditMemoDate property for the
 * salesCreditMemo entity
 *
 * @param {date} [body.dueDate] The dueDate property for the salesCreditMemo
 * entity
 *
 * @param {uuid} [body.customerId] The customerId property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.contactId] The contactId property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.customerNumber] The customerNumber property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.customerName] The customerName property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.billToName] The billToName property for the
 * salesCreditMemo entity
 *
 * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
 * property for the salesCreditMemo entity
 *
 * @param {object} [body.sellingPostalAddress]
 *
 * @param {object} [body.billingPostalAddress]
 *
 * @param {string} [body.billingPostalAddress.street] The street property for
 * the postaladdresstype entity
 *
 * @param {string} [body.billingPostalAddress.city] The city property for the
 * postaladdresstype entity
 *
 * @param {string} [body.billingPostalAddress.state] The state property for the
 * postaladdresstype entity
 *
 * @param {string} [body.billingPostalAddress.countryLetterCode] The
 * countryLetterCode property for the postaladdresstype entity
 *
 * @param {string} [body.billingPostalAddress.postalCode] The postalCode
 * property for the postaladdresstype entity
 *
 * @param {array} [body.billingPostalAddress.customerFinancialDetails]
 *
 * @param {array} [body.billingPostalAddress.picture]
 *
 * @param {array} [body.billingPostalAddress.defaultDimensions]
 *
 * @param {object} [body.billingPostalAddress.currency]
 *
 * @param {uuid} [body.billingPostalAddress.currency.id] The id property for
 * the currency entity
 *
 * @param {string} [body.billingPostalAddress.currency.code] The code property
 * for the currency entity
 *
 * @param {string} [body.billingPostalAddress.currency.displayName] The
 * displayName property for the currency entity
 *
 * @param {string} [body.billingPostalAddress.currency.symbol] The symbol
 * property for the currency entity
 *
 * @param {string} [body.billingPostalAddress.currency.amountDecimalPlaces] The
 * amountDecimalPlaces property for the currency entity
 *
 * @param {number} [body.billingPostalAddress.currency.amountRoundingPrecision]
 * The amountRoundingPrecision property for the currency entity
 *
 * @param {date} [body.billingPostalAddress.currency.lastModifiedDateTime] The
 * lastModifiedDateTime property for the currency entity
 *
 * @param {object} [body.billingPostalAddress.paymentTerm]
 *
 * @param {uuid} [body.billingPostalAddress.paymentTerm.id] The id property for
 * the paymentTerm entity
 *
 * @param {string} [body.billingPostalAddress.paymentTerm.code] The code
 * property for the paymentTerm entity
 *
 * @param {string} [body.billingPostalAddress.paymentTerm.displayName] The
 * displayName property for the paymentTerm entity
 *
 * @param {string} [body.billingPostalAddress.paymentTerm.dueDateCalculation]
 * The dueDateCalculation property for the paymentTerm entity
 *
 * @param {string}
 * [body.billingPostalAddress.paymentTerm.discountDateCalculation] The
 * discountDateCalculation property for the paymentTerm entity
 *
 * @param {number} [body.billingPostalAddress.paymentTerm.discountPercent] The
 * discountPercent property for the paymentTerm entity
 *
 * @param {boolean}
 * [body.billingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
 * calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.billingPostalAddress.paymentTerm.lastModifiedDateTime]
 * The lastModifiedDateTime property for the paymentTerm entity
 *
 * @param {object} [body.billingPostalAddress.shipmentMethod]
 *
 * @param {uuid} [body.billingPostalAddress.shipmentMethod.id] The id property
 * for the shipmentMethod entity
 *
 * @param {string} [body.billingPostalAddress.shipmentMethod.code] The code
 * property for the shipmentMethod entity
 *
 * @param {string} [body.billingPostalAddress.shipmentMethod.displayName] The
 * displayName property for the shipmentMethod entity
 *
 * @param {date}
 * [body.billingPostalAddress.shipmentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the shipmentMethod entity
 *
 * @param {object} [body.billingPostalAddress.paymentMethod]
 *
 * @param {uuid} [body.billingPostalAddress.paymentMethod.id] The id property
 * for the paymentMethod entity
 *
 * @param {string} [body.billingPostalAddress.paymentMethod.code] The code
 * property for the paymentMethod entity
 *
 * @param {string} [body.billingPostalAddress.paymentMethod.displayName] The
 * displayName property for the paymentMethod entity
 *
 * @param {date} [body.billingPostalAddress.paymentMethod.lastModifiedDateTime]
 * The lastModifiedDateTime property for the paymentMethod entity
 *
 * @param {uuid} [body.currencyId] The currencyId property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.currencyCode] The currencyCode property for the
 * salesCreditMemo entity
 *
 * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.salesperson] The salesperson property for the
 * salesCreditMemo entity
 *
 * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
 * the salesCreditMemo entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesCreditMemo entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesCreditMemo entity
 *
 * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
 * property for the salesCreditMemo entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesCreditMemo entity
 *
 * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
 * property for the salesCreditMemo entity
 *
 * @param {string} [body.status] The status property for the salesCreditMemo
 * entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the salesCreditMemo entity
 *
 * @param {uuid} [body.invoiceId] The invoiceId property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.invoiceNumber] The invoiceNumber property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.phoneNumber] The phoneNumber property for the
 * salesCreditMemo entity
 *
 * @param {string} [body.email] The email property for the salesCreditMemo
 * entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesCreditMemoId id for salesCreditMemo
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesCreditMemo} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchSalesCreditMemoById(body, companyId, salesCreditMemoId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesCreditMemoId === null || salesCreditMemoId === undefined || typeof salesCreditMemoId.valueOf() !== 'string' || !msRest.isValidUuid(salesCreditMemoId)) {
      throw new Error('salesCreditMemoId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesCreditMemos({salesCreditMemo_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesCreditMemo_id}', encodeURIComponent(salesCreditMemoId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesCreditMemo']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of salesCreditMemoLines
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesCreditMemoId id for salesCreditMemo
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link
 *                      GetSalesCreditMemoLinesForSalesCreditMemoOKResponse}
 *                      for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesCreditMemoLinesForSalesCreditMemo(companyId, salesCreditMemoId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesCreditMemoId === null || salesCreditMemoId === undefined || typeof salesCreditMemoId.valueOf() !== 'string' || !msRest.isValidUuid(salesCreditMemoId)) {
      throw new Error('salesCreditMemoId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesCreditMemo_id}', encodeURIComponent(salesCreditMemoId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetSalesCreditMemoLinesForSalesCreditMemoOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a salesCreditMemoLine in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the salesCreditMemoLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.sequence] The sequence property for the
 * salesCreditMemoLine entity
 *
 * @param {uuid} [body.itemId] The itemId property for the salesCreditMemoLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the
 * salesCreditMemoLine entity
 *
 * @param {string} [body.lineType] The lineType property for the
 * salesCreditMemoLine entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * salesCreditMemoLine entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * salesCreditMemoLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.quantity] The quantity property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * salesCreditMemoLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesCreditMemoLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the salesCreditMemoLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the salesCreditMemoLine entity
 *
 * @param {number} [body.invoiceDiscountAllocation] The
 * invoiceDiscountAllocation property for the salesCreditMemoLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the salesCreditMemoLine entity
 *
 * @param {date} [body.shipmentDate] The shipmentDate property for the
 * salesCreditMemoLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesCreditMemoId id for salesCreditMemo
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesCreditMemoLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postSalesCreditMemoLineForSalesCreditMemo(body, companyId, salesCreditMemoId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesCreditMemoId === null || salesCreditMemoId === undefined || typeof salesCreditMemoId.valueOf() !== 'string' || !msRest.isValidUuid(salesCreditMemoId)) {
      throw new Error('salesCreditMemoId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesCreditMemo_id}', encodeURIComponent(salesCreditMemoId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesCreditMemoLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an salesCreditMemoLine
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesCreditMemoId id for salesCreditMemo
 *
 * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesCreditMemoLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesCreditMemoLineForSalesCreditMemoById(companyId, salesCreditMemoId, salesCreditMemoLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesCreditMemoId === null || salesCreditMemoId === undefined || typeof salesCreditMemoId.valueOf() !== 'string' || !msRest.isValidUuid(salesCreditMemoId)) {
      throw new Error('salesCreditMemoId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesCreditMemoLineId === null || salesCreditMemoLineId === undefined || typeof salesCreditMemoLineId.valueOf() !== 'string') {
      throw new Error('salesCreditMemoLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines(\'{salesCreditMemoLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesCreditMemo_id}', encodeURIComponent(salesCreditMemoId.toString()));
  requestUrl = requestUrl.replace('{salesCreditMemoLine_id}', encodeURIComponent(salesCreditMemoLineId));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesCreditMemoLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an salesCreditMemoLine in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesCreditMemoId id for salesCreditMemo
 *
 * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteSalesCreditMemoLineForSalesCreditMemoByIdById(companyId, salesCreditMemoId, salesCreditMemoLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesCreditMemoId === null || salesCreditMemoId === undefined || typeof salesCreditMemoId.valueOf() !== 'string' || !msRest.isValidUuid(salesCreditMemoId)) {
      throw new Error('salesCreditMemoId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesCreditMemoLineId === null || salesCreditMemoLineId === undefined || typeof salesCreditMemoLineId.valueOf() !== 'string') {
      throw new Error('salesCreditMemoLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines(\'{salesCreditMemoLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesCreditMemo_id}', encodeURIComponent(salesCreditMemoId.toString()));
  requestUrl = requestUrl.replace('{salesCreditMemoLine_id}', encodeURIComponent(salesCreditMemoLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified salesCreditMemoLine
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the salesCreditMemoLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.sequence] The sequence property for the
 * salesCreditMemoLine entity
 *
 * @param {uuid} [body.itemId] The itemId property for the salesCreditMemoLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the
 * salesCreditMemoLine entity
 *
 * @param {string} [body.lineType] The lineType property for the
 * salesCreditMemoLine entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * salesCreditMemoLine entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * salesCreditMemoLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.quantity] The quantity property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * salesCreditMemoLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesCreditMemoLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the salesCreditMemoLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the salesCreditMemoLine entity
 *
 * @param {number} [body.invoiceDiscountAllocation] The
 * invoiceDiscountAllocation property for the salesCreditMemoLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the salesCreditMemoLine entity
 *
 * @param {date} [body.shipmentDate] The shipmentDate property for the
 * salesCreditMemoLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesCreditMemoId id for salesCreditMemo
 *
 * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesCreditMemoLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchSalesCreditMemoLineForSalesCreditMemoByIdById(body, companyId, salesCreditMemoId, salesCreditMemoLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesCreditMemoId === null || salesCreditMemoId === undefined || typeof salesCreditMemoId.valueOf() !== 'string' || !msRest.isValidUuid(salesCreditMemoId)) {
      throw new Error('salesCreditMemoId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesCreditMemoLineId === null || salesCreditMemoLineId === undefined || typeof salesCreditMemoLineId.valueOf() !== 'string') {
      throw new Error('salesCreditMemoLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines(\'{salesCreditMemoLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesCreditMemo_id}', encodeURIComponent(salesCreditMemoId.toString()));
  requestUrl = requestUrl.replace('{salesCreditMemoLine_id}', encodeURIComponent(salesCreditMemoLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesCreditMemoLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of pdfDocument
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesCreditMemoId id for salesCreditMemo
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetPdfDocumentForSalesCreditMemoOKResponse}
 *                      for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPdfDocumentForSalesCreditMemo(companyId, salesCreditMemoId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesCreditMemoId === null || salesCreditMemoId === undefined || typeof salesCreditMemoId.valueOf() !== 'string' || !msRest.isValidUuid(salesCreditMemoId)) {
      throw new Error('salesCreditMemoId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesCreditMemos({salesCreditMemo_id})/pdfDocument';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesCreditMemo_id}', encodeURIComponent(salesCreditMemoId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetPdfDocumentForSalesCreditMemoOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an pdfDocument object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} salesCreditMemoId id for salesCreditMemo
 *
 * @param {uuid} pdfDocumentId id for pdfDocument
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PdfDocument} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPdfDocumentForSalesCreditMemoById(companyId, salesCreditMemoId, pdfDocumentId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesCreditMemoId === null || salesCreditMemoId === undefined || typeof salesCreditMemoId.valueOf() !== 'string' || !msRest.isValidUuid(salesCreditMemoId)) {
      throw new Error('salesCreditMemoId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pdfDocumentId === null || pdfDocumentId === undefined || typeof pdfDocumentId.valueOf() !== 'string' || !msRest.isValidUuid(pdfDocumentId)) {
      throw new Error('pdfDocumentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesCreditMemos({salesCreditMemo_id})/pdfDocument({pdfDocument_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesCreditMemo_id}', encodeURIComponent(salesCreditMemoId.toString()));
  requestUrl = requestUrl.replace('{pdfDocument_id}', encodeURIComponent(pdfDocumentId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PdfDocument']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of salesCreditMemoLines
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetSalesCreditMemoLinesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesCreditMemoLines(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesCreditMemoLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetSalesCreditMemoLinesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a salesCreditMemoLine in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the salesCreditMemoLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.sequence] The sequence property for the
 * salesCreditMemoLine entity
 *
 * @param {uuid} [body.itemId] The itemId property for the salesCreditMemoLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the
 * salesCreditMemoLine entity
 *
 * @param {string} [body.lineType] The lineType property for the
 * salesCreditMemoLine entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * salesCreditMemoLine entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * salesCreditMemoLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.quantity] The quantity property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * salesCreditMemoLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesCreditMemoLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the salesCreditMemoLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the salesCreditMemoLine entity
 *
 * @param {number} [body.invoiceDiscountAllocation] The
 * invoiceDiscountAllocation property for the salesCreditMemoLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the salesCreditMemoLine entity
 *
 * @param {date} [body.shipmentDate] The shipmentDate property for the
 * salesCreditMemoLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesCreditMemoLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postSalesCreditMemoLine(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesCreditMemoLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesCreditMemoLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an salesCreditMemoLine
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesCreditMemoLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSalesCreditMemoLineById(companyId, salesCreditMemoLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesCreditMemoLineId === null || salesCreditMemoLineId === undefined || typeof salesCreditMemoLineId.valueOf() !== 'string') {
      throw new Error('salesCreditMemoLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesCreditMemoLines(\'{salesCreditMemoLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesCreditMemoLine_id}', encodeURIComponent(salesCreditMemoLineId));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesCreditMemoLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an salesCreditMemoLine in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteSalesCreditMemoLineById(companyId, salesCreditMemoLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesCreditMemoLineId === null || salesCreditMemoLineId === undefined || typeof salesCreditMemoLineId.valueOf() !== 'string') {
      throw new Error('salesCreditMemoLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesCreditMemoLines(\'{salesCreditMemoLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesCreditMemoLine_id}', encodeURIComponent(salesCreditMemoLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified salesCreditMemoLine
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the salesCreditMemoLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.sequence] The sequence property for the
 * salesCreditMemoLine entity
 *
 * @param {uuid} [body.itemId] The itemId property for the salesCreditMemoLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the
 * salesCreditMemoLine entity
 *
 * @param {string} [body.lineType] The lineType property for the
 * salesCreditMemoLine entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * salesCreditMemoLine entity
 *
 * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
 * salesCreditMemoLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.unitPrice] The unitPrice property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.quantity] The quantity property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * salesCreditMemoLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the salesCreditMemoLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the salesCreditMemoLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the salesCreditMemoLine entity
 *
 * @param {number} [body.invoiceDiscountAllocation] The
 * invoiceDiscountAllocation property for the salesCreditMemoLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * salesCreditMemoLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the salesCreditMemoLine entity
 *
 * @param {date} [body.shipmentDate] The shipmentDate property for the
 * salesCreditMemoLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SalesCreditMemoLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchSalesCreditMemoLineById(body, companyId, salesCreditMemoLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (salesCreditMemoLineId === null || salesCreditMemoLineId === undefined || typeof salesCreditMemoLineId.valueOf() !== 'string') {
      throw new Error('salesCreditMemoLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/salesCreditMemoLines(\'{salesCreditMemoLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{salesCreditMemoLine_id}', encodeURIComponent(salesCreditMemoLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SalesCreditMemoLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of generalLedgerEntryAttachments
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetGeneralLedgerEntryAttachmentsOKResponse}
 *                      for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getGeneralLedgerEntryAttachments(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/generalLedgerEntryAttachments';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetGeneralLedgerEntryAttachmentsOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a generalLedgerEntryAttachments in Dynamics 365 Business
 * Central
 *
 * @param {object} body
 *
 * @param {number} [body.generalLedgerEntryNumber] The generalLedgerEntryNumber
 * property for the generalLedgerEntryAttachments entity
 *
 * @param {uuid} [body.id] The id property for the
 * generalLedgerEntryAttachments entity
 *
 * @param {string} [body.fileName] The fileName property for the
 * generalLedgerEntryAttachments entity
 *
 * @param {number} [body.byteSize] The byteSize property for the
 * generalLedgerEntryAttachments entity
 *
 * @param {string} [body.content] The content property for the
 * generalLedgerEntryAttachments entity
 *
 * @param {date} [body.createdDateTime] The createdDateTime property for the
 * generalLedgerEntryAttachments entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GeneralLedgerEntryAttachments} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postGeneralLedgerEntryAttachments(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/generalLedgerEntryAttachments';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GeneralLedgerEntryAttachments']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an
 * generalLedgerEntryAttachments object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {number} generalLedgerEntryAttachmentsGeneralLedgerEntryNumber
 * generalLedgerEntryNumber for generalLedgerEntryAttachments
 *
 * @param {uuid} generalLedgerEntryAttachmentsId id for
 * generalLedgerEntryAttachments
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GeneralLedgerEntryAttachments} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (generalLedgerEntryAttachmentsGeneralLedgerEntryNumber === null || generalLedgerEntryAttachmentsGeneralLedgerEntryNumber === undefined || typeof generalLedgerEntryAttachmentsGeneralLedgerEntryNumber !== 'number') {
      throw new Error('generalLedgerEntryAttachmentsGeneralLedgerEntryNumber cannot be null or undefined and it must be of type number.');
    }
    if (generalLedgerEntryAttachmentsId === null || generalLedgerEntryAttachmentsId === undefined || typeof generalLedgerEntryAttachmentsId.valueOf() !== 'string' || !msRest.isValidUuid(generalLedgerEntryAttachmentsId)) {
      throw new Error('generalLedgerEntryAttachmentsId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/generalLedgerEntryAttachments({generalLedgerEntryAttachments_generalLedgerEntryNumber},{generalLedgerEntryAttachments_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{generalLedgerEntryAttachments_generalLedgerEntryNumber}', encodeURIComponent(generalLedgerEntryAttachmentsGeneralLedgerEntryNumber.toString()));
  requestUrl = requestUrl.replace('{generalLedgerEntryAttachments_id}', encodeURIComponent(generalLedgerEntryAttachmentsId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GeneralLedgerEntryAttachments']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an generalLedgerEntryAttachments in Dynamics 365 Business
 * Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {number} generalLedgerEntryAttachmentsGeneralLedgerEntryNumber
 * generalLedgerEntryNumber for generalLedgerEntryAttachments
 *
 * @param {uuid} generalLedgerEntryAttachmentsId id for
 * generalLedgerEntryAttachments
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (generalLedgerEntryAttachmentsGeneralLedgerEntryNumber === null || generalLedgerEntryAttachmentsGeneralLedgerEntryNumber === undefined || typeof generalLedgerEntryAttachmentsGeneralLedgerEntryNumber !== 'number') {
      throw new Error('generalLedgerEntryAttachmentsGeneralLedgerEntryNumber cannot be null or undefined and it must be of type number.');
    }
    if (generalLedgerEntryAttachmentsId === null || generalLedgerEntryAttachmentsId === undefined || typeof generalLedgerEntryAttachmentsId.valueOf() !== 'string' || !msRest.isValidUuid(generalLedgerEntryAttachmentsId)) {
      throw new Error('generalLedgerEntryAttachmentsId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/generalLedgerEntryAttachments({generalLedgerEntryAttachments_generalLedgerEntryNumber},{generalLedgerEntryAttachments_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{generalLedgerEntryAttachments_generalLedgerEntryNumber}', encodeURIComponent(generalLedgerEntryAttachmentsGeneralLedgerEntryNumber.toString()));
  requestUrl = requestUrl.replace('{generalLedgerEntryAttachments_id}', encodeURIComponent(generalLedgerEntryAttachmentsId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified generalLedgerEntryAttachments
 *
 * @param {object} body
 *
 * @param {number} [body.generalLedgerEntryNumber] The generalLedgerEntryNumber
 * property for the generalLedgerEntryAttachments entity
 *
 * @param {uuid} [body.id] The id property for the
 * generalLedgerEntryAttachments entity
 *
 * @param {string} [body.fileName] The fileName property for the
 * generalLedgerEntryAttachments entity
 *
 * @param {number} [body.byteSize] The byteSize property for the
 * generalLedgerEntryAttachments entity
 *
 * @param {string} [body.content] The content property for the
 * generalLedgerEntryAttachments entity
 *
 * @param {date} [body.createdDateTime] The createdDateTime property for the
 * generalLedgerEntryAttachments entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {number} generalLedgerEntryAttachmentsGeneralLedgerEntryNumber
 * generalLedgerEntryNumber for generalLedgerEntryAttachments
 *
 * @param {uuid} generalLedgerEntryAttachmentsId id for
 * generalLedgerEntryAttachments
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GeneralLedgerEntryAttachments} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(body, companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (generalLedgerEntryAttachmentsGeneralLedgerEntryNumber === null || generalLedgerEntryAttachmentsGeneralLedgerEntryNumber === undefined || typeof generalLedgerEntryAttachmentsGeneralLedgerEntryNumber !== 'number') {
      throw new Error('generalLedgerEntryAttachmentsGeneralLedgerEntryNumber cannot be null or undefined and it must be of type number.');
    }
    if (generalLedgerEntryAttachmentsId === null || generalLedgerEntryAttachmentsId === undefined || typeof generalLedgerEntryAttachmentsId.valueOf() !== 'string' || !msRest.isValidUuid(generalLedgerEntryAttachmentsId)) {
      throw new Error('generalLedgerEntryAttachmentsId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/generalLedgerEntryAttachments({generalLedgerEntryAttachments_generalLedgerEntryNumber},{generalLedgerEntryAttachments_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{generalLedgerEntryAttachments_generalLedgerEntryNumber}', encodeURIComponent(generalLedgerEntryAttachmentsGeneralLedgerEntryNumber.toString()));
  requestUrl = requestUrl.replace('{generalLedgerEntryAttachments_id}', encodeURIComponent(generalLedgerEntryAttachmentsId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GeneralLedgerEntryAttachments']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of purchaseInvoices
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetPurchaseInvoicesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPurchaseInvoices(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoices';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetPurchaseInvoicesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a purchaseInvoice in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the purchaseInvoice entity
 *
 * @param {string} [body.number] The number property for the purchaseInvoice
 * entity
 *
 * @param {date} [body.invoiceDate] The invoiceDate property for the
 * purchaseInvoice entity
 *
 * @param {date} [body.dueDate] The dueDate property for the purchaseInvoice
 * entity
 *
 * @param {string} [body.vendorInvoiceNumber] The vendorInvoiceNumber property
 * for the purchaseInvoice entity
 *
 * @param {uuid} [body.vendorId] The vendorId property for the purchaseInvoice
 * entity
 *
 * @param {string} [body.vendorNumber] The vendorNumber property for the
 * purchaseInvoice entity
 *
 * @param {string} [body.vendorName] The vendorName property for the
 * purchaseInvoice entity
 *
 * @param {string} [body.payToName] The payToName property for the
 * purchaseInvoice entity
 *
 * @param {string} [body.payToContact] The payToContact property for the
 * purchaseInvoice entity
 *
 * @param {uuid} [body.payToVendorId] The payToVendorId property for the
 * purchaseInvoice entity
 *
 * @param {string} [body.payToVendorNumber] The payToVendorNumber property for
 * the purchaseInvoice entity
 *
 * @param {string} [body.shipToName] The shipToName property for the
 * purchaseInvoice entity
 *
 * @param {string} [body.shipToContact] The shipToContact property for the
 * purchaseInvoice entity
 *
 * @param {object} [body.buyFromAddress]
 *
 * @param {object} [body.payToAddress]
 *
 * @param {object} [body.shipToAddress]
 *
 * @param {string} [body.shipToAddress.street] The street property for the
 * postaladdresstype entity
 *
 * @param {string} [body.shipToAddress.city] The city property for the
 * postaladdresstype entity
 *
 * @param {string} [body.shipToAddress.state] The state property for the
 * postaladdresstype entity
 *
 * @param {string} [body.shipToAddress.countryLetterCode] The countryLetterCode
 * property for the postaladdresstype entity
 *
 * @param {string} [body.shipToAddress.postalCode] The postalCode property for
 * the postaladdresstype entity
 *
 * @param {array} [body.shipToAddress.customerFinancialDetails]
 *
 * @param {array} [body.shipToAddress.picture]
 *
 * @param {array} [body.shipToAddress.defaultDimensions]
 *
 * @param {object} [body.shipToAddress.currency]
 *
 * @param {uuid} [body.shipToAddress.currency.id] The id property for the
 * currency entity
 *
 * @param {string} [body.shipToAddress.currency.code] The code property for the
 * currency entity
 *
 * @param {string} [body.shipToAddress.currency.displayName] The displayName
 * property for the currency entity
 *
 * @param {string} [body.shipToAddress.currency.symbol] The symbol property for
 * the currency entity
 *
 * @param {string} [body.shipToAddress.currency.amountDecimalPlaces] The
 * amountDecimalPlaces property for the currency entity
 *
 * @param {number} [body.shipToAddress.currency.amountRoundingPrecision] The
 * amountRoundingPrecision property for the currency entity
 *
 * @param {date} [body.shipToAddress.currency.lastModifiedDateTime] The
 * lastModifiedDateTime property for the currency entity
 *
 * @param {object} [body.shipToAddress.paymentTerm]
 *
 * @param {uuid} [body.shipToAddress.paymentTerm.id] The id property for the
 * paymentTerm entity
 *
 * @param {string} [body.shipToAddress.paymentTerm.code] The code property for
 * the paymentTerm entity
 *
 * @param {string} [body.shipToAddress.paymentTerm.displayName] The displayName
 * property for the paymentTerm entity
 *
 * @param {string} [body.shipToAddress.paymentTerm.dueDateCalculation] The
 * dueDateCalculation property for the paymentTerm entity
 *
 * @param {string} [body.shipToAddress.paymentTerm.discountDateCalculation] The
 * discountDateCalculation property for the paymentTerm entity
 *
 * @param {number} [body.shipToAddress.paymentTerm.discountPercent] The
 * discountPercent property for the paymentTerm entity
 *
 * @param {boolean}
 * [body.shipToAddress.paymentTerm.calculateDiscountOnCreditMemos] The
 * calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.shipToAddress.paymentTerm.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentTerm entity
 *
 * @param {object} [body.shipToAddress.shipmentMethod]
 *
 * @param {uuid} [body.shipToAddress.shipmentMethod.id] The id property for the
 * shipmentMethod entity
 *
 * @param {string} [body.shipToAddress.shipmentMethod.code] The code property
 * for the shipmentMethod entity
 *
 * @param {string} [body.shipToAddress.shipmentMethod.displayName] The
 * displayName property for the shipmentMethod entity
 *
 * @param {date} [body.shipToAddress.shipmentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the shipmentMethod entity
 *
 * @param {object} [body.shipToAddress.paymentMethod]
 *
 * @param {uuid} [body.shipToAddress.paymentMethod.id] The id property for the
 * paymentMethod entity
 *
 * @param {string} [body.shipToAddress.paymentMethod.code] The code property
 * for the paymentMethod entity
 *
 * @param {string} [body.shipToAddress.paymentMethod.displayName] The
 * displayName property for the paymentMethod entity
 *
 * @param {date} [body.shipToAddress.paymentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentMethod entity
 *
 * @param {uuid} [body.currencyId] The currencyId property for the
 * purchaseInvoice entity
 *
 * @param {string} [body.currencyCode] The currencyCode property for the
 * purchaseInvoice entity
 *
 * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
 * the purchaseInvoice entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * purchaseInvoice entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the purchaseInvoice entity
 *
 * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
 * property for the purchaseInvoice entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * purchaseInvoice entity
 *
 * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
 * property for the purchaseInvoice entity
 *
 * @param {string} [body.status] The status property for the purchaseInvoice
 * entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the purchaseInvoice entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PurchaseInvoice} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postPurchaseInvoice(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoices';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PurchaseInvoice']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an purchaseInvoice
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} purchaseInvoiceId id for purchaseInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PurchaseInvoice} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPurchaseInvoiceById(companyId, purchaseInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (purchaseInvoiceId === null || purchaseInvoiceId === undefined || typeof purchaseInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(purchaseInvoiceId)) {
      throw new Error('purchaseInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoices({purchaseInvoice_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{purchaseInvoice_id}', encodeURIComponent(purchaseInvoiceId.toString()));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PurchaseInvoice']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an purchaseInvoice in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} purchaseInvoiceId id for purchaseInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deletePurchaseInvoiceById(companyId, purchaseInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (purchaseInvoiceId === null || purchaseInvoiceId === undefined || typeof purchaseInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(purchaseInvoiceId)) {
      throw new Error('purchaseInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoices({purchaseInvoice_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{purchaseInvoice_id}', encodeURIComponent(purchaseInvoiceId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified purchaseInvoice
 *
 * @param {object} body
 *
 * @param {uuid} [body.id] The id property for the purchaseInvoice entity
 *
 * @param {string} [body.number] The number property for the purchaseInvoice
 * entity
 *
 * @param {date} [body.invoiceDate] The invoiceDate property for the
 * purchaseInvoice entity
 *
 * @param {date} [body.dueDate] The dueDate property for the purchaseInvoice
 * entity
 *
 * @param {string} [body.vendorInvoiceNumber] The vendorInvoiceNumber property
 * for the purchaseInvoice entity
 *
 * @param {uuid} [body.vendorId] The vendorId property for the purchaseInvoice
 * entity
 *
 * @param {string} [body.vendorNumber] The vendorNumber property for the
 * purchaseInvoice entity
 *
 * @param {string} [body.vendorName] The vendorName property for the
 * purchaseInvoice entity
 *
 * @param {string} [body.payToName] The payToName property for the
 * purchaseInvoice entity
 *
 * @param {string} [body.payToContact] The payToContact property for the
 * purchaseInvoice entity
 *
 * @param {uuid} [body.payToVendorId] The payToVendorId property for the
 * purchaseInvoice entity
 *
 * @param {string} [body.payToVendorNumber] The payToVendorNumber property for
 * the purchaseInvoice entity
 *
 * @param {string} [body.shipToName] The shipToName property for the
 * purchaseInvoice entity
 *
 * @param {string} [body.shipToContact] The shipToContact property for the
 * purchaseInvoice entity
 *
 * @param {object} [body.buyFromAddress]
 *
 * @param {object} [body.payToAddress]
 *
 * @param {object} [body.shipToAddress]
 *
 * @param {string} [body.shipToAddress.street] The street property for the
 * postaladdresstype entity
 *
 * @param {string} [body.shipToAddress.city] The city property for the
 * postaladdresstype entity
 *
 * @param {string} [body.shipToAddress.state] The state property for the
 * postaladdresstype entity
 *
 * @param {string} [body.shipToAddress.countryLetterCode] The countryLetterCode
 * property for the postaladdresstype entity
 *
 * @param {string} [body.shipToAddress.postalCode] The postalCode property for
 * the postaladdresstype entity
 *
 * @param {array} [body.shipToAddress.customerFinancialDetails]
 *
 * @param {array} [body.shipToAddress.picture]
 *
 * @param {array} [body.shipToAddress.defaultDimensions]
 *
 * @param {object} [body.shipToAddress.currency]
 *
 * @param {uuid} [body.shipToAddress.currency.id] The id property for the
 * currency entity
 *
 * @param {string} [body.shipToAddress.currency.code] The code property for the
 * currency entity
 *
 * @param {string} [body.shipToAddress.currency.displayName] The displayName
 * property for the currency entity
 *
 * @param {string} [body.shipToAddress.currency.symbol] The symbol property for
 * the currency entity
 *
 * @param {string} [body.shipToAddress.currency.amountDecimalPlaces] The
 * amountDecimalPlaces property for the currency entity
 *
 * @param {number} [body.shipToAddress.currency.amountRoundingPrecision] The
 * amountRoundingPrecision property for the currency entity
 *
 * @param {date} [body.shipToAddress.currency.lastModifiedDateTime] The
 * lastModifiedDateTime property for the currency entity
 *
 * @param {object} [body.shipToAddress.paymentTerm]
 *
 * @param {uuid} [body.shipToAddress.paymentTerm.id] The id property for the
 * paymentTerm entity
 *
 * @param {string} [body.shipToAddress.paymentTerm.code] The code property for
 * the paymentTerm entity
 *
 * @param {string} [body.shipToAddress.paymentTerm.displayName] The displayName
 * property for the paymentTerm entity
 *
 * @param {string} [body.shipToAddress.paymentTerm.dueDateCalculation] The
 * dueDateCalculation property for the paymentTerm entity
 *
 * @param {string} [body.shipToAddress.paymentTerm.discountDateCalculation] The
 * discountDateCalculation property for the paymentTerm entity
 *
 * @param {number} [body.shipToAddress.paymentTerm.discountPercent] The
 * discountPercent property for the paymentTerm entity
 *
 * @param {boolean}
 * [body.shipToAddress.paymentTerm.calculateDiscountOnCreditMemos] The
 * calculateDiscountOnCreditMemos property for the paymentTerm entity
 *
 * @param {date} [body.shipToAddress.paymentTerm.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentTerm entity
 *
 * @param {object} [body.shipToAddress.shipmentMethod]
 *
 * @param {uuid} [body.shipToAddress.shipmentMethod.id] The id property for the
 * shipmentMethod entity
 *
 * @param {string} [body.shipToAddress.shipmentMethod.code] The code property
 * for the shipmentMethod entity
 *
 * @param {string} [body.shipToAddress.shipmentMethod.displayName] The
 * displayName property for the shipmentMethod entity
 *
 * @param {date} [body.shipToAddress.shipmentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the shipmentMethod entity
 *
 * @param {object} [body.shipToAddress.paymentMethod]
 *
 * @param {uuid} [body.shipToAddress.paymentMethod.id] The id property for the
 * paymentMethod entity
 *
 * @param {string} [body.shipToAddress.paymentMethod.code] The code property
 * for the paymentMethod entity
 *
 * @param {string} [body.shipToAddress.paymentMethod.displayName] The
 * displayName property for the paymentMethod entity
 *
 * @param {date} [body.shipToAddress.paymentMethod.lastModifiedDateTime] The
 * lastModifiedDateTime property for the paymentMethod entity
 *
 * @param {uuid} [body.currencyId] The currencyId property for the
 * purchaseInvoice entity
 *
 * @param {string} [body.currencyCode] The currencyCode property for the
 * purchaseInvoice entity
 *
 * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
 * the purchaseInvoice entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * purchaseInvoice entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the purchaseInvoice entity
 *
 * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
 * property for the purchaseInvoice entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * purchaseInvoice entity
 *
 * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
 * property for the purchaseInvoice entity
 *
 * @param {string} [body.status] The status property for the purchaseInvoice
 * entity
 *
 * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
 * for the purchaseInvoice entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} purchaseInvoiceId id for purchaseInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PurchaseInvoice} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchPurchaseInvoiceById(body, companyId, purchaseInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (purchaseInvoiceId === null || purchaseInvoiceId === undefined || typeof purchaseInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(purchaseInvoiceId)) {
      throw new Error('purchaseInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoices({purchaseInvoice_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{purchaseInvoice_id}', encodeURIComponent(purchaseInvoiceId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PurchaseInvoice']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Performs the post action for purchaseInvoices entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} purchaseInvoiceId id for purchaseInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postActionPurchaseInvoices(companyId, purchaseInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (purchaseInvoiceId === null || purchaseInvoiceId === undefined || typeof purchaseInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(purchaseInvoiceId)) {
      throw new Error('purchaseInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoices({purchaseInvoice_id})/Microsoft.NAV.post';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{purchaseInvoice_id}', encodeURIComponent(purchaseInvoiceId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of purchaseInvoiceLines
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} purchaseInvoiceId id for purchaseInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link
 *                      GetPurchaseInvoiceLinesForPurchaseInvoiceOKResponse}
 *                      for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPurchaseInvoiceLinesForPurchaseInvoice(companyId, purchaseInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (purchaseInvoiceId === null || purchaseInvoiceId === undefined || typeof purchaseInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(purchaseInvoiceId)) {
      throw new Error('purchaseInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{purchaseInvoice_id}', encodeURIComponent(purchaseInvoiceId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetPurchaseInvoiceLinesForPurchaseInvoiceOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a purchaseInvoiceLine in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the purchaseInvoiceLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.sequence] The sequence property for the
 * purchaseInvoiceLine entity
 *
 * @param {uuid} [body.itemId] The itemId property for the purchaseInvoiceLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the
 * purchaseInvoiceLine entity
 *
 * @param {string} [body.lineType] The lineType property for the
 * purchaseInvoiceLine entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * purchaseInvoiceLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.unitCost] The unitCost property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.quantity] The quantity property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * purchaseInvoiceLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the purchaseInvoiceLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the purchaseInvoiceLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the purchaseInvoiceLine entity
 *
 * @param {number} [body.invoiceDiscountAllocation] The
 * invoiceDiscountAllocation property for the purchaseInvoiceLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the purchaseInvoiceLine entity
 *
 * @param {date} [body.expectedReceiptDate] The expectedReceiptDate property
 * for the purchaseInvoiceLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} purchaseInvoiceId id for purchaseInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PurchaseInvoiceLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postPurchaseInvoiceLineForPurchaseInvoice(body, companyId, purchaseInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (purchaseInvoiceId === null || purchaseInvoiceId === undefined || typeof purchaseInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(purchaseInvoiceId)) {
      throw new Error('purchaseInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{purchaseInvoice_id}', encodeURIComponent(purchaseInvoiceId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PurchaseInvoiceLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an purchaseInvoiceLine
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} purchaseInvoiceId id for purchaseInvoice
 *
 * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PurchaseInvoiceLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPurchaseInvoiceLineForPurchaseInvoiceById(companyId, purchaseInvoiceId, purchaseInvoiceLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (purchaseInvoiceId === null || purchaseInvoiceId === undefined || typeof purchaseInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(purchaseInvoiceId)) {
      throw new Error('purchaseInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (purchaseInvoiceLineId === null || purchaseInvoiceLineId === undefined || typeof purchaseInvoiceLineId.valueOf() !== 'string') {
      throw new Error('purchaseInvoiceLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines(\'{purchaseInvoiceLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{purchaseInvoice_id}', encodeURIComponent(purchaseInvoiceId.toString()));
  requestUrl = requestUrl.replace('{purchaseInvoiceLine_id}', encodeURIComponent(purchaseInvoiceLineId));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PurchaseInvoiceLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an purchaseInvoiceLine in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} purchaseInvoiceId id for purchaseInvoice
 *
 * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deletePurchaseInvoiceLineForPurchaseInvoiceByIdById(companyId, purchaseInvoiceId, purchaseInvoiceLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (purchaseInvoiceId === null || purchaseInvoiceId === undefined || typeof purchaseInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(purchaseInvoiceId)) {
      throw new Error('purchaseInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (purchaseInvoiceLineId === null || purchaseInvoiceLineId === undefined || typeof purchaseInvoiceLineId.valueOf() !== 'string') {
      throw new Error('purchaseInvoiceLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines(\'{purchaseInvoiceLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{purchaseInvoice_id}', encodeURIComponent(purchaseInvoiceId.toString()));
  requestUrl = requestUrl.replace('{purchaseInvoiceLine_id}', encodeURIComponent(purchaseInvoiceLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified purchaseInvoiceLine
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the purchaseInvoiceLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.sequence] The sequence property for the
 * purchaseInvoiceLine entity
 *
 * @param {uuid} [body.itemId] The itemId property for the purchaseInvoiceLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the
 * purchaseInvoiceLine entity
 *
 * @param {string} [body.lineType] The lineType property for the
 * purchaseInvoiceLine entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * purchaseInvoiceLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.unitCost] The unitCost property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.quantity] The quantity property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * purchaseInvoiceLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the purchaseInvoiceLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the purchaseInvoiceLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the purchaseInvoiceLine entity
 *
 * @param {number} [body.invoiceDiscountAllocation] The
 * invoiceDiscountAllocation property for the purchaseInvoiceLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the purchaseInvoiceLine entity
 *
 * @param {date} [body.expectedReceiptDate] The expectedReceiptDate property
 * for the purchaseInvoiceLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} purchaseInvoiceId id for purchaseInvoice
 *
 * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PurchaseInvoiceLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchPurchaseInvoiceLineForPurchaseInvoiceByIdById(body, companyId, purchaseInvoiceId, purchaseInvoiceLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (purchaseInvoiceId === null || purchaseInvoiceId === undefined || typeof purchaseInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(purchaseInvoiceId)) {
      throw new Error('purchaseInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (purchaseInvoiceLineId === null || purchaseInvoiceLineId === undefined || typeof purchaseInvoiceLineId.valueOf() !== 'string') {
      throw new Error('purchaseInvoiceLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines(\'{purchaseInvoiceLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{purchaseInvoice_id}', encodeURIComponent(purchaseInvoiceId.toString()));
  requestUrl = requestUrl.replace('{purchaseInvoiceLine_id}', encodeURIComponent(purchaseInvoiceLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PurchaseInvoiceLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of pdfDocument
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} purchaseInvoiceId id for purchaseInvoice
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetPdfDocumentForPurchaseInvoiceOKResponse}
 *                      for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPdfDocumentForPurchaseInvoice(companyId, purchaseInvoiceId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (purchaseInvoiceId === null || purchaseInvoiceId === undefined || typeof purchaseInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(purchaseInvoiceId)) {
      throw new Error('purchaseInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoices({purchaseInvoice_id})/pdfDocument';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{purchaseInvoice_id}', encodeURIComponent(purchaseInvoiceId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetPdfDocumentForPurchaseInvoiceOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an pdfDocument object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} purchaseInvoiceId id for purchaseInvoice
 *
 * @param {uuid} pdfDocumentId id for pdfDocument
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PdfDocument} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPdfDocumentForPurchaseInvoiceById(companyId, purchaseInvoiceId, pdfDocumentId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (purchaseInvoiceId === null || purchaseInvoiceId === undefined || typeof purchaseInvoiceId.valueOf() !== 'string' || !msRest.isValidUuid(purchaseInvoiceId)) {
      throw new Error('purchaseInvoiceId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (pdfDocumentId === null || pdfDocumentId === undefined || typeof pdfDocumentId.valueOf() !== 'string' || !msRest.isValidUuid(pdfDocumentId)) {
      throw new Error('pdfDocumentId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoices({purchaseInvoice_id})/pdfDocument({pdfDocument_id})';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{purchaseInvoice_id}', encodeURIComponent(purchaseInvoiceId.toString()));
  requestUrl = requestUrl.replace('{pdfDocument_id}', encodeURIComponent(pdfDocumentId.toString()));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PdfDocument']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of purchaseInvoiceLines
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetPurchaseInvoiceLinesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPurchaseInvoiceLines(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoiceLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetPurchaseInvoiceLinesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Creates a purchaseInvoiceLine in Dynamics 365 Business Central
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the purchaseInvoiceLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.sequence] The sequence property for the
 * purchaseInvoiceLine entity
 *
 * @param {uuid} [body.itemId] The itemId property for the purchaseInvoiceLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the
 * purchaseInvoiceLine entity
 *
 * @param {string} [body.lineType] The lineType property for the
 * purchaseInvoiceLine entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * purchaseInvoiceLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.unitCost] The unitCost property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.quantity] The quantity property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * purchaseInvoiceLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the purchaseInvoiceLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the purchaseInvoiceLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the purchaseInvoiceLine entity
 *
 * @param {number} [body.invoiceDiscountAllocation] The
 * invoiceDiscountAllocation property for the purchaseInvoiceLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the purchaseInvoiceLine entity
 *
 * @param {date} [body.expectedReceiptDate] The expectedReceiptDate property
 * for the purchaseInvoiceLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PurchaseInvoiceLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _postPurchaseInvoiceLine(body, companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoiceLines';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PurchaseInvoiceLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an purchaseInvoiceLine
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.expand] Entities to expand
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PurchaseInvoiceLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPurchaseInvoiceLineById(companyId, purchaseInvoiceLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(expand)) {
      for (let i = 0; i < expand.length; i++) {
        if (expand[i] !== null && expand[i] !== undefined && typeof expand[i].valueOf() !== 'string') {
          throw new Error('expand[i] must be of type string.');
        }
      }
    }
    if (Array.isArray(select)) {
      for (let i1 = 0; i1 < select.length; i1++) {
        if (select[i1] !== null && select[i1] !== undefined && typeof select[i1].valueOf() !== 'string') {
          throw new Error('select[i1] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (purchaseInvoiceLineId === null || purchaseInvoiceLineId === undefined || typeof purchaseInvoiceLineId.valueOf() !== 'string') {
      throw new Error('purchaseInvoiceLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoiceLines(\'{purchaseInvoiceLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{purchaseInvoiceLine_id}', encodeURIComponent(purchaseInvoiceLineId));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand.join(',')));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PurchaseInvoiceLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete an purchaseInvoiceLine in Dynamics 365 Business Central
 *
 * @param {uuid} companyId id for company
 *
 * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deletePurchaseInvoiceLineById(companyId, purchaseInvoiceLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (purchaseInvoiceLineId === null || purchaseInvoiceLineId === undefined || typeof purchaseInvoiceLineId.valueOf() !== 'string') {
      throw new Error('purchaseInvoiceLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoiceLines(\'{purchaseInvoiceLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{purchaseInvoiceLine_id}', encodeURIComponent(purchaseInvoiceLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Lets the user patch the specified purchaseInvoiceLine
 *
 * @param {object} body
 *
 * @param {string} [body.id] The id property for the purchaseInvoiceLine entity
 *
 * @param {uuid} [body.documentId] The documentId property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.sequence] The sequence property for the
 * purchaseInvoiceLine entity
 *
 * @param {uuid} [body.itemId] The itemId property for the purchaseInvoiceLine
 * entity
 *
 * @param {uuid} [body.accountId] The accountId property for the
 * purchaseInvoiceLine entity
 *
 * @param {string} [body.lineType] The lineType property for the
 * purchaseInvoiceLine entity
 *
 * @param {object} [body.lineDetails]
 *
 * @param {string} [body.lineDetails.number] The number property for the
 * documentlineobjectdetailstype entity
 *
 * @param {string} [body.lineDetails.displayName] The displayName property for
 * the documentlineobjectdetailstype entity
 *
 * @param {object} [body.lineDetails.item]
 *
 * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
 *
 * @param {string} [body.lineDetails.item.number] The number property for the
 * item entity
 *
 * @param {string} [body.lineDetails.item.displayName] The displayName property
 * for the item entity
 *
 * @param {string} [body.lineDetails.item.type] The type property for the item
 * entity
 *
 * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
 * property for the item entity
 *
 * @param {string} [body.lineDetails.item.itemCategoryCode] The
 * itemCategoryCode property for the item entity
 *
 * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
 * baseUnitOfMeasureId property for the item entity
 *
 * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
 *
 * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
 * entity
 *
 * @param {number} [body.lineDetails.item.inventory] The inventory property for
 * the item entity
 *
 * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
 * the item entity
 *
 * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
 * priceIncludesTax property for the item entity
 *
 * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
 * the item entity
 *
 * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
 * the item entity
 *
 * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
 * property for the item entity
 *
 * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
 * lastModifiedDateTime property for the item entity
 *
 * @param {array} [body.lineDetails.item.picture]
 *
 * @param {array} [body.lineDetails.item.defaultDimensions]
 *
 * @param {object} [body.lineDetails.item.itemCategory]
 *
 * @param {object} [body.lineDetails.account]
 *
 * @param {uuid} [body.lineDetails.account.id] The id property for the account
 * entity
 *
 * @param {string} [body.lineDetails.account.number] The number property for
 * the account entity
 *
 * @param {string} [body.lineDetails.account.displayName] The displayName
 * property for the account entity
 *
 * @param {string} [body.lineDetails.account.category] The category property
 * for the account entity
 *
 * @param {string} [body.lineDetails.account.subCategory] The subCategory
 * property for the account entity
 *
 * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
 * the account entity
 *
 * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
 * lastModifiedDateTime property for the account entity
 *
 * @param {string} [body.description] The description property for the
 * purchaseInvoiceLine entity
 *
 * @param {object} [body.unitOfMeasure]
 *
 * @param {string} [body.unitOfMeasure.code] The code property for the
 * unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.displayName] The displayName property
 * for the unitofmeasuretype entity
 *
 * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
 * unitofmeasuretype entity
 *
 * @param {object} [body.unitOfMeasure.unitConversion]
 *
 * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
 * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
 *
 * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
 * fromToConversionRate property for the itemunitofmeasureconversiontype entity
 *
 * @param {array} [body.unitOfMeasure.unitConversion.picture]
 *
 * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
 *
 * @param {array} [body.unitOfMeasure.picture]
 *
 * @param {array} [body.unitOfMeasure.defaultDimensions]
 *
 * @param {object} [body.unitOfMeasure.itemCategory]
 *
 * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
 * itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
 * the itemCategory entity
 *
 * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
 * displayName property for the itemCategory entity
 *
 * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
 * lastModifiedDateTime property for the itemCategory entity
 *
 * @param {number} [body.unitCost] The unitCost property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.quantity] The quantity property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.discountAmount] The discountAmount property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.discountPercent] The discountPercent property for the
 * purchaseInvoiceLine entity
 *
 * @param {boolean} [body.discountAppliedBeforeTax] The
 * discountAppliedBeforeTax property for the purchaseInvoiceLine entity
 *
 * @param {number} [body.amountExcludingTax] The amountExcludingTax property
 * for the purchaseInvoiceLine entity
 *
 * @param {string} [body.taxCode] The taxCode property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.taxPercent] The taxPercent property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.amountIncludingTax] The amountIncludingTax property
 * for the purchaseInvoiceLine entity
 *
 * @param {number} [body.invoiceDiscountAllocation] The
 * invoiceDiscountAllocation property for the purchaseInvoiceLine entity
 *
 * @param {number} [body.netAmount] The netAmount property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.netTaxAmount] The netTaxAmount property for the
 * purchaseInvoiceLine entity
 *
 * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
 * property for the purchaseInvoiceLine entity
 *
 * @param {date} [body.expectedReceiptDate] The expectedReceiptDate property
 * for the purchaseInvoiceLine entity
 *
 * @param {uuid} companyId id for company
 *
 * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PurchaseInvoiceLine} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _patchPurchaseInvoiceLineById(body, companyId, purchaseInvoiceLineId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.ifMatch === null || this.ifMatch === undefined || typeof this.ifMatch.valueOf() !== 'string') {
      throw new Error('this.ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (purchaseInvoiceLineId === null || purchaseInvoiceLineId === undefined || typeof purchaseInvoiceLineId.valueOf() !== 'string') {
      throw new Error('purchaseInvoiceLineId cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/purchaseInvoiceLines(\'{purchaseInvoiceLine_id}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{purchaseInvoiceLine_id}', encodeURIComponent(purchaseInvoiceLineId));
  let queryParameters = [];
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.ifMatch !== undefined && this.ifMatch !== null) {
    httpRequest.headers['If-Match'] = this.ifMatch;
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PurchaseInvoiceLine']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of customerSales
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetCustomerSalesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCustomerSales(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerSales';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetCustomerSalesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an customerSale object
 * for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} customerSaleCustomerId customerId for customerSale
 *
 * @param {string} customerSaleCustomerNumber customerNumber for customerSale
 *
 * @param {string} customerSaleName name for customerSale
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CustomerSale} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCustomerSaleByNameByCustomerNumberByCustomerId(companyId, customerSaleCustomerId, customerSaleCustomerNumber, customerSaleName, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerSaleCustomerId === null || customerSaleCustomerId === undefined || typeof customerSaleCustomerId.valueOf() !== 'string' || !msRest.isValidUuid(customerSaleCustomerId)) {
      throw new Error('customerSaleCustomerId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (customerSaleCustomerNumber === null || customerSaleCustomerNumber === undefined || typeof customerSaleCustomerNumber.valueOf() !== 'string') {
      throw new Error('customerSaleCustomerNumber cannot be null or undefined and it must be of type string.');
    }
    if (customerSaleName === null || customerSaleName === undefined || typeof customerSaleName.valueOf() !== 'string') {
      throw new Error('customerSaleName cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/customerSales({customerSale_customerId},\'{customerSale_customerNumber}\',\'{customerSale_name}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{customerSale_customerId}', encodeURIComponent(customerSaleCustomerId.toString()));
  requestUrl = requestUrl.replace('{customerSale_customerNumber}', encodeURIComponent(customerSaleCustomerNumber));
  requestUrl = requestUrl.replace('{customerSale_name}', encodeURIComponent(customerSaleName));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CustomerSale']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Returns a list of vendorPurchases
 *
 * @param {uuid} companyId id for company
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GetVendorPurchasesOKResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getVendorPurchases(companyId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (this.top !== null && this.top !== undefined && typeof this.top !== 'number') {
      throw new Error('this.top must be of type number.');
    }
    if (this.skip !== null && this.skip !== undefined && typeof this.skip !== 'number') {
      throw new Error('this.skip must be of type number.');
    }
    if (this.limit !== null && this.limit !== undefined && typeof this.limit !== 'number') {
      throw new Error('this.limit must be of type number.');
    }
    if (this.filter !== null && this.filter !== undefined && typeof this.filter.valueOf() !== 'string') {
      throw new Error('this.filter must be of type string.');
    }
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/vendorPurchases';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  let queryParameters = [];
  if (this.top !== null && this.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.top.toString()));
  }
  if (this.skip !== null && this.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.skip.toString()));
  }
  if (this.limit !== null && this.limit !== undefined) {
    queryParameters.push('$limit=' + encodeURIComponent(this.limit.toString()));
  }
  if (this.filter !== null && this.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GetVendorPurchasesOKResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Retrieve the properties and relationships of an vendorPurchase
 * object for Dynamics 365 Business Central.
 *
 * @param {uuid} companyId id for company
 *
 * @param {uuid} vendorPurchaseVendorId vendorId for vendorPurchase
 *
 * @param {string} vendorPurchaseVendorNumber vendorNumber for vendorPurchase
 *
 * @param {string} vendorPurchaseName name for vendorPurchase
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {array} [options.select] Selected properties to be retrieved
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link VendorPurchase} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getVendorPurchaseByNameByVendorNumberByVendorId(companyId, vendorPurchaseVendorId, vendorPurchaseVendorNumber, vendorPurchaseName, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let select = (options && options.select !== undefined) ? options.select : undefined;
  // Validate
  try {
    if (Array.isArray(select)) {
      for (let i = 0; i < select.length; i++) {
        if (select[i] !== null && select[i] !== undefined && typeof select[i].valueOf() !== 'string') {
          throw new Error('select[i] must be of type string.');
        }
      }
    }
    if (companyId === null || companyId === undefined || typeof companyId.valueOf() !== 'string' || !msRest.isValidUuid(companyId)) {
      throw new Error('companyId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (vendorPurchaseVendorId === null || vendorPurchaseVendorId === undefined || typeof vendorPurchaseVendorId.valueOf() !== 'string' || !msRest.isValidUuid(vendorPurchaseVendorId)) {
      throw new Error('vendorPurchaseVendorId cannot be null or undefined and it must be of type string and must be a valid uuid.');
    }
    if (vendorPurchaseVendorNumber === null || vendorPurchaseVendorNumber === undefined || typeof vendorPurchaseVendorNumber.valueOf() !== 'string') {
      throw new Error('vendorPurchaseVendorNumber cannot be null or undefined and it must be of type string.');
    }
    if (vendorPurchaseName === null || vendorPurchaseName === undefined || typeof vendorPurchaseName.valueOf() !== 'string') {
      throw new Error('vendorPurchaseName cannot be null or undefined and it must be of type string.');
    }
    if (this.acceptLanguage !== null && this.acceptLanguage !== undefined && typeof this.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'companies({company_id})/vendorPurchases({vendorPurchase_vendorId},\'{vendorPurchase_vendorNumber}\',\'{vendorPurchase_name}\')';
  requestUrl = requestUrl.replace('{company_id}', encodeURIComponent(companyId.toString()));
  requestUrl = requestUrl.replace('{vendorPurchase_vendorId}', encodeURIComponent(vendorPurchaseVendorId.toString()));
  requestUrl = requestUrl.replace('{vendorPurchase_vendorNumber}', encodeURIComponent(vendorPurchaseVendorNumber));
  requestUrl = requestUrl.replace('{vendorPurchase_name}', encodeURIComponent(vendorPurchaseName));
  let queryParameters = [];
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select.join(',')));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.acceptLanguage !== undefined && this.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['VendorPurchase']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Dynamics365BusinessCentral. */
class Dynamics365BusinessCentral extends ServiceClient {
  /**
   * Create a Dynamics365BusinessCentral.
   * @param {credentials} credentials - Credentials needed for the client to connect to Azure.
   * @param {string} ifMatch - Required. When this request header is included and the eTag provided does not match the current tag on the entity, this will not be updated.
   * @param {string} [baseUri] - The base URI of the service.
   * @param {object} [options] - The parameter options
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   * @param {string} [options.filter] - Filtering expression
   * @param {number} [options.top] - Number of items to return from the top of the list
   * @param {number} [options.skip] - Number of items to skip from the list
   * @param {number} [options.limit] - Number of items to return from the list
   * @param {string} [options.acceptLanguage] - The preferred language for the response.
   * @param {number} [options.longRunningOperationRetryTimeout] - The retry timeout in seconds for Long Running Operations. Default value is 30.
   * @param {boolean} [options.generateClientRequestId] - Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
   */
  constructor(credentials, ifMatch, baseUri, options) {
    if (credentials === null || credentials === undefined) {
      throw new Error('\'credentials\' cannot be null.');
    }
    if (ifMatch === null || ifMatch === undefined) {
      throw new Error('\'ifMatch\' cannot be null.');
    }

    if (!options) options = {};

    super(credentials, options);

    this.acceptLanguage = 'en-US';
    this.longRunningOperationRetryTimeout = 30;
    this.generateClientRequestId = true;
    this.baseUri = baseUri;
    if (!this.baseUri) {
      this.baseUri = 'https://api.businesscentral.dynamics.com/v1.0/api/v1.0';
    }
    this.credentials = credentials;
    this.ifMatch = ifMatch;

    let packageInfo = this.getPackageJsonInfo(__dirname);
    this.addUserAgentInfo(`${packageInfo.name}/${packageInfo.version}`);
    if(options.filter !== null && options.filter !== undefined) {
      this.filter = options.filter;
    }
    if(options.top !== null && options.top !== undefined) {
      this.top = options.top;
    }
    if(options.skip !== null && options.skip !== undefined) {
      this.skip = options.skip;
    }
    if(options.limit !== null && options.limit !== undefined) {
      this.limit = options.limit;
    }
    if(options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
      this.acceptLanguage = options.acceptLanguage;
    }
    if(options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
      this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
    }
    if(options.generateClientRequestId !== null && options.generateClientRequestId !== undefined) {
      this.generateClientRequestId = options.generateClientRequestId;
    }
    this.models = models;
    this._getCompanies = _getCompanies;
    this._getCompanyById = _getCompanyById;
    this._getItems = _getItems;
    this._postItem = _postItem;
    this._getItemById = _getItemById;
    this._deleteItemById = _deleteItemById;
    this._patchItemById = _patchItemById;
    this._getPictureForItem = _getPictureForItem;
    this._getPictureForItemById = _getPictureForItemById;
    this._deletePictureForItemByIdById = _deletePictureForItemByIdById;
    this._patchPictureForItemByIdById = _patchPictureForItemByIdById;
    this._getDefaultDimensionsForItem = _getDefaultDimensionsForItem;
    this._postDefaultDimensionsForItem = _postDefaultDimensionsForItem;
    this._getDefaultDimensionsForItemByDimensionIdByParentId = _getDefaultDimensionsForItemByDimensionIdByParentId;
    this._deleteDefaultDimensionsForItemByDimensionIdByParentIdById = _deleteDefaultDimensionsForItemByDimensionIdByParentIdById;
    this._patchDefaultDimensionsForItemByDimensionIdByParentIdById = _patchDefaultDimensionsForItemByDimensionIdByParentIdById;
    this._getPicture = _getPicture;
    this._getPictureById = _getPictureById;
    this._deletePictureById = _deletePictureById;
    this._patchPictureById = _patchPictureById;
    this._getDefaultDimensions = _getDefaultDimensions;
    this._postDefaultDimensions = _postDefaultDimensions;
    this._getDefaultDimensionsByDimensionIdByParentId = _getDefaultDimensionsByDimensionIdByParentId;
    this._deleteDefaultDimensionsByDimensionIdByParentId = _deleteDefaultDimensionsByDimensionIdByParentId;
    this._patchDefaultDimensionsByDimensionIdByParentId = _patchDefaultDimensionsByDimensionIdByParentId;
    this._getCustomers = _getCustomers;
    this._postCustomer = _postCustomer;
    this._getCustomerById = _getCustomerById;
    this._deleteCustomerById = _deleteCustomerById;
    this._patchCustomerById = _patchCustomerById;
    this._getCustomerFinancialDetailsForCustomer = _getCustomerFinancialDetailsForCustomer;
    this._getCustomerFinancialDetailForCustomerById = _getCustomerFinancialDetailForCustomerById;
    this._getPictureForCustomer = _getPictureForCustomer;
    this._getPictureForCustomerById = _getPictureForCustomerById;
    this._deletePictureForCustomerByIdById = _deletePictureForCustomerByIdById;
    this._patchPictureForCustomerByIdById = _patchPictureForCustomerByIdById;
    this._getDefaultDimensionsForCustomer = _getDefaultDimensionsForCustomer;
    this._postDefaultDimensionsForCustomer = _postDefaultDimensionsForCustomer;
    this._getDefaultDimensionsForCustomerByDimensionIdByParentId = _getDefaultDimensionsForCustomerByDimensionIdByParentId;
    this._deleteDefaultDimensionsForCustomerByDimensionIdByParentIdById = _deleteDefaultDimensionsForCustomerByDimensionIdByParentIdById;
    this._patchDefaultDimensionsForCustomerByDimensionIdByParentIdById = _patchDefaultDimensionsForCustomerByDimensionIdByParentIdById;
    this._getCustomerFinancialDetails = _getCustomerFinancialDetails;
    this._getCustomerFinancialDetailById = _getCustomerFinancialDetailById;
    this._getVendors = _getVendors;
    this._postVendor = _postVendor;
    this._getVendorById = _getVendorById;
    this._deleteVendorById = _deleteVendorById;
    this._patchVendorById = _patchVendorById;
    this._getPictureForVendor = _getPictureForVendor;
    this._getPictureForVendorById = _getPictureForVendorById;
    this._deletePictureForVendorByIdById = _deletePictureForVendorByIdById;
    this._patchPictureForVendorByIdById = _patchPictureForVendorByIdById;
    this._getDefaultDimensionsForVendor = _getDefaultDimensionsForVendor;
    this._postDefaultDimensionsForVendor = _postDefaultDimensionsForVendor;
    this._getDefaultDimensionsForVendorByDimensionIdByParentId = _getDefaultDimensionsForVendorByDimensionIdByParentId;
    this._deleteDefaultDimensionsForVendorByDimensionIdByParentIdById = _deleteDefaultDimensionsForVendorByDimensionIdByParentIdById;
    this._patchDefaultDimensionsForVendorByDimensionIdByParentIdById = _patchDefaultDimensionsForVendorByDimensionIdByParentIdById;
    this._getCompanyInformation = _getCompanyInformation;
    this._getCompanyInformationById = _getCompanyInformationById;
    this._patchCompanyInformationById = _patchCompanyInformationById;
    this._getSalesInvoices = _getSalesInvoices;
    this._postSalesInvoice = _postSalesInvoice;
    this._getSalesInvoiceById = _getSalesInvoiceById;
    this._deleteSalesInvoiceById = _deleteSalesInvoiceById;
    this._patchSalesInvoiceById = _patchSalesInvoiceById;
    this._cancelAndSendActionSalesInvoices = _cancelAndSendActionSalesInvoices;
    this._cancelActionSalesInvoices = _cancelActionSalesInvoices;
    this._postAndSendActionSalesInvoices = _postAndSendActionSalesInvoices;
    this._postActionSalesInvoices = _postActionSalesInvoices;
    this._sendActionSalesInvoices = _sendActionSalesInvoices;
    this._getSalesInvoiceLinesForSalesInvoice = _getSalesInvoiceLinesForSalesInvoice;
    this._postSalesInvoiceLineForSalesInvoice = _postSalesInvoiceLineForSalesInvoice;
    this._getSalesInvoiceLineForSalesInvoiceById = _getSalesInvoiceLineForSalesInvoiceById;
    this._deleteSalesInvoiceLineForSalesInvoiceByIdById = _deleteSalesInvoiceLineForSalesInvoiceByIdById;
    this._patchSalesInvoiceLineForSalesInvoiceByIdById = _patchSalesInvoiceLineForSalesInvoiceByIdById;
    this._getPdfDocumentForSalesInvoice = _getPdfDocumentForSalesInvoice;
    this._getPdfDocumentForSalesInvoiceById = _getPdfDocumentForSalesInvoiceById;
    this._getSalesInvoiceLines = _getSalesInvoiceLines;
    this._postSalesInvoiceLine = _postSalesInvoiceLine;
    this._getSalesInvoiceLineById = _getSalesInvoiceLineById;
    this._deleteSalesInvoiceLineById = _deleteSalesInvoiceLineById;
    this._patchSalesInvoiceLineById = _patchSalesInvoiceLineById;
    this._getPdfDocument = _getPdfDocument;
    this._getPdfDocumentById = _getPdfDocumentById;
    this._getCustomerPaymentJournals = _getCustomerPaymentJournals;
    this._postCustomerPaymentJournal = _postCustomerPaymentJournal;
    this._getCustomerPaymentJournalById = _getCustomerPaymentJournalById;
    this._deleteCustomerPaymentJournalById = _deleteCustomerPaymentJournalById;
    this._patchCustomerPaymentJournalById = _patchCustomerPaymentJournalById;
    this._getCustomerPaymentsForCustomerPaymentJournal = _getCustomerPaymentsForCustomerPaymentJournal;
    this._postCustomerPaymentForCustomerPaymentJournal = _postCustomerPaymentForCustomerPaymentJournal;
    this._getCustomerPaymentForCustomerPaymentJournalById = _getCustomerPaymentForCustomerPaymentJournalById;
    this._deleteCustomerPaymentForCustomerPaymentJournalByIdById = _deleteCustomerPaymentForCustomerPaymentJournalByIdById;
    this._patchCustomerPaymentForCustomerPaymentJournalByIdById = _patchCustomerPaymentForCustomerPaymentJournalByIdById;
    this._getCustomerPayments = _getCustomerPayments;
    this._postCustomerPayment = _postCustomerPayment;
    this._getCustomerPaymentById = _getCustomerPaymentById;
    this._deleteCustomerPaymentById = _deleteCustomerPaymentById;
    this._patchCustomerPaymentById = _patchCustomerPaymentById;
    this._getAccounts = _getAccounts;
    this._getAccountById = _getAccountById;
    this._getTaxGroups = _getTaxGroups;
    this._postTaxGroup = _postTaxGroup;
    this._getTaxGroupById = _getTaxGroupById;
    this._deleteTaxGroupById = _deleteTaxGroupById;
    this._patchTaxGroupById = _patchTaxGroupById;
    this._getJournals = _getJournals;
    this._postJournal = _postJournal;
    this._getJournalById = _getJournalById;
    this._deleteJournalById = _deleteJournalById;
    this._patchJournalById = _patchJournalById;
    this._postActionJournals = _postActionJournals;
    this._getJournalLinesForJournal = _getJournalLinesForJournal;
    this._postJournalLineForJournal = _postJournalLineForJournal;
    this._getJournalLineForJournalById = _getJournalLineForJournalById;
    this._deleteJournalLineForJournalByIdById = _deleteJournalLineForJournalByIdById;
    this._patchJournalLineForJournalByIdById = _patchJournalLineForJournalByIdById;
    this._getAttachmentsForJournalLineForJournal = _getAttachmentsForJournalLineForJournal;
    this._postAttachmentsForJournalLineForJournal = _postAttachmentsForJournalLineForJournal;
    this._getAttachmentsForJournalLineForJournalByIdByParentId = _getAttachmentsForJournalLineForJournalByIdByParentId;
    this._deleteAttachmentsForJournalLineForJournalByIdByParentIdByIdById = _deleteAttachmentsForJournalLineForJournalByIdByParentIdByIdById;
    this._patchAttachmentsForJournalLineForJournalByIdByParentIdByIdById = _patchAttachmentsForJournalLineForJournalByIdByParentIdByIdById;
    this._getJournalLines = _getJournalLines;
    this._postJournalLine = _postJournalLine;
    this._getJournalLineById = _getJournalLineById;
    this._deleteJournalLineById = _deleteJournalLineById;
    this._patchJournalLineById = _patchJournalLineById;
    this._getAttachmentsForJournalLine = _getAttachmentsForJournalLine;
    this._postAttachmentsForJournalLine = _postAttachmentsForJournalLine;
    this._getAttachmentsForJournalLineByIdByParentId = _getAttachmentsForJournalLineByIdByParentId;
    this._deleteAttachmentsForJournalLineByIdByParentIdById = _deleteAttachmentsForJournalLineByIdByParentIdById;
    this._patchAttachmentsForJournalLineByIdByParentIdById = _patchAttachmentsForJournalLineByIdByParentIdById;
    this._getAttachments = _getAttachments;
    this._postAttachments = _postAttachments;
    this._getAttachmentsByIdByParentId = _getAttachmentsByIdByParentId;
    this._deleteAttachmentsByIdByParentId = _deleteAttachmentsByIdByParentId;
    this._patchAttachmentsByIdByParentId = _patchAttachmentsByIdByParentId;
    this._getEmployees = _getEmployees;
    this._postEmployee = _postEmployee;
    this._getEmployeeById = _getEmployeeById;
    this._deleteEmployeeById = _deleteEmployeeById;
    this._patchEmployeeById = _patchEmployeeById;
    this._getPictureForEmployee = _getPictureForEmployee;
    this._getPictureForEmployeeById = _getPictureForEmployeeById;
    this._deletePictureForEmployeeByIdById = _deletePictureForEmployeeByIdById;
    this._patchPictureForEmployeeByIdById = _patchPictureForEmployeeByIdById;
    this._getDefaultDimensionsForEmployee = _getDefaultDimensionsForEmployee;
    this._postDefaultDimensionsForEmployee = _postDefaultDimensionsForEmployee;
    this._getDefaultDimensionsForEmployeeByDimensionIdByParentId = _getDefaultDimensionsForEmployeeByDimensionIdByParentId;
    this._deleteDefaultDimensionsForEmployeeByDimensionIdByParentIdById = _deleteDefaultDimensionsForEmployeeByDimensionIdByParentIdById;
    this._patchDefaultDimensionsForEmployeeByDimensionIdByParentIdById = _patchDefaultDimensionsForEmployeeByDimensionIdByParentIdById;
    this._getTimeRegistrationEntriesForEmployee = _getTimeRegistrationEntriesForEmployee;
    this._postTimeRegistrationEntryForEmployee = _postTimeRegistrationEntryForEmployee;
    this._getTimeRegistrationEntryForEmployeeById = _getTimeRegistrationEntryForEmployeeById;
    this._deleteTimeRegistrationEntryForEmployeeByIdById = _deleteTimeRegistrationEntryForEmployeeByIdById;
    this._patchTimeRegistrationEntryForEmployeeByIdById = _patchTimeRegistrationEntryForEmployeeByIdById;
    this._getTimeRegistrationEntries = _getTimeRegistrationEntries;
    this._postTimeRegistrationEntry = _postTimeRegistrationEntry;
    this._getTimeRegistrationEntryById = _getTimeRegistrationEntryById;
    this._deleteTimeRegistrationEntryById = _deleteTimeRegistrationEntryById;
    this._patchTimeRegistrationEntryById = _patchTimeRegistrationEntryById;
    this._getGeneralLedgerEntries = _getGeneralLedgerEntries;
    this._getGeneralLedgerEntryById = _getGeneralLedgerEntryById;
    this._getCurrencies = _getCurrencies;
    this._postCurrency = _postCurrency;
    this._getCurrencyById = _getCurrencyById;
    this._deleteCurrencyById = _deleteCurrencyById;
    this._patchCurrencyById = _patchCurrencyById;
    this._getPaymentMethods = _getPaymentMethods;
    this._postPaymentMethod = _postPaymentMethod;
    this._getPaymentMethodById = _getPaymentMethodById;
    this._deletePaymentMethodById = _deletePaymentMethodById;
    this._patchPaymentMethodById = _patchPaymentMethodById;
    this._getDimensions = _getDimensions;
    this._getDimensionById = _getDimensionById;
    this._getDimensionValuesForDimension = _getDimensionValuesForDimension;
    this._getDimensionValueForDimensionById = _getDimensionValueForDimensionById;
    this._getDimensionValues = _getDimensionValues;
    this._getDimensionValueById = _getDimensionValueById;
    this._getDimensionLines = _getDimensionLines;
    this._postDimensionLine = _postDimensionLine;
    this._getDimensionLineByIdByParentId = _getDimensionLineByIdByParentId;
    this._deleteDimensionLineByIdByParentId = _deleteDimensionLineByIdByParentId;
    this._patchDimensionLineByIdByParentId = _patchDimensionLineByIdByParentId;
    this._getPaymentTerms = _getPaymentTerms;
    this._postPaymentTerm = _postPaymentTerm;
    this._getPaymentTermById = _getPaymentTermById;
    this._deletePaymentTermById = _deletePaymentTermById;
    this._patchPaymentTermById = _patchPaymentTermById;
    this._getShipmentMethods = _getShipmentMethods;
    this._postShipmentMethod = _postShipmentMethod;
    this._getShipmentMethodById = _getShipmentMethodById;
    this._deleteShipmentMethodById = _deleteShipmentMethodById;
    this._patchShipmentMethodById = _patchShipmentMethodById;
    this._getItemCategories = _getItemCategories;
    this._postItemCategory = _postItemCategory;
    this._getItemCategoryById = _getItemCategoryById;
    this._deleteItemCategoryById = _deleteItemCategoryById;
    this._patchItemCategoryById = _patchItemCategoryById;
    this._getCashFlowStatement = _getCashFlowStatement;
    this._getCashFlowStatementByLineNumber = _getCashFlowStatementByLineNumber;
    this._getCountriesRegions = _getCountriesRegions;
    this._postCountryRegion = _postCountryRegion;
    this._getCountryRegionById = _getCountryRegionById;
    this._deleteCountryRegionById = _deleteCountryRegionById;
    this._patchCountryRegionById = _patchCountryRegionById;
    this._getSalesOrders = _getSalesOrders;
    this._postSalesOrder = _postSalesOrder;
    this._getSalesOrderById = _getSalesOrderById;
    this._deleteSalesOrderById = _deleteSalesOrderById;
    this._patchSalesOrderById = _patchSalesOrderById;
    this._getSalesOrderLinesForSalesOrder = _getSalesOrderLinesForSalesOrder;
    this._postSalesOrderLineForSalesOrder = _postSalesOrderLineForSalesOrder;
    this._getSalesOrderLineForSalesOrderById = _getSalesOrderLineForSalesOrderById;
    this._deleteSalesOrderLineForSalesOrderByIdById = _deleteSalesOrderLineForSalesOrderByIdById;
    this._patchSalesOrderLineForSalesOrderByIdById = _patchSalesOrderLineForSalesOrderByIdById;
    this._getSalesOrderLines = _getSalesOrderLines;
    this._postSalesOrderLine = _postSalesOrderLine;
    this._getSalesOrderLineById = _getSalesOrderLineById;
    this._deleteSalesOrderLineById = _deleteSalesOrderLineById;
    this._patchSalesOrderLineById = _patchSalesOrderLineById;
    this._getRetainedEarningsStatement = _getRetainedEarningsStatement;
    this._getRetainedEarningsStatementByLineNumber = _getRetainedEarningsStatementByLineNumber;
    this._getUnitsOfMeasure = _getUnitsOfMeasure;
    this._postUnitOfMeasure = _postUnitOfMeasure;
    this._getUnitOfMeasureById = _getUnitOfMeasureById;
    this._deleteUnitOfMeasureById = _deleteUnitOfMeasureById;
    this._patchUnitOfMeasureById = _patchUnitOfMeasureById;
    this._getAgedAccountsReceivable = _getAgedAccountsReceivable;
    this._getAgedAccountsReceivableByCustomerId = _getAgedAccountsReceivableByCustomerId;
    this._getAgedAccountsPayable = _getAgedAccountsPayable;
    this._getAgedAccountsPayableByVendorId = _getAgedAccountsPayableByVendorId;
    this._getBalanceSheet = _getBalanceSheet;
    this._getBalanceSheetByLineNumber = _getBalanceSheetByLineNumber;
    this._getTrialBalance = _getTrialBalance;
    this._getTrialBalanceByNumber = _getTrialBalanceByNumber;
    this._getIncomeStatement = _getIncomeStatement;
    this._getIncomeStatementByLineNumber = _getIncomeStatementByLineNumber;
    this._getTaxAreas = _getTaxAreas;
    this._postTaxArea = _postTaxArea;
    this._getTaxAreaById = _getTaxAreaById;
    this._deleteTaxAreaById = _deleteTaxAreaById;
    this._patchTaxAreaById = _patchTaxAreaById;
    this._getSalesQuotes = _getSalesQuotes;
    this._postSalesQuote = _postSalesQuote;
    this._getSalesQuoteById = _getSalesQuoteById;
    this._deleteSalesQuoteById = _deleteSalesQuoteById;
    this._patchSalesQuoteById = _patchSalesQuoteById;
    this._makeInvoiceActionSalesQuotes = _makeInvoiceActionSalesQuotes;
    this._sendActionSalesQuotes = _sendActionSalesQuotes;
    this._getSalesQuoteLinesForSalesQuote = _getSalesQuoteLinesForSalesQuote;
    this._postSalesQuoteLineForSalesQuote = _postSalesQuoteLineForSalesQuote;
    this._getSalesQuoteLineForSalesQuoteById = _getSalesQuoteLineForSalesQuoteById;
    this._deleteSalesQuoteLineForSalesQuoteByIdById = _deleteSalesQuoteLineForSalesQuoteByIdById;
    this._patchSalesQuoteLineForSalesQuoteByIdById = _patchSalesQuoteLineForSalesQuoteByIdById;
    this._getPdfDocumentForSalesQuote = _getPdfDocumentForSalesQuote;
    this._getPdfDocumentForSalesQuoteById = _getPdfDocumentForSalesQuoteById;
    this._getSalesQuoteLines = _getSalesQuoteLines;
    this._postSalesQuoteLine = _postSalesQuoteLine;
    this._getSalesQuoteLineById = _getSalesQuoteLineById;
    this._deleteSalesQuoteLineById = _deleteSalesQuoteLineById;
    this._patchSalesQuoteLineById = _patchSalesQuoteLineById;
    this._getSalesCreditMemos = _getSalesCreditMemos;
    this._postSalesCreditMemo = _postSalesCreditMemo;
    this._getSalesCreditMemoById = _getSalesCreditMemoById;
    this._deleteSalesCreditMemoById = _deleteSalesCreditMemoById;
    this._patchSalesCreditMemoById = _patchSalesCreditMemoById;
    this._getSalesCreditMemoLinesForSalesCreditMemo = _getSalesCreditMemoLinesForSalesCreditMemo;
    this._postSalesCreditMemoLineForSalesCreditMemo = _postSalesCreditMemoLineForSalesCreditMemo;
    this._getSalesCreditMemoLineForSalesCreditMemoById = _getSalesCreditMemoLineForSalesCreditMemoById;
    this._deleteSalesCreditMemoLineForSalesCreditMemoByIdById = _deleteSalesCreditMemoLineForSalesCreditMemoByIdById;
    this._patchSalesCreditMemoLineForSalesCreditMemoByIdById = _patchSalesCreditMemoLineForSalesCreditMemoByIdById;
    this._getPdfDocumentForSalesCreditMemo = _getPdfDocumentForSalesCreditMemo;
    this._getPdfDocumentForSalesCreditMemoById = _getPdfDocumentForSalesCreditMemoById;
    this._getSalesCreditMemoLines = _getSalesCreditMemoLines;
    this._postSalesCreditMemoLine = _postSalesCreditMemoLine;
    this._getSalesCreditMemoLineById = _getSalesCreditMemoLineById;
    this._deleteSalesCreditMemoLineById = _deleteSalesCreditMemoLineById;
    this._patchSalesCreditMemoLineById = _patchSalesCreditMemoLineById;
    this._getGeneralLedgerEntryAttachments = _getGeneralLedgerEntryAttachments;
    this._postGeneralLedgerEntryAttachments = _postGeneralLedgerEntryAttachments;
    this._getGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber = _getGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber;
    this._deleteGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber = _deleteGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber;
    this._patchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber = _patchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber;
    this._getPurchaseInvoices = _getPurchaseInvoices;
    this._postPurchaseInvoice = _postPurchaseInvoice;
    this._getPurchaseInvoiceById = _getPurchaseInvoiceById;
    this._deletePurchaseInvoiceById = _deletePurchaseInvoiceById;
    this._patchPurchaseInvoiceById = _patchPurchaseInvoiceById;
    this._postActionPurchaseInvoices = _postActionPurchaseInvoices;
    this._getPurchaseInvoiceLinesForPurchaseInvoice = _getPurchaseInvoiceLinesForPurchaseInvoice;
    this._postPurchaseInvoiceLineForPurchaseInvoice = _postPurchaseInvoiceLineForPurchaseInvoice;
    this._getPurchaseInvoiceLineForPurchaseInvoiceById = _getPurchaseInvoiceLineForPurchaseInvoiceById;
    this._deletePurchaseInvoiceLineForPurchaseInvoiceByIdById = _deletePurchaseInvoiceLineForPurchaseInvoiceByIdById;
    this._patchPurchaseInvoiceLineForPurchaseInvoiceByIdById = _patchPurchaseInvoiceLineForPurchaseInvoiceByIdById;
    this._getPdfDocumentForPurchaseInvoice = _getPdfDocumentForPurchaseInvoice;
    this._getPdfDocumentForPurchaseInvoiceById = _getPdfDocumentForPurchaseInvoiceById;
    this._getPurchaseInvoiceLines = _getPurchaseInvoiceLines;
    this._postPurchaseInvoiceLine = _postPurchaseInvoiceLine;
    this._getPurchaseInvoiceLineById = _getPurchaseInvoiceLineById;
    this._deletePurchaseInvoiceLineById = _deletePurchaseInvoiceLineById;
    this._patchPurchaseInvoiceLineById = _patchPurchaseInvoiceLineById;
    this._getCustomerSales = _getCustomerSales;
    this._getCustomerSaleByNameByCustomerNumberByCustomerId = _getCustomerSaleByNameByCustomerNumberByCustomerId;
    this._getVendorPurchases = _getVendorPurchases;
    this._getVendorPurchaseByNameByVendorNumberByVendorId = _getVendorPurchaseByNameByVendorNumberByVendorId;
    msRest.addSerializationMixin(this);
  }

  /**
   * @summary Returns a list of companies
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetCompaniesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCompaniesWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCompanies(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of companies
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetCompaniesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetCompaniesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCompanies(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCompanies(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCompanies(options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an company object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Company>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCompanyByIdWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCompanyById(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an company object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Company} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Company} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCompanyById(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCompanyById(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCompanyById(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of items
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetItemsOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getItemsWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getItems(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of items
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetItemsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetItemsOKResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getItems(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getItems(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getItems(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a item in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the item entity
   *
   * @param {string} [body.number] The number property for the item entity
   *
   * @param {string} [body.displayName] The displayName property for the item
   * entity
   *
   * @param {string} [body.type] The type property for the item entity
   *
   * @param {uuid} [body.itemCategoryId] The itemCategoryId property for the item
   * entity
   *
   * @param {string} [body.itemCategoryCode] The itemCategoryCode property for
   * the item entity
   *
   * @param {boolean} [body.blocked] The blocked property for the item entity
   *
   * @param {uuid} [body.baseUnitOfMeasureId] The baseUnitOfMeasureId property
   * for the item entity
   *
   * @param {object} [body.baseUnitOfMeasure]
   *
   * @param {string} [body.baseUnitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.baseUnitOfMeasure.displayName] The displayName
   * property for the unitofmeasuretype entity
   *
   * @param {string} [body.baseUnitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.baseUnitOfMeasure.unitConversion]
   *
   * @param {string} [body.baseUnitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.baseUnitOfMeasure.unitConversion.fromToConversionRate]
   * The fromToConversionRate property for the itemunitofmeasureconversiontype
   * entity
   *
   * @param {array} [body.baseUnitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.baseUnitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.baseUnitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.baseUnitOfMeasure.picture]
   *
   * @param {array} [body.baseUnitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.baseUnitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.baseUnitOfMeasure.itemCategory.id] The id property for
   * the itemCategory entity
   *
   * @param {string} [body.baseUnitOfMeasure.itemCategory.code] The code property
   * for the itemCategory entity
   *
   * @param {string} [body.baseUnitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.baseUnitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {string} [body.gtin] The gtin property for the item entity
   *
   * @param {number} [body.inventory] The inventory property for the item entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the item entity
   *
   * @param {boolean} [body.priceIncludesTax] The priceIncludesTax property for
   * the item entity
   *
   * @param {number} [body.unitCost] The unitCost property for the item entity
   *
   * @param {uuid} [body.taxGroupId] The taxGroupId property for the item entity
   *
   * @param {string} [body.taxGroupCode] The taxGroupCode property for the item
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the item entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Item>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postItemWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postItem(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a item in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the item entity
   *
   * @param {string} [body.number] The number property for the item entity
   *
   * @param {string} [body.displayName] The displayName property for the item
   * entity
   *
   * @param {string} [body.type] The type property for the item entity
   *
   * @param {uuid} [body.itemCategoryId] The itemCategoryId property for the item
   * entity
   *
   * @param {string} [body.itemCategoryCode] The itemCategoryCode property for
   * the item entity
   *
   * @param {boolean} [body.blocked] The blocked property for the item entity
   *
   * @param {uuid} [body.baseUnitOfMeasureId] The baseUnitOfMeasureId property
   * for the item entity
   *
   * @param {object} [body.baseUnitOfMeasure]
   *
   * @param {string} [body.baseUnitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.baseUnitOfMeasure.displayName] The displayName
   * property for the unitofmeasuretype entity
   *
   * @param {string} [body.baseUnitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.baseUnitOfMeasure.unitConversion]
   *
   * @param {string} [body.baseUnitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.baseUnitOfMeasure.unitConversion.fromToConversionRate]
   * The fromToConversionRate property for the itemunitofmeasureconversiontype
   * entity
   *
   * @param {array} [body.baseUnitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.baseUnitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.baseUnitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.baseUnitOfMeasure.picture]
   *
   * @param {array} [body.baseUnitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.baseUnitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.baseUnitOfMeasure.itemCategory.id] The id property for
   * the itemCategory entity
   *
   * @param {string} [body.baseUnitOfMeasure.itemCategory.code] The code property
   * for the itemCategory entity
   *
   * @param {string} [body.baseUnitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.baseUnitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {string} [body.gtin] The gtin property for the item entity
   *
   * @param {number} [body.inventory] The inventory property for the item entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the item entity
   *
   * @param {boolean} [body.priceIncludesTax] The priceIncludesTax property for
   * the item entity
   *
   * @param {number} [body.unitCost] The unitCost property for the item entity
   *
   * @param {uuid} [body.taxGroupId] The taxGroupId property for the item entity
   *
   * @param {string} [body.taxGroupCode] The taxGroupCode property for the item
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the item entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Item} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Item} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postItem(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postItem(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postItem(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an item object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Item>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getItemByIdWithHttpOperationResponse(companyId, itemId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getItemById(companyId, itemId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an item object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Item} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Item} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getItemById(companyId, itemId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getItemById(companyId, itemId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getItemById(companyId, itemId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an item in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteItemByIdWithHttpOperationResponse(companyId, itemId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteItemById(companyId, itemId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an item in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteItemById(companyId, itemId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteItemById(companyId, itemId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteItemById(companyId, itemId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified item
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the item entity
   *
   * @param {string} [body.number] The number property for the item entity
   *
   * @param {string} [body.displayName] The displayName property for the item
   * entity
   *
   * @param {string} [body.type] The type property for the item entity
   *
   * @param {uuid} [body.itemCategoryId] The itemCategoryId property for the item
   * entity
   *
   * @param {string} [body.itemCategoryCode] The itemCategoryCode property for
   * the item entity
   *
   * @param {boolean} [body.blocked] The blocked property for the item entity
   *
   * @param {uuid} [body.baseUnitOfMeasureId] The baseUnitOfMeasureId property
   * for the item entity
   *
   * @param {object} [body.baseUnitOfMeasure]
   *
   * @param {string} [body.baseUnitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.baseUnitOfMeasure.displayName] The displayName
   * property for the unitofmeasuretype entity
   *
   * @param {string} [body.baseUnitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.baseUnitOfMeasure.unitConversion]
   *
   * @param {string} [body.baseUnitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.baseUnitOfMeasure.unitConversion.fromToConversionRate]
   * The fromToConversionRate property for the itemunitofmeasureconversiontype
   * entity
   *
   * @param {array} [body.baseUnitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.baseUnitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.baseUnitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.baseUnitOfMeasure.picture]
   *
   * @param {array} [body.baseUnitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.baseUnitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.baseUnitOfMeasure.itemCategory.id] The id property for
   * the itemCategory entity
   *
   * @param {string} [body.baseUnitOfMeasure.itemCategory.code] The code property
   * for the itemCategory entity
   *
   * @param {string} [body.baseUnitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.baseUnitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {string} [body.gtin] The gtin property for the item entity
   *
   * @param {number} [body.inventory] The inventory property for the item entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the item entity
   *
   * @param {boolean} [body.priceIncludesTax] The priceIncludesTax property for
   * the item entity
   *
   * @param {number} [body.unitCost] The unitCost property for the item entity
   *
   * @param {uuid} [body.taxGroupId] The taxGroupId property for the item entity
   *
   * @param {string} [body.taxGroupCode] The taxGroupCode property for the item
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the item entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Item>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchItemByIdWithHttpOperationResponse(body, companyId, itemId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchItemById(body, companyId, itemId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified item
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the item entity
   *
   * @param {string} [body.number] The number property for the item entity
   *
   * @param {string} [body.displayName] The displayName property for the item
   * entity
   *
   * @param {string} [body.type] The type property for the item entity
   *
   * @param {uuid} [body.itemCategoryId] The itemCategoryId property for the item
   * entity
   *
   * @param {string} [body.itemCategoryCode] The itemCategoryCode property for
   * the item entity
   *
   * @param {boolean} [body.blocked] The blocked property for the item entity
   *
   * @param {uuid} [body.baseUnitOfMeasureId] The baseUnitOfMeasureId property
   * for the item entity
   *
   * @param {object} [body.baseUnitOfMeasure]
   *
   * @param {string} [body.baseUnitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.baseUnitOfMeasure.displayName] The displayName
   * property for the unitofmeasuretype entity
   *
   * @param {string} [body.baseUnitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.baseUnitOfMeasure.unitConversion]
   *
   * @param {string} [body.baseUnitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.baseUnitOfMeasure.unitConversion.fromToConversionRate]
   * The fromToConversionRate property for the itemunitofmeasureconversiontype
   * entity
   *
   * @param {array} [body.baseUnitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.baseUnitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.baseUnitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.baseUnitOfMeasure.picture]
   *
   * @param {array} [body.baseUnitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.baseUnitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.baseUnitOfMeasure.itemCategory.id] The id property for
   * the itemCategory entity
   *
   * @param {string} [body.baseUnitOfMeasure.itemCategory.code] The code property
   * for the itemCategory entity
   *
   * @param {string} [body.baseUnitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.baseUnitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {string} [body.gtin] The gtin property for the item entity
   *
   * @param {number} [body.inventory] The inventory property for the item entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the item entity
   *
   * @param {boolean} [body.priceIncludesTax] The priceIncludesTax property for
   * the item entity
   *
   * @param {number} [body.unitCost] The unitCost property for the item entity
   *
   * @param {uuid} [body.taxGroupId] The taxGroupId property for the item entity
   *
   * @param {string} [body.taxGroupCode] The taxGroupCode property for the item
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the item entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Item} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Item} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchItemById(body, companyId, itemId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchItemById(body, companyId, itemId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchItemById(body, companyId, itemId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of picture
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetPictureForItemOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPictureForItemWithHttpOperationResponse(companyId, itemId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPictureForItem(companyId, itemId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of picture
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetPictureForItemOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetPictureForItemOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPictureForItem(companyId, itemId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPictureForItem(companyId, itemId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPictureForItem(companyId, itemId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an picture object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Picture>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPictureForItemByIdWithHttpOperationResponse(companyId, itemId, pictureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPictureForItemById(companyId, itemId, pictureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an picture object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Picture} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Picture} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPictureForItemById(companyId, itemId, pictureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPictureForItemById(companyId, itemId, pictureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPictureForItemById(companyId, itemId, pictureId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an picture in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deletePictureForItemByIdByIdWithHttpOperationResponse(companyId, itemId, pictureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deletePictureForItemByIdById(companyId, itemId, pictureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an picture in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deletePictureForItemByIdById(companyId, itemId, pictureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deletePictureForItemByIdById(companyId, itemId, pictureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deletePictureForItemByIdById(companyId, itemId, pictureId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified picture
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the picture entity
   *
   * @param {number} [body.width] The width property for the picture entity
   *
   * @param {number} [body.height] The height property for the picture entity
   *
   * @param {string} [body.contentType] The contentType property for the picture
   * entity
   *
   * @param {string} [body.content] The content property for the picture entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Picture>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchPictureForItemByIdByIdWithHttpOperationResponse(body, companyId, itemId, pictureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchPictureForItemByIdById(body, companyId, itemId, pictureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified picture
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the picture entity
   *
   * @param {number} [body.width] The width property for the picture entity
   *
   * @param {number} [body.height] The height property for the picture entity
   *
   * @param {string} [body.contentType] The contentType property for the picture
   * entity
   *
   * @param {string} [body.content] The content property for the picture entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Picture} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Picture} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchPictureForItemByIdById(body, companyId, itemId, pictureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchPictureForItemByIdById(body, companyId, itemId, pictureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchPictureForItemByIdById(body, companyId, itemId, pictureId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of defaultDimensions
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetDefaultDimensionsForItemOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDefaultDimensionsForItemWithHttpOperationResponse(companyId, itemId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDefaultDimensionsForItem(companyId, itemId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of defaultDimensions
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetDefaultDimensionsForItemOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetDefaultDimensionsForItemOKResponse} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultDimensionsForItem(companyId, itemId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDefaultDimensionsForItem(companyId, itemId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDefaultDimensionsForItem(companyId, itemId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a defaultDimensions in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DefaultDimensions>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postDefaultDimensionsForItemWithHttpOperationResponse(body, companyId, itemId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postDefaultDimensionsForItem(body, companyId, itemId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a defaultDimensions in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DefaultDimensions} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DefaultDimensions} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postDefaultDimensionsForItem(body, companyId, itemId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postDefaultDimensionsForItem(body, companyId, itemId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postDefaultDimensionsForItem(body, companyId, itemId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an defaultDimensions
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DefaultDimensions>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDefaultDimensionsForItemByDimensionIdByParentIdWithHttpOperationResponse(companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDefaultDimensionsForItemByDimensionIdByParentId(companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an defaultDimensions
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DefaultDimensions} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DefaultDimensions} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultDimensionsForItemByDimensionIdByParentId(companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDefaultDimensionsForItemByDimensionIdByParentId(companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDefaultDimensionsForItemByDimensionIdByParentId(companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an defaultDimensions in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteDefaultDimensionsForItemByDimensionIdByParentIdByIdWithHttpOperationResponse(companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteDefaultDimensionsForItemByDimensionIdByParentIdById(companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an defaultDimensions in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteDefaultDimensionsForItemByDimensionIdByParentIdById(companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteDefaultDimensionsForItemByDimensionIdByParentIdById(companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteDefaultDimensionsForItemByDimensionIdByParentIdById(companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified defaultDimensions
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DefaultDimensions>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchDefaultDimensionsForItemByDimensionIdByParentIdByIdWithHttpOperationResponse(body, companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchDefaultDimensionsForItemByDimensionIdByParentIdById(body, companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified defaultDimensions
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemId id for item
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DefaultDimensions} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DefaultDimensions} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchDefaultDimensionsForItemByDimensionIdByParentIdById(body, companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchDefaultDimensionsForItemByDimensionIdByParentIdById(body, companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchDefaultDimensionsForItemByDimensionIdByParentIdById(body, companyId, itemId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of picture
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetPictureOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPictureWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPicture(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of picture
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetPictureOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetPictureOKResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPicture(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPicture(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPicture(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an picture object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Picture>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPictureByIdWithHttpOperationResponse(companyId, pictureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPictureById(companyId, pictureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an picture object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Picture} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Picture} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPictureById(companyId, pictureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPictureById(companyId, pictureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPictureById(companyId, pictureId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an picture in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deletePictureByIdWithHttpOperationResponse(companyId, pictureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deletePictureById(companyId, pictureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an picture in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deletePictureById(companyId, pictureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deletePictureById(companyId, pictureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deletePictureById(companyId, pictureId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified picture
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the picture entity
   *
   * @param {number} [body.width] The width property for the picture entity
   *
   * @param {number} [body.height] The height property for the picture entity
   *
   * @param {string} [body.contentType] The contentType property for the picture
   * entity
   *
   * @param {string} [body.content] The content property for the picture entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Picture>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchPictureByIdWithHttpOperationResponse(body, companyId, pictureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchPictureById(body, companyId, pictureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified picture
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the picture entity
   *
   * @param {number} [body.width] The width property for the picture entity
   *
   * @param {number} [body.height] The height property for the picture entity
   *
   * @param {string} [body.contentType] The contentType property for the picture
   * entity
   *
   * @param {string} [body.content] The content property for the picture entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Picture} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Picture} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchPictureById(body, companyId, pictureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchPictureById(body, companyId, pictureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchPictureById(body, companyId, pictureId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of defaultDimensions
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetDefaultDimensionsOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDefaultDimensionsWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDefaultDimensions(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of defaultDimensions
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetDefaultDimensionsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetDefaultDimensionsOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultDimensions(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDefaultDimensions(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDefaultDimensions(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a defaultDimensions in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DefaultDimensions>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postDefaultDimensionsWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postDefaultDimensions(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a defaultDimensions in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DefaultDimensions} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DefaultDimensions} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postDefaultDimensions(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postDefaultDimensions(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postDefaultDimensions(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an defaultDimensions
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DefaultDimensions>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDefaultDimensionsByDimensionIdByParentIdWithHttpOperationResponse(companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDefaultDimensionsByDimensionIdByParentId(companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an defaultDimensions
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DefaultDimensions} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DefaultDimensions} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultDimensionsByDimensionIdByParentId(companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDefaultDimensionsByDimensionIdByParentId(companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDefaultDimensionsByDimensionIdByParentId(companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an defaultDimensions in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteDefaultDimensionsByDimensionIdByParentIdWithHttpOperationResponse(companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteDefaultDimensionsByDimensionIdByParentId(companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an defaultDimensions in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteDefaultDimensionsByDimensionIdByParentId(companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteDefaultDimensionsByDimensionIdByParentId(companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteDefaultDimensionsByDimensionIdByParentId(companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified defaultDimensions
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DefaultDimensions>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchDefaultDimensionsByDimensionIdByParentIdWithHttpOperationResponse(body, companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchDefaultDimensionsByDimensionIdByParentId(body, companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified defaultDimensions
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DefaultDimensions} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DefaultDimensions} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchDefaultDimensionsByDimensionIdByParentId(body, companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchDefaultDimensionsByDimensionIdByParentId(body, companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchDefaultDimensionsByDimensionIdByParentId(body, companyId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of customers
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetCustomersOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCustomersWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCustomers(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of customers
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetCustomersOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetCustomersOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCustomers(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCustomers(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCustomers(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a customer in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the customer entity
   *
   * @param {string} [body.number] The number property for the customer entity
   *
   * @param {string} [body.displayName] The displayName property for the customer
   * entity
   *
   * @param {string} [body.type] The type property for the customer entity
   *
   * @param {object} [body.address]
   *
   * @param {string} [body.address.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.address.postalCode] The postalCode property for the
   * postaladdresstype entity
   *
   * @param {array} [body.address.customerFinancialDetails]
   *
   * @param {array} [body.address.picture]
   *
   * @param {array} [body.address.defaultDimensions]
   *
   * @param {object} [body.address.currency]
   *
   * @param {uuid} [body.address.currency.id] The id property for the currency
   * entity
   *
   * @param {string} [body.address.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.address.currency.displayName] The displayName property
   * for the currency entity
   *
   * @param {string} [body.address.currency.symbol] The symbol property for the
   * currency entity
   *
   * @param {string} [body.address.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.address.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.address.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.address.paymentTerm]
   *
   * @param {uuid} [body.address.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.code] The code property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.address.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
   * The calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.address.shipmentMethod]
   *
   * @param {uuid} [body.address.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.code] The code property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.displayName] The displayName
   * property for the shipmentMethod entity
   *
   * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.address.paymentMethod]
   *
   * @param {uuid} [body.address.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.code] The code property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.displayName] The displayName
   * property for the paymentMethod entity
   *
   * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the customer
   * entity
   *
   * @param {string} [body.email] The email property for the customer entity
   *
   * @param {string} [body.website] The website property for the customer entity
   *
   * @param {boolean} [body.taxLiable] The taxLiable property for the customer
   * entity
   *
   * @param {uuid} [body.taxAreaId] The taxAreaId property for the customer
   * entity
   *
   * @param {string} [body.taxAreaDisplayName] The taxAreaDisplayName property
   * for the customer entity
   *
   * @param {string} [body.taxRegistrationNumber] The taxRegistrationNumber
   * property for the customer entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the customer
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * customer entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * customer entity
   *
   * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
   * customer entity
   *
   * @param {uuid} [body.paymentMethodId] The paymentMethodId property for the
   * customer entity
   *
   * @param {string} [body.blocked] The blocked property for the customer entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the customer entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Customer>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postCustomerWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postCustomer(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a customer in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the customer entity
   *
   * @param {string} [body.number] The number property for the customer entity
   *
   * @param {string} [body.displayName] The displayName property for the customer
   * entity
   *
   * @param {string} [body.type] The type property for the customer entity
   *
   * @param {object} [body.address]
   *
   * @param {string} [body.address.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.address.postalCode] The postalCode property for the
   * postaladdresstype entity
   *
   * @param {array} [body.address.customerFinancialDetails]
   *
   * @param {array} [body.address.picture]
   *
   * @param {array} [body.address.defaultDimensions]
   *
   * @param {object} [body.address.currency]
   *
   * @param {uuid} [body.address.currency.id] The id property for the currency
   * entity
   *
   * @param {string} [body.address.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.address.currency.displayName] The displayName property
   * for the currency entity
   *
   * @param {string} [body.address.currency.symbol] The symbol property for the
   * currency entity
   *
   * @param {string} [body.address.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.address.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.address.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.address.paymentTerm]
   *
   * @param {uuid} [body.address.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.code] The code property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.address.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
   * The calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.address.shipmentMethod]
   *
   * @param {uuid} [body.address.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.code] The code property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.displayName] The displayName
   * property for the shipmentMethod entity
   *
   * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.address.paymentMethod]
   *
   * @param {uuid} [body.address.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.code] The code property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.displayName] The displayName
   * property for the paymentMethod entity
   *
   * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the customer
   * entity
   *
   * @param {string} [body.email] The email property for the customer entity
   *
   * @param {string} [body.website] The website property for the customer entity
   *
   * @param {boolean} [body.taxLiable] The taxLiable property for the customer
   * entity
   *
   * @param {uuid} [body.taxAreaId] The taxAreaId property for the customer
   * entity
   *
   * @param {string} [body.taxAreaDisplayName] The taxAreaDisplayName property
   * for the customer entity
   *
   * @param {string} [body.taxRegistrationNumber] The taxRegistrationNumber
   * property for the customer entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the customer
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * customer entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * customer entity
   *
   * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
   * customer entity
   *
   * @param {uuid} [body.paymentMethodId] The paymentMethodId property for the
   * customer entity
   *
   * @param {string} [body.blocked] The blocked property for the customer entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the customer entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Customer} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Customer} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postCustomer(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postCustomer(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postCustomer(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an customer object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Customer>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCustomerByIdWithHttpOperationResponse(companyId, customerId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCustomerById(companyId, customerId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an customer object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Customer} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Customer} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCustomerById(companyId, customerId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCustomerById(companyId, customerId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCustomerById(companyId, customerId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an customer in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteCustomerByIdWithHttpOperationResponse(companyId, customerId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteCustomerById(companyId, customerId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an customer in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteCustomerById(companyId, customerId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteCustomerById(companyId, customerId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteCustomerById(companyId, customerId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified customer
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the customer entity
   *
   * @param {string} [body.number] The number property for the customer entity
   *
   * @param {string} [body.displayName] The displayName property for the customer
   * entity
   *
   * @param {string} [body.type] The type property for the customer entity
   *
   * @param {object} [body.address]
   *
   * @param {string} [body.address.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.address.postalCode] The postalCode property for the
   * postaladdresstype entity
   *
   * @param {array} [body.address.customerFinancialDetails]
   *
   * @param {array} [body.address.picture]
   *
   * @param {array} [body.address.defaultDimensions]
   *
   * @param {object} [body.address.currency]
   *
   * @param {uuid} [body.address.currency.id] The id property for the currency
   * entity
   *
   * @param {string} [body.address.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.address.currency.displayName] The displayName property
   * for the currency entity
   *
   * @param {string} [body.address.currency.symbol] The symbol property for the
   * currency entity
   *
   * @param {string} [body.address.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.address.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.address.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.address.paymentTerm]
   *
   * @param {uuid} [body.address.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.code] The code property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.address.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
   * The calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.address.shipmentMethod]
   *
   * @param {uuid} [body.address.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.code] The code property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.displayName] The displayName
   * property for the shipmentMethod entity
   *
   * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.address.paymentMethod]
   *
   * @param {uuid} [body.address.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.code] The code property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.displayName] The displayName
   * property for the paymentMethod entity
   *
   * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the customer
   * entity
   *
   * @param {string} [body.email] The email property for the customer entity
   *
   * @param {string} [body.website] The website property for the customer entity
   *
   * @param {boolean} [body.taxLiable] The taxLiable property for the customer
   * entity
   *
   * @param {uuid} [body.taxAreaId] The taxAreaId property for the customer
   * entity
   *
   * @param {string} [body.taxAreaDisplayName] The taxAreaDisplayName property
   * for the customer entity
   *
   * @param {string} [body.taxRegistrationNumber] The taxRegistrationNumber
   * property for the customer entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the customer
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * customer entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * customer entity
   *
   * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
   * customer entity
   *
   * @param {uuid} [body.paymentMethodId] The paymentMethodId property for the
   * customer entity
   *
   * @param {string} [body.blocked] The blocked property for the customer entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the customer entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Customer>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchCustomerByIdWithHttpOperationResponse(body, companyId, customerId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchCustomerById(body, companyId, customerId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified customer
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the customer entity
   *
   * @param {string} [body.number] The number property for the customer entity
   *
   * @param {string} [body.displayName] The displayName property for the customer
   * entity
   *
   * @param {string} [body.type] The type property for the customer entity
   *
   * @param {object} [body.address]
   *
   * @param {string} [body.address.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.address.postalCode] The postalCode property for the
   * postaladdresstype entity
   *
   * @param {array} [body.address.customerFinancialDetails]
   *
   * @param {array} [body.address.picture]
   *
   * @param {array} [body.address.defaultDimensions]
   *
   * @param {object} [body.address.currency]
   *
   * @param {uuid} [body.address.currency.id] The id property for the currency
   * entity
   *
   * @param {string} [body.address.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.address.currency.displayName] The displayName property
   * for the currency entity
   *
   * @param {string} [body.address.currency.symbol] The symbol property for the
   * currency entity
   *
   * @param {string} [body.address.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.address.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.address.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.address.paymentTerm]
   *
   * @param {uuid} [body.address.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.code] The code property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.address.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
   * The calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.address.shipmentMethod]
   *
   * @param {uuid} [body.address.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.code] The code property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.displayName] The displayName
   * property for the shipmentMethod entity
   *
   * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.address.paymentMethod]
   *
   * @param {uuid} [body.address.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.code] The code property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.displayName] The displayName
   * property for the paymentMethod entity
   *
   * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the customer
   * entity
   *
   * @param {string} [body.email] The email property for the customer entity
   *
   * @param {string} [body.website] The website property for the customer entity
   *
   * @param {boolean} [body.taxLiable] The taxLiable property for the customer
   * entity
   *
   * @param {uuid} [body.taxAreaId] The taxAreaId property for the customer
   * entity
   *
   * @param {string} [body.taxAreaDisplayName] The taxAreaDisplayName property
   * for the customer entity
   *
   * @param {string} [body.taxRegistrationNumber] The taxRegistrationNumber
   * property for the customer entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the customer
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * customer entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * customer entity
   *
   * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
   * customer entity
   *
   * @param {uuid} [body.paymentMethodId] The paymentMethodId property for the
   * customer entity
   *
   * @param {string} [body.blocked] The blocked property for the customer entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the customer entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Customer} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Customer} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchCustomerById(body, companyId, customerId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchCustomerById(body, companyId, customerId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchCustomerById(body, companyId, customerId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of customerFinancialDetails
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetCustomerFinancialDetailsForCustomerOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCustomerFinancialDetailsForCustomerWithHttpOperationResponse(companyId, customerId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCustomerFinancialDetailsForCustomer(companyId, customerId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of customerFinancialDetails
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetCustomerFinancialDetailsForCustomerOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      GetCustomerFinancialDetailsForCustomerOKResponse} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCustomerFinancialDetailsForCustomer(companyId, customerId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCustomerFinancialDetailsForCustomer(companyId, customerId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCustomerFinancialDetailsForCustomer(companyId, customerId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an
   * customerFinancialDetail object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {uuid} customerFinancialDetailId id for customerFinancialDetail
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CustomerFinancialDetail>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCustomerFinancialDetailForCustomerByIdWithHttpOperationResponse(companyId, customerId, customerFinancialDetailId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCustomerFinancialDetailForCustomerById(companyId, customerId, customerFinancialDetailId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an
   * customerFinancialDetail object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {uuid} customerFinancialDetailId id for customerFinancialDetail
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CustomerFinancialDetail} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CustomerFinancialDetail} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCustomerFinancialDetailForCustomerById(companyId, customerId, customerFinancialDetailId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCustomerFinancialDetailForCustomerById(companyId, customerId, customerFinancialDetailId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCustomerFinancialDetailForCustomerById(companyId, customerId, customerFinancialDetailId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of picture
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetPictureForCustomerOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPictureForCustomerWithHttpOperationResponse(companyId, customerId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPictureForCustomer(companyId, customerId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of picture
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetPictureForCustomerOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetPictureForCustomerOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPictureForCustomer(companyId, customerId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPictureForCustomer(companyId, customerId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPictureForCustomer(companyId, customerId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an picture object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Picture>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPictureForCustomerByIdWithHttpOperationResponse(companyId, customerId, pictureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPictureForCustomerById(companyId, customerId, pictureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an picture object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Picture} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Picture} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPictureForCustomerById(companyId, customerId, pictureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPictureForCustomerById(companyId, customerId, pictureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPictureForCustomerById(companyId, customerId, pictureId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an picture in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deletePictureForCustomerByIdByIdWithHttpOperationResponse(companyId, customerId, pictureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deletePictureForCustomerByIdById(companyId, customerId, pictureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an picture in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deletePictureForCustomerByIdById(companyId, customerId, pictureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deletePictureForCustomerByIdById(companyId, customerId, pictureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deletePictureForCustomerByIdById(companyId, customerId, pictureId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified picture
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the picture entity
   *
   * @param {number} [body.width] The width property for the picture entity
   *
   * @param {number} [body.height] The height property for the picture entity
   *
   * @param {string} [body.contentType] The contentType property for the picture
   * entity
   *
   * @param {string} [body.content] The content property for the picture entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Picture>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchPictureForCustomerByIdByIdWithHttpOperationResponse(body, companyId, customerId, pictureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchPictureForCustomerByIdById(body, companyId, customerId, pictureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified picture
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the picture entity
   *
   * @param {number} [body.width] The width property for the picture entity
   *
   * @param {number} [body.height] The height property for the picture entity
   *
   * @param {string} [body.contentType] The contentType property for the picture
   * entity
   *
   * @param {string} [body.content] The content property for the picture entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Picture} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Picture} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchPictureForCustomerByIdById(body, companyId, customerId, pictureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchPictureForCustomerByIdById(body, companyId, customerId, pictureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchPictureForCustomerByIdById(body, companyId, customerId, pictureId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of defaultDimensions
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetDefaultDimensionsForCustomerOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDefaultDimensionsForCustomerWithHttpOperationResponse(companyId, customerId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDefaultDimensionsForCustomer(companyId, customerId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of defaultDimensions
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetDefaultDimensionsForCustomerOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetDefaultDimensionsForCustomerOKResponse}
   *                      for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultDimensionsForCustomer(companyId, customerId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDefaultDimensionsForCustomer(companyId, customerId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDefaultDimensionsForCustomer(companyId, customerId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a defaultDimensions in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DefaultDimensions>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postDefaultDimensionsForCustomerWithHttpOperationResponse(body, companyId, customerId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postDefaultDimensionsForCustomer(body, companyId, customerId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a defaultDimensions in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DefaultDimensions} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DefaultDimensions} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postDefaultDimensionsForCustomer(body, companyId, customerId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postDefaultDimensionsForCustomer(body, companyId, customerId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postDefaultDimensionsForCustomer(body, companyId, customerId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an defaultDimensions
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DefaultDimensions>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDefaultDimensionsForCustomerByDimensionIdByParentIdWithHttpOperationResponse(companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDefaultDimensionsForCustomerByDimensionIdByParentId(companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an defaultDimensions
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DefaultDimensions} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DefaultDimensions} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultDimensionsForCustomerByDimensionIdByParentId(companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDefaultDimensionsForCustomerByDimensionIdByParentId(companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDefaultDimensionsForCustomerByDimensionIdByParentId(companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an defaultDimensions in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteDefaultDimensionsForCustomerByDimensionIdByParentIdByIdWithHttpOperationResponse(companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteDefaultDimensionsForCustomerByDimensionIdByParentIdById(companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an defaultDimensions in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteDefaultDimensionsForCustomerByDimensionIdByParentIdById(companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteDefaultDimensionsForCustomerByDimensionIdByParentIdById(companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteDefaultDimensionsForCustomerByDimensionIdByParentIdById(companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified defaultDimensions
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DefaultDimensions>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchDefaultDimensionsForCustomerByDimensionIdByParentIdByIdWithHttpOperationResponse(body, companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchDefaultDimensionsForCustomerByDimensionIdByParentIdById(body, companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified defaultDimensions
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerId id for customer
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DefaultDimensions} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DefaultDimensions} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchDefaultDimensionsForCustomerByDimensionIdByParentIdById(body, companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchDefaultDimensionsForCustomerByDimensionIdByParentIdById(body, companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchDefaultDimensionsForCustomerByDimensionIdByParentIdById(body, companyId, customerId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of customerFinancialDetails
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetCustomerFinancialDetailsOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCustomerFinancialDetailsWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCustomerFinancialDetails(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of customerFinancialDetails
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetCustomerFinancialDetailsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetCustomerFinancialDetailsOKResponse} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCustomerFinancialDetails(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCustomerFinancialDetails(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCustomerFinancialDetails(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an
   * customerFinancialDetail object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerFinancialDetailId id for customerFinancialDetail
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CustomerFinancialDetail>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCustomerFinancialDetailByIdWithHttpOperationResponse(companyId, customerFinancialDetailId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCustomerFinancialDetailById(companyId, customerFinancialDetailId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an
   * customerFinancialDetail object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerFinancialDetailId id for customerFinancialDetail
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CustomerFinancialDetail} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CustomerFinancialDetail} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCustomerFinancialDetailById(companyId, customerFinancialDetailId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCustomerFinancialDetailById(companyId, customerFinancialDetailId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCustomerFinancialDetailById(companyId, customerFinancialDetailId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of vendors
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetVendorsOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getVendorsWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getVendors(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of vendors
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetVendorsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetVendorsOKResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getVendors(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getVendors(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getVendors(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a vendor in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the vendor entity
   *
   * @param {string} [body.number] The number property for the vendor entity
   *
   * @param {string} [body.displayName] The displayName property for the vendor
   * entity
   *
   * @param {object} [body.address]
   *
   * @param {string} [body.address.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.address.postalCode] The postalCode property for the
   * postaladdresstype entity
   *
   * @param {array} [body.address.customerFinancialDetails]
   *
   * @param {array} [body.address.picture]
   *
   * @param {array} [body.address.defaultDimensions]
   *
   * @param {object} [body.address.currency]
   *
   * @param {uuid} [body.address.currency.id] The id property for the currency
   * entity
   *
   * @param {string} [body.address.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.address.currency.displayName] The displayName property
   * for the currency entity
   *
   * @param {string} [body.address.currency.symbol] The symbol property for the
   * currency entity
   *
   * @param {string} [body.address.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.address.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.address.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.address.paymentTerm]
   *
   * @param {uuid} [body.address.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.code] The code property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.address.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
   * The calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.address.shipmentMethod]
   *
   * @param {uuid} [body.address.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.code] The code property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.displayName] The displayName
   * property for the shipmentMethod entity
   *
   * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.address.paymentMethod]
   *
   * @param {uuid} [body.address.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.code] The code property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.displayName] The displayName
   * property for the paymentMethod entity
   *
   * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the vendor
   * entity
   *
   * @param {string} [body.email] The email property for the vendor entity
   *
   * @param {string} [body.website] The website property for the vendor entity
   *
   * @param {string} [body.taxRegistrationNumber] The taxRegistrationNumber
   * property for the vendor entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the vendor
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the vendor
   * entity
   *
   * @param {string} [body.irs1099Code] The irs1099Code property for the vendor
   * entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * vendor entity
   *
   * @param {uuid} [body.paymentMethodId] The paymentMethodId property for the
   * vendor entity
   *
   * @param {boolean} [body.taxLiable] The taxLiable property for the vendor
   * entity
   *
   * @param {string} [body.blocked] The blocked property for the vendor entity
   *
   * @param {number} [body.balance] The balance property for the vendor entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the vendor entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Vendor>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postVendorWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postVendor(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a vendor in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the vendor entity
   *
   * @param {string} [body.number] The number property for the vendor entity
   *
   * @param {string} [body.displayName] The displayName property for the vendor
   * entity
   *
   * @param {object} [body.address]
   *
   * @param {string} [body.address.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.address.postalCode] The postalCode property for the
   * postaladdresstype entity
   *
   * @param {array} [body.address.customerFinancialDetails]
   *
   * @param {array} [body.address.picture]
   *
   * @param {array} [body.address.defaultDimensions]
   *
   * @param {object} [body.address.currency]
   *
   * @param {uuid} [body.address.currency.id] The id property for the currency
   * entity
   *
   * @param {string} [body.address.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.address.currency.displayName] The displayName property
   * for the currency entity
   *
   * @param {string} [body.address.currency.symbol] The symbol property for the
   * currency entity
   *
   * @param {string} [body.address.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.address.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.address.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.address.paymentTerm]
   *
   * @param {uuid} [body.address.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.code] The code property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.address.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
   * The calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.address.shipmentMethod]
   *
   * @param {uuid} [body.address.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.code] The code property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.displayName] The displayName
   * property for the shipmentMethod entity
   *
   * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.address.paymentMethod]
   *
   * @param {uuid} [body.address.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.code] The code property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.displayName] The displayName
   * property for the paymentMethod entity
   *
   * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the vendor
   * entity
   *
   * @param {string} [body.email] The email property for the vendor entity
   *
   * @param {string} [body.website] The website property for the vendor entity
   *
   * @param {string} [body.taxRegistrationNumber] The taxRegistrationNumber
   * property for the vendor entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the vendor
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the vendor
   * entity
   *
   * @param {string} [body.irs1099Code] The irs1099Code property for the vendor
   * entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * vendor entity
   *
   * @param {uuid} [body.paymentMethodId] The paymentMethodId property for the
   * vendor entity
   *
   * @param {boolean} [body.taxLiable] The taxLiable property for the vendor
   * entity
   *
   * @param {string} [body.blocked] The blocked property for the vendor entity
   *
   * @param {number} [body.balance] The balance property for the vendor entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the vendor entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Vendor} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Vendor} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postVendor(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postVendor(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postVendor(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an vendor object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Vendor>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getVendorByIdWithHttpOperationResponse(companyId, vendorId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getVendorById(companyId, vendorId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an vendor object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Vendor} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Vendor} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getVendorById(companyId, vendorId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getVendorById(companyId, vendorId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getVendorById(companyId, vendorId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an vendor in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteVendorByIdWithHttpOperationResponse(companyId, vendorId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteVendorById(companyId, vendorId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an vendor in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteVendorById(companyId, vendorId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteVendorById(companyId, vendorId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteVendorById(companyId, vendorId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified vendor
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the vendor entity
   *
   * @param {string} [body.number] The number property for the vendor entity
   *
   * @param {string} [body.displayName] The displayName property for the vendor
   * entity
   *
   * @param {object} [body.address]
   *
   * @param {string} [body.address.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.address.postalCode] The postalCode property for the
   * postaladdresstype entity
   *
   * @param {array} [body.address.customerFinancialDetails]
   *
   * @param {array} [body.address.picture]
   *
   * @param {array} [body.address.defaultDimensions]
   *
   * @param {object} [body.address.currency]
   *
   * @param {uuid} [body.address.currency.id] The id property for the currency
   * entity
   *
   * @param {string} [body.address.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.address.currency.displayName] The displayName property
   * for the currency entity
   *
   * @param {string} [body.address.currency.symbol] The symbol property for the
   * currency entity
   *
   * @param {string} [body.address.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.address.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.address.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.address.paymentTerm]
   *
   * @param {uuid} [body.address.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.code] The code property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.address.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
   * The calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.address.shipmentMethod]
   *
   * @param {uuid} [body.address.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.code] The code property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.displayName] The displayName
   * property for the shipmentMethod entity
   *
   * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.address.paymentMethod]
   *
   * @param {uuid} [body.address.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.code] The code property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.displayName] The displayName
   * property for the paymentMethod entity
   *
   * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the vendor
   * entity
   *
   * @param {string} [body.email] The email property for the vendor entity
   *
   * @param {string} [body.website] The website property for the vendor entity
   *
   * @param {string} [body.taxRegistrationNumber] The taxRegistrationNumber
   * property for the vendor entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the vendor
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the vendor
   * entity
   *
   * @param {string} [body.irs1099Code] The irs1099Code property for the vendor
   * entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * vendor entity
   *
   * @param {uuid} [body.paymentMethodId] The paymentMethodId property for the
   * vendor entity
   *
   * @param {boolean} [body.taxLiable] The taxLiable property for the vendor
   * entity
   *
   * @param {string} [body.blocked] The blocked property for the vendor entity
   *
   * @param {number} [body.balance] The balance property for the vendor entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the vendor entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Vendor>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchVendorByIdWithHttpOperationResponse(body, companyId, vendorId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchVendorById(body, companyId, vendorId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified vendor
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the vendor entity
   *
   * @param {string} [body.number] The number property for the vendor entity
   *
   * @param {string} [body.displayName] The displayName property for the vendor
   * entity
   *
   * @param {object} [body.address]
   *
   * @param {string} [body.address.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.address.postalCode] The postalCode property for the
   * postaladdresstype entity
   *
   * @param {array} [body.address.customerFinancialDetails]
   *
   * @param {array} [body.address.picture]
   *
   * @param {array} [body.address.defaultDimensions]
   *
   * @param {object} [body.address.currency]
   *
   * @param {uuid} [body.address.currency.id] The id property for the currency
   * entity
   *
   * @param {string} [body.address.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.address.currency.displayName] The displayName property
   * for the currency entity
   *
   * @param {string} [body.address.currency.symbol] The symbol property for the
   * currency entity
   *
   * @param {string} [body.address.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.address.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.address.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.address.paymentTerm]
   *
   * @param {uuid} [body.address.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.code] The code property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.address.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
   * The calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.address.shipmentMethod]
   *
   * @param {uuid} [body.address.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.code] The code property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.displayName] The displayName
   * property for the shipmentMethod entity
   *
   * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.address.paymentMethod]
   *
   * @param {uuid} [body.address.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.code] The code property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.displayName] The displayName
   * property for the paymentMethod entity
   *
   * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the vendor
   * entity
   *
   * @param {string} [body.email] The email property for the vendor entity
   *
   * @param {string} [body.website] The website property for the vendor entity
   *
   * @param {string} [body.taxRegistrationNumber] The taxRegistrationNumber
   * property for the vendor entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the vendor
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the vendor
   * entity
   *
   * @param {string} [body.irs1099Code] The irs1099Code property for the vendor
   * entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * vendor entity
   *
   * @param {uuid} [body.paymentMethodId] The paymentMethodId property for the
   * vendor entity
   *
   * @param {boolean} [body.taxLiable] The taxLiable property for the vendor
   * entity
   *
   * @param {string} [body.blocked] The blocked property for the vendor entity
   *
   * @param {number} [body.balance] The balance property for the vendor entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the vendor entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Vendor} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Vendor} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchVendorById(body, companyId, vendorId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchVendorById(body, companyId, vendorId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchVendorById(body, companyId, vendorId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of picture
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetPictureForVendorOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPictureForVendorWithHttpOperationResponse(companyId, vendorId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPictureForVendor(companyId, vendorId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of picture
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetPictureForVendorOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetPictureForVendorOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPictureForVendor(companyId, vendorId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPictureForVendor(companyId, vendorId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPictureForVendor(companyId, vendorId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an picture object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Picture>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPictureForVendorByIdWithHttpOperationResponse(companyId, vendorId, pictureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPictureForVendorById(companyId, vendorId, pictureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an picture object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Picture} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Picture} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPictureForVendorById(companyId, vendorId, pictureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPictureForVendorById(companyId, vendorId, pictureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPictureForVendorById(companyId, vendorId, pictureId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an picture in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deletePictureForVendorByIdByIdWithHttpOperationResponse(companyId, vendorId, pictureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deletePictureForVendorByIdById(companyId, vendorId, pictureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an picture in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deletePictureForVendorByIdById(companyId, vendorId, pictureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deletePictureForVendorByIdById(companyId, vendorId, pictureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deletePictureForVendorByIdById(companyId, vendorId, pictureId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified picture
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the picture entity
   *
   * @param {number} [body.width] The width property for the picture entity
   *
   * @param {number} [body.height] The height property for the picture entity
   *
   * @param {string} [body.contentType] The contentType property for the picture
   * entity
   *
   * @param {string} [body.content] The content property for the picture entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Picture>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchPictureForVendorByIdByIdWithHttpOperationResponse(body, companyId, vendorId, pictureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchPictureForVendorByIdById(body, companyId, vendorId, pictureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified picture
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the picture entity
   *
   * @param {number} [body.width] The width property for the picture entity
   *
   * @param {number} [body.height] The height property for the picture entity
   *
   * @param {string} [body.contentType] The contentType property for the picture
   * entity
   *
   * @param {string} [body.content] The content property for the picture entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Picture} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Picture} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchPictureForVendorByIdById(body, companyId, vendorId, pictureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchPictureForVendorByIdById(body, companyId, vendorId, pictureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchPictureForVendorByIdById(body, companyId, vendorId, pictureId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of defaultDimensions
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetDefaultDimensionsForVendorOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDefaultDimensionsForVendorWithHttpOperationResponse(companyId, vendorId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDefaultDimensionsForVendor(companyId, vendorId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of defaultDimensions
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetDefaultDimensionsForVendorOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetDefaultDimensionsForVendorOKResponse} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultDimensionsForVendor(companyId, vendorId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDefaultDimensionsForVendor(companyId, vendorId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDefaultDimensionsForVendor(companyId, vendorId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a defaultDimensions in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DefaultDimensions>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postDefaultDimensionsForVendorWithHttpOperationResponse(body, companyId, vendorId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postDefaultDimensionsForVendor(body, companyId, vendorId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a defaultDimensions in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DefaultDimensions} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DefaultDimensions} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postDefaultDimensionsForVendor(body, companyId, vendorId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postDefaultDimensionsForVendor(body, companyId, vendorId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postDefaultDimensionsForVendor(body, companyId, vendorId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an defaultDimensions
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DefaultDimensions>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDefaultDimensionsForVendorByDimensionIdByParentIdWithHttpOperationResponse(companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDefaultDimensionsForVendorByDimensionIdByParentId(companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an defaultDimensions
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DefaultDimensions} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DefaultDimensions} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultDimensionsForVendorByDimensionIdByParentId(companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDefaultDimensionsForVendorByDimensionIdByParentId(companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDefaultDimensionsForVendorByDimensionIdByParentId(companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an defaultDimensions in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteDefaultDimensionsForVendorByDimensionIdByParentIdByIdWithHttpOperationResponse(companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteDefaultDimensionsForVendorByDimensionIdByParentIdById(companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an defaultDimensions in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteDefaultDimensionsForVendorByDimensionIdByParentIdById(companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteDefaultDimensionsForVendorByDimensionIdByParentIdById(companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteDefaultDimensionsForVendorByDimensionIdByParentIdById(companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified defaultDimensions
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DefaultDimensions>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchDefaultDimensionsForVendorByDimensionIdByParentIdByIdWithHttpOperationResponse(body, companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchDefaultDimensionsForVendorByDimensionIdByParentIdById(body, companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified defaultDimensions
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorId id for vendor
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DefaultDimensions} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DefaultDimensions} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchDefaultDimensionsForVendorByDimensionIdByParentIdById(body, companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchDefaultDimensionsForVendorByDimensionIdByParentIdById(body, companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchDefaultDimensionsForVendorByDimensionIdByParentIdById(body, companyId, vendorId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of companyInformation
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetCompanyInformationOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCompanyInformationWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCompanyInformation(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of companyInformation
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetCompanyInformationOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetCompanyInformationOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCompanyInformation(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCompanyInformation(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCompanyInformation(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an companyInformation
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} companyInformationId id for companyInformation
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CompanyInformation>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCompanyInformationByIdWithHttpOperationResponse(companyId, companyInformationId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCompanyInformationById(companyId, companyInformationId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an companyInformation
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} companyInformationId id for companyInformation
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CompanyInformation} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CompanyInformation} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCompanyInformationById(companyId, companyInformationId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCompanyInformationById(companyId, companyInformationId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCompanyInformationById(companyId, companyInformationId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified companyInformation
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the companyInformation entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * companyInformation entity
   *
   * @param {object} [body.address]
   *
   * @param {string} [body.address.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.address.postalCode] The postalCode property for the
   * postaladdresstype entity
   *
   * @param {array} [body.address.customerFinancialDetails]
   *
   * @param {array} [body.address.picture]
   *
   * @param {array} [body.address.defaultDimensions]
   *
   * @param {object} [body.address.currency]
   *
   * @param {uuid} [body.address.currency.id] The id property for the currency
   * entity
   *
   * @param {string} [body.address.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.address.currency.displayName] The displayName property
   * for the currency entity
   *
   * @param {string} [body.address.currency.symbol] The symbol property for the
   * currency entity
   *
   * @param {string} [body.address.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.address.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.address.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.address.paymentTerm]
   *
   * @param {uuid} [body.address.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.code] The code property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.address.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
   * The calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.address.shipmentMethod]
   *
   * @param {uuid} [body.address.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.code] The code property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.displayName] The displayName
   * property for the shipmentMethod entity
   *
   * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.address.paymentMethod]
   *
   * @param {uuid} [body.address.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.code] The code property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.displayName] The displayName
   * property for the paymentMethod entity
   *
   * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * companyInformation entity
   *
   * @param {string} [body.faxNumber] The faxNumber property for the
   * companyInformation entity
   *
   * @param {string} [body.email] The email property for the companyInformation
   * entity
   *
   * @param {string} [body.website] The website property for the
   * companyInformation entity
   *
   * @param {string} [body.taxRegistrationNumber] The taxRegistrationNumber
   * property for the companyInformation entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * companyInformation entity
   *
   * @param {date} [body.currentFiscalYearStartDate] The
   * currentFiscalYearStartDate property for the companyInformation entity
   *
   * @param {string} [body.industry] The industry property for the
   * companyInformation entity
   *
   * @param {string} [body.picture] The picture property for the
   * companyInformation entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the companyInformation entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} companyInformationId id for companyInformation
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CompanyInformation>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchCompanyInformationByIdWithHttpOperationResponse(body, companyId, companyInformationId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchCompanyInformationById(body, companyId, companyInformationId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified companyInformation
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the companyInformation entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * companyInformation entity
   *
   * @param {object} [body.address]
   *
   * @param {string} [body.address.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.address.postalCode] The postalCode property for the
   * postaladdresstype entity
   *
   * @param {array} [body.address.customerFinancialDetails]
   *
   * @param {array} [body.address.picture]
   *
   * @param {array} [body.address.defaultDimensions]
   *
   * @param {object} [body.address.currency]
   *
   * @param {uuid} [body.address.currency.id] The id property for the currency
   * entity
   *
   * @param {string} [body.address.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.address.currency.displayName] The displayName property
   * for the currency entity
   *
   * @param {string} [body.address.currency.symbol] The symbol property for the
   * currency entity
   *
   * @param {string} [body.address.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.address.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.address.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.address.paymentTerm]
   *
   * @param {uuid} [body.address.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.code] The code property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.address.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
   * The calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.address.shipmentMethod]
   *
   * @param {uuid} [body.address.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.code] The code property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.displayName] The displayName
   * property for the shipmentMethod entity
   *
   * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.address.paymentMethod]
   *
   * @param {uuid} [body.address.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.code] The code property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.displayName] The displayName
   * property for the paymentMethod entity
   *
   * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * companyInformation entity
   *
   * @param {string} [body.faxNumber] The faxNumber property for the
   * companyInformation entity
   *
   * @param {string} [body.email] The email property for the companyInformation
   * entity
   *
   * @param {string} [body.website] The website property for the
   * companyInformation entity
   *
   * @param {string} [body.taxRegistrationNumber] The taxRegistrationNumber
   * property for the companyInformation entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * companyInformation entity
   *
   * @param {date} [body.currentFiscalYearStartDate] The
   * currentFiscalYearStartDate property for the companyInformation entity
   *
   * @param {string} [body.industry] The industry property for the
   * companyInformation entity
   *
   * @param {string} [body.picture] The picture property for the
   * companyInformation entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the companyInformation entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} companyInformationId id for companyInformation
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CompanyInformation} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CompanyInformation} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchCompanyInformationById(body, companyId, companyInformationId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchCompanyInformationById(body, companyId, companyInformationId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchCompanyInformationById(body, companyId, companyInformationId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of salesInvoices
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetSalesInvoicesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesInvoicesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesInvoices(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of salesInvoices
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetSalesInvoicesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetSalesInvoicesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesInvoices(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesInvoices(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesInvoices(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a salesInvoice in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the salesInvoice entity
   *
   * @param {string} [body.number] The number property for the salesInvoice
   * entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the salesInvoice entity
   *
   * @param {date} [body.invoiceDate] The invoiceDate property for the
   * salesInvoice entity
   *
   * @param {date} [body.dueDate] The dueDate property for the salesInvoice
   * entity
   *
   * @param {string} [body.customerPurchaseOrderReference] The
   * customerPurchaseOrderReference property for the salesInvoice entity
   *
   * @param {uuid} [body.customerId] The customerId property for the salesInvoice
   * entity
   *
   * @param {string} [body.contactId] The contactId property for the salesInvoice
   * entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * salesInvoice entity
   *
   * @param {string} [body.customerName] The customerName property for the
   * salesInvoice entity
   *
   * @param {string} [body.billToName] The billToName property for the
   * salesInvoice entity
   *
   * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
   * salesInvoice entity
   *
   * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
   * property for the salesInvoice entity
   *
   * @param {string} [body.shipToName] The shipToName property for the
   * salesInvoice entity
   *
   * @param {string} [body.shipToContact] The shipToContact property for the
   * salesInvoice entity
   *
   * @param {object} [body.sellingPostalAddress]
   *
   * @param {object} [body.billingPostalAddress]
   *
   * @param {object} [body.shippingPostalAddress]
   *
   * @param {string} [body.shippingPostalAddress.street] The street property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.state] The state property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.countryLetterCode] The
   * countryLetterCode property for the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
   * property for the postaladdresstype entity
   *
   * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
   *
   * @param {array} [body.shippingPostalAddress.picture]
   *
   * @param {array} [body.shippingPostalAddress.defaultDimensions]
   *
   * @param {object} [body.shippingPostalAddress.currency]
   *
   * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
   * the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.code] The code property
   * for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.displayName] The
   * displayName property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
   * property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
   * The amountDecimalPlaces property for the currency entity
   *
   * @param {number}
   * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.shippingPostalAddress.paymentTerm]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
   * for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
   * property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
   * displayName property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
   * The dueDateCalculation property for the paymentTerm entity
   *
   * @param {string}
   * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.shippingPostalAddress.shipmentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
   * for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
   * property for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.shippingPostalAddress.paymentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
   * for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
   * property for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the salesInvoice
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * salesInvoice entity
   *
   * @param {uuid} [body.orderId] The orderId property for the salesInvoice
   * entity
   *
   * @param {string} [body.orderNumber] The orderNumber property for the
   * salesInvoice entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * salesInvoice entity
   *
   * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
   * salesInvoice entity
   *
   * @param {string} [body.salesperson] The salesperson property for the
   * salesInvoice entity
   *
   * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
   * the salesInvoice entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesInvoice entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesInvoice entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the salesInvoice entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesInvoice entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the salesInvoice entity
   *
   * @param {string} [body.status] The status property for the salesInvoice
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the salesInvoice entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * salesInvoice entity
   *
   * @param {string} [body.email] The email property for the salesInvoice entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesInvoice>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postSalesInvoiceWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postSalesInvoice(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a salesInvoice in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the salesInvoice entity
   *
   * @param {string} [body.number] The number property for the salesInvoice
   * entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the salesInvoice entity
   *
   * @param {date} [body.invoiceDate] The invoiceDate property for the
   * salesInvoice entity
   *
   * @param {date} [body.dueDate] The dueDate property for the salesInvoice
   * entity
   *
   * @param {string} [body.customerPurchaseOrderReference] The
   * customerPurchaseOrderReference property for the salesInvoice entity
   *
   * @param {uuid} [body.customerId] The customerId property for the salesInvoice
   * entity
   *
   * @param {string} [body.contactId] The contactId property for the salesInvoice
   * entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * salesInvoice entity
   *
   * @param {string} [body.customerName] The customerName property for the
   * salesInvoice entity
   *
   * @param {string} [body.billToName] The billToName property for the
   * salesInvoice entity
   *
   * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
   * salesInvoice entity
   *
   * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
   * property for the salesInvoice entity
   *
   * @param {string} [body.shipToName] The shipToName property for the
   * salesInvoice entity
   *
   * @param {string} [body.shipToContact] The shipToContact property for the
   * salesInvoice entity
   *
   * @param {object} [body.sellingPostalAddress]
   *
   * @param {object} [body.billingPostalAddress]
   *
   * @param {object} [body.shippingPostalAddress]
   *
   * @param {string} [body.shippingPostalAddress.street] The street property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.state] The state property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.countryLetterCode] The
   * countryLetterCode property for the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
   * property for the postaladdresstype entity
   *
   * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
   *
   * @param {array} [body.shippingPostalAddress.picture]
   *
   * @param {array} [body.shippingPostalAddress.defaultDimensions]
   *
   * @param {object} [body.shippingPostalAddress.currency]
   *
   * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
   * the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.code] The code property
   * for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.displayName] The
   * displayName property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
   * property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
   * The amountDecimalPlaces property for the currency entity
   *
   * @param {number}
   * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.shippingPostalAddress.paymentTerm]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
   * for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
   * property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
   * displayName property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
   * The dueDateCalculation property for the paymentTerm entity
   *
   * @param {string}
   * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.shippingPostalAddress.shipmentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
   * for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
   * property for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.shippingPostalAddress.paymentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
   * for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
   * property for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the salesInvoice
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * salesInvoice entity
   *
   * @param {uuid} [body.orderId] The orderId property for the salesInvoice
   * entity
   *
   * @param {string} [body.orderNumber] The orderNumber property for the
   * salesInvoice entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * salesInvoice entity
   *
   * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
   * salesInvoice entity
   *
   * @param {string} [body.salesperson] The salesperson property for the
   * salesInvoice entity
   *
   * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
   * the salesInvoice entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesInvoice entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesInvoice entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the salesInvoice entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesInvoice entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the salesInvoice entity
   *
   * @param {string} [body.status] The status property for the salesInvoice
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the salesInvoice entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * salesInvoice entity
   *
   * @param {string} [body.email] The email property for the salesInvoice entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesInvoice} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesInvoice} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postSalesInvoice(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postSalesInvoice(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postSalesInvoice(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an salesInvoice object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesInvoice>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesInvoiceByIdWithHttpOperationResponse(companyId, salesInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesInvoiceById(companyId, salesInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an salesInvoice object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesInvoice} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesInvoice} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesInvoiceById(companyId, salesInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesInvoiceById(companyId, salesInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesInvoiceById(companyId, salesInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an salesInvoice in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteSalesInvoiceByIdWithHttpOperationResponse(companyId, salesInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteSalesInvoiceById(companyId, salesInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an salesInvoice in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteSalesInvoiceById(companyId, salesInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteSalesInvoiceById(companyId, salesInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteSalesInvoiceById(companyId, salesInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified salesInvoice
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the salesInvoice entity
   *
   * @param {string} [body.number] The number property for the salesInvoice
   * entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the salesInvoice entity
   *
   * @param {date} [body.invoiceDate] The invoiceDate property for the
   * salesInvoice entity
   *
   * @param {date} [body.dueDate] The dueDate property for the salesInvoice
   * entity
   *
   * @param {string} [body.customerPurchaseOrderReference] The
   * customerPurchaseOrderReference property for the salesInvoice entity
   *
   * @param {uuid} [body.customerId] The customerId property for the salesInvoice
   * entity
   *
   * @param {string} [body.contactId] The contactId property for the salesInvoice
   * entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * salesInvoice entity
   *
   * @param {string} [body.customerName] The customerName property for the
   * salesInvoice entity
   *
   * @param {string} [body.billToName] The billToName property for the
   * salesInvoice entity
   *
   * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
   * salesInvoice entity
   *
   * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
   * property for the salesInvoice entity
   *
   * @param {string} [body.shipToName] The shipToName property for the
   * salesInvoice entity
   *
   * @param {string} [body.shipToContact] The shipToContact property for the
   * salesInvoice entity
   *
   * @param {object} [body.sellingPostalAddress]
   *
   * @param {object} [body.billingPostalAddress]
   *
   * @param {object} [body.shippingPostalAddress]
   *
   * @param {string} [body.shippingPostalAddress.street] The street property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.state] The state property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.countryLetterCode] The
   * countryLetterCode property for the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
   * property for the postaladdresstype entity
   *
   * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
   *
   * @param {array} [body.shippingPostalAddress.picture]
   *
   * @param {array} [body.shippingPostalAddress.defaultDimensions]
   *
   * @param {object} [body.shippingPostalAddress.currency]
   *
   * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
   * the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.code] The code property
   * for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.displayName] The
   * displayName property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
   * property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
   * The amountDecimalPlaces property for the currency entity
   *
   * @param {number}
   * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.shippingPostalAddress.paymentTerm]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
   * for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
   * property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
   * displayName property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
   * The dueDateCalculation property for the paymentTerm entity
   *
   * @param {string}
   * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.shippingPostalAddress.shipmentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
   * for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
   * property for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.shippingPostalAddress.paymentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
   * for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
   * property for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the salesInvoice
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * salesInvoice entity
   *
   * @param {uuid} [body.orderId] The orderId property for the salesInvoice
   * entity
   *
   * @param {string} [body.orderNumber] The orderNumber property for the
   * salesInvoice entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * salesInvoice entity
   *
   * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
   * salesInvoice entity
   *
   * @param {string} [body.salesperson] The salesperson property for the
   * salesInvoice entity
   *
   * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
   * the salesInvoice entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesInvoice entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesInvoice entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the salesInvoice entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesInvoice entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the salesInvoice entity
   *
   * @param {string} [body.status] The status property for the salesInvoice
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the salesInvoice entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * salesInvoice entity
   *
   * @param {string} [body.email] The email property for the salesInvoice entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesInvoice>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchSalesInvoiceByIdWithHttpOperationResponse(body, companyId, salesInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchSalesInvoiceById(body, companyId, salesInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified salesInvoice
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the salesInvoice entity
   *
   * @param {string} [body.number] The number property for the salesInvoice
   * entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the salesInvoice entity
   *
   * @param {date} [body.invoiceDate] The invoiceDate property for the
   * salesInvoice entity
   *
   * @param {date} [body.dueDate] The dueDate property for the salesInvoice
   * entity
   *
   * @param {string} [body.customerPurchaseOrderReference] The
   * customerPurchaseOrderReference property for the salesInvoice entity
   *
   * @param {uuid} [body.customerId] The customerId property for the salesInvoice
   * entity
   *
   * @param {string} [body.contactId] The contactId property for the salesInvoice
   * entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * salesInvoice entity
   *
   * @param {string} [body.customerName] The customerName property for the
   * salesInvoice entity
   *
   * @param {string} [body.billToName] The billToName property for the
   * salesInvoice entity
   *
   * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
   * salesInvoice entity
   *
   * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
   * property for the salesInvoice entity
   *
   * @param {string} [body.shipToName] The shipToName property for the
   * salesInvoice entity
   *
   * @param {string} [body.shipToContact] The shipToContact property for the
   * salesInvoice entity
   *
   * @param {object} [body.sellingPostalAddress]
   *
   * @param {object} [body.billingPostalAddress]
   *
   * @param {object} [body.shippingPostalAddress]
   *
   * @param {string} [body.shippingPostalAddress.street] The street property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.state] The state property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.countryLetterCode] The
   * countryLetterCode property for the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
   * property for the postaladdresstype entity
   *
   * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
   *
   * @param {array} [body.shippingPostalAddress.picture]
   *
   * @param {array} [body.shippingPostalAddress.defaultDimensions]
   *
   * @param {object} [body.shippingPostalAddress.currency]
   *
   * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
   * the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.code] The code property
   * for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.displayName] The
   * displayName property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
   * property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
   * The amountDecimalPlaces property for the currency entity
   *
   * @param {number}
   * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.shippingPostalAddress.paymentTerm]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
   * for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
   * property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
   * displayName property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
   * The dueDateCalculation property for the paymentTerm entity
   *
   * @param {string}
   * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.shippingPostalAddress.shipmentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
   * for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
   * property for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.shippingPostalAddress.paymentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
   * for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
   * property for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the salesInvoice
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * salesInvoice entity
   *
   * @param {uuid} [body.orderId] The orderId property for the salesInvoice
   * entity
   *
   * @param {string} [body.orderNumber] The orderNumber property for the
   * salesInvoice entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * salesInvoice entity
   *
   * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
   * salesInvoice entity
   *
   * @param {string} [body.salesperson] The salesperson property for the
   * salesInvoice entity
   *
   * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
   * the salesInvoice entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesInvoice entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesInvoice entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the salesInvoice entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesInvoice entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the salesInvoice entity
   *
   * @param {string} [body.status] The status property for the salesInvoice
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the salesInvoice entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * salesInvoice entity
   *
   * @param {string} [body.email] The email property for the salesInvoice entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesInvoice} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesInvoice} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchSalesInvoiceById(body, companyId, salesInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchSalesInvoiceById(body, companyId, salesInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchSalesInvoiceById(body, companyId, salesInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Performs the cancelAndSend action for salesInvoices entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  cancelAndSendActionSalesInvoicesWithHttpOperationResponse(companyId, salesInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._cancelAndSendActionSalesInvoices(companyId, salesInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Performs the cancelAndSend action for salesInvoices entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  cancelAndSendActionSalesInvoices(companyId, salesInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._cancelAndSendActionSalesInvoices(companyId, salesInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._cancelAndSendActionSalesInvoices(companyId, salesInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Performs the cancel action for salesInvoices entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  cancelActionSalesInvoicesWithHttpOperationResponse(companyId, salesInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._cancelActionSalesInvoices(companyId, salesInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Performs the cancel action for salesInvoices entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  cancelActionSalesInvoices(companyId, salesInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._cancelActionSalesInvoices(companyId, salesInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._cancelActionSalesInvoices(companyId, salesInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Performs the postAndSend action for salesInvoices entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postAndSendActionSalesInvoicesWithHttpOperationResponse(companyId, salesInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postAndSendActionSalesInvoices(companyId, salesInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Performs the postAndSend action for salesInvoices entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postAndSendActionSalesInvoices(companyId, salesInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postAndSendActionSalesInvoices(companyId, salesInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postAndSendActionSalesInvoices(companyId, salesInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Performs the post action for salesInvoices entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postActionSalesInvoicesWithHttpOperationResponse(companyId, salesInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postActionSalesInvoices(companyId, salesInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Performs the post action for salesInvoices entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postActionSalesInvoices(companyId, salesInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postActionSalesInvoices(companyId, salesInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postActionSalesInvoices(companyId, salesInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Performs the send action for salesInvoices entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  sendActionSalesInvoicesWithHttpOperationResponse(companyId, salesInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._sendActionSalesInvoices(companyId, salesInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Performs the send action for salesInvoices entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  sendActionSalesInvoices(companyId, salesInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._sendActionSalesInvoices(companyId, salesInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._sendActionSalesInvoices(companyId, salesInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of salesInvoiceLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetSalesInvoiceLinesForSalesInvoiceOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesInvoiceLinesForSalesInvoiceWithHttpOperationResponse(companyId, salesInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesInvoiceLinesForSalesInvoice(companyId, salesInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of salesInvoiceLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetSalesInvoiceLinesForSalesInvoiceOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      GetSalesInvoiceLinesForSalesInvoiceOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesInvoiceLinesForSalesInvoice(companyId, salesInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesInvoiceLinesForSalesInvoice(companyId, salesInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesInvoiceLinesForSalesInvoice(companyId, salesInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a salesInvoiceLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesInvoiceLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesInvoiceLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * salesInvoiceLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * salesInvoiceLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesInvoiceLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesInvoiceLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesInvoiceLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesInvoiceLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesInvoiceLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesInvoiceLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesInvoiceLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesInvoiceLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesInvoiceLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postSalesInvoiceLineForSalesInvoiceWithHttpOperationResponse(body, companyId, salesInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postSalesInvoiceLineForSalesInvoice(body, companyId, salesInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a salesInvoiceLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesInvoiceLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesInvoiceLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * salesInvoiceLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * salesInvoiceLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesInvoiceLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesInvoiceLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesInvoiceLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesInvoiceLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesInvoiceLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesInvoiceLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesInvoiceLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesInvoiceLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesInvoiceLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesInvoiceLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postSalesInvoiceLineForSalesInvoice(body, companyId, salesInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postSalesInvoiceLineForSalesInvoice(body, companyId, salesInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postSalesInvoiceLineForSalesInvoice(body, companyId, salesInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an salesInvoiceLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {string} salesInvoiceLineId id for salesInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesInvoiceLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesInvoiceLineForSalesInvoiceByIdWithHttpOperationResponse(companyId, salesInvoiceId, salesInvoiceLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesInvoiceLineForSalesInvoiceById(companyId, salesInvoiceId, salesInvoiceLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an salesInvoiceLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {string} salesInvoiceLineId id for salesInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesInvoiceLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesInvoiceLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesInvoiceLineForSalesInvoiceById(companyId, salesInvoiceId, salesInvoiceLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesInvoiceLineForSalesInvoiceById(companyId, salesInvoiceId, salesInvoiceLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesInvoiceLineForSalesInvoiceById(companyId, salesInvoiceId, salesInvoiceLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an salesInvoiceLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {string} salesInvoiceLineId id for salesInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteSalesInvoiceLineForSalesInvoiceByIdByIdWithHttpOperationResponse(companyId, salesInvoiceId, salesInvoiceLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteSalesInvoiceLineForSalesInvoiceByIdById(companyId, salesInvoiceId, salesInvoiceLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an salesInvoiceLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {string} salesInvoiceLineId id for salesInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteSalesInvoiceLineForSalesInvoiceByIdById(companyId, salesInvoiceId, salesInvoiceLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteSalesInvoiceLineForSalesInvoiceByIdById(companyId, salesInvoiceId, salesInvoiceLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteSalesInvoiceLineForSalesInvoiceByIdById(companyId, salesInvoiceId, salesInvoiceLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified salesInvoiceLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesInvoiceLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesInvoiceLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * salesInvoiceLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * salesInvoiceLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesInvoiceLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesInvoiceLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesInvoiceLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesInvoiceLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesInvoiceLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesInvoiceLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesInvoiceLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesInvoiceLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {string} salesInvoiceLineId id for salesInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesInvoiceLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchSalesInvoiceLineForSalesInvoiceByIdByIdWithHttpOperationResponse(body, companyId, salesInvoiceId, salesInvoiceLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchSalesInvoiceLineForSalesInvoiceByIdById(body, companyId, salesInvoiceId, salesInvoiceLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified salesInvoiceLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesInvoiceLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesInvoiceLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * salesInvoiceLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * salesInvoiceLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesInvoiceLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesInvoiceLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesInvoiceLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesInvoiceLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesInvoiceLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesInvoiceLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesInvoiceLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesInvoiceLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {string} salesInvoiceLineId id for salesInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesInvoiceLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesInvoiceLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchSalesInvoiceLineForSalesInvoiceByIdById(body, companyId, salesInvoiceId, salesInvoiceLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchSalesInvoiceLineForSalesInvoiceByIdById(body, companyId, salesInvoiceId, salesInvoiceLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchSalesInvoiceLineForSalesInvoiceByIdById(body, companyId, salesInvoiceId, salesInvoiceLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of pdfDocument
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetPdfDocumentForSalesInvoiceOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPdfDocumentForSalesInvoiceWithHttpOperationResponse(companyId, salesInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPdfDocumentForSalesInvoice(companyId, salesInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of pdfDocument
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetPdfDocumentForSalesInvoiceOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetPdfDocumentForSalesInvoiceOKResponse} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPdfDocumentForSalesInvoice(companyId, salesInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPdfDocumentForSalesInvoice(companyId, salesInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPdfDocumentForSalesInvoice(companyId, salesInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an pdfDocument object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {uuid} pdfDocumentId id for pdfDocument
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PdfDocument>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPdfDocumentForSalesInvoiceByIdWithHttpOperationResponse(companyId, salesInvoiceId, pdfDocumentId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPdfDocumentForSalesInvoiceById(companyId, salesInvoiceId, pdfDocumentId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an pdfDocument object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesInvoiceId id for salesInvoice
   *
   * @param {uuid} pdfDocumentId id for pdfDocument
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PdfDocument} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PdfDocument} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPdfDocumentForSalesInvoiceById(companyId, salesInvoiceId, pdfDocumentId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPdfDocumentForSalesInvoiceById(companyId, salesInvoiceId, pdfDocumentId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPdfDocumentForSalesInvoiceById(companyId, salesInvoiceId, pdfDocumentId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of salesInvoiceLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetSalesInvoiceLinesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesInvoiceLinesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesInvoiceLines(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of salesInvoiceLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetSalesInvoiceLinesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetSalesInvoiceLinesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesInvoiceLines(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesInvoiceLines(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesInvoiceLines(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a salesInvoiceLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesInvoiceLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesInvoiceLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * salesInvoiceLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * salesInvoiceLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesInvoiceLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesInvoiceLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesInvoiceLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesInvoiceLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesInvoiceLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesInvoiceLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesInvoiceLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesInvoiceLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesInvoiceLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postSalesInvoiceLineWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postSalesInvoiceLine(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a salesInvoiceLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesInvoiceLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesInvoiceLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * salesInvoiceLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * salesInvoiceLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesInvoiceLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesInvoiceLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesInvoiceLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesInvoiceLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesInvoiceLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesInvoiceLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesInvoiceLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesInvoiceLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesInvoiceLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesInvoiceLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postSalesInvoiceLine(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postSalesInvoiceLine(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postSalesInvoiceLine(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an salesInvoiceLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesInvoiceLineId id for salesInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesInvoiceLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesInvoiceLineByIdWithHttpOperationResponse(companyId, salesInvoiceLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesInvoiceLineById(companyId, salesInvoiceLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an salesInvoiceLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesInvoiceLineId id for salesInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesInvoiceLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesInvoiceLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesInvoiceLineById(companyId, salesInvoiceLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesInvoiceLineById(companyId, salesInvoiceLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesInvoiceLineById(companyId, salesInvoiceLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an salesInvoiceLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesInvoiceLineId id for salesInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteSalesInvoiceLineByIdWithHttpOperationResponse(companyId, salesInvoiceLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteSalesInvoiceLineById(companyId, salesInvoiceLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an salesInvoiceLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesInvoiceLineId id for salesInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteSalesInvoiceLineById(companyId, salesInvoiceLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteSalesInvoiceLineById(companyId, salesInvoiceLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteSalesInvoiceLineById(companyId, salesInvoiceLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified salesInvoiceLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesInvoiceLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesInvoiceLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * salesInvoiceLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * salesInvoiceLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesInvoiceLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesInvoiceLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesInvoiceLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesInvoiceLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesInvoiceLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesInvoiceLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesInvoiceLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesInvoiceLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesInvoiceLineId id for salesInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesInvoiceLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchSalesInvoiceLineByIdWithHttpOperationResponse(body, companyId, salesInvoiceLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchSalesInvoiceLineById(body, companyId, salesInvoiceLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified salesInvoiceLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesInvoiceLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesInvoiceLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * salesInvoiceLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * salesInvoiceLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesInvoiceLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesInvoiceLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesInvoiceLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesInvoiceLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesInvoiceLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesInvoiceLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesInvoiceLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesInvoiceLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesInvoiceLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesInvoiceLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesInvoiceLineId id for salesInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesInvoiceLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesInvoiceLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchSalesInvoiceLineById(body, companyId, salesInvoiceLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchSalesInvoiceLineById(body, companyId, salesInvoiceLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchSalesInvoiceLineById(body, companyId, salesInvoiceLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of pdfDocument
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetPdfDocumentOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPdfDocumentWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPdfDocument(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of pdfDocument
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetPdfDocumentOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetPdfDocumentOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPdfDocument(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPdfDocument(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPdfDocument(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an pdfDocument object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} pdfDocumentId id for pdfDocument
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PdfDocument>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPdfDocumentByIdWithHttpOperationResponse(companyId, pdfDocumentId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPdfDocumentById(companyId, pdfDocumentId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an pdfDocument object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} pdfDocumentId id for pdfDocument
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PdfDocument} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PdfDocument} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPdfDocumentById(companyId, pdfDocumentId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPdfDocumentById(companyId, pdfDocumentId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPdfDocumentById(companyId, pdfDocumentId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of customerPaymentJournals
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetCustomerPaymentJournalsOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCustomerPaymentJournalsWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCustomerPaymentJournals(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of customerPaymentJournals
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetCustomerPaymentJournalsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetCustomerPaymentJournalsOKResponse} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCustomerPaymentJournals(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCustomerPaymentJournals(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCustomerPaymentJournals(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a customerPaymentJournal in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the customerPaymentJournal
   * entity
   *
   * @param {string} [body.code] The code property for the customerPaymentJournal
   * entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * customerPaymentJournal entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the customerPaymentJournal entity
   *
   * @param {uuid} [body.balancingAccountId] The balancingAccountId property for
   * the customerPaymentJournal entity
   *
   * @param {string} [body.balancingAccountNumber] The balancingAccountNumber
   * property for the customerPaymentJournal entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CustomerPaymentJournal>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postCustomerPaymentJournalWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postCustomerPaymentJournal(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a customerPaymentJournal in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the customerPaymentJournal
   * entity
   *
   * @param {string} [body.code] The code property for the customerPaymentJournal
   * entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * customerPaymentJournal entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the customerPaymentJournal entity
   *
   * @param {uuid} [body.balancingAccountId] The balancingAccountId property for
   * the customerPaymentJournal entity
   *
   * @param {string} [body.balancingAccountNumber] The balancingAccountNumber
   * property for the customerPaymentJournal entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CustomerPaymentJournal} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CustomerPaymentJournal} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postCustomerPaymentJournal(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postCustomerPaymentJournal(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postCustomerPaymentJournal(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an
   * customerPaymentJournal object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CustomerPaymentJournal>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCustomerPaymentJournalByIdWithHttpOperationResponse(companyId, customerPaymentJournalId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCustomerPaymentJournalById(companyId, customerPaymentJournalId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an
   * customerPaymentJournal object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CustomerPaymentJournal} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CustomerPaymentJournal} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCustomerPaymentJournalById(companyId, customerPaymentJournalId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCustomerPaymentJournalById(companyId, customerPaymentJournalId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCustomerPaymentJournalById(companyId, customerPaymentJournalId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an customerPaymentJournal in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteCustomerPaymentJournalByIdWithHttpOperationResponse(companyId, customerPaymentJournalId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteCustomerPaymentJournalById(companyId, customerPaymentJournalId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an customerPaymentJournal in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteCustomerPaymentJournalById(companyId, customerPaymentJournalId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteCustomerPaymentJournalById(companyId, customerPaymentJournalId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteCustomerPaymentJournalById(companyId, customerPaymentJournalId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified customerPaymentJournal
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the customerPaymentJournal
   * entity
   *
   * @param {string} [body.code] The code property for the customerPaymentJournal
   * entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * customerPaymentJournal entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the customerPaymentJournal entity
   *
   * @param {uuid} [body.balancingAccountId] The balancingAccountId property for
   * the customerPaymentJournal entity
   *
   * @param {string} [body.balancingAccountNumber] The balancingAccountNumber
   * property for the customerPaymentJournal entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CustomerPaymentJournal>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchCustomerPaymentJournalByIdWithHttpOperationResponse(body, companyId, customerPaymentJournalId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchCustomerPaymentJournalById(body, companyId, customerPaymentJournalId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified customerPaymentJournal
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the customerPaymentJournal
   * entity
   *
   * @param {string} [body.code] The code property for the customerPaymentJournal
   * entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * customerPaymentJournal entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the customerPaymentJournal entity
   *
   * @param {uuid} [body.balancingAccountId] The balancingAccountId property for
   * the customerPaymentJournal entity
   *
   * @param {string} [body.balancingAccountNumber] The balancingAccountNumber
   * property for the customerPaymentJournal entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CustomerPaymentJournal} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CustomerPaymentJournal} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchCustomerPaymentJournalById(body, companyId, customerPaymentJournalId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchCustomerPaymentJournalById(body, companyId, customerPaymentJournalId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchCustomerPaymentJournalById(body, companyId, customerPaymentJournalId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of customerPayments
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetCustomerPaymentsForCustomerPaymentJournalOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCustomerPaymentsForCustomerPaymentJournalWithHttpOperationResponse(companyId, customerPaymentJournalId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCustomerPaymentsForCustomerPaymentJournal(companyId, customerPaymentJournalId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of customerPayments
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetCustomerPaymentsForCustomerPaymentJournalOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      GetCustomerPaymentsForCustomerPaymentJournalOKResponse}
   *                      for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCustomerPaymentsForCustomerPaymentJournal(companyId, customerPaymentJournalId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCustomerPaymentsForCustomerPaymentJournal(companyId, customerPaymentJournalId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCustomerPaymentsForCustomerPaymentJournal(companyId, customerPaymentJournalId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a customerPayment in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the customerPayment entity
   *
   * @param {string} [body.journalDisplayName] The journalDisplayName property
   * for the customerPayment entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * customerPayment entity
   *
   * @param {uuid} [body.customerId] The customerId property for the
   * customerPayment entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * customerPayment entity
   *
   * @param {string} [body.contactId] The contactId property for the
   * customerPayment entity
   *
   * @param {date} [body.postingDate] The postingDate property for the
   * customerPayment entity
   *
   * @param {string} [body.documentNumber] The documentNumber property for the
   * customerPayment entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the customerPayment entity
   *
   * @param {number} [body.amount] The amount property for the customerPayment
   * entity
   *
   * @param {uuid} [body.appliesToInvoiceId] The appliesToInvoiceId property for
   * the customerPayment entity
   *
   * @param {string} [body.appliesToInvoiceNumber] The appliesToInvoiceNumber
   * property for the customerPayment entity
   *
   * @param {string} [body.description] The description property for the
   * customerPayment entity
   *
   * @param {string} [body.comment] The comment property for the customerPayment
   * entity
   *
   * @param {array} [body.dimensions]
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the customerPayment entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CustomerPayment>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postCustomerPaymentForCustomerPaymentJournalWithHttpOperationResponse(body, companyId, customerPaymentJournalId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postCustomerPaymentForCustomerPaymentJournal(body, companyId, customerPaymentJournalId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a customerPayment in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the customerPayment entity
   *
   * @param {string} [body.journalDisplayName] The journalDisplayName property
   * for the customerPayment entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * customerPayment entity
   *
   * @param {uuid} [body.customerId] The customerId property for the
   * customerPayment entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * customerPayment entity
   *
   * @param {string} [body.contactId] The contactId property for the
   * customerPayment entity
   *
   * @param {date} [body.postingDate] The postingDate property for the
   * customerPayment entity
   *
   * @param {string} [body.documentNumber] The documentNumber property for the
   * customerPayment entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the customerPayment entity
   *
   * @param {number} [body.amount] The amount property for the customerPayment
   * entity
   *
   * @param {uuid} [body.appliesToInvoiceId] The appliesToInvoiceId property for
   * the customerPayment entity
   *
   * @param {string} [body.appliesToInvoiceNumber] The appliesToInvoiceNumber
   * property for the customerPayment entity
   *
   * @param {string} [body.description] The description property for the
   * customerPayment entity
   *
   * @param {string} [body.comment] The comment property for the customerPayment
   * entity
   *
   * @param {array} [body.dimensions]
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the customerPayment entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CustomerPayment} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CustomerPayment} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postCustomerPaymentForCustomerPaymentJournal(body, companyId, customerPaymentJournalId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postCustomerPaymentForCustomerPaymentJournal(body, companyId, customerPaymentJournalId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postCustomerPaymentForCustomerPaymentJournal(body, companyId, customerPaymentJournalId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an customerPayment
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
   *
   * @param {uuid} customerPaymentId id for customerPayment
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CustomerPayment>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCustomerPaymentForCustomerPaymentJournalByIdWithHttpOperationResponse(companyId, customerPaymentJournalId, customerPaymentId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCustomerPaymentForCustomerPaymentJournalById(companyId, customerPaymentJournalId, customerPaymentId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an customerPayment
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
   *
   * @param {uuid} customerPaymentId id for customerPayment
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CustomerPayment} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CustomerPayment} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCustomerPaymentForCustomerPaymentJournalById(companyId, customerPaymentJournalId, customerPaymentId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCustomerPaymentForCustomerPaymentJournalById(companyId, customerPaymentJournalId, customerPaymentId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCustomerPaymentForCustomerPaymentJournalById(companyId, customerPaymentJournalId, customerPaymentId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an customerPayment in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
   *
   * @param {uuid} customerPaymentId id for customerPayment
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteCustomerPaymentForCustomerPaymentJournalByIdByIdWithHttpOperationResponse(companyId, customerPaymentJournalId, customerPaymentId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteCustomerPaymentForCustomerPaymentJournalByIdById(companyId, customerPaymentJournalId, customerPaymentId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an customerPayment in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
   *
   * @param {uuid} customerPaymentId id for customerPayment
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteCustomerPaymentForCustomerPaymentJournalByIdById(companyId, customerPaymentJournalId, customerPaymentId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteCustomerPaymentForCustomerPaymentJournalByIdById(companyId, customerPaymentJournalId, customerPaymentId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteCustomerPaymentForCustomerPaymentJournalByIdById(companyId, customerPaymentJournalId, customerPaymentId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified customerPayment
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the customerPayment entity
   *
   * @param {string} [body.journalDisplayName] The journalDisplayName property
   * for the customerPayment entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * customerPayment entity
   *
   * @param {uuid} [body.customerId] The customerId property for the
   * customerPayment entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * customerPayment entity
   *
   * @param {string} [body.contactId] The contactId property for the
   * customerPayment entity
   *
   * @param {date} [body.postingDate] The postingDate property for the
   * customerPayment entity
   *
   * @param {string} [body.documentNumber] The documentNumber property for the
   * customerPayment entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the customerPayment entity
   *
   * @param {number} [body.amount] The amount property for the customerPayment
   * entity
   *
   * @param {uuid} [body.appliesToInvoiceId] The appliesToInvoiceId property for
   * the customerPayment entity
   *
   * @param {string} [body.appliesToInvoiceNumber] The appliesToInvoiceNumber
   * property for the customerPayment entity
   *
   * @param {string} [body.description] The description property for the
   * customerPayment entity
   *
   * @param {string} [body.comment] The comment property for the customerPayment
   * entity
   *
   * @param {array} [body.dimensions]
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the customerPayment entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
   *
   * @param {uuid} customerPaymentId id for customerPayment
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CustomerPayment>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchCustomerPaymentForCustomerPaymentJournalByIdByIdWithHttpOperationResponse(body, companyId, customerPaymentJournalId, customerPaymentId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchCustomerPaymentForCustomerPaymentJournalByIdById(body, companyId, customerPaymentJournalId, customerPaymentId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified customerPayment
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the customerPayment entity
   *
   * @param {string} [body.journalDisplayName] The journalDisplayName property
   * for the customerPayment entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * customerPayment entity
   *
   * @param {uuid} [body.customerId] The customerId property for the
   * customerPayment entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * customerPayment entity
   *
   * @param {string} [body.contactId] The contactId property for the
   * customerPayment entity
   *
   * @param {date} [body.postingDate] The postingDate property for the
   * customerPayment entity
   *
   * @param {string} [body.documentNumber] The documentNumber property for the
   * customerPayment entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the customerPayment entity
   *
   * @param {number} [body.amount] The amount property for the customerPayment
   * entity
   *
   * @param {uuid} [body.appliesToInvoiceId] The appliesToInvoiceId property for
   * the customerPayment entity
   *
   * @param {string} [body.appliesToInvoiceNumber] The appliesToInvoiceNumber
   * property for the customerPayment entity
   *
   * @param {string} [body.description] The description property for the
   * customerPayment entity
   *
   * @param {string} [body.comment] The comment property for the customerPayment
   * entity
   *
   * @param {array} [body.dimensions]
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the customerPayment entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentJournalId id for customerPaymentJournal
   *
   * @param {uuid} customerPaymentId id for customerPayment
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CustomerPayment} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CustomerPayment} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchCustomerPaymentForCustomerPaymentJournalByIdById(body, companyId, customerPaymentJournalId, customerPaymentId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchCustomerPaymentForCustomerPaymentJournalByIdById(body, companyId, customerPaymentJournalId, customerPaymentId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchCustomerPaymentForCustomerPaymentJournalByIdById(body, companyId, customerPaymentJournalId, customerPaymentId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of customerPayments
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetCustomerPaymentsOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCustomerPaymentsWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCustomerPayments(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of customerPayments
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetCustomerPaymentsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetCustomerPaymentsOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCustomerPayments(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCustomerPayments(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCustomerPayments(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a customerPayment in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the customerPayment entity
   *
   * @param {string} [body.journalDisplayName] The journalDisplayName property
   * for the customerPayment entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * customerPayment entity
   *
   * @param {uuid} [body.customerId] The customerId property for the
   * customerPayment entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * customerPayment entity
   *
   * @param {string} [body.contactId] The contactId property for the
   * customerPayment entity
   *
   * @param {date} [body.postingDate] The postingDate property for the
   * customerPayment entity
   *
   * @param {string} [body.documentNumber] The documentNumber property for the
   * customerPayment entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the customerPayment entity
   *
   * @param {number} [body.amount] The amount property for the customerPayment
   * entity
   *
   * @param {uuid} [body.appliesToInvoiceId] The appliesToInvoiceId property for
   * the customerPayment entity
   *
   * @param {string} [body.appliesToInvoiceNumber] The appliesToInvoiceNumber
   * property for the customerPayment entity
   *
   * @param {string} [body.description] The description property for the
   * customerPayment entity
   *
   * @param {string} [body.comment] The comment property for the customerPayment
   * entity
   *
   * @param {array} [body.dimensions]
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the customerPayment entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CustomerPayment>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postCustomerPaymentWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postCustomerPayment(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a customerPayment in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the customerPayment entity
   *
   * @param {string} [body.journalDisplayName] The journalDisplayName property
   * for the customerPayment entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * customerPayment entity
   *
   * @param {uuid} [body.customerId] The customerId property for the
   * customerPayment entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * customerPayment entity
   *
   * @param {string} [body.contactId] The contactId property for the
   * customerPayment entity
   *
   * @param {date} [body.postingDate] The postingDate property for the
   * customerPayment entity
   *
   * @param {string} [body.documentNumber] The documentNumber property for the
   * customerPayment entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the customerPayment entity
   *
   * @param {number} [body.amount] The amount property for the customerPayment
   * entity
   *
   * @param {uuid} [body.appliesToInvoiceId] The appliesToInvoiceId property for
   * the customerPayment entity
   *
   * @param {string} [body.appliesToInvoiceNumber] The appliesToInvoiceNumber
   * property for the customerPayment entity
   *
   * @param {string} [body.description] The description property for the
   * customerPayment entity
   *
   * @param {string} [body.comment] The comment property for the customerPayment
   * entity
   *
   * @param {array} [body.dimensions]
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the customerPayment entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CustomerPayment} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CustomerPayment} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postCustomerPayment(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postCustomerPayment(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postCustomerPayment(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an customerPayment
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentId id for customerPayment
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CustomerPayment>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCustomerPaymentByIdWithHttpOperationResponse(companyId, customerPaymentId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCustomerPaymentById(companyId, customerPaymentId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an customerPayment
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentId id for customerPayment
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CustomerPayment} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CustomerPayment} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCustomerPaymentById(companyId, customerPaymentId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCustomerPaymentById(companyId, customerPaymentId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCustomerPaymentById(companyId, customerPaymentId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an customerPayment in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentId id for customerPayment
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteCustomerPaymentByIdWithHttpOperationResponse(companyId, customerPaymentId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteCustomerPaymentById(companyId, customerPaymentId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an customerPayment in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentId id for customerPayment
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteCustomerPaymentById(companyId, customerPaymentId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteCustomerPaymentById(companyId, customerPaymentId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteCustomerPaymentById(companyId, customerPaymentId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified customerPayment
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the customerPayment entity
   *
   * @param {string} [body.journalDisplayName] The journalDisplayName property
   * for the customerPayment entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * customerPayment entity
   *
   * @param {uuid} [body.customerId] The customerId property for the
   * customerPayment entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * customerPayment entity
   *
   * @param {string} [body.contactId] The contactId property for the
   * customerPayment entity
   *
   * @param {date} [body.postingDate] The postingDate property for the
   * customerPayment entity
   *
   * @param {string} [body.documentNumber] The documentNumber property for the
   * customerPayment entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the customerPayment entity
   *
   * @param {number} [body.amount] The amount property for the customerPayment
   * entity
   *
   * @param {uuid} [body.appliesToInvoiceId] The appliesToInvoiceId property for
   * the customerPayment entity
   *
   * @param {string} [body.appliesToInvoiceNumber] The appliesToInvoiceNumber
   * property for the customerPayment entity
   *
   * @param {string} [body.description] The description property for the
   * customerPayment entity
   *
   * @param {string} [body.comment] The comment property for the customerPayment
   * entity
   *
   * @param {array} [body.dimensions]
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the customerPayment entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentId id for customerPayment
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CustomerPayment>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchCustomerPaymentByIdWithHttpOperationResponse(body, companyId, customerPaymentId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchCustomerPaymentById(body, companyId, customerPaymentId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified customerPayment
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the customerPayment entity
   *
   * @param {string} [body.journalDisplayName] The journalDisplayName property
   * for the customerPayment entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * customerPayment entity
   *
   * @param {uuid} [body.customerId] The customerId property for the
   * customerPayment entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * customerPayment entity
   *
   * @param {string} [body.contactId] The contactId property for the
   * customerPayment entity
   *
   * @param {date} [body.postingDate] The postingDate property for the
   * customerPayment entity
   *
   * @param {string} [body.documentNumber] The documentNumber property for the
   * customerPayment entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the customerPayment entity
   *
   * @param {number} [body.amount] The amount property for the customerPayment
   * entity
   *
   * @param {uuid} [body.appliesToInvoiceId] The appliesToInvoiceId property for
   * the customerPayment entity
   *
   * @param {string} [body.appliesToInvoiceNumber] The appliesToInvoiceNumber
   * property for the customerPayment entity
   *
   * @param {string} [body.description] The description property for the
   * customerPayment entity
   *
   * @param {string} [body.comment] The comment property for the customerPayment
   * entity
   *
   * @param {array} [body.dimensions]
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the customerPayment entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerPaymentId id for customerPayment
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CustomerPayment} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CustomerPayment} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchCustomerPaymentById(body, companyId, customerPaymentId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchCustomerPaymentById(body, companyId, customerPaymentId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchCustomerPaymentById(body, companyId, customerPaymentId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of accounts
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetAccountsOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getAccountsWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getAccounts(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of accounts
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetAccountsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetAccountsOKResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getAccounts(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getAccounts(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getAccounts(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an account object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} accountId id for account
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Account>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getAccountByIdWithHttpOperationResponse(companyId, accountId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getAccountById(companyId, accountId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an account object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} accountId id for account
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Account} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Account} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getAccountById(companyId, accountId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getAccountById(companyId, accountId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getAccountById(companyId, accountId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of taxGroups
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetTaxGroupsOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getTaxGroupsWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getTaxGroups(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of taxGroups
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetTaxGroupsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetTaxGroupsOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getTaxGroups(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getTaxGroups(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getTaxGroups(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a taxGroup in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the taxGroup entity
   *
   * @param {string} [body.code] The code property for the taxGroup entity
   *
   * @param {string} [body.displayName] The displayName property for the taxGroup
   * entity
   *
   * @param {string} [body.taxType] The taxType property for the taxGroup entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the taxGroup entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TaxGroup>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postTaxGroupWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postTaxGroup(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a taxGroup in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the taxGroup entity
   *
   * @param {string} [body.code] The code property for the taxGroup entity
   *
   * @param {string} [body.displayName] The displayName property for the taxGroup
   * entity
   *
   * @param {string} [body.taxType] The taxType property for the taxGroup entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the taxGroup entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {TaxGroup} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TaxGroup} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postTaxGroup(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postTaxGroup(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postTaxGroup(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an taxGroup object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} taxGroupId id for taxGroup
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TaxGroup>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getTaxGroupByIdWithHttpOperationResponse(companyId, taxGroupId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getTaxGroupById(companyId, taxGroupId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an taxGroup object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} taxGroupId id for taxGroup
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {TaxGroup} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TaxGroup} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getTaxGroupById(companyId, taxGroupId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getTaxGroupById(companyId, taxGroupId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getTaxGroupById(companyId, taxGroupId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an taxGroup in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} taxGroupId id for taxGroup
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteTaxGroupByIdWithHttpOperationResponse(companyId, taxGroupId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteTaxGroupById(companyId, taxGroupId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an taxGroup in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} taxGroupId id for taxGroup
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteTaxGroupById(companyId, taxGroupId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteTaxGroupById(companyId, taxGroupId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteTaxGroupById(companyId, taxGroupId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified taxGroup
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the taxGroup entity
   *
   * @param {string} [body.code] The code property for the taxGroup entity
   *
   * @param {string} [body.displayName] The displayName property for the taxGroup
   * entity
   *
   * @param {string} [body.taxType] The taxType property for the taxGroup entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the taxGroup entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} taxGroupId id for taxGroup
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TaxGroup>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchTaxGroupByIdWithHttpOperationResponse(body, companyId, taxGroupId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchTaxGroupById(body, companyId, taxGroupId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified taxGroup
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the taxGroup entity
   *
   * @param {string} [body.code] The code property for the taxGroup entity
   *
   * @param {string} [body.displayName] The displayName property for the taxGroup
   * entity
   *
   * @param {string} [body.taxType] The taxType property for the taxGroup entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the taxGroup entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} taxGroupId id for taxGroup
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {TaxGroup} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TaxGroup} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchTaxGroupById(body, companyId, taxGroupId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchTaxGroupById(body, companyId, taxGroupId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchTaxGroupById(body, companyId, taxGroupId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of journals
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetJournalsOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getJournalsWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getJournals(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of journals
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetJournalsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetJournalsOKResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getJournals(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getJournals(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getJournals(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a journal in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the journal entity
   *
   * @param {string} [body.code] The code property for the journal entity
   *
   * @param {string} [body.displayName] The displayName property for the journal
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the journal entity
   *
   * @param {uuid} [body.balancingAccountId] The balancingAccountId property for
   * the journal entity
   *
   * @param {string} [body.balancingAccountNumber] The balancingAccountNumber
   * property for the journal entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Journal>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postJournalWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postJournal(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a journal in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the journal entity
   *
   * @param {string} [body.code] The code property for the journal entity
   *
   * @param {string} [body.displayName] The displayName property for the journal
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the journal entity
   *
   * @param {uuid} [body.balancingAccountId] The balancingAccountId property for
   * the journal entity
   *
   * @param {string} [body.balancingAccountNumber] The balancingAccountNumber
   * property for the journal entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Journal} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Journal} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postJournal(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postJournal(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postJournal(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an journal object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Journal>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getJournalByIdWithHttpOperationResponse(companyId, journalId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getJournalById(companyId, journalId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an journal object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Journal} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Journal} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getJournalById(companyId, journalId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getJournalById(companyId, journalId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getJournalById(companyId, journalId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an journal in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteJournalByIdWithHttpOperationResponse(companyId, journalId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteJournalById(companyId, journalId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an journal in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteJournalById(companyId, journalId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteJournalById(companyId, journalId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteJournalById(companyId, journalId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified journal
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the journal entity
   *
   * @param {string} [body.code] The code property for the journal entity
   *
   * @param {string} [body.displayName] The displayName property for the journal
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the journal entity
   *
   * @param {uuid} [body.balancingAccountId] The balancingAccountId property for
   * the journal entity
   *
   * @param {string} [body.balancingAccountNumber] The balancingAccountNumber
   * property for the journal entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Journal>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchJournalByIdWithHttpOperationResponse(body, companyId, journalId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchJournalById(body, companyId, journalId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified journal
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the journal entity
   *
   * @param {string} [body.code] The code property for the journal entity
   *
   * @param {string} [body.displayName] The displayName property for the journal
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the journal entity
   *
   * @param {uuid} [body.balancingAccountId] The balancingAccountId property for
   * the journal entity
   *
   * @param {string} [body.balancingAccountNumber] The balancingAccountNumber
   * property for the journal entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Journal} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Journal} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchJournalById(body, companyId, journalId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchJournalById(body, companyId, journalId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchJournalById(body, companyId, journalId, options, optionalCallback);
    }
  }

  /**
   * @summary Performs the post action for journals entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postActionJournalsWithHttpOperationResponse(companyId, journalId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postActionJournals(companyId, journalId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Performs the post action for journals entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postActionJournals(companyId, journalId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postActionJournals(companyId, journalId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postActionJournals(companyId, journalId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of journalLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetJournalLinesForJournalOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getJournalLinesForJournalWithHttpOperationResponse(companyId, journalId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getJournalLinesForJournal(companyId, journalId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of journalLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetJournalLinesForJournalOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetJournalLinesForJournalOKResponse} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getJournalLinesForJournal(companyId, journalId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getJournalLinesForJournal(companyId, journalId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getJournalLinesForJournal(companyId, journalId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a journalLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the journalLine entity
   *
   * @param {string} [body.journalDisplayName] The journalDisplayName property
   * for the journalLine entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * journalLine entity
   *
   * @param {uuid} [body.accountId] The accountId property for the journalLine
   * entity
   *
   * @param {string} [body.accountNumber] The accountNumber property for the
   * journalLine entity
   *
   * @param {date} [body.postingDate] The postingDate property for the
   * journalLine entity
   *
   * @param {string} [body.documentNumber] The documentNumber property for the
   * journalLine entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the journalLine entity
   *
   * @param {number} [body.amount] The amount property for the journalLine entity
   *
   * @param {string} [body.description] The description property for the
   * journalLine entity
   *
   * @param {string} [body.comment] The comment property for the journalLine
   * entity
   *
   * @param {array} [body.dimensions]
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the journalLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JournalLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postJournalLineForJournalWithHttpOperationResponse(body, companyId, journalId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postJournalLineForJournal(body, companyId, journalId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a journalLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the journalLine entity
   *
   * @param {string} [body.journalDisplayName] The journalDisplayName property
   * for the journalLine entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * journalLine entity
   *
   * @param {uuid} [body.accountId] The accountId property for the journalLine
   * entity
   *
   * @param {string} [body.accountNumber] The accountNumber property for the
   * journalLine entity
   *
   * @param {date} [body.postingDate] The postingDate property for the
   * journalLine entity
   *
   * @param {string} [body.documentNumber] The documentNumber property for the
   * journalLine entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the journalLine entity
   *
   * @param {number} [body.amount] The amount property for the journalLine entity
   *
   * @param {string} [body.description] The description property for the
   * journalLine entity
   *
   * @param {string} [body.comment] The comment property for the journalLine
   * entity
   *
   * @param {array} [body.dimensions]
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the journalLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JournalLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JournalLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postJournalLineForJournal(body, companyId, journalId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postJournalLineForJournal(body, companyId, journalId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postJournalLineForJournal(body, companyId, journalId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an journalLine object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JournalLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getJournalLineForJournalByIdWithHttpOperationResponse(companyId, journalId, journalLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getJournalLineForJournalById(companyId, journalId, journalLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an journalLine object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JournalLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JournalLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getJournalLineForJournalById(companyId, journalId, journalLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getJournalLineForJournalById(companyId, journalId, journalLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getJournalLineForJournalById(companyId, journalId, journalLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an journalLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteJournalLineForJournalByIdByIdWithHttpOperationResponse(companyId, journalId, journalLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteJournalLineForJournalByIdById(companyId, journalId, journalLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an journalLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteJournalLineForJournalByIdById(companyId, journalId, journalLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteJournalLineForJournalByIdById(companyId, journalId, journalLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteJournalLineForJournalByIdById(companyId, journalId, journalLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified journalLine
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the journalLine entity
   *
   * @param {string} [body.journalDisplayName] The journalDisplayName property
   * for the journalLine entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * journalLine entity
   *
   * @param {uuid} [body.accountId] The accountId property for the journalLine
   * entity
   *
   * @param {string} [body.accountNumber] The accountNumber property for the
   * journalLine entity
   *
   * @param {date} [body.postingDate] The postingDate property for the
   * journalLine entity
   *
   * @param {string} [body.documentNumber] The documentNumber property for the
   * journalLine entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the journalLine entity
   *
   * @param {number} [body.amount] The amount property for the journalLine entity
   *
   * @param {string} [body.description] The description property for the
   * journalLine entity
   *
   * @param {string} [body.comment] The comment property for the journalLine
   * entity
   *
   * @param {array} [body.dimensions]
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the journalLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JournalLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchJournalLineForJournalByIdByIdWithHttpOperationResponse(body, companyId, journalId, journalLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchJournalLineForJournalByIdById(body, companyId, journalId, journalLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified journalLine
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the journalLine entity
   *
   * @param {string} [body.journalDisplayName] The journalDisplayName property
   * for the journalLine entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * journalLine entity
   *
   * @param {uuid} [body.accountId] The accountId property for the journalLine
   * entity
   *
   * @param {string} [body.accountNumber] The accountNumber property for the
   * journalLine entity
   *
   * @param {date} [body.postingDate] The postingDate property for the
   * journalLine entity
   *
   * @param {string} [body.documentNumber] The documentNumber property for the
   * journalLine entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the journalLine entity
   *
   * @param {number} [body.amount] The amount property for the journalLine entity
   *
   * @param {string} [body.description] The description property for the
   * journalLine entity
   *
   * @param {string} [body.comment] The comment property for the journalLine
   * entity
   *
   * @param {array} [body.dimensions]
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the journalLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JournalLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JournalLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchJournalLineForJournalByIdById(body, companyId, journalId, journalLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchJournalLineForJournalByIdById(body, companyId, journalId, journalLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchJournalLineForJournalByIdById(body, companyId, journalId, journalLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of attachments
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetAttachmentsForJournalLineForJournalOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getAttachmentsForJournalLineForJournalWithHttpOperationResponse(companyId, journalId, journalLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getAttachmentsForJournalLineForJournal(companyId, journalId, journalLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of attachments
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetAttachmentsForJournalLineForJournalOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      GetAttachmentsForJournalLineForJournalOKResponse} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getAttachmentsForJournalLineForJournal(companyId, journalId, journalLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getAttachmentsForJournalLineForJournal(companyId, journalId, journalLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getAttachmentsForJournalLineForJournal(companyId, journalId, journalLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a attachments in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the attachments
   * entity
   *
   * @param {uuid} [body.id] The id property for the attachments entity
   *
   * @param {string} [body.fileName] The fileName property for the attachments
   * entity
   *
   * @param {number} [body.byteSize] The byteSize property for the attachments
   * entity
   *
   * @param {string} [body.content] The content property for the attachments
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the attachments entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Attachments>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postAttachmentsForJournalLineForJournalWithHttpOperationResponse(body, companyId, journalId, journalLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postAttachmentsForJournalLineForJournal(body, companyId, journalId, journalLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a attachments in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the attachments
   * entity
   *
   * @param {uuid} [body.id] The id property for the attachments entity
   *
   * @param {string} [body.fileName] The fileName property for the attachments
   * entity
   *
   * @param {number} [body.byteSize] The byteSize property for the attachments
   * entity
   *
   * @param {string} [body.content] The content property for the attachments
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the attachments entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Attachments} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Attachments} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postAttachmentsForJournalLineForJournal(body, companyId, journalId, journalLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postAttachmentsForJournalLineForJournal(body, companyId, journalId, journalLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postAttachmentsForJournalLineForJournal(body, companyId, journalId, journalLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an attachments object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Attachments>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getAttachmentsForJournalLineForJournalByIdByParentIdWithHttpOperationResponse(companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getAttachmentsForJournalLineForJournalByIdByParentId(companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an attachments object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Attachments} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Attachments} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getAttachmentsForJournalLineForJournalByIdByParentId(companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getAttachmentsForJournalLineForJournalByIdByParentId(companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getAttachmentsForJournalLineForJournalByIdByParentId(companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an attachments in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteAttachmentsForJournalLineForJournalByIdByParentIdByIdByIdWithHttpOperationResponse(companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteAttachmentsForJournalLineForJournalByIdByParentIdByIdById(companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an attachments in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteAttachmentsForJournalLineForJournalByIdByParentIdByIdById(companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteAttachmentsForJournalLineForJournalByIdByParentIdByIdById(companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteAttachmentsForJournalLineForJournalByIdByParentIdByIdById(companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified attachments
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the attachments
   * entity
   *
   * @param {uuid} [body.id] The id property for the attachments entity
   *
   * @param {string} [body.fileName] The fileName property for the attachments
   * entity
   *
   * @param {number} [body.byteSize] The byteSize property for the attachments
   * entity
   *
   * @param {string} [body.content] The content property for the attachments
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the attachments entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Attachments>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchAttachmentsForJournalLineForJournalByIdByParentIdByIdByIdWithHttpOperationResponse(body, companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchAttachmentsForJournalLineForJournalByIdByParentIdByIdById(body, companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified attachments
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the attachments
   * entity
   *
   * @param {uuid} [body.id] The id property for the attachments entity
   *
   * @param {string} [body.fileName] The fileName property for the attachments
   * entity
   *
   * @param {number} [body.byteSize] The byteSize property for the attachments
   * entity
   *
   * @param {string} [body.content] The content property for the attachments
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the attachments entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalId id for journal
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Attachments} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Attachments} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchAttachmentsForJournalLineForJournalByIdByParentIdByIdById(body, companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchAttachmentsForJournalLineForJournalByIdByParentIdByIdById(body, companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchAttachmentsForJournalLineForJournalByIdByParentIdByIdById(body, companyId, journalId, journalLineId, attachmentsParentId, attachmentsId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of journalLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetJournalLinesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getJournalLinesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getJournalLines(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of journalLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetJournalLinesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetJournalLinesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getJournalLines(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getJournalLines(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getJournalLines(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a journalLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the journalLine entity
   *
   * @param {string} [body.journalDisplayName] The journalDisplayName property
   * for the journalLine entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * journalLine entity
   *
   * @param {uuid} [body.accountId] The accountId property for the journalLine
   * entity
   *
   * @param {string} [body.accountNumber] The accountNumber property for the
   * journalLine entity
   *
   * @param {date} [body.postingDate] The postingDate property for the
   * journalLine entity
   *
   * @param {string} [body.documentNumber] The documentNumber property for the
   * journalLine entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the journalLine entity
   *
   * @param {number} [body.amount] The amount property for the journalLine entity
   *
   * @param {string} [body.description] The description property for the
   * journalLine entity
   *
   * @param {string} [body.comment] The comment property for the journalLine
   * entity
   *
   * @param {array} [body.dimensions]
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the journalLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JournalLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postJournalLineWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postJournalLine(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a journalLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the journalLine entity
   *
   * @param {string} [body.journalDisplayName] The journalDisplayName property
   * for the journalLine entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * journalLine entity
   *
   * @param {uuid} [body.accountId] The accountId property for the journalLine
   * entity
   *
   * @param {string} [body.accountNumber] The accountNumber property for the
   * journalLine entity
   *
   * @param {date} [body.postingDate] The postingDate property for the
   * journalLine entity
   *
   * @param {string} [body.documentNumber] The documentNumber property for the
   * journalLine entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the journalLine entity
   *
   * @param {number} [body.amount] The amount property for the journalLine entity
   *
   * @param {string} [body.description] The description property for the
   * journalLine entity
   *
   * @param {string} [body.comment] The comment property for the journalLine
   * entity
   *
   * @param {array} [body.dimensions]
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the journalLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JournalLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JournalLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postJournalLine(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postJournalLine(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postJournalLine(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an journalLine object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JournalLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getJournalLineByIdWithHttpOperationResponse(companyId, journalLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getJournalLineById(companyId, journalLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an journalLine object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JournalLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JournalLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getJournalLineById(companyId, journalLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getJournalLineById(companyId, journalLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getJournalLineById(companyId, journalLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an journalLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteJournalLineByIdWithHttpOperationResponse(companyId, journalLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteJournalLineById(companyId, journalLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an journalLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteJournalLineById(companyId, journalLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteJournalLineById(companyId, journalLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteJournalLineById(companyId, journalLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified journalLine
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the journalLine entity
   *
   * @param {string} [body.journalDisplayName] The journalDisplayName property
   * for the journalLine entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * journalLine entity
   *
   * @param {uuid} [body.accountId] The accountId property for the journalLine
   * entity
   *
   * @param {string} [body.accountNumber] The accountNumber property for the
   * journalLine entity
   *
   * @param {date} [body.postingDate] The postingDate property for the
   * journalLine entity
   *
   * @param {string} [body.documentNumber] The documentNumber property for the
   * journalLine entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the journalLine entity
   *
   * @param {number} [body.amount] The amount property for the journalLine entity
   *
   * @param {string} [body.description] The description property for the
   * journalLine entity
   *
   * @param {string} [body.comment] The comment property for the journalLine
   * entity
   *
   * @param {array} [body.dimensions]
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the journalLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JournalLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchJournalLineByIdWithHttpOperationResponse(body, companyId, journalLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchJournalLineById(body, companyId, journalLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified journalLine
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the journalLine entity
   *
   * @param {string} [body.journalDisplayName] The journalDisplayName property
   * for the journalLine entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * journalLine entity
   *
   * @param {uuid} [body.accountId] The accountId property for the journalLine
   * entity
   *
   * @param {string} [body.accountNumber] The accountNumber property for the
   * journalLine entity
   *
   * @param {date} [body.postingDate] The postingDate property for the
   * journalLine entity
   *
   * @param {string} [body.documentNumber] The documentNumber property for the
   * journalLine entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the journalLine entity
   *
   * @param {number} [body.amount] The amount property for the journalLine entity
   *
   * @param {string} [body.description] The description property for the
   * journalLine entity
   *
   * @param {string} [body.comment] The comment property for the journalLine
   * entity
   *
   * @param {array} [body.dimensions]
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the journalLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JournalLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JournalLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchJournalLineById(body, companyId, journalLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchJournalLineById(body, companyId, journalLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchJournalLineById(body, companyId, journalLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of attachments
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetAttachmentsForJournalLineOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getAttachmentsForJournalLineWithHttpOperationResponse(companyId, journalLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getAttachmentsForJournalLine(companyId, journalLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of attachments
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetAttachmentsForJournalLineOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetAttachmentsForJournalLineOKResponse} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getAttachmentsForJournalLine(companyId, journalLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getAttachmentsForJournalLine(companyId, journalLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getAttachmentsForJournalLine(companyId, journalLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a attachments in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the attachments
   * entity
   *
   * @param {uuid} [body.id] The id property for the attachments entity
   *
   * @param {string} [body.fileName] The fileName property for the attachments
   * entity
   *
   * @param {number} [body.byteSize] The byteSize property for the attachments
   * entity
   *
   * @param {string} [body.content] The content property for the attachments
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the attachments entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Attachments>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postAttachmentsForJournalLineWithHttpOperationResponse(body, companyId, journalLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postAttachmentsForJournalLine(body, companyId, journalLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a attachments in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the attachments
   * entity
   *
   * @param {uuid} [body.id] The id property for the attachments entity
   *
   * @param {string} [body.fileName] The fileName property for the attachments
   * entity
   *
   * @param {number} [body.byteSize] The byteSize property for the attachments
   * entity
   *
   * @param {string} [body.content] The content property for the attachments
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the attachments entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Attachments} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Attachments} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postAttachmentsForJournalLine(body, companyId, journalLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postAttachmentsForJournalLine(body, companyId, journalLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postAttachmentsForJournalLine(body, companyId, journalLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an attachments object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Attachments>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getAttachmentsForJournalLineByIdByParentIdWithHttpOperationResponse(companyId, journalLineId, attachmentsParentId, attachmentsId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getAttachmentsForJournalLineByIdByParentId(companyId, journalLineId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an attachments object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Attachments} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Attachments} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getAttachmentsForJournalLineByIdByParentId(companyId, journalLineId, attachmentsParentId, attachmentsId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getAttachmentsForJournalLineByIdByParentId(companyId, journalLineId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getAttachmentsForJournalLineByIdByParentId(companyId, journalLineId, attachmentsParentId, attachmentsId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an attachments in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteAttachmentsForJournalLineByIdByParentIdByIdWithHttpOperationResponse(companyId, journalLineId, attachmentsParentId, attachmentsId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteAttachmentsForJournalLineByIdByParentIdById(companyId, journalLineId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an attachments in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteAttachmentsForJournalLineByIdByParentIdById(companyId, journalLineId, attachmentsParentId, attachmentsId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteAttachmentsForJournalLineByIdByParentIdById(companyId, journalLineId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteAttachmentsForJournalLineByIdByParentIdById(companyId, journalLineId, attachmentsParentId, attachmentsId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified attachments
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the attachments
   * entity
   *
   * @param {uuid} [body.id] The id property for the attachments entity
   *
   * @param {string} [body.fileName] The fileName property for the attachments
   * entity
   *
   * @param {number} [body.byteSize] The byteSize property for the attachments
   * entity
   *
   * @param {string} [body.content] The content property for the attachments
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the attachments entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Attachments>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchAttachmentsForJournalLineByIdByParentIdByIdWithHttpOperationResponse(body, companyId, journalLineId, attachmentsParentId, attachmentsId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchAttachmentsForJournalLineByIdByParentIdById(body, companyId, journalLineId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified attachments
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the attachments
   * entity
   *
   * @param {uuid} [body.id] The id property for the attachments entity
   *
   * @param {string} [body.fileName] The fileName property for the attachments
   * entity
   *
   * @param {number} [body.byteSize] The byteSize property for the attachments
   * entity
   *
   * @param {string} [body.content] The content property for the attachments
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the attachments entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} journalLineId id for journalLine
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Attachments} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Attachments} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchAttachmentsForJournalLineByIdByParentIdById(body, companyId, journalLineId, attachmentsParentId, attachmentsId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchAttachmentsForJournalLineByIdByParentIdById(body, companyId, journalLineId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchAttachmentsForJournalLineByIdByParentIdById(body, companyId, journalLineId, attachmentsParentId, attachmentsId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of attachments
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetAttachmentsOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getAttachmentsWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getAttachments(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of attachments
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetAttachmentsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetAttachmentsOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getAttachments(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getAttachments(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getAttachments(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a attachments in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the attachments
   * entity
   *
   * @param {uuid} [body.id] The id property for the attachments entity
   *
   * @param {string} [body.fileName] The fileName property for the attachments
   * entity
   *
   * @param {number} [body.byteSize] The byteSize property for the attachments
   * entity
   *
   * @param {string} [body.content] The content property for the attachments
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the attachments entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Attachments>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postAttachmentsWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postAttachments(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a attachments in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the attachments
   * entity
   *
   * @param {uuid} [body.id] The id property for the attachments entity
   *
   * @param {string} [body.fileName] The fileName property for the attachments
   * entity
   *
   * @param {number} [body.byteSize] The byteSize property for the attachments
   * entity
   *
   * @param {string} [body.content] The content property for the attachments
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the attachments entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Attachments} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Attachments} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postAttachments(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postAttachments(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postAttachments(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an attachments object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Attachments>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getAttachmentsByIdByParentIdWithHttpOperationResponse(companyId, attachmentsParentId, attachmentsId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getAttachmentsByIdByParentId(companyId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an attachments object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Attachments} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Attachments} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getAttachmentsByIdByParentId(companyId, attachmentsParentId, attachmentsId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getAttachmentsByIdByParentId(companyId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getAttachmentsByIdByParentId(companyId, attachmentsParentId, attachmentsId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an attachments in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteAttachmentsByIdByParentIdWithHttpOperationResponse(companyId, attachmentsParentId, attachmentsId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteAttachmentsByIdByParentId(companyId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an attachments in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteAttachmentsByIdByParentId(companyId, attachmentsParentId, attachmentsId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteAttachmentsByIdByParentId(companyId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteAttachmentsByIdByParentId(companyId, attachmentsParentId, attachmentsId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified attachments
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the attachments
   * entity
   *
   * @param {uuid} [body.id] The id property for the attachments entity
   *
   * @param {string} [body.fileName] The fileName property for the attachments
   * entity
   *
   * @param {number} [body.byteSize] The byteSize property for the attachments
   * entity
   *
   * @param {string} [body.content] The content property for the attachments
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the attachments entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Attachments>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchAttachmentsByIdByParentIdWithHttpOperationResponse(body, companyId, attachmentsParentId, attachmentsId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchAttachmentsByIdByParentId(body, companyId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified attachments
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the attachments
   * entity
   *
   * @param {uuid} [body.id] The id property for the attachments entity
   *
   * @param {string} [body.fileName] The fileName property for the attachments
   * entity
   *
   * @param {number} [body.byteSize] The byteSize property for the attachments
   * entity
   *
   * @param {string} [body.content] The content property for the attachments
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the attachments entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} attachmentsParentId parentId for attachments
   *
   * @param {uuid} attachmentsId id for attachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Attachments} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Attachments} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchAttachmentsByIdByParentId(body, companyId, attachmentsParentId, attachmentsId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchAttachmentsByIdByParentId(body, companyId, attachmentsParentId, attachmentsId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchAttachmentsByIdByParentId(body, companyId, attachmentsParentId, attachmentsId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of employees
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetEmployeesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getEmployeesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getEmployees(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of employees
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetEmployeesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetEmployeesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getEmployees(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getEmployees(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getEmployees(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a employee in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the employee entity
   *
   * @param {string} [body.number] The number property for the employee entity
   *
   * @param {string} [body.displayName] The displayName property for the employee
   * entity
   *
   * @param {string} [body.givenName] The givenName property for the employee
   * entity
   *
   * @param {string} [body.middleName] The middleName property for the employee
   * entity
   *
   * @param {string} [body.surname] The surname property for the employee entity
   *
   * @param {string} [body.jobTitle] The jobTitle property for the employee
   * entity
   *
   * @param {object} [body.address]
   *
   * @param {string} [body.address.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.address.postalCode] The postalCode property for the
   * postaladdresstype entity
   *
   * @param {array} [body.address.customerFinancialDetails]
   *
   * @param {array} [body.address.picture]
   *
   * @param {array} [body.address.defaultDimensions]
   *
   * @param {object} [body.address.currency]
   *
   * @param {uuid} [body.address.currency.id] The id property for the currency
   * entity
   *
   * @param {string} [body.address.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.address.currency.displayName] The displayName property
   * for the currency entity
   *
   * @param {string} [body.address.currency.symbol] The symbol property for the
   * currency entity
   *
   * @param {string} [body.address.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.address.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.address.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.address.paymentTerm]
   *
   * @param {uuid} [body.address.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.code] The code property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.address.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
   * The calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.address.shipmentMethod]
   *
   * @param {uuid} [body.address.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.code] The code property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.displayName] The displayName
   * property for the shipmentMethod entity
   *
   * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.address.paymentMethod]
   *
   * @param {uuid} [body.address.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.code] The code property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.displayName] The displayName
   * property for the paymentMethod entity
   *
   * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the employee
   * entity
   *
   * @param {string} [body.mobilePhone] The mobilePhone property for the employee
   * entity
   *
   * @param {string} [body.email] The email property for the employee entity
   *
   * @param {string} [body.personalEmail] The personalEmail property for the
   * employee entity
   *
   * @param {date} [body.employmentDate] The employmentDate property for the
   * employee entity
   *
   * @param {date} [body.terminationDate] The terminationDate property for the
   * employee entity
   *
   * @param {string} [body.status] The status property for the employee entity
   *
   * @param {date} [body.birthDate] The birthDate property for the employee
   * entity
   *
   * @param {string} [body.statisticsGroupCode] The statisticsGroupCode property
   * for the employee entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the employee entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Employee>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postEmployeeWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postEmployee(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a employee in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the employee entity
   *
   * @param {string} [body.number] The number property for the employee entity
   *
   * @param {string} [body.displayName] The displayName property for the employee
   * entity
   *
   * @param {string} [body.givenName] The givenName property for the employee
   * entity
   *
   * @param {string} [body.middleName] The middleName property for the employee
   * entity
   *
   * @param {string} [body.surname] The surname property for the employee entity
   *
   * @param {string} [body.jobTitle] The jobTitle property for the employee
   * entity
   *
   * @param {object} [body.address]
   *
   * @param {string} [body.address.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.address.postalCode] The postalCode property for the
   * postaladdresstype entity
   *
   * @param {array} [body.address.customerFinancialDetails]
   *
   * @param {array} [body.address.picture]
   *
   * @param {array} [body.address.defaultDimensions]
   *
   * @param {object} [body.address.currency]
   *
   * @param {uuid} [body.address.currency.id] The id property for the currency
   * entity
   *
   * @param {string} [body.address.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.address.currency.displayName] The displayName property
   * for the currency entity
   *
   * @param {string} [body.address.currency.symbol] The symbol property for the
   * currency entity
   *
   * @param {string} [body.address.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.address.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.address.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.address.paymentTerm]
   *
   * @param {uuid} [body.address.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.code] The code property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.address.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
   * The calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.address.shipmentMethod]
   *
   * @param {uuid} [body.address.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.code] The code property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.displayName] The displayName
   * property for the shipmentMethod entity
   *
   * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.address.paymentMethod]
   *
   * @param {uuid} [body.address.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.code] The code property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.displayName] The displayName
   * property for the paymentMethod entity
   *
   * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the employee
   * entity
   *
   * @param {string} [body.mobilePhone] The mobilePhone property for the employee
   * entity
   *
   * @param {string} [body.email] The email property for the employee entity
   *
   * @param {string} [body.personalEmail] The personalEmail property for the
   * employee entity
   *
   * @param {date} [body.employmentDate] The employmentDate property for the
   * employee entity
   *
   * @param {date} [body.terminationDate] The terminationDate property for the
   * employee entity
   *
   * @param {string} [body.status] The status property for the employee entity
   *
   * @param {date} [body.birthDate] The birthDate property for the employee
   * entity
   *
   * @param {string} [body.statisticsGroupCode] The statisticsGroupCode property
   * for the employee entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the employee entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Employee} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Employee} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postEmployee(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postEmployee(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postEmployee(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an employee object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Employee>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getEmployeeByIdWithHttpOperationResponse(companyId, employeeId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getEmployeeById(companyId, employeeId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an employee object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Employee} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Employee} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getEmployeeById(companyId, employeeId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getEmployeeById(companyId, employeeId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getEmployeeById(companyId, employeeId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an employee in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteEmployeeByIdWithHttpOperationResponse(companyId, employeeId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteEmployeeById(companyId, employeeId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an employee in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteEmployeeById(companyId, employeeId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteEmployeeById(companyId, employeeId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteEmployeeById(companyId, employeeId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified employee
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the employee entity
   *
   * @param {string} [body.number] The number property for the employee entity
   *
   * @param {string} [body.displayName] The displayName property for the employee
   * entity
   *
   * @param {string} [body.givenName] The givenName property for the employee
   * entity
   *
   * @param {string} [body.middleName] The middleName property for the employee
   * entity
   *
   * @param {string} [body.surname] The surname property for the employee entity
   *
   * @param {string} [body.jobTitle] The jobTitle property for the employee
   * entity
   *
   * @param {object} [body.address]
   *
   * @param {string} [body.address.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.address.postalCode] The postalCode property for the
   * postaladdresstype entity
   *
   * @param {array} [body.address.customerFinancialDetails]
   *
   * @param {array} [body.address.picture]
   *
   * @param {array} [body.address.defaultDimensions]
   *
   * @param {object} [body.address.currency]
   *
   * @param {uuid} [body.address.currency.id] The id property for the currency
   * entity
   *
   * @param {string} [body.address.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.address.currency.displayName] The displayName property
   * for the currency entity
   *
   * @param {string} [body.address.currency.symbol] The symbol property for the
   * currency entity
   *
   * @param {string} [body.address.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.address.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.address.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.address.paymentTerm]
   *
   * @param {uuid} [body.address.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.code] The code property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.address.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
   * The calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.address.shipmentMethod]
   *
   * @param {uuid} [body.address.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.code] The code property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.displayName] The displayName
   * property for the shipmentMethod entity
   *
   * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.address.paymentMethod]
   *
   * @param {uuid} [body.address.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.code] The code property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.displayName] The displayName
   * property for the paymentMethod entity
   *
   * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the employee
   * entity
   *
   * @param {string} [body.mobilePhone] The mobilePhone property for the employee
   * entity
   *
   * @param {string} [body.email] The email property for the employee entity
   *
   * @param {string} [body.personalEmail] The personalEmail property for the
   * employee entity
   *
   * @param {date} [body.employmentDate] The employmentDate property for the
   * employee entity
   *
   * @param {date} [body.terminationDate] The terminationDate property for the
   * employee entity
   *
   * @param {string} [body.status] The status property for the employee entity
   *
   * @param {date} [body.birthDate] The birthDate property for the employee
   * entity
   *
   * @param {string} [body.statisticsGroupCode] The statisticsGroupCode property
   * for the employee entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the employee entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Employee>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchEmployeeByIdWithHttpOperationResponse(body, companyId, employeeId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchEmployeeById(body, companyId, employeeId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified employee
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the employee entity
   *
   * @param {string} [body.number] The number property for the employee entity
   *
   * @param {string} [body.displayName] The displayName property for the employee
   * entity
   *
   * @param {string} [body.givenName] The givenName property for the employee
   * entity
   *
   * @param {string} [body.middleName] The middleName property for the employee
   * entity
   *
   * @param {string} [body.surname] The surname property for the employee entity
   *
   * @param {string} [body.jobTitle] The jobTitle property for the employee
   * entity
   *
   * @param {object} [body.address]
   *
   * @param {string} [body.address.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.address.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.address.postalCode] The postalCode property for the
   * postaladdresstype entity
   *
   * @param {array} [body.address.customerFinancialDetails]
   *
   * @param {array} [body.address.picture]
   *
   * @param {array} [body.address.defaultDimensions]
   *
   * @param {object} [body.address.currency]
   *
   * @param {uuid} [body.address.currency.id] The id property for the currency
   * entity
   *
   * @param {string} [body.address.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.address.currency.displayName] The displayName property
   * for the currency entity
   *
   * @param {string} [body.address.currency.symbol] The symbol property for the
   * currency entity
   *
   * @param {string} [body.address.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.address.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.address.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.address.paymentTerm]
   *
   * @param {uuid} [body.address.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.code] The code property for the
   * paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.address.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.address.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean} [body.address.paymentTerm.calculateDiscountOnCreditMemos]
   * The calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.address.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.address.shipmentMethod]
   *
   * @param {uuid} [body.address.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.code] The code property for the
   * shipmentMethod entity
   *
   * @param {string} [body.address.shipmentMethod.displayName] The displayName
   * property for the shipmentMethod entity
   *
   * @param {date} [body.address.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.address.paymentMethod]
   *
   * @param {uuid} [body.address.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.code] The code property for the
   * paymentMethod entity
   *
   * @param {string} [body.address.paymentMethod.displayName] The displayName
   * property for the paymentMethod entity
   *
   * @param {date} [body.address.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the employee
   * entity
   *
   * @param {string} [body.mobilePhone] The mobilePhone property for the employee
   * entity
   *
   * @param {string} [body.email] The email property for the employee entity
   *
   * @param {string} [body.personalEmail] The personalEmail property for the
   * employee entity
   *
   * @param {date} [body.employmentDate] The employmentDate property for the
   * employee entity
   *
   * @param {date} [body.terminationDate] The terminationDate property for the
   * employee entity
   *
   * @param {string} [body.status] The status property for the employee entity
   *
   * @param {date} [body.birthDate] The birthDate property for the employee
   * entity
   *
   * @param {string} [body.statisticsGroupCode] The statisticsGroupCode property
   * for the employee entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the employee entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Employee} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Employee} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchEmployeeById(body, companyId, employeeId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchEmployeeById(body, companyId, employeeId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchEmployeeById(body, companyId, employeeId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of picture
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetPictureForEmployeeOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPictureForEmployeeWithHttpOperationResponse(companyId, employeeId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPictureForEmployee(companyId, employeeId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of picture
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetPictureForEmployeeOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetPictureForEmployeeOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPictureForEmployee(companyId, employeeId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPictureForEmployee(companyId, employeeId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPictureForEmployee(companyId, employeeId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an picture object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Picture>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPictureForEmployeeByIdWithHttpOperationResponse(companyId, employeeId, pictureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPictureForEmployeeById(companyId, employeeId, pictureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an picture object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Picture} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Picture} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPictureForEmployeeById(companyId, employeeId, pictureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPictureForEmployeeById(companyId, employeeId, pictureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPictureForEmployeeById(companyId, employeeId, pictureId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an picture in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deletePictureForEmployeeByIdByIdWithHttpOperationResponse(companyId, employeeId, pictureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deletePictureForEmployeeByIdById(companyId, employeeId, pictureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an picture in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deletePictureForEmployeeByIdById(companyId, employeeId, pictureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deletePictureForEmployeeByIdById(companyId, employeeId, pictureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deletePictureForEmployeeByIdById(companyId, employeeId, pictureId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified picture
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the picture entity
   *
   * @param {number} [body.width] The width property for the picture entity
   *
   * @param {number} [body.height] The height property for the picture entity
   *
   * @param {string} [body.contentType] The contentType property for the picture
   * entity
   *
   * @param {string} [body.content] The content property for the picture entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Picture>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchPictureForEmployeeByIdByIdWithHttpOperationResponse(body, companyId, employeeId, pictureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchPictureForEmployeeByIdById(body, companyId, employeeId, pictureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified picture
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the picture entity
   *
   * @param {number} [body.width] The width property for the picture entity
   *
   * @param {number} [body.height] The height property for the picture entity
   *
   * @param {string} [body.contentType] The contentType property for the picture
   * entity
   *
   * @param {string} [body.content] The content property for the picture entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} pictureId id for picture
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Picture} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Picture} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchPictureForEmployeeByIdById(body, companyId, employeeId, pictureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchPictureForEmployeeByIdById(body, companyId, employeeId, pictureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchPictureForEmployeeByIdById(body, companyId, employeeId, pictureId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of defaultDimensions
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetDefaultDimensionsForEmployeeOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDefaultDimensionsForEmployeeWithHttpOperationResponse(companyId, employeeId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDefaultDimensionsForEmployee(companyId, employeeId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of defaultDimensions
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetDefaultDimensionsForEmployeeOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetDefaultDimensionsForEmployeeOKResponse}
   *                      for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultDimensionsForEmployee(companyId, employeeId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDefaultDimensionsForEmployee(companyId, employeeId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDefaultDimensionsForEmployee(companyId, employeeId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a defaultDimensions in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DefaultDimensions>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postDefaultDimensionsForEmployeeWithHttpOperationResponse(body, companyId, employeeId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postDefaultDimensionsForEmployee(body, companyId, employeeId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a defaultDimensions in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DefaultDimensions} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DefaultDimensions} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postDefaultDimensionsForEmployee(body, companyId, employeeId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postDefaultDimensionsForEmployee(body, companyId, employeeId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postDefaultDimensionsForEmployee(body, companyId, employeeId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an defaultDimensions
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DefaultDimensions>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDefaultDimensionsForEmployeeByDimensionIdByParentIdWithHttpOperationResponse(companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDefaultDimensionsForEmployeeByDimensionIdByParentId(companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an defaultDimensions
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DefaultDimensions} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DefaultDimensions} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDefaultDimensionsForEmployeeByDimensionIdByParentId(companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDefaultDimensionsForEmployeeByDimensionIdByParentId(companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDefaultDimensionsForEmployeeByDimensionIdByParentId(companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an defaultDimensions in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteDefaultDimensionsForEmployeeByDimensionIdByParentIdByIdWithHttpOperationResponse(companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteDefaultDimensionsForEmployeeByDimensionIdByParentIdById(companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an defaultDimensions in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteDefaultDimensionsForEmployeeByDimensionIdByParentIdById(companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteDefaultDimensionsForEmployeeByDimensionIdByParentIdById(companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteDefaultDimensionsForEmployeeByDimensionIdByParentIdById(companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified defaultDimensions
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DefaultDimensions>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchDefaultDimensionsForEmployeeByDimensionIdByParentIdByIdWithHttpOperationResponse(body, companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchDefaultDimensionsForEmployeeByDimensionIdByParentIdById(body, companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified defaultDimensions
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionId] The dimensionId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionCode] The dimensionCode property for the
   * defaultDimensions entity
   *
   * @param {uuid} [body.dimensionValueId] The dimensionValueId property for the
   * defaultDimensions entity
   *
   * @param {string} [body.dimensionValueCode] The dimensionValueCode property
   * for the defaultDimensions entity
   *
   * @param {string} [body.postingValidation] The postingValidation property for
   * the defaultDimensions entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} defaultDimensionsParentId parentId for defaultDimensions
   *
   * @param {uuid} defaultDimensionsDimensionId dimensionId for defaultDimensions
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DefaultDimensions} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DefaultDimensions} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchDefaultDimensionsForEmployeeByDimensionIdByParentIdById(body, companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchDefaultDimensionsForEmployeeByDimensionIdByParentIdById(body, companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchDefaultDimensionsForEmployeeByDimensionIdByParentIdById(body, companyId, employeeId, defaultDimensionsParentId, defaultDimensionsDimensionId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of timeRegistrationEntries
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetTimeRegistrationEntriesForEmployeeOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getTimeRegistrationEntriesForEmployeeWithHttpOperationResponse(companyId, employeeId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getTimeRegistrationEntriesForEmployee(companyId, employeeId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of timeRegistrationEntries
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetTimeRegistrationEntriesForEmployeeOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      GetTimeRegistrationEntriesForEmployeeOKResponse} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getTimeRegistrationEntriesForEmployee(companyId, employeeId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getTimeRegistrationEntriesForEmployee(companyId, employeeId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getTimeRegistrationEntriesForEmployee(companyId, employeeId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a timeRegistrationEntry in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the timeRegistrationEntry entity
   *
   * @param {uuid} [body.employeeId] The employeeId property for the
   * timeRegistrationEntry entity
   *
   * @param {string} [body.employeeNumber] The employeeNumber property for the
   * timeRegistrationEntry entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * timeRegistrationEntry entity
   *
   * @param {date} [body.date] The date property for the timeRegistrationEntry
   * entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * timeRegistrationEntry entity
   *
   * @param {string} [body.status] The status property for the
   * timeRegistrationEntry entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * timeRegistrationEntry entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {date} [body.lastModfiedDateTime] The lastModfiedDateTime property
   * for the timeRegistrationEntry entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TimeRegistrationEntry>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postTimeRegistrationEntryForEmployeeWithHttpOperationResponse(body, companyId, employeeId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postTimeRegistrationEntryForEmployee(body, companyId, employeeId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a timeRegistrationEntry in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the timeRegistrationEntry entity
   *
   * @param {uuid} [body.employeeId] The employeeId property for the
   * timeRegistrationEntry entity
   *
   * @param {string} [body.employeeNumber] The employeeNumber property for the
   * timeRegistrationEntry entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * timeRegistrationEntry entity
   *
   * @param {date} [body.date] The date property for the timeRegistrationEntry
   * entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * timeRegistrationEntry entity
   *
   * @param {string} [body.status] The status property for the
   * timeRegistrationEntry entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * timeRegistrationEntry entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {date} [body.lastModfiedDateTime] The lastModfiedDateTime property
   * for the timeRegistrationEntry entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {TimeRegistrationEntry} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TimeRegistrationEntry} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postTimeRegistrationEntryForEmployee(body, companyId, employeeId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postTimeRegistrationEntryForEmployee(body, companyId, employeeId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postTimeRegistrationEntryForEmployee(body, companyId, employeeId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an
   * timeRegistrationEntry object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TimeRegistrationEntry>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getTimeRegistrationEntryForEmployeeByIdWithHttpOperationResponse(companyId, employeeId, timeRegistrationEntryId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getTimeRegistrationEntryForEmployeeById(companyId, employeeId, timeRegistrationEntryId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an
   * timeRegistrationEntry object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {TimeRegistrationEntry} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TimeRegistrationEntry} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getTimeRegistrationEntryForEmployeeById(companyId, employeeId, timeRegistrationEntryId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getTimeRegistrationEntryForEmployeeById(companyId, employeeId, timeRegistrationEntryId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getTimeRegistrationEntryForEmployeeById(companyId, employeeId, timeRegistrationEntryId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an timeRegistrationEntry in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteTimeRegistrationEntryForEmployeeByIdByIdWithHttpOperationResponse(companyId, employeeId, timeRegistrationEntryId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteTimeRegistrationEntryForEmployeeByIdById(companyId, employeeId, timeRegistrationEntryId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an timeRegistrationEntry in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteTimeRegistrationEntryForEmployeeByIdById(companyId, employeeId, timeRegistrationEntryId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteTimeRegistrationEntryForEmployeeByIdById(companyId, employeeId, timeRegistrationEntryId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteTimeRegistrationEntryForEmployeeByIdById(companyId, employeeId, timeRegistrationEntryId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified timeRegistrationEntry
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the timeRegistrationEntry entity
   *
   * @param {uuid} [body.employeeId] The employeeId property for the
   * timeRegistrationEntry entity
   *
   * @param {string} [body.employeeNumber] The employeeNumber property for the
   * timeRegistrationEntry entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * timeRegistrationEntry entity
   *
   * @param {date} [body.date] The date property for the timeRegistrationEntry
   * entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * timeRegistrationEntry entity
   *
   * @param {string} [body.status] The status property for the
   * timeRegistrationEntry entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * timeRegistrationEntry entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {date} [body.lastModfiedDateTime] The lastModfiedDateTime property
   * for the timeRegistrationEntry entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TimeRegistrationEntry>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchTimeRegistrationEntryForEmployeeByIdByIdWithHttpOperationResponse(body, companyId, employeeId, timeRegistrationEntryId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchTimeRegistrationEntryForEmployeeByIdById(body, companyId, employeeId, timeRegistrationEntryId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified timeRegistrationEntry
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the timeRegistrationEntry entity
   *
   * @param {uuid} [body.employeeId] The employeeId property for the
   * timeRegistrationEntry entity
   *
   * @param {string} [body.employeeNumber] The employeeNumber property for the
   * timeRegistrationEntry entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * timeRegistrationEntry entity
   *
   * @param {date} [body.date] The date property for the timeRegistrationEntry
   * entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * timeRegistrationEntry entity
   *
   * @param {string} [body.status] The status property for the
   * timeRegistrationEntry entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * timeRegistrationEntry entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {date} [body.lastModfiedDateTime] The lastModfiedDateTime property
   * for the timeRegistrationEntry entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} employeeId id for employee
   *
   * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {TimeRegistrationEntry} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TimeRegistrationEntry} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchTimeRegistrationEntryForEmployeeByIdById(body, companyId, employeeId, timeRegistrationEntryId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchTimeRegistrationEntryForEmployeeByIdById(body, companyId, employeeId, timeRegistrationEntryId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchTimeRegistrationEntryForEmployeeByIdById(body, companyId, employeeId, timeRegistrationEntryId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of timeRegistrationEntries
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetTimeRegistrationEntriesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getTimeRegistrationEntriesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getTimeRegistrationEntries(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of timeRegistrationEntries
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetTimeRegistrationEntriesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetTimeRegistrationEntriesOKResponse} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getTimeRegistrationEntries(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getTimeRegistrationEntries(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getTimeRegistrationEntries(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a timeRegistrationEntry in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the timeRegistrationEntry entity
   *
   * @param {uuid} [body.employeeId] The employeeId property for the
   * timeRegistrationEntry entity
   *
   * @param {string} [body.employeeNumber] The employeeNumber property for the
   * timeRegistrationEntry entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * timeRegistrationEntry entity
   *
   * @param {date} [body.date] The date property for the timeRegistrationEntry
   * entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * timeRegistrationEntry entity
   *
   * @param {string} [body.status] The status property for the
   * timeRegistrationEntry entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * timeRegistrationEntry entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {date} [body.lastModfiedDateTime] The lastModfiedDateTime property
   * for the timeRegistrationEntry entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TimeRegistrationEntry>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postTimeRegistrationEntryWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postTimeRegistrationEntry(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a timeRegistrationEntry in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the timeRegistrationEntry entity
   *
   * @param {uuid} [body.employeeId] The employeeId property for the
   * timeRegistrationEntry entity
   *
   * @param {string} [body.employeeNumber] The employeeNumber property for the
   * timeRegistrationEntry entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * timeRegistrationEntry entity
   *
   * @param {date} [body.date] The date property for the timeRegistrationEntry
   * entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * timeRegistrationEntry entity
   *
   * @param {string} [body.status] The status property for the
   * timeRegistrationEntry entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * timeRegistrationEntry entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {date} [body.lastModfiedDateTime] The lastModfiedDateTime property
   * for the timeRegistrationEntry entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {TimeRegistrationEntry} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TimeRegistrationEntry} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postTimeRegistrationEntry(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postTimeRegistrationEntry(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postTimeRegistrationEntry(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an
   * timeRegistrationEntry object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TimeRegistrationEntry>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getTimeRegistrationEntryByIdWithHttpOperationResponse(companyId, timeRegistrationEntryId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getTimeRegistrationEntryById(companyId, timeRegistrationEntryId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an
   * timeRegistrationEntry object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {TimeRegistrationEntry} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TimeRegistrationEntry} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getTimeRegistrationEntryById(companyId, timeRegistrationEntryId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getTimeRegistrationEntryById(companyId, timeRegistrationEntryId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getTimeRegistrationEntryById(companyId, timeRegistrationEntryId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an timeRegistrationEntry in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteTimeRegistrationEntryByIdWithHttpOperationResponse(companyId, timeRegistrationEntryId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteTimeRegistrationEntryById(companyId, timeRegistrationEntryId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an timeRegistrationEntry in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteTimeRegistrationEntryById(companyId, timeRegistrationEntryId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteTimeRegistrationEntryById(companyId, timeRegistrationEntryId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteTimeRegistrationEntryById(companyId, timeRegistrationEntryId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified timeRegistrationEntry
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the timeRegistrationEntry entity
   *
   * @param {uuid} [body.employeeId] The employeeId property for the
   * timeRegistrationEntry entity
   *
   * @param {string} [body.employeeNumber] The employeeNumber property for the
   * timeRegistrationEntry entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * timeRegistrationEntry entity
   *
   * @param {date} [body.date] The date property for the timeRegistrationEntry
   * entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * timeRegistrationEntry entity
   *
   * @param {string} [body.status] The status property for the
   * timeRegistrationEntry entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * timeRegistrationEntry entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {date} [body.lastModfiedDateTime] The lastModfiedDateTime property
   * for the timeRegistrationEntry entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TimeRegistrationEntry>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchTimeRegistrationEntryByIdWithHttpOperationResponse(body, companyId, timeRegistrationEntryId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchTimeRegistrationEntryById(body, companyId, timeRegistrationEntryId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified timeRegistrationEntry
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the timeRegistrationEntry entity
   *
   * @param {uuid} [body.employeeId] The employeeId property for the
   * timeRegistrationEntry entity
   *
   * @param {string} [body.employeeNumber] The employeeNumber property for the
   * timeRegistrationEntry entity
   *
   * @param {number} [body.lineNumber] The lineNumber property for the
   * timeRegistrationEntry entity
   *
   * @param {date} [body.date] The date property for the timeRegistrationEntry
   * entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * timeRegistrationEntry entity
   *
   * @param {string} [body.status] The status property for the
   * timeRegistrationEntry entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * timeRegistrationEntry entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {date} [body.lastModfiedDateTime] The lastModfiedDateTime property
   * for the timeRegistrationEntry entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} timeRegistrationEntryId id for timeRegistrationEntry
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {TimeRegistrationEntry} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TimeRegistrationEntry} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchTimeRegistrationEntryById(body, companyId, timeRegistrationEntryId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchTimeRegistrationEntryById(body, companyId, timeRegistrationEntryId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchTimeRegistrationEntryById(body, companyId, timeRegistrationEntryId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of generalLedgerEntries
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetGeneralLedgerEntriesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getGeneralLedgerEntriesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getGeneralLedgerEntries(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of generalLedgerEntries
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetGeneralLedgerEntriesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetGeneralLedgerEntriesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getGeneralLedgerEntries(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getGeneralLedgerEntries(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getGeneralLedgerEntries(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an generalLedgerEntry
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {number} generalLedgerEntryId id for generalLedgerEntry
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GeneralLedgerEntry>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getGeneralLedgerEntryByIdWithHttpOperationResponse(companyId, generalLedgerEntryId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getGeneralLedgerEntryById(companyId, generalLedgerEntryId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an generalLedgerEntry
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {number} generalLedgerEntryId id for generalLedgerEntry
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GeneralLedgerEntry} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GeneralLedgerEntry} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getGeneralLedgerEntryById(companyId, generalLedgerEntryId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getGeneralLedgerEntryById(companyId, generalLedgerEntryId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getGeneralLedgerEntryById(companyId, generalLedgerEntryId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of currencies
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetCurrenciesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCurrenciesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCurrencies(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of currencies
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetCurrenciesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetCurrenciesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCurrencies(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCurrencies(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCurrencies(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a currency in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the currency entity
   *
   * @param {string} [body.code] The code property for the currency entity
   *
   * @param {string} [body.displayName] The displayName property for the currency
   * entity
   *
   * @param {string} [body.symbol] The symbol property for the currency entity
   *
   * @param {string} [body.amountDecimalPlaces] The amountDecimalPlaces property
   * for the currency entity
   *
   * @param {number} [body.amountRoundingPrecision] The amountRoundingPrecision
   * property for the currency entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the currency entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Currency>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postCurrencyWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postCurrency(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a currency in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the currency entity
   *
   * @param {string} [body.code] The code property for the currency entity
   *
   * @param {string} [body.displayName] The displayName property for the currency
   * entity
   *
   * @param {string} [body.symbol] The symbol property for the currency entity
   *
   * @param {string} [body.amountDecimalPlaces] The amountDecimalPlaces property
   * for the currency entity
   *
   * @param {number} [body.amountRoundingPrecision] The amountRoundingPrecision
   * property for the currency entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the currency entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Currency} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Currency} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postCurrency(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postCurrency(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postCurrency(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an currency object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} currencyId id for currency
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Currency>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCurrencyByIdWithHttpOperationResponse(companyId, currencyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCurrencyById(companyId, currencyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an currency object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} currencyId id for currency
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Currency} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Currency} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCurrencyById(companyId, currencyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCurrencyById(companyId, currencyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCurrencyById(companyId, currencyId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an currency in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} currencyId id for currency
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteCurrencyByIdWithHttpOperationResponse(companyId, currencyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteCurrencyById(companyId, currencyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an currency in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} currencyId id for currency
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteCurrencyById(companyId, currencyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteCurrencyById(companyId, currencyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteCurrencyById(companyId, currencyId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified currency
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the currency entity
   *
   * @param {string} [body.code] The code property for the currency entity
   *
   * @param {string} [body.displayName] The displayName property for the currency
   * entity
   *
   * @param {string} [body.symbol] The symbol property for the currency entity
   *
   * @param {string} [body.amountDecimalPlaces] The amountDecimalPlaces property
   * for the currency entity
   *
   * @param {number} [body.amountRoundingPrecision] The amountRoundingPrecision
   * property for the currency entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the currency entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} currencyId id for currency
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Currency>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchCurrencyByIdWithHttpOperationResponse(body, companyId, currencyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchCurrencyById(body, companyId, currencyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified currency
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the currency entity
   *
   * @param {string} [body.code] The code property for the currency entity
   *
   * @param {string} [body.displayName] The displayName property for the currency
   * entity
   *
   * @param {string} [body.symbol] The symbol property for the currency entity
   *
   * @param {string} [body.amountDecimalPlaces] The amountDecimalPlaces property
   * for the currency entity
   *
   * @param {number} [body.amountRoundingPrecision] The amountRoundingPrecision
   * property for the currency entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the currency entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} currencyId id for currency
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Currency} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Currency} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchCurrencyById(body, companyId, currencyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchCurrencyById(body, companyId, currencyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchCurrencyById(body, companyId, currencyId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of paymentMethods
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetPaymentMethodsOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPaymentMethodsWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPaymentMethods(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of paymentMethods
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetPaymentMethodsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetPaymentMethodsOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPaymentMethods(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPaymentMethods(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPaymentMethods(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a paymentMethod in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the paymentMethod entity
   *
   * @param {string} [body.code] The code property for the paymentMethod entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * paymentMethod entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the paymentMethod entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PaymentMethod>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postPaymentMethodWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postPaymentMethod(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a paymentMethod in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the paymentMethod entity
   *
   * @param {string} [body.code] The code property for the paymentMethod entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * paymentMethod entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the paymentMethod entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PaymentMethod} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PaymentMethod} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postPaymentMethod(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postPaymentMethod(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postPaymentMethod(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an paymentMethod
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} paymentMethodId id for paymentMethod
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PaymentMethod>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPaymentMethodByIdWithHttpOperationResponse(companyId, paymentMethodId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPaymentMethodById(companyId, paymentMethodId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an paymentMethod
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} paymentMethodId id for paymentMethod
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PaymentMethod} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PaymentMethod} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPaymentMethodById(companyId, paymentMethodId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPaymentMethodById(companyId, paymentMethodId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPaymentMethodById(companyId, paymentMethodId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an paymentMethod in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} paymentMethodId id for paymentMethod
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deletePaymentMethodByIdWithHttpOperationResponse(companyId, paymentMethodId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deletePaymentMethodById(companyId, paymentMethodId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an paymentMethod in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} paymentMethodId id for paymentMethod
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deletePaymentMethodById(companyId, paymentMethodId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deletePaymentMethodById(companyId, paymentMethodId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deletePaymentMethodById(companyId, paymentMethodId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified paymentMethod
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the paymentMethod entity
   *
   * @param {string} [body.code] The code property for the paymentMethod entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * paymentMethod entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the paymentMethod entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} paymentMethodId id for paymentMethod
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PaymentMethod>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchPaymentMethodByIdWithHttpOperationResponse(body, companyId, paymentMethodId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchPaymentMethodById(body, companyId, paymentMethodId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified paymentMethod
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the paymentMethod entity
   *
   * @param {string} [body.code] The code property for the paymentMethod entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * paymentMethod entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the paymentMethod entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} paymentMethodId id for paymentMethod
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PaymentMethod} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PaymentMethod} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchPaymentMethodById(body, companyId, paymentMethodId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchPaymentMethodById(body, companyId, paymentMethodId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchPaymentMethodById(body, companyId, paymentMethodId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of dimensions
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetDimensionsOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDimensionsWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDimensions(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of dimensions
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetDimensionsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetDimensionsOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDimensions(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDimensions(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDimensions(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an dimension object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} dimensionId id for dimension
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Dimension>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDimensionByIdWithHttpOperationResponse(companyId, dimensionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDimensionById(companyId, dimensionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an dimension object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} dimensionId id for dimension
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Dimension} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Dimension} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDimensionById(companyId, dimensionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDimensionById(companyId, dimensionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDimensionById(companyId, dimensionId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of dimensionValues
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} dimensionId id for dimension
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetDimensionValuesForDimensionOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDimensionValuesForDimensionWithHttpOperationResponse(companyId, dimensionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDimensionValuesForDimension(companyId, dimensionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of dimensionValues
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} dimensionId id for dimension
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetDimensionValuesForDimensionOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetDimensionValuesForDimensionOKResponse}
   *                      for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDimensionValuesForDimension(companyId, dimensionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDimensionValuesForDimension(companyId, dimensionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDimensionValuesForDimension(companyId, dimensionId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an dimensionValue
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} dimensionId id for dimension
   *
   * @param {uuid} dimensionValueId id for dimensionValue
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DimensionValue>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDimensionValueForDimensionByIdWithHttpOperationResponse(companyId, dimensionId, dimensionValueId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDimensionValueForDimensionById(companyId, dimensionId, dimensionValueId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an dimensionValue
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} dimensionId id for dimension
   *
   * @param {uuid} dimensionValueId id for dimensionValue
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DimensionValue} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DimensionValue} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDimensionValueForDimensionById(companyId, dimensionId, dimensionValueId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDimensionValueForDimensionById(companyId, dimensionId, dimensionValueId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDimensionValueForDimensionById(companyId, dimensionId, dimensionValueId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of dimensionValues
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetDimensionValuesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDimensionValuesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDimensionValues(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of dimensionValues
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetDimensionValuesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetDimensionValuesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDimensionValues(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDimensionValues(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDimensionValues(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an dimensionValue
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} dimensionValueId id for dimensionValue
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DimensionValue>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDimensionValueByIdWithHttpOperationResponse(companyId, dimensionValueId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDimensionValueById(companyId, dimensionValueId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an dimensionValue
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} dimensionValueId id for dimensionValue
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DimensionValue} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DimensionValue} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDimensionValueById(companyId, dimensionValueId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDimensionValueById(companyId, dimensionValueId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDimensionValueById(companyId, dimensionValueId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of dimensionLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetDimensionLinesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDimensionLinesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDimensionLines(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of dimensionLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetDimensionLinesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetDimensionLinesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDimensionLines(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDimensionLines(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDimensionLines(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a dimensionLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the dimensionLine
   * entity
   *
   * @param {uuid} [body.id] The id property for the dimensionLine entity
   *
   * @param {string} [body.code] The code property for the dimensionLine entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * dimensionLine entity
   *
   * @param {uuid} [body.valueId] The valueId property for the dimensionLine
   * entity
   *
   * @param {string} [body.valueCode] The valueCode property for the
   * dimensionLine entity
   *
   * @param {string} [body.valueDisplayName] The valueDisplayName property for
   * the dimensionLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DimensionLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postDimensionLineWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postDimensionLine(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a dimensionLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the dimensionLine
   * entity
   *
   * @param {uuid} [body.id] The id property for the dimensionLine entity
   *
   * @param {string} [body.code] The code property for the dimensionLine entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * dimensionLine entity
   *
   * @param {uuid} [body.valueId] The valueId property for the dimensionLine
   * entity
   *
   * @param {string} [body.valueCode] The valueCode property for the
   * dimensionLine entity
   *
   * @param {string} [body.valueDisplayName] The valueDisplayName property for
   * the dimensionLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DimensionLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DimensionLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postDimensionLine(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postDimensionLine(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postDimensionLine(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an dimensionLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} dimensionLineParentId parentId for dimensionLine
   *
   * @param {uuid} dimensionLineId id for dimensionLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DimensionLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDimensionLineByIdByParentIdWithHttpOperationResponse(companyId, dimensionLineParentId, dimensionLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDimensionLineByIdByParentId(companyId, dimensionLineParentId, dimensionLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an dimensionLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} dimensionLineParentId parentId for dimensionLine
   *
   * @param {uuid} dimensionLineId id for dimensionLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DimensionLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DimensionLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDimensionLineByIdByParentId(companyId, dimensionLineParentId, dimensionLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDimensionLineByIdByParentId(companyId, dimensionLineParentId, dimensionLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDimensionLineByIdByParentId(companyId, dimensionLineParentId, dimensionLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an dimensionLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} dimensionLineParentId parentId for dimensionLine
   *
   * @param {uuid} dimensionLineId id for dimensionLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteDimensionLineByIdByParentIdWithHttpOperationResponse(companyId, dimensionLineParentId, dimensionLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteDimensionLineByIdByParentId(companyId, dimensionLineParentId, dimensionLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an dimensionLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} dimensionLineParentId parentId for dimensionLine
   *
   * @param {uuid} dimensionLineId id for dimensionLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteDimensionLineByIdByParentId(companyId, dimensionLineParentId, dimensionLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteDimensionLineByIdByParentId(companyId, dimensionLineParentId, dimensionLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteDimensionLineByIdByParentId(companyId, dimensionLineParentId, dimensionLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified dimensionLine
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the dimensionLine
   * entity
   *
   * @param {uuid} [body.id] The id property for the dimensionLine entity
   *
   * @param {string} [body.code] The code property for the dimensionLine entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * dimensionLine entity
   *
   * @param {uuid} [body.valueId] The valueId property for the dimensionLine
   * entity
   *
   * @param {string} [body.valueCode] The valueCode property for the
   * dimensionLine entity
   *
   * @param {string} [body.valueDisplayName] The valueDisplayName property for
   * the dimensionLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} dimensionLineParentId parentId for dimensionLine
   *
   * @param {uuid} dimensionLineId id for dimensionLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DimensionLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchDimensionLineByIdByParentIdWithHttpOperationResponse(body, companyId, dimensionLineParentId, dimensionLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchDimensionLineByIdByParentId(body, companyId, dimensionLineParentId, dimensionLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified dimensionLine
   *
   * @param {object} body
   *
   * @param {uuid} [body.parentId] The parentId property for the dimensionLine
   * entity
   *
   * @param {uuid} [body.id] The id property for the dimensionLine entity
   *
   * @param {string} [body.code] The code property for the dimensionLine entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * dimensionLine entity
   *
   * @param {uuid} [body.valueId] The valueId property for the dimensionLine
   * entity
   *
   * @param {string} [body.valueCode] The valueCode property for the
   * dimensionLine entity
   *
   * @param {string} [body.valueDisplayName] The valueDisplayName property for
   * the dimensionLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} dimensionLineParentId parentId for dimensionLine
   *
   * @param {uuid} dimensionLineId id for dimensionLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DimensionLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DimensionLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchDimensionLineByIdByParentId(body, companyId, dimensionLineParentId, dimensionLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchDimensionLineByIdByParentId(body, companyId, dimensionLineParentId, dimensionLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchDimensionLineByIdByParentId(body, companyId, dimensionLineParentId, dimensionLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of paymentTerms
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetPaymentTermsOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPaymentTermsWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPaymentTerms(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of paymentTerms
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetPaymentTermsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetPaymentTermsOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPaymentTerms(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPaymentTerms(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPaymentTerms(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a paymentTerm in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the paymentTerm entity
   *
   * @param {string} [body.code] The code property for the paymentTerm entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * paymentTerm entity
   *
   * @param {string} [body.dueDateCalculation] The dueDateCalculation property
   * for the paymentTerm entity
   *
   * @param {string} [body.discountDateCalculation] The discountDateCalculation
   * property for the paymentTerm entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * paymentTerm entity
   *
   * @param {boolean} [body.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the paymentTerm entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PaymentTerm>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postPaymentTermWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postPaymentTerm(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a paymentTerm in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the paymentTerm entity
   *
   * @param {string} [body.code] The code property for the paymentTerm entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * paymentTerm entity
   *
   * @param {string} [body.dueDateCalculation] The dueDateCalculation property
   * for the paymentTerm entity
   *
   * @param {string} [body.discountDateCalculation] The discountDateCalculation
   * property for the paymentTerm entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * paymentTerm entity
   *
   * @param {boolean} [body.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the paymentTerm entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PaymentTerm} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PaymentTerm} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postPaymentTerm(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postPaymentTerm(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postPaymentTerm(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an paymentTerm object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} paymentTermId id for paymentTerm
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PaymentTerm>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPaymentTermByIdWithHttpOperationResponse(companyId, paymentTermId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPaymentTermById(companyId, paymentTermId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an paymentTerm object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} paymentTermId id for paymentTerm
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PaymentTerm} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PaymentTerm} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPaymentTermById(companyId, paymentTermId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPaymentTermById(companyId, paymentTermId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPaymentTermById(companyId, paymentTermId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an paymentTerm in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} paymentTermId id for paymentTerm
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deletePaymentTermByIdWithHttpOperationResponse(companyId, paymentTermId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deletePaymentTermById(companyId, paymentTermId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an paymentTerm in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} paymentTermId id for paymentTerm
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deletePaymentTermById(companyId, paymentTermId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deletePaymentTermById(companyId, paymentTermId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deletePaymentTermById(companyId, paymentTermId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified paymentTerm
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the paymentTerm entity
   *
   * @param {string} [body.code] The code property for the paymentTerm entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * paymentTerm entity
   *
   * @param {string} [body.dueDateCalculation] The dueDateCalculation property
   * for the paymentTerm entity
   *
   * @param {string} [body.discountDateCalculation] The discountDateCalculation
   * property for the paymentTerm entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * paymentTerm entity
   *
   * @param {boolean} [body.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the paymentTerm entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} paymentTermId id for paymentTerm
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PaymentTerm>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchPaymentTermByIdWithHttpOperationResponse(body, companyId, paymentTermId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchPaymentTermById(body, companyId, paymentTermId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified paymentTerm
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the paymentTerm entity
   *
   * @param {string} [body.code] The code property for the paymentTerm entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * paymentTerm entity
   *
   * @param {string} [body.dueDateCalculation] The dueDateCalculation property
   * for the paymentTerm entity
   *
   * @param {string} [body.discountDateCalculation] The discountDateCalculation
   * property for the paymentTerm entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * paymentTerm entity
   *
   * @param {boolean} [body.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the paymentTerm entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} paymentTermId id for paymentTerm
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PaymentTerm} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PaymentTerm} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchPaymentTermById(body, companyId, paymentTermId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchPaymentTermById(body, companyId, paymentTermId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchPaymentTermById(body, companyId, paymentTermId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of shipmentMethods
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetShipmentMethodsOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getShipmentMethodsWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getShipmentMethods(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of shipmentMethods
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetShipmentMethodsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetShipmentMethodsOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getShipmentMethods(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getShipmentMethods(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getShipmentMethods(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a shipmentMethod in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the shipmentMethod entity
   *
   * @param {string} [body.code] The code property for the shipmentMethod entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * shipmentMethod entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the shipmentMethod entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ShipmentMethod>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postShipmentMethodWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postShipmentMethod(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a shipmentMethod in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the shipmentMethod entity
   *
   * @param {string} [body.code] The code property for the shipmentMethod entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * shipmentMethod entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the shipmentMethod entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ShipmentMethod} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ShipmentMethod} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postShipmentMethod(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postShipmentMethod(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postShipmentMethod(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an shipmentMethod
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} shipmentMethodId id for shipmentMethod
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ShipmentMethod>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getShipmentMethodByIdWithHttpOperationResponse(companyId, shipmentMethodId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getShipmentMethodById(companyId, shipmentMethodId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an shipmentMethod
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} shipmentMethodId id for shipmentMethod
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ShipmentMethod} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ShipmentMethod} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getShipmentMethodById(companyId, shipmentMethodId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getShipmentMethodById(companyId, shipmentMethodId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getShipmentMethodById(companyId, shipmentMethodId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an shipmentMethod in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} shipmentMethodId id for shipmentMethod
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteShipmentMethodByIdWithHttpOperationResponse(companyId, shipmentMethodId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteShipmentMethodById(companyId, shipmentMethodId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an shipmentMethod in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} shipmentMethodId id for shipmentMethod
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteShipmentMethodById(companyId, shipmentMethodId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteShipmentMethodById(companyId, shipmentMethodId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteShipmentMethodById(companyId, shipmentMethodId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified shipmentMethod
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the shipmentMethod entity
   *
   * @param {string} [body.code] The code property for the shipmentMethod entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * shipmentMethod entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the shipmentMethod entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} shipmentMethodId id for shipmentMethod
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ShipmentMethod>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchShipmentMethodByIdWithHttpOperationResponse(body, companyId, shipmentMethodId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchShipmentMethodById(body, companyId, shipmentMethodId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified shipmentMethod
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the shipmentMethod entity
   *
   * @param {string} [body.code] The code property for the shipmentMethod entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * shipmentMethod entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the shipmentMethod entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} shipmentMethodId id for shipmentMethod
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ShipmentMethod} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ShipmentMethod} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchShipmentMethodById(body, companyId, shipmentMethodId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchShipmentMethodById(body, companyId, shipmentMethodId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchShipmentMethodById(body, companyId, shipmentMethodId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of itemCategories
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetItemCategoriesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getItemCategoriesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getItemCategories(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of itemCategories
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetItemCategoriesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetItemCategoriesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getItemCategories(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getItemCategories(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getItemCategories(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a itemCategory in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the itemCategory entity
   *
   * @param {string} [body.code] The code property for the itemCategory entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * itemCategory entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the itemCategory entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ItemCategory>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postItemCategoryWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postItemCategory(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a itemCategory in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the itemCategory entity
   *
   * @param {string} [body.code] The code property for the itemCategory entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * itemCategory entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the itemCategory entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ItemCategory} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ItemCategory} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postItemCategory(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postItemCategory(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postItemCategory(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an itemCategory object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemCategoryId id for itemCategory
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ItemCategory>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getItemCategoryByIdWithHttpOperationResponse(companyId, itemCategoryId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getItemCategoryById(companyId, itemCategoryId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an itemCategory object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemCategoryId id for itemCategory
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ItemCategory} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ItemCategory} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getItemCategoryById(companyId, itemCategoryId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getItemCategoryById(companyId, itemCategoryId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getItemCategoryById(companyId, itemCategoryId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an itemCategory in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemCategoryId id for itemCategory
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteItemCategoryByIdWithHttpOperationResponse(companyId, itemCategoryId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteItemCategoryById(companyId, itemCategoryId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an itemCategory in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemCategoryId id for itemCategory
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteItemCategoryById(companyId, itemCategoryId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteItemCategoryById(companyId, itemCategoryId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteItemCategoryById(companyId, itemCategoryId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified itemCategory
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the itemCategory entity
   *
   * @param {string} [body.code] The code property for the itemCategory entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * itemCategory entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the itemCategory entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemCategoryId id for itemCategory
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ItemCategory>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchItemCategoryByIdWithHttpOperationResponse(body, companyId, itemCategoryId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchItemCategoryById(body, companyId, itemCategoryId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified itemCategory
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the itemCategory entity
   *
   * @param {string} [body.code] The code property for the itemCategory entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * itemCategory entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the itemCategory entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} itemCategoryId id for itemCategory
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ItemCategory} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ItemCategory} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchItemCategoryById(body, companyId, itemCategoryId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchItemCategoryById(body, companyId, itemCategoryId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchItemCategoryById(body, companyId, itemCategoryId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of cashFlowStatement
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetCashFlowStatementOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCashFlowStatementWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCashFlowStatement(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of cashFlowStatement
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetCashFlowStatementOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetCashFlowStatementOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCashFlowStatement(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCashFlowStatement(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCashFlowStatement(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an cashFlowStatement
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {number} cashFlowStatementLineNumber lineNumber for cashFlowStatement
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CashFlowStatement>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCashFlowStatementByLineNumberWithHttpOperationResponse(companyId, cashFlowStatementLineNumber, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCashFlowStatementByLineNumber(companyId, cashFlowStatementLineNumber, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an cashFlowStatement
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {number} cashFlowStatementLineNumber lineNumber for cashFlowStatement
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CashFlowStatement} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CashFlowStatement} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCashFlowStatementByLineNumber(companyId, cashFlowStatementLineNumber, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCashFlowStatementByLineNumber(companyId, cashFlowStatementLineNumber, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCashFlowStatementByLineNumber(companyId, cashFlowStatementLineNumber, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of countriesRegions
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetCountriesRegionsOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCountriesRegionsWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCountriesRegions(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of countriesRegions
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetCountriesRegionsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetCountriesRegionsOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCountriesRegions(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCountriesRegions(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCountriesRegions(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a countryRegion in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the countryRegion entity
   *
   * @param {string} [body.code] The code property for the countryRegion entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * countryRegion entity
   *
   * @param {string} [body.addressFormat] The addressFormat property for the
   * countryRegion entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the countryRegion entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CountryRegion>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postCountryRegionWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postCountryRegion(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a countryRegion in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the countryRegion entity
   *
   * @param {string} [body.code] The code property for the countryRegion entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * countryRegion entity
   *
   * @param {string} [body.addressFormat] The addressFormat property for the
   * countryRegion entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the countryRegion entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CountryRegion} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CountryRegion} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postCountryRegion(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postCountryRegion(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postCountryRegion(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an countryRegion
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} countryRegionId id for countryRegion
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CountryRegion>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCountryRegionByIdWithHttpOperationResponse(companyId, countryRegionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCountryRegionById(companyId, countryRegionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an countryRegion
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} countryRegionId id for countryRegion
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CountryRegion} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CountryRegion} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCountryRegionById(companyId, countryRegionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCountryRegionById(companyId, countryRegionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCountryRegionById(companyId, countryRegionId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an countryRegion in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} countryRegionId id for countryRegion
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteCountryRegionByIdWithHttpOperationResponse(companyId, countryRegionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteCountryRegionById(companyId, countryRegionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an countryRegion in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} countryRegionId id for countryRegion
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteCountryRegionById(companyId, countryRegionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteCountryRegionById(companyId, countryRegionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteCountryRegionById(companyId, countryRegionId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified countryRegion
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the countryRegion entity
   *
   * @param {string} [body.code] The code property for the countryRegion entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * countryRegion entity
   *
   * @param {string} [body.addressFormat] The addressFormat property for the
   * countryRegion entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the countryRegion entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} countryRegionId id for countryRegion
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CountryRegion>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchCountryRegionByIdWithHttpOperationResponse(body, companyId, countryRegionId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchCountryRegionById(body, companyId, countryRegionId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified countryRegion
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the countryRegion entity
   *
   * @param {string} [body.code] The code property for the countryRegion entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * countryRegion entity
   *
   * @param {string} [body.addressFormat] The addressFormat property for the
   * countryRegion entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the countryRegion entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} countryRegionId id for countryRegion
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CountryRegion} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CountryRegion} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchCountryRegionById(body, companyId, countryRegionId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchCountryRegionById(body, companyId, countryRegionId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchCountryRegionById(body, companyId, countryRegionId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of salesOrders
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetSalesOrdersOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesOrdersWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesOrders(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of salesOrders
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetSalesOrdersOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetSalesOrdersOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesOrders(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesOrders(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesOrders(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a salesOrder in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the salesOrder entity
   *
   * @param {string} [body.number] The number property for the salesOrder entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the salesOrder entity
   *
   * @param {date} [body.orderDate] The orderDate property for the salesOrder
   * entity
   *
   * @param {uuid} [body.customerId] The customerId property for the salesOrder
   * entity
   *
   * @param {string} [body.contactId] The contactId property for the salesOrder
   * entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * salesOrder entity
   *
   * @param {string} [body.customerName] The customerName property for the
   * salesOrder entity
   *
   * @param {string} [body.billToName] The billToName property for the salesOrder
   * entity
   *
   * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
   * salesOrder entity
   *
   * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
   * property for the salesOrder entity
   *
   * @param {string} [body.shipToName] The shipToName property for the salesOrder
   * entity
   *
   * @param {string} [body.shipToContact] The shipToContact property for the
   * salesOrder entity
   *
   * @param {object} [body.sellingPostalAddress]
   *
   * @param {object} [body.billingPostalAddress]
   *
   * @param {object} [body.shippingPostalAddress]
   *
   * @param {string} [body.shippingPostalAddress.street] The street property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.state] The state property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.countryLetterCode] The
   * countryLetterCode property for the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
   * property for the postaladdresstype entity
   *
   * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
   *
   * @param {array} [body.shippingPostalAddress.picture]
   *
   * @param {array} [body.shippingPostalAddress.defaultDimensions]
   *
   * @param {object} [body.shippingPostalAddress.currency]
   *
   * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
   * the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.code] The code property
   * for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.displayName] The
   * displayName property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
   * property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
   * The amountDecimalPlaces property for the currency entity
   *
   * @param {number}
   * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.shippingPostalAddress.paymentTerm]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
   * for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
   * property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
   * displayName property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
   * The dueDateCalculation property for the paymentTerm entity
   *
   * @param {string}
   * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.shippingPostalAddress.shipmentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
   * for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
   * property for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.shippingPostalAddress.paymentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
   * for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
   * property for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the salesOrder
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * salesOrder entity
   *
   * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
   * the salesOrder entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * salesOrder entity
   *
   * @param {string} [body.salesperson] The salesperson property for the
   * salesOrder entity
   *
   * @param {boolean} [body.partialShipping] The partialShipping property for the
   * salesOrder entity
   *
   * @param {date} [body.requestedDeliveryDate] The requestedDeliveryDate
   * property for the salesOrder entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesOrder entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesOrder entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the salesOrder entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesOrder entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the salesOrder entity
   *
   * @param {boolean} [body.fullyShipped] The fullyShipped property for the
   * salesOrder entity
   *
   * @param {string} [body.status] The status property for the salesOrder entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the salesOrder entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * salesOrder entity
   *
   * @param {string} [body.email] The email property for the salesOrder entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesOrder>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postSalesOrderWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postSalesOrder(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a salesOrder in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the salesOrder entity
   *
   * @param {string} [body.number] The number property for the salesOrder entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the salesOrder entity
   *
   * @param {date} [body.orderDate] The orderDate property for the salesOrder
   * entity
   *
   * @param {uuid} [body.customerId] The customerId property for the salesOrder
   * entity
   *
   * @param {string} [body.contactId] The contactId property for the salesOrder
   * entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * salesOrder entity
   *
   * @param {string} [body.customerName] The customerName property for the
   * salesOrder entity
   *
   * @param {string} [body.billToName] The billToName property for the salesOrder
   * entity
   *
   * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
   * salesOrder entity
   *
   * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
   * property for the salesOrder entity
   *
   * @param {string} [body.shipToName] The shipToName property for the salesOrder
   * entity
   *
   * @param {string} [body.shipToContact] The shipToContact property for the
   * salesOrder entity
   *
   * @param {object} [body.sellingPostalAddress]
   *
   * @param {object} [body.billingPostalAddress]
   *
   * @param {object} [body.shippingPostalAddress]
   *
   * @param {string} [body.shippingPostalAddress.street] The street property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.state] The state property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.countryLetterCode] The
   * countryLetterCode property for the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
   * property for the postaladdresstype entity
   *
   * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
   *
   * @param {array} [body.shippingPostalAddress.picture]
   *
   * @param {array} [body.shippingPostalAddress.defaultDimensions]
   *
   * @param {object} [body.shippingPostalAddress.currency]
   *
   * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
   * the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.code] The code property
   * for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.displayName] The
   * displayName property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
   * property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
   * The amountDecimalPlaces property for the currency entity
   *
   * @param {number}
   * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.shippingPostalAddress.paymentTerm]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
   * for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
   * property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
   * displayName property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
   * The dueDateCalculation property for the paymentTerm entity
   *
   * @param {string}
   * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.shippingPostalAddress.shipmentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
   * for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
   * property for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.shippingPostalAddress.paymentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
   * for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
   * property for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the salesOrder
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * salesOrder entity
   *
   * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
   * the salesOrder entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * salesOrder entity
   *
   * @param {string} [body.salesperson] The salesperson property for the
   * salesOrder entity
   *
   * @param {boolean} [body.partialShipping] The partialShipping property for the
   * salesOrder entity
   *
   * @param {date} [body.requestedDeliveryDate] The requestedDeliveryDate
   * property for the salesOrder entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesOrder entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesOrder entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the salesOrder entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesOrder entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the salesOrder entity
   *
   * @param {boolean} [body.fullyShipped] The fullyShipped property for the
   * salesOrder entity
   *
   * @param {string} [body.status] The status property for the salesOrder entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the salesOrder entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * salesOrder entity
   *
   * @param {string} [body.email] The email property for the salesOrder entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesOrder} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesOrder} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postSalesOrder(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postSalesOrder(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postSalesOrder(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an salesOrder object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesOrderId id for salesOrder
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesOrder>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesOrderByIdWithHttpOperationResponse(companyId, salesOrderId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesOrderById(companyId, salesOrderId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an salesOrder object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesOrderId id for salesOrder
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesOrder} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesOrder} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesOrderById(companyId, salesOrderId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesOrderById(companyId, salesOrderId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesOrderById(companyId, salesOrderId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an salesOrder in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesOrderId id for salesOrder
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteSalesOrderByIdWithHttpOperationResponse(companyId, salesOrderId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteSalesOrderById(companyId, salesOrderId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an salesOrder in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesOrderId id for salesOrder
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteSalesOrderById(companyId, salesOrderId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteSalesOrderById(companyId, salesOrderId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteSalesOrderById(companyId, salesOrderId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified salesOrder
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the salesOrder entity
   *
   * @param {string} [body.number] The number property for the salesOrder entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the salesOrder entity
   *
   * @param {date} [body.orderDate] The orderDate property for the salesOrder
   * entity
   *
   * @param {uuid} [body.customerId] The customerId property for the salesOrder
   * entity
   *
   * @param {string} [body.contactId] The contactId property for the salesOrder
   * entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * salesOrder entity
   *
   * @param {string} [body.customerName] The customerName property for the
   * salesOrder entity
   *
   * @param {string} [body.billToName] The billToName property for the salesOrder
   * entity
   *
   * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
   * salesOrder entity
   *
   * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
   * property for the salesOrder entity
   *
   * @param {string} [body.shipToName] The shipToName property for the salesOrder
   * entity
   *
   * @param {string} [body.shipToContact] The shipToContact property for the
   * salesOrder entity
   *
   * @param {object} [body.sellingPostalAddress]
   *
   * @param {object} [body.billingPostalAddress]
   *
   * @param {object} [body.shippingPostalAddress]
   *
   * @param {string} [body.shippingPostalAddress.street] The street property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.state] The state property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.countryLetterCode] The
   * countryLetterCode property for the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
   * property for the postaladdresstype entity
   *
   * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
   *
   * @param {array} [body.shippingPostalAddress.picture]
   *
   * @param {array} [body.shippingPostalAddress.defaultDimensions]
   *
   * @param {object} [body.shippingPostalAddress.currency]
   *
   * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
   * the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.code] The code property
   * for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.displayName] The
   * displayName property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
   * property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
   * The amountDecimalPlaces property for the currency entity
   *
   * @param {number}
   * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.shippingPostalAddress.paymentTerm]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
   * for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
   * property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
   * displayName property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
   * The dueDateCalculation property for the paymentTerm entity
   *
   * @param {string}
   * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.shippingPostalAddress.shipmentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
   * for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
   * property for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.shippingPostalAddress.paymentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
   * for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
   * property for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the salesOrder
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * salesOrder entity
   *
   * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
   * the salesOrder entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * salesOrder entity
   *
   * @param {string} [body.salesperson] The salesperson property for the
   * salesOrder entity
   *
   * @param {boolean} [body.partialShipping] The partialShipping property for the
   * salesOrder entity
   *
   * @param {date} [body.requestedDeliveryDate] The requestedDeliveryDate
   * property for the salesOrder entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesOrder entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesOrder entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the salesOrder entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesOrder entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the salesOrder entity
   *
   * @param {boolean} [body.fullyShipped] The fullyShipped property for the
   * salesOrder entity
   *
   * @param {string} [body.status] The status property for the salesOrder entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the salesOrder entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * salesOrder entity
   *
   * @param {string} [body.email] The email property for the salesOrder entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesOrderId id for salesOrder
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesOrder>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchSalesOrderByIdWithHttpOperationResponse(body, companyId, salesOrderId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchSalesOrderById(body, companyId, salesOrderId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified salesOrder
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the salesOrder entity
   *
   * @param {string} [body.number] The number property for the salesOrder entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the salesOrder entity
   *
   * @param {date} [body.orderDate] The orderDate property for the salesOrder
   * entity
   *
   * @param {uuid} [body.customerId] The customerId property for the salesOrder
   * entity
   *
   * @param {string} [body.contactId] The contactId property for the salesOrder
   * entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * salesOrder entity
   *
   * @param {string} [body.customerName] The customerName property for the
   * salesOrder entity
   *
   * @param {string} [body.billToName] The billToName property for the salesOrder
   * entity
   *
   * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
   * salesOrder entity
   *
   * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
   * property for the salesOrder entity
   *
   * @param {string} [body.shipToName] The shipToName property for the salesOrder
   * entity
   *
   * @param {string} [body.shipToContact] The shipToContact property for the
   * salesOrder entity
   *
   * @param {object} [body.sellingPostalAddress]
   *
   * @param {object} [body.billingPostalAddress]
   *
   * @param {object} [body.shippingPostalAddress]
   *
   * @param {string} [body.shippingPostalAddress.street] The street property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.state] The state property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.countryLetterCode] The
   * countryLetterCode property for the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
   * property for the postaladdresstype entity
   *
   * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
   *
   * @param {array} [body.shippingPostalAddress.picture]
   *
   * @param {array} [body.shippingPostalAddress.defaultDimensions]
   *
   * @param {object} [body.shippingPostalAddress.currency]
   *
   * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
   * the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.code] The code property
   * for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.displayName] The
   * displayName property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
   * property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
   * The amountDecimalPlaces property for the currency entity
   *
   * @param {number}
   * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.shippingPostalAddress.paymentTerm]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
   * for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
   * property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
   * displayName property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
   * The dueDateCalculation property for the paymentTerm entity
   *
   * @param {string}
   * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.shippingPostalAddress.shipmentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
   * for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
   * property for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.shippingPostalAddress.paymentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
   * for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
   * property for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the salesOrder
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * salesOrder entity
   *
   * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
   * the salesOrder entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * salesOrder entity
   *
   * @param {string} [body.salesperson] The salesperson property for the
   * salesOrder entity
   *
   * @param {boolean} [body.partialShipping] The partialShipping property for the
   * salesOrder entity
   *
   * @param {date} [body.requestedDeliveryDate] The requestedDeliveryDate
   * property for the salesOrder entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesOrder entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesOrder entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the salesOrder entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesOrder entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the salesOrder entity
   *
   * @param {boolean} [body.fullyShipped] The fullyShipped property for the
   * salesOrder entity
   *
   * @param {string} [body.status] The status property for the salesOrder entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the salesOrder entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * salesOrder entity
   *
   * @param {string} [body.email] The email property for the salesOrder entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesOrderId id for salesOrder
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesOrder} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesOrder} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchSalesOrderById(body, companyId, salesOrderId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchSalesOrderById(body, companyId, salesOrderId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchSalesOrderById(body, companyId, salesOrderId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of salesOrderLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesOrderId id for salesOrder
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetSalesOrderLinesForSalesOrderOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesOrderLinesForSalesOrderWithHttpOperationResponse(companyId, salesOrderId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesOrderLinesForSalesOrder(companyId, salesOrderId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of salesOrderLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesOrderId id for salesOrder
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetSalesOrderLinesForSalesOrderOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetSalesOrderLinesForSalesOrderOKResponse}
   *                      for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesOrderLinesForSalesOrder(companyId, salesOrderId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesOrderLinesForSalesOrder(companyId, salesOrderId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesOrderLinesForSalesOrder(companyId, salesOrderId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a salesOrderLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesOrderLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesOrderLine entity
   *
   * @param {number} [body.sequence] The sequence property for the salesOrderLine
   * entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesOrderLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the salesOrderLine
   * entity
   *
   * @param {string} [body.lineType] The lineType property for the salesOrderLine
   * entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesOrderLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesOrderLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.quantity] The quantity property for the salesOrderLine
   * entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesOrderLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesOrderLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesOrderLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesOrderLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesOrderLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesOrderLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesOrderLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesOrderLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesOrderLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesOrderLine entity
   *
   * @param {number} [body.shippedQuantity] The shippedQuantity property for the
   * salesOrderLine entity
   *
   * @param {number} [body.invoicedQuantity] The invoicedQuantity property for
   * the salesOrderLine entity
   *
   * @param {number} [body.invoiceQuantity] The invoiceQuantity property for the
   * salesOrderLine entity
   *
   * @param {number} [body.shipQuantity] The shipQuantity property for the
   * salesOrderLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesOrderId id for salesOrder
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesOrderLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postSalesOrderLineForSalesOrderWithHttpOperationResponse(body, companyId, salesOrderId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postSalesOrderLineForSalesOrder(body, companyId, salesOrderId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a salesOrderLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesOrderLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesOrderLine entity
   *
   * @param {number} [body.sequence] The sequence property for the salesOrderLine
   * entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesOrderLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the salesOrderLine
   * entity
   *
   * @param {string} [body.lineType] The lineType property for the salesOrderLine
   * entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesOrderLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesOrderLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.quantity] The quantity property for the salesOrderLine
   * entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesOrderLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesOrderLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesOrderLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesOrderLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesOrderLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesOrderLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesOrderLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesOrderLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesOrderLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesOrderLine entity
   *
   * @param {number} [body.shippedQuantity] The shippedQuantity property for the
   * salesOrderLine entity
   *
   * @param {number} [body.invoicedQuantity] The invoicedQuantity property for
   * the salesOrderLine entity
   *
   * @param {number} [body.invoiceQuantity] The invoiceQuantity property for the
   * salesOrderLine entity
   *
   * @param {number} [body.shipQuantity] The shipQuantity property for the
   * salesOrderLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesOrderId id for salesOrder
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesOrderLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesOrderLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postSalesOrderLineForSalesOrder(body, companyId, salesOrderId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postSalesOrderLineForSalesOrder(body, companyId, salesOrderId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postSalesOrderLineForSalesOrder(body, companyId, salesOrderId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an salesOrderLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesOrderId id for salesOrder
   *
   * @param {string} salesOrderLineId id for salesOrderLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesOrderLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesOrderLineForSalesOrderByIdWithHttpOperationResponse(companyId, salesOrderId, salesOrderLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesOrderLineForSalesOrderById(companyId, salesOrderId, salesOrderLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an salesOrderLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesOrderId id for salesOrder
   *
   * @param {string} salesOrderLineId id for salesOrderLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesOrderLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesOrderLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesOrderLineForSalesOrderById(companyId, salesOrderId, salesOrderLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesOrderLineForSalesOrderById(companyId, salesOrderId, salesOrderLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesOrderLineForSalesOrderById(companyId, salesOrderId, salesOrderLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an salesOrderLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesOrderId id for salesOrder
   *
   * @param {string} salesOrderLineId id for salesOrderLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteSalesOrderLineForSalesOrderByIdByIdWithHttpOperationResponse(companyId, salesOrderId, salesOrderLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteSalesOrderLineForSalesOrderByIdById(companyId, salesOrderId, salesOrderLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an salesOrderLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesOrderId id for salesOrder
   *
   * @param {string} salesOrderLineId id for salesOrderLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteSalesOrderLineForSalesOrderByIdById(companyId, salesOrderId, salesOrderLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteSalesOrderLineForSalesOrderByIdById(companyId, salesOrderId, salesOrderLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteSalesOrderLineForSalesOrderByIdById(companyId, salesOrderId, salesOrderLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified salesOrderLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesOrderLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesOrderLine entity
   *
   * @param {number} [body.sequence] The sequence property for the salesOrderLine
   * entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesOrderLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the salesOrderLine
   * entity
   *
   * @param {string} [body.lineType] The lineType property for the salesOrderLine
   * entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesOrderLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesOrderLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.quantity] The quantity property for the salesOrderLine
   * entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesOrderLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesOrderLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesOrderLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesOrderLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesOrderLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesOrderLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesOrderLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesOrderLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesOrderLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesOrderLine entity
   *
   * @param {number} [body.shippedQuantity] The shippedQuantity property for the
   * salesOrderLine entity
   *
   * @param {number} [body.invoicedQuantity] The invoicedQuantity property for
   * the salesOrderLine entity
   *
   * @param {number} [body.invoiceQuantity] The invoiceQuantity property for the
   * salesOrderLine entity
   *
   * @param {number} [body.shipQuantity] The shipQuantity property for the
   * salesOrderLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesOrderId id for salesOrder
   *
   * @param {string} salesOrderLineId id for salesOrderLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesOrderLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchSalesOrderLineForSalesOrderByIdByIdWithHttpOperationResponse(body, companyId, salesOrderId, salesOrderLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchSalesOrderLineForSalesOrderByIdById(body, companyId, salesOrderId, salesOrderLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified salesOrderLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesOrderLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesOrderLine entity
   *
   * @param {number} [body.sequence] The sequence property for the salesOrderLine
   * entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesOrderLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the salesOrderLine
   * entity
   *
   * @param {string} [body.lineType] The lineType property for the salesOrderLine
   * entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesOrderLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesOrderLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.quantity] The quantity property for the salesOrderLine
   * entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesOrderLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesOrderLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesOrderLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesOrderLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesOrderLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesOrderLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesOrderLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesOrderLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesOrderLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesOrderLine entity
   *
   * @param {number} [body.shippedQuantity] The shippedQuantity property for the
   * salesOrderLine entity
   *
   * @param {number} [body.invoicedQuantity] The invoicedQuantity property for
   * the salesOrderLine entity
   *
   * @param {number} [body.invoiceQuantity] The invoiceQuantity property for the
   * salesOrderLine entity
   *
   * @param {number} [body.shipQuantity] The shipQuantity property for the
   * salesOrderLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesOrderId id for salesOrder
   *
   * @param {string} salesOrderLineId id for salesOrderLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesOrderLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesOrderLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchSalesOrderLineForSalesOrderByIdById(body, companyId, salesOrderId, salesOrderLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchSalesOrderLineForSalesOrderByIdById(body, companyId, salesOrderId, salesOrderLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchSalesOrderLineForSalesOrderByIdById(body, companyId, salesOrderId, salesOrderLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of salesOrderLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetSalesOrderLinesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesOrderLinesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesOrderLines(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of salesOrderLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetSalesOrderLinesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetSalesOrderLinesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesOrderLines(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesOrderLines(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesOrderLines(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a salesOrderLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesOrderLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesOrderLine entity
   *
   * @param {number} [body.sequence] The sequence property for the salesOrderLine
   * entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesOrderLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the salesOrderLine
   * entity
   *
   * @param {string} [body.lineType] The lineType property for the salesOrderLine
   * entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesOrderLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesOrderLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.quantity] The quantity property for the salesOrderLine
   * entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesOrderLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesOrderLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesOrderLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesOrderLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesOrderLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesOrderLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesOrderLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesOrderLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesOrderLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesOrderLine entity
   *
   * @param {number} [body.shippedQuantity] The shippedQuantity property for the
   * salesOrderLine entity
   *
   * @param {number} [body.invoicedQuantity] The invoicedQuantity property for
   * the salesOrderLine entity
   *
   * @param {number} [body.invoiceQuantity] The invoiceQuantity property for the
   * salesOrderLine entity
   *
   * @param {number} [body.shipQuantity] The shipQuantity property for the
   * salesOrderLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesOrderLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postSalesOrderLineWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postSalesOrderLine(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a salesOrderLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesOrderLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesOrderLine entity
   *
   * @param {number} [body.sequence] The sequence property for the salesOrderLine
   * entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesOrderLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the salesOrderLine
   * entity
   *
   * @param {string} [body.lineType] The lineType property for the salesOrderLine
   * entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesOrderLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesOrderLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.quantity] The quantity property for the salesOrderLine
   * entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesOrderLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesOrderLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesOrderLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesOrderLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesOrderLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesOrderLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesOrderLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesOrderLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesOrderLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesOrderLine entity
   *
   * @param {number} [body.shippedQuantity] The shippedQuantity property for the
   * salesOrderLine entity
   *
   * @param {number} [body.invoicedQuantity] The invoicedQuantity property for
   * the salesOrderLine entity
   *
   * @param {number} [body.invoiceQuantity] The invoiceQuantity property for the
   * salesOrderLine entity
   *
   * @param {number} [body.shipQuantity] The shipQuantity property for the
   * salesOrderLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesOrderLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesOrderLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postSalesOrderLine(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postSalesOrderLine(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postSalesOrderLine(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an salesOrderLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesOrderLineId id for salesOrderLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesOrderLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesOrderLineByIdWithHttpOperationResponse(companyId, salesOrderLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesOrderLineById(companyId, salesOrderLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an salesOrderLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesOrderLineId id for salesOrderLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesOrderLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesOrderLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesOrderLineById(companyId, salesOrderLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesOrderLineById(companyId, salesOrderLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesOrderLineById(companyId, salesOrderLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an salesOrderLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesOrderLineId id for salesOrderLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteSalesOrderLineByIdWithHttpOperationResponse(companyId, salesOrderLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteSalesOrderLineById(companyId, salesOrderLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an salesOrderLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesOrderLineId id for salesOrderLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteSalesOrderLineById(companyId, salesOrderLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteSalesOrderLineById(companyId, salesOrderLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteSalesOrderLineById(companyId, salesOrderLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified salesOrderLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesOrderLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesOrderLine entity
   *
   * @param {number} [body.sequence] The sequence property for the salesOrderLine
   * entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesOrderLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the salesOrderLine
   * entity
   *
   * @param {string} [body.lineType] The lineType property for the salesOrderLine
   * entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesOrderLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesOrderLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.quantity] The quantity property for the salesOrderLine
   * entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesOrderLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesOrderLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesOrderLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesOrderLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesOrderLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesOrderLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesOrderLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesOrderLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesOrderLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesOrderLine entity
   *
   * @param {number} [body.shippedQuantity] The shippedQuantity property for the
   * salesOrderLine entity
   *
   * @param {number} [body.invoicedQuantity] The invoicedQuantity property for
   * the salesOrderLine entity
   *
   * @param {number} [body.invoiceQuantity] The invoiceQuantity property for the
   * salesOrderLine entity
   *
   * @param {number} [body.shipQuantity] The shipQuantity property for the
   * salesOrderLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesOrderLineId id for salesOrderLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesOrderLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchSalesOrderLineByIdWithHttpOperationResponse(body, companyId, salesOrderLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchSalesOrderLineById(body, companyId, salesOrderLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified salesOrderLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesOrderLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesOrderLine entity
   *
   * @param {number} [body.sequence] The sequence property for the salesOrderLine
   * entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesOrderLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the salesOrderLine
   * entity
   *
   * @param {string} [body.lineType] The lineType property for the salesOrderLine
   * entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesOrderLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesOrderLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.quantity] The quantity property for the salesOrderLine
   * entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesOrderLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesOrderLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesOrderLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesOrderLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesOrderLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesOrderLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesOrderLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesOrderLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesOrderLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesOrderLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesOrderLine entity
   *
   * @param {number} [body.shippedQuantity] The shippedQuantity property for the
   * salesOrderLine entity
   *
   * @param {number} [body.invoicedQuantity] The invoicedQuantity property for
   * the salesOrderLine entity
   *
   * @param {number} [body.invoiceQuantity] The invoiceQuantity property for the
   * salesOrderLine entity
   *
   * @param {number} [body.shipQuantity] The shipQuantity property for the
   * salesOrderLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesOrderLineId id for salesOrderLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesOrderLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesOrderLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchSalesOrderLineById(body, companyId, salesOrderLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchSalesOrderLineById(body, companyId, salesOrderLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchSalesOrderLineById(body, companyId, salesOrderLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of retainedEarningsStatement
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetRetainedEarningsStatementOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getRetainedEarningsStatementWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getRetainedEarningsStatement(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of retainedEarningsStatement
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetRetainedEarningsStatementOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetRetainedEarningsStatementOKResponse} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getRetainedEarningsStatement(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getRetainedEarningsStatement(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getRetainedEarningsStatement(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an
   * retainedEarningsStatement object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {number} retainedEarningsStatementLineNumber lineNumber for
   * retainedEarningsStatement
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<RetainedEarningsStatement>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getRetainedEarningsStatementByLineNumberWithHttpOperationResponse(companyId, retainedEarningsStatementLineNumber, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getRetainedEarningsStatementByLineNumber(companyId, retainedEarningsStatementLineNumber, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an
   * retainedEarningsStatement object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {number} retainedEarningsStatementLineNumber lineNumber for
   * retainedEarningsStatement
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {RetainedEarningsStatement} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link RetainedEarningsStatement} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getRetainedEarningsStatementByLineNumber(companyId, retainedEarningsStatementLineNumber, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getRetainedEarningsStatementByLineNumber(companyId, retainedEarningsStatementLineNumber, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getRetainedEarningsStatementByLineNumber(companyId, retainedEarningsStatementLineNumber, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of unitsOfMeasure
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetUnitsOfMeasureOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getUnitsOfMeasureWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getUnitsOfMeasure(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of unitsOfMeasure
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetUnitsOfMeasureOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetUnitsOfMeasureOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getUnitsOfMeasure(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getUnitsOfMeasure(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getUnitsOfMeasure(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a unitOfMeasure in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the unitOfMeasure entity
   *
   * @param {string} [body.code] The code property for the unitOfMeasure entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * unitOfMeasure entity
   *
   * @param {string} [body.internationalStandardCode] The
   * internationalStandardCode property for the unitOfMeasure entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the unitOfMeasure entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<UnitOfMeasure>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postUnitOfMeasureWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postUnitOfMeasure(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a unitOfMeasure in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the unitOfMeasure entity
   *
   * @param {string} [body.code] The code property for the unitOfMeasure entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * unitOfMeasure entity
   *
   * @param {string} [body.internationalStandardCode] The
   * internationalStandardCode property for the unitOfMeasure entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the unitOfMeasure entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {UnitOfMeasure} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link UnitOfMeasure} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postUnitOfMeasure(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postUnitOfMeasure(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postUnitOfMeasure(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an unitOfMeasure
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} unitOfMeasureId id for unitOfMeasure
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<UnitOfMeasure>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getUnitOfMeasureByIdWithHttpOperationResponse(companyId, unitOfMeasureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getUnitOfMeasureById(companyId, unitOfMeasureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an unitOfMeasure
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} unitOfMeasureId id for unitOfMeasure
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {UnitOfMeasure} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link UnitOfMeasure} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getUnitOfMeasureById(companyId, unitOfMeasureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getUnitOfMeasureById(companyId, unitOfMeasureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getUnitOfMeasureById(companyId, unitOfMeasureId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an unitOfMeasure in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} unitOfMeasureId id for unitOfMeasure
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteUnitOfMeasureByIdWithHttpOperationResponse(companyId, unitOfMeasureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteUnitOfMeasureById(companyId, unitOfMeasureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an unitOfMeasure in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} unitOfMeasureId id for unitOfMeasure
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteUnitOfMeasureById(companyId, unitOfMeasureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteUnitOfMeasureById(companyId, unitOfMeasureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteUnitOfMeasureById(companyId, unitOfMeasureId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified unitOfMeasure
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the unitOfMeasure entity
   *
   * @param {string} [body.code] The code property for the unitOfMeasure entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * unitOfMeasure entity
   *
   * @param {string} [body.internationalStandardCode] The
   * internationalStandardCode property for the unitOfMeasure entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the unitOfMeasure entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} unitOfMeasureId id for unitOfMeasure
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<UnitOfMeasure>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchUnitOfMeasureByIdWithHttpOperationResponse(body, companyId, unitOfMeasureId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchUnitOfMeasureById(body, companyId, unitOfMeasureId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified unitOfMeasure
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the unitOfMeasure entity
   *
   * @param {string} [body.code] The code property for the unitOfMeasure entity
   *
   * @param {string} [body.displayName] The displayName property for the
   * unitOfMeasure entity
   *
   * @param {string} [body.internationalStandardCode] The
   * internationalStandardCode property for the unitOfMeasure entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the unitOfMeasure entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} unitOfMeasureId id for unitOfMeasure
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {UnitOfMeasure} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link UnitOfMeasure} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchUnitOfMeasureById(body, companyId, unitOfMeasureId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchUnitOfMeasureById(body, companyId, unitOfMeasureId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchUnitOfMeasureById(body, companyId, unitOfMeasureId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of agedAccountsReceivable
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetAgedAccountsReceivableOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getAgedAccountsReceivableWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getAgedAccountsReceivable(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of agedAccountsReceivable
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetAgedAccountsReceivableOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetAgedAccountsReceivableOKResponse} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getAgedAccountsReceivable(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getAgedAccountsReceivable(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getAgedAccountsReceivable(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an
   * agedAccountsReceivable object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} agedAccountsReceivableCustomerId customerId for
   * agedAccountsReceivable
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<AgedAccountsReceivable>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getAgedAccountsReceivableByCustomerIdWithHttpOperationResponse(companyId, agedAccountsReceivableCustomerId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getAgedAccountsReceivableByCustomerId(companyId, agedAccountsReceivableCustomerId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an
   * agedAccountsReceivable object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} agedAccountsReceivableCustomerId customerId for
   * agedAccountsReceivable
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {AgedAccountsReceivable} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link AgedAccountsReceivable} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getAgedAccountsReceivableByCustomerId(companyId, agedAccountsReceivableCustomerId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getAgedAccountsReceivableByCustomerId(companyId, agedAccountsReceivableCustomerId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getAgedAccountsReceivableByCustomerId(companyId, agedAccountsReceivableCustomerId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of agedAccountsPayable
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetAgedAccountsPayableOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getAgedAccountsPayableWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getAgedAccountsPayable(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of agedAccountsPayable
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetAgedAccountsPayableOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetAgedAccountsPayableOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getAgedAccountsPayable(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getAgedAccountsPayable(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getAgedAccountsPayable(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an agedAccountsPayable
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} agedAccountsPayableVendorId vendorId for agedAccountsPayable
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<AgedAccountsPayable>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getAgedAccountsPayableByVendorIdWithHttpOperationResponse(companyId, agedAccountsPayableVendorId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getAgedAccountsPayableByVendorId(companyId, agedAccountsPayableVendorId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an agedAccountsPayable
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} agedAccountsPayableVendorId vendorId for agedAccountsPayable
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {AgedAccountsPayable} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link AgedAccountsPayable} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getAgedAccountsPayableByVendorId(companyId, agedAccountsPayableVendorId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getAgedAccountsPayableByVendorId(companyId, agedAccountsPayableVendorId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getAgedAccountsPayableByVendorId(companyId, agedAccountsPayableVendorId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of balanceSheet
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetBalanceSheetOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getBalanceSheetWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getBalanceSheet(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of balanceSheet
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetBalanceSheetOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetBalanceSheetOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getBalanceSheet(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getBalanceSheet(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getBalanceSheet(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an balanceSheet object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {number} balanceSheetLineNumber lineNumber for balanceSheet
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BalanceSheet>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getBalanceSheetByLineNumberWithHttpOperationResponse(companyId, balanceSheetLineNumber, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getBalanceSheetByLineNumber(companyId, balanceSheetLineNumber, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an balanceSheet object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {number} balanceSheetLineNumber lineNumber for balanceSheet
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BalanceSheet} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BalanceSheet} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getBalanceSheetByLineNumber(companyId, balanceSheetLineNumber, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getBalanceSheetByLineNumber(companyId, balanceSheetLineNumber, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getBalanceSheetByLineNumber(companyId, balanceSheetLineNumber, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of trialBalance
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetTrialBalanceOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getTrialBalanceWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getTrialBalance(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of trialBalance
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetTrialBalanceOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetTrialBalanceOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getTrialBalance(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getTrialBalance(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getTrialBalance(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an trialBalance object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} trialBalanceNumber number for trialBalance
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TrialBalance>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getTrialBalanceByNumberWithHttpOperationResponse(companyId, trialBalanceNumber, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getTrialBalanceByNumber(companyId, trialBalanceNumber, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an trialBalance object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} trialBalanceNumber number for trialBalance
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {TrialBalance} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TrialBalance} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getTrialBalanceByNumber(companyId, trialBalanceNumber, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getTrialBalanceByNumber(companyId, trialBalanceNumber, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getTrialBalanceByNumber(companyId, trialBalanceNumber, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of incomeStatement
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetIncomeStatementOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getIncomeStatementWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getIncomeStatement(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of incomeStatement
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetIncomeStatementOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetIncomeStatementOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getIncomeStatement(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getIncomeStatement(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getIncomeStatement(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an incomeStatement
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {number} incomeStatementLineNumber lineNumber for incomeStatement
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<IncomeStatement>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getIncomeStatementByLineNumberWithHttpOperationResponse(companyId, incomeStatementLineNumber, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getIncomeStatementByLineNumber(companyId, incomeStatementLineNumber, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an incomeStatement
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {number} incomeStatementLineNumber lineNumber for incomeStatement
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {IncomeStatement} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link IncomeStatement} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getIncomeStatementByLineNumber(companyId, incomeStatementLineNumber, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getIncomeStatementByLineNumber(companyId, incomeStatementLineNumber, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getIncomeStatementByLineNumber(companyId, incomeStatementLineNumber, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of taxAreas
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetTaxAreasOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getTaxAreasWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getTaxAreas(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of taxAreas
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetTaxAreasOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetTaxAreasOKResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getTaxAreas(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getTaxAreas(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getTaxAreas(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a taxArea in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the taxArea entity
   *
   * @param {string} [body.code] The code property for the taxArea entity
   *
   * @param {string} [body.displayName] The displayName property for the taxArea
   * entity
   *
   * @param {string} [body.taxType] The taxType property for the taxArea entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the taxArea entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TaxArea>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postTaxAreaWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postTaxArea(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a taxArea in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the taxArea entity
   *
   * @param {string} [body.code] The code property for the taxArea entity
   *
   * @param {string} [body.displayName] The displayName property for the taxArea
   * entity
   *
   * @param {string} [body.taxType] The taxType property for the taxArea entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the taxArea entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {TaxArea} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TaxArea} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postTaxArea(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postTaxArea(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postTaxArea(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an taxArea object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} taxAreaId id for taxArea
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TaxArea>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getTaxAreaByIdWithHttpOperationResponse(companyId, taxAreaId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getTaxAreaById(companyId, taxAreaId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an taxArea object for
   * Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} taxAreaId id for taxArea
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {TaxArea} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TaxArea} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getTaxAreaById(companyId, taxAreaId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getTaxAreaById(companyId, taxAreaId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getTaxAreaById(companyId, taxAreaId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an taxArea in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} taxAreaId id for taxArea
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteTaxAreaByIdWithHttpOperationResponse(companyId, taxAreaId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteTaxAreaById(companyId, taxAreaId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an taxArea in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} taxAreaId id for taxArea
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteTaxAreaById(companyId, taxAreaId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteTaxAreaById(companyId, taxAreaId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteTaxAreaById(companyId, taxAreaId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified taxArea
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the taxArea entity
   *
   * @param {string} [body.code] The code property for the taxArea entity
   *
   * @param {string} [body.displayName] The displayName property for the taxArea
   * entity
   *
   * @param {string} [body.taxType] The taxType property for the taxArea entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the taxArea entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} taxAreaId id for taxArea
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TaxArea>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchTaxAreaByIdWithHttpOperationResponse(body, companyId, taxAreaId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchTaxAreaById(body, companyId, taxAreaId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified taxArea
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the taxArea entity
   *
   * @param {string} [body.code] The code property for the taxArea entity
   *
   * @param {string} [body.displayName] The displayName property for the taxArea
   * entity
   *
   * @param {string} [body.taxType] The taxType property for the taxArea entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the taxArea entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} taxAreaId id for taxArea
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {TaxArea} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TaxArea} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchTaxAreaById(body, companyId, taxAreaId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchTaxAreaById(body, companyId, taxAreaId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchTaxAreaById(body, companyId, taxAreaId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of salesQuotes
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetSalesQuotesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesQuotesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesQuotes(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of salesQuotes
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetSalesQuotesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetSalesQuotesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesQuotes(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesQuotes(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesQuotes(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a salesQuote in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the salesQuote entity
   *
   * @param {string} [body.number] The number property for the salesQuote entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the salesQuote entity
   *
   * @param {date} [body.documentDate] The documentDate property for the
   * salesQuote entity
   *
   * @param {date} [body.dueDate] The dueDate property for the salesQuote entity
   *
   * @param {uuid} [body.customerId] The customerId property for the salesQuote
   * entity
   *
   * @param {string} [body.contactId] The contactId property for the salesQuote
   * entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * salesQuote entity
   *
   * @param {string} [body.customerName] The customerName property for the
   * salesQuote entity
   *
   * @param {string} [body.billToName] The billToName property for the salesQuote
   * entity
   *
   * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
   * salesQuote entity
   *
   * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
   * property for the salesQuote entity
   *
   * @param {string} [body.shipToName] The shipToName property for the salesQuote
   * entity
   *
   * @param {string} [body.shipToContact] The shipToContact property for the
   * salesQuote entity
   *
   * @param {object} [body.sellingPostalAddress]
   *
   * @param {object} [body.billingPostalAddress]
   *
   * @param {object} [body.shippingPostalAddress]
   *
   * @param {string} [body.shippingPostalAddress.street] The street property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.state] The state property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.countryLetterCode] The
   * countryLetterCode property for the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
   * property for the postaladdresstype entity
   *
   * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
   *
   * @param {array} [body.shippingPostalAddress.picture]
   *
   * @param {array} [body.shippingPostalAddress.defaultDimensions]
   *
   * @param {object} [body.shippingPostalAddress.currency]
   *
   * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
   * the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.code] The code property
   * for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.displayName] The
   * displayName property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
   * property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
   * The amountDecimalPlaces property for the currency entity
   *
   * @param {number}
   * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.shippingPostalAddress.paymentTerm]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
   * for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
   * property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
   * displayName property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
   * The dueDateCalculation property for the paymentTerm entity
   *
   * @param {string}
   * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.shippingPostalAddress.shipmentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
   * for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
   * property for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.shippingPostalAddress.paymentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
   * for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
   * property for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the salesQuote
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * salesQuote entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * salesQuote entity
   *
   * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
   * salesQuote entity
   *
   * @param {string} [body.salesperson] The salesperson property for the
   * salesQuote entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesQuote entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the salesQuote entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesQuote entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the salesQuote entity
   *
   * @param {string} [body.status] The status property for the salesQuote entity
   *
   * @param {date} [body.sentDate] The sentDate property for the salesQuote
   * entity
   *
   * @param {date} [body.validUntilDate] The validUntilDate property for the
   * salesQuote entity
   *
   * @param {date} [body.acceptedDate] The acceptedDate property for the
   * salesQuote entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the salesQuote entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * salesQuote entity
   *
   * @param {string} [body.email] The email property for the salesQuote entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesQuote>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postSalesQuoteWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postSalesQuote(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a salesQuote in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the salesQuote entity
   *
   * @param {string} [body.number] The number property for the salesQuote entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the salesQuote entity
   *
   * @param {date} [body.documentDate] The documentDate property for the
   * salesQuote entity
   *
   * @param {date} [body.dueDate] The dueDate property for the salesQuote entity
   *
   * @param {uuid} [body.customerId] The customerId property for the salesQuote
   * entity
   *
   * @param {string} [body.contactId] The contactId property for the salesQuote
   * entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * salesQuote entity
   *
   * @param {string} [body.customerName] The customerName property for the
   * salesQuote entity
   *
   * @param {string} [body.billToName] The billToName property for the salesQuote
   * entity
   *
   * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
   * salesQuote entity
   *
   * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
   * property for the salesQuote entity
   *
   * @param {string} [body.shipToName] The shipToName property for the salesQuote
   * entity
   *
   * @param {string} [body.shipToContact] The shipToContact property for the
   * salesQuote entity
   *
   * @param {object} [body.sellingPostalAddress]
   *
   * @param {object} [body.billingPostalAddress]
   *
   * @param {object} [body.shippingPostalAddress]
   *
   * @param {string} [body.shippingPostalAddress.street] The street property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.state] The state property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.countryLetterCode] The
   * countryLetterCode property for the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
   * property for the postaladdresstype entity
   *
   * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
   *
   * @param {array} [body.shippingPostalAddress.picture]
   *
   * @param {array} [body.shippingPostalAddress.defaultDimensions]
   *
   * @param {object} [body.shippingPostalAddress.currency]
   *
   * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
   * the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.code] The code property
   * for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.displayName] The
   * displayName property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
   * property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
   * The amountDecimalPlaces property for the currency entity
   *
   * @param {number}
   * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.shippingPostalAddress.paymentTerm]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
   * for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
   * property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
   * displayName property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
   * The dueDateCalculation property for the paymentTerm entity
   *
   * @param {string}
   * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.shippingPostalAddress.shipmentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
   * for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
   * property for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.shippingPostalAddress.paymentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
   * for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
   * property for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the salesQuote
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * salesQuote entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * salesQuote entity
   *
   * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
   * salesQuote entity
   *
   * @param {string} [body.salesperson] The salesperson property for the
   * salesQuote entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesQuote entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the salesQuote entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesQuote entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the salesQuote entity
   *
   * @param {string} [body.status] The status property for the salesQuote entity
   *
   * @param {date} [body.sentDate] The sentDate property for the salesQuote
   * entity
   *
   * @param {date} [body.validUntilDate] The validUntilDate property for the
   * salesQuote entity
   *
   * @param {date} [body.acceptedDate] The acceptedDate property for the
   * salesQuote entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the salesQuote entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * salesQuote entity
   *
   * @param {string} [body.email] The email property for the salesQuote entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesQuote} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesQuote} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postSalesQuote(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postSalesQuote(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postSalesQuote(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an salesQuote object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesQuote>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesQuoteByIdWithHttpOperationResponse(companyId, salesQuoteId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesQuoteById(companyId, salesQuoteId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an salesQuote object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesQuote} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesQuote} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesQuoteById(companyId, salesQuoteId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesQuoteById(companyId, salesQuoteId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesQuoteById(companyId, salesQuoteId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an salesQuote in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteSalesQuoteByIdWithHttpOperationResponse(companyId, salesQuoteId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteSalesQuoteById(companyId, salesQuoteId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an salesQuote in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteSalesQuoteById(companyId, salesQuoteId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteSalesQuoteById(companyId, salesQuoteId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteSalesQuoteById(companyId, salesQuoteId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified salesQuote
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the salesQuote entity
   *
   * @param {string} [body.number] The number property for the salesQuote entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the salesQuote entity
   *
   * @param {date} [body.documentDate] The documentDate property for the
   * salesQuote entity
   *
   * @param {date} [body.dueDate] The dueDate property for the salesQuote entity
   *
   * @param {uuid} [body.customerId] The customerId property for the salesQuote
   * entity
   *
   * @param {string} [body.contactId] The contactId property for the salesQuote
   * entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * salesQuote entity
   *
   * @param {string} [body.customerName] The customerName property for the
   * salesQuote entity
   *
   * @param {string} [body.billToName] The billToName property for the salesQuote
   * entity
   *
   * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
   * salesQuote entity
   *
   * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
   * property for the salesQuote entity
   *
   * @param {string} [body.shipToName] The shipToName property for the salesQuote
   * entity
   *
   * @param {string} [body.shipToContact] The shipToContact property for the
   * salesQuote entity
   *
   * @param {object} [body.sellingPostalAddress]
   *
   * @param {object} [body.billingPostalAddress]
   *
   * @param {object} [body.shippingPostalAddress]
   *
   * @param {string} [body.shippingPostalAddress.street] The street property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.state] The state property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.countryLetterCode] The
   * countryLetterCode property for the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
   * property for the postaladdresstype entity
   *
   * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
   *
   * @param {array} [body.shippingPostalAddress.picture]
   *
   * @param {array} [body.shippingPostalAddress.defaultDimensions]
   *
   * @param {object} [body.shippingPostalAddress.currency]
   *
   * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
   * the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.code] The code property
   * for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.displayName] The
   * displayName property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
   * property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
   * The amountDecimalPlaces property for the currency entity
   *
   * @param {number}
   * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.shippingPostalAddress.paymentTerm]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
   * for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
   * property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
   * displayName property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
   * The dueDateCalculation property for the paymentTerm entity
   *
   * @param {string}
   * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.shippingPostalAddress.shipmentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
   * for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
   * property for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.shippingPostalAddress.paymentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
   * for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
   * property for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the salesQuote
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * salesQuote entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * salesQuote entity
   *
   * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
   * salesQuote entity
   *
   * @param {string} [body.salesperson] The salesperson property for the
   * salesQuote entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesQuote entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the salesQuote entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesQuote entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the salesQuote entity
   *
   * @param {string} [body.status] The status property for the salesQuote entity
   *
   * @param {date} [body.sentDate] The sentDate property for the salesQuote
   * entity
   *
   * @param {date} [body.validUntilDate] The validUntilDate property for the
   * salesQuote entity
   *
   * @param {date} [body.acceptedDate] The acceptedDate property for the
   * salesQuote entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the salesQuote entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * salesQuote entity
   *
   * @param {string} [body.email] The email property for the salesQuote entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesQuote>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchSalesQuoteByIdWithHttpOperationResponse(body, companyId, salesQuoteId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchSalesQuoteById(body, companyId, salesQuoteId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified salesQuote
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the salesQuote entity
   *
   * @param {string} [body.number] The number property for the salesQuote entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the salesQuote entity
   *
   * @param {date} [body.documentDate] The documentDate property for the
   * salesQuote entity
   *
   * @param {date} [body.dueDate] The dueDate property for the salesQuote entity
   *
   * @param {uuid} [body.customerId] The customerId property for the salesQuote
   * entity
   *
   * @param {string} [body.contactId] The contactId property for the salesQuote
   * entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * salesQuote entity
   *
   * @param {string} [body.customerName] The customerName property for the
   * salesQuote entity
   *
   * @param {string} [body.billToName] The billToName property for the salesQuote
   * entity
   *
   * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
   * salesQuote entity
   *
   * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
   * property for the salesQuote entity
   *
   * @param {string} [body.shipToName] The shipToName property for the salesQuote
   * entity
   *
   * @param {string} [body.shipToContact] The shipToContact property for the
   * salesQuote entity
   *
   * @param {object} [body.sellingPostalAddress]
   *
   * @param {object} [body.billingPostalAddress]
   *
   * @param {object} [body.shippingPostalAddress]
   *
   * @param {string} [body.shippingPostalAddress.street] The street property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.state] The state property for
   * the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.countryLetterCode] The
   * countryLetterCode property for the postaladdresstype entity
   *
   * @param {string} [body.shippingPostalAddress.postalCode] The postalCode
   * property for the postaladdresstype entity
   *
   * @param {array} [body.shippingPostalAddress.customerFinancialDetails]
   *
   * @param {array} [body.shippingPostalAddress.picture]
   *
   * @param {array} [body.shippingPostalAddress.defaultDimensions]
   *
   * @param {object} [body.shippingPostalAddress.currency]
   *
   * @param {uuid} [body.shippingPostalAddress.currency.id] The id property for
   * the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.code] The code property
   * for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.displayName] The
   * displayName property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.symbol] The symbol
   * property for the currency entity
   *
   * @param {string} [body.shippingPostalAddress.currency.amountDecimalPlaces]
   * The amountDecimalPlaces property for the currency entity
   *
   * @param {number}
   * [body.shippingPostalAddress.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.shippingPostalAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.shippingPostalAddress.paymentTerm]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentTerm.id] The id property
   * for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.code] The code
   * property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.displayName] The
   * displayName property for the paymentTerm entity
   *
   * @param {string} [body.shippingPostalAddress.paymentTerm.dueDateCalculation]
   * The dueDateCalculation property for the paymentTerm entity
   *
   * @param {string}
   * [body.shippingPostalAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.shippingPostalAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.shippingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.shippingPostalAddress.paymentTerm.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.shippingPostalAddress.shipmentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.shipmentMethod.id] The id property
   * for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.code] The code
   * property for the shipmentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.shippingPostalAddress.paymentMethod]
   *
   * @param {uuid} [body.shippingPostalAddress.paymentMethod.id] The id property
   * for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.code] The code
   * property for the paymentMethod entity
   *
   * @param {string} [body.shippingPostalAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date}
   * [body.shippingPostalAddress.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the salesQuote
   * entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * salesQuote entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * salesQuote entity
   *
   * @param {uuid} [body.shipmentMethodId] The shipmentMethodId property for the
   * salesQuote entity
   *
   * @param {string} [body.salesperson] The salesperson property for the
   * salesQuote entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesQuote entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the salesQuote entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesQuote entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the salesQuote entity
   *
   * @param {string} [body.status] The status property for the salesQuote entity
   *
   * @param {date} [body.sentDate] The sentDate property for the salesQuote
   * entity
   *
   * @param {date} [body.validUntilDate] The validUntilDate property for the
   * salesQuote entity
   *
   * @param {date} [body.acceptedDate] The acceptedDate property for the
   * salesQuote entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the salesQuote entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * salesQuote entity
   *
   * @param {string} [body.email] The email property for the salesQuote entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesQuote} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesQuote} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchSalesQuoteById(body, companyId, salesQuoteId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchSalesQuoteById(body, companyId, salesQuoteId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchSalesQuoteById(body, companyId, salesQuoteId, options, optionalCallback);
    }
  }

  /**
   * @summary Performs the makeInvoice action for salesQuotes entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  makeInvoiceActionSalesQuotesWithHttpOperationResponse(companyId, salesQuoteId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._makeInvoiceActionSalesQuotes(companyId, salesQuoteId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Performs the makeInvoice action for salesQuotes entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  makeInvoiceActionSalesQuotes(companyId, salesQuoteId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._makeInvoiceActionSalesQuotes(companyId, salesQuoteId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._makeInvoiceActionSalesQuotes(companyId, salesQuoteId, options, optionalCallback);
    }
  }

  /**
   * @summary Performs the send action for salesQuotes entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  sendActionSalesQuotesWithHttpOperationResponse(companyId, salesQuoteId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._sendActionSalesQuotes(companyId, salesQuoteId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Performs the send action for salesQuotes entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  sendActionSalesQuotes(companyId, salesQuoteId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._sendActionSalesQuotes(companyId, salesQuoteId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._sendActionSalesQuotes(companyId, salesQuoteId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of salesQuoteLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetSalesQuoteLinesForSalesQuoteOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesQuoteLinesForSalesQuoteWithHttpOperationResponse(companyId, salesQuoteId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesQuoteLinesForSalesQuote(companyId, salesQuoteId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of salesQuoteLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetSalesQuoteLinesForSalesQuoteOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetSalesQuoteLinesForSalesQuoteOKResponse}
   *                      for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesQuoteLinesForSalesQuote(companyId, salesQuoteId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesQuoteLinesForSalesQuote(companyId, salesQuoteId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesQuoteLinesForSalesQuote(companyId, salesQuoteId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a salesQuoteLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesQuoteLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.sequence] The sequence property for the salesQuoteLine
   * entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesQuoteLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the salesQuoteLine
   * entity
   *
   * @param {string} [body.lineType] The lineType property for the salesQuoteLine
   * entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesQuoteLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesQuoteLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.quantity] The quantity property for the salesQuoteLine
   * entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesQuoteLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesQuoteLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesQuoteLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesQuoteLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesQuoteLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesQuoteLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesQuoteLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postSalesQuoteLineForSalesQuoteWithHttpOperationResponse(body, companyId, salesQuoteId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postSalesQuoteLineForSalesQuote(body, companyId, salesQuoteId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a salesQuoteLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesQuoteLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.sequence] The sequence property for the salesQuoteLine
   * entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesQuoteLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the salesQuoteLine
   * entity
   *
   * @param {string} [body.lineType] The lineType property for the salesQuoteLine
   * entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesQuoteLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesQuoteLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.quantity] The quantity property for the salesQuoteLine
   * entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesQuoteLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesQuoteLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesQuoteLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesQuoteLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesQuoteLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesQuoteLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesQuoteLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesQuoteLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postSalesQuoteLineForSalesQuote(body, companyId, salesQuoteId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postSalesQuoteLineForSalesQuote(body, companyId, salesQuoteId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postSalesQuoteLineForSalesQuote(body, companyId, salesQuoteId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an salesQuoteLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {string} salesQuoteLineId id for salesQuoteLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesQuoteLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesQuoteLineForSalesQuoteByIdWithHttpOperationResponse(companyId, salesQuoteId, salesQuoteLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesQuoteLineForSalesQuoteById(companyId, salesQuoteId, salesQuoteLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an salesQuoteLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {string} salesQuoteLineId id for salesQuoteLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesQuoteLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesQuoteLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesQuoteLineForSalesQuoteById(companyId, salesQuoteId, salesQuoteLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesQuoteLineForSalesQuoteById(companyId, salesQuoteId, salesQuoteLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesQuoteLineForSalesQuoteById(companyId, salesQuoteId, salesQuoteLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an salesQuoteLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {string} salesQuoteLineId id for salesQuoteLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteSalesQuoteLineForSalesQuoteByIdByIdWithHttpOperationResponse(companyId, salesQuoteId, salesQuoteLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteSalesQuoteLineForSalesQuoteByIdById(companyId, salesQuoteId, salesQuoteLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an salesQuoteLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {string} salesQuoteLineId id for salesQuoteLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteSalesQuoteLineForSalesQuoteByIdById(companyId, salesQuoteId, salesQuoteLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteSalesQuoteLineForSalesQuoteByIdById(companyId, salesQuoteId, salesQuoteLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteSalesQuoteLineForSalesQuoteByIdById(companyId, salesQuoteId, salesQuoteLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified salesQuoteLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesQuoteLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.sequence] The sequence property for the salesQuoteLine
   * entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesQuoteLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the salesQuoteLine
   * entity
   *
   * @param {string} [body.lineType] The lineType property for the salesQuoteLine
   * entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesQuoteLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesQuoteLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.quantity] The quantity property for the salesQuoteLine
   * entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesQuoteLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesQuoteLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesQuoteLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesQuoteLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesQuoteLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesQuoteLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {string} salesQuoteLineId id for salesQuoteLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesQuoteLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchSalesQuoteLineForSalesQuoteByIdByIdWithHttpOperationResponse(body, companyId, salesQuoteId, salesQuoteLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchSalesQuoteLineForSalesQuoteByIdById(body, companyId, salesQuoteId, salesQuoteLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified salesQuoteLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesQuoteLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.sequence] The sequence property for the salesQuoteLine
   * entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesQuoteLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the salesQuoteLine
   * entity
   *
   * @param {string} [body.lineType] The lineType property for the salesQuoteLine
   * entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesQuoteLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesQuoteLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.quantity] The quantity property for the salesQuoteLine
   * entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesQuoteLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesQuoteLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesQuoteLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesQuoteLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesQuoteLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesQuoteLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {string} salesQuoteLineId id for salesQuoteLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesQuoteLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesQuoteLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchSalesQuoteLineForSalesQuoteByIdById(body, companyId, salesQuoteId, salesQuoteLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchSalesQuoteLineForSalesQuoteByIdById(body, companyId, salesQuoteId, salesQuoteLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchSalesQuoteLineForSalesQuoteByIdById(body, companyId, salesQuoteId, salesQuoteLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of pdfDocument
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetPdfDocumentForSalesQuoteOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPdfDocumentForSalesQuoteWithHttpOperationResponse(companyId, salesQuoteId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPdfDocumentForSalesQuote(companyId, salesQuoteId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of pdfDocument
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetPdfDocumentForSalesQuoteOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetPdfDocumentForSalesQuoteOKResponse} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPdfDocumentForSalesQuote(companyId, salesQuoteId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPdfDocumentForSalesQuote(companyId, salesQuoteId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPdfDocumentForSalesQuote(companyId, salesQuoteId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an pdfDocument object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {uuid} pdfDocumentId id for pdfDocument
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PdfDocument>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPdfDocumentForSalesQuoteByIdWithHttpOperationResponse(companyId, salesQuoteId, pdfDocumentId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPdfDocumentForSalesQuoteById(companyId, salesQuoteId, pdfDocumentId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an pdfDocument object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesQuoteId id for salesQuote
   *
   * @param {uuid} pdfDocumentId id for pdfDocument
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PdfDocument} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PdfDocument} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPdfDocumentForSalesQuoteById(companyId, salesQuoteId, pdfDocumentId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPdfDocumentForSalesQuoteById(companyId, salesQuoteId, pdfDocumentId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPdfDocumentForSalesQuoteById(companyId, salesQuoteId, pdfDocumentId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of salesQuoteLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetSalesQuoteLinesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesQuoteLinesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesQuoteLines(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of salesQuoteLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetSalesQuoteLinesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetSalesQuoteLinesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesQuoteLines(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesQuoteLines(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesQuoteLines(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a salesQuoteLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesQuoteLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.sequence] The sequence property for the salesQuoteLine
   * entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesQuoteLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the salesQuoteLine
   * entity
   *
   * @param {string} [body.lineType] The lineType property for the salesQuoteLine
   * entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesQuoteLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesQuoteLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.quantity] The quantity property for the salesQuoteLine
   * entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesQuoteLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesQuoteLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesQuoteLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesQuoteLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesQuoteLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesQuoteLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesQuoteLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postSalesQuoteLineWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postSalesQuoteLine(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a salesQuoteLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesQuoteLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.sequence] The sequence property for the salesQuoteLine
   * entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesQuoteLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the salesQuoteLine
   * entity
   *
   * @param {string} [body.lineType] The lineType property for the salesQuoteLine
   * entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesQuoteLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesQuoteLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.quantity] The quantity property for the salesQuoteLine
   * entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesQuoteLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesQuoteLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesQuoteLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesQuoteLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesQuoteLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesQuoteLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesQuoteLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesQuoteLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postSalesQuoteLine(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postSalesQuoteLine(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postSalesQuoteLine(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an salesQuoteLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesQuoteLineId id for salesQuoteLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesQuoteLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesQuoteLineByIdWithHttpOperationResponse(companyId, salesQuoteLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesQuoteLineById(companyId, salesQuoteLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an salesQuoteLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesQuoteLineId id for salesQuoteLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesQuoteLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesQuoteLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesQuoteLineById(companyId, salesQuoteLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesQuoteLineById(companyId, salesQuoteLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesQuoteLineById(companyId, salesQuoteLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an salesQuoteLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesQuoteLineId id for salesQuoteLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteSalesQuoteLineByIdWithHttpOperationResponse(companyId, salesQuoteLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteSalesQuoteLineById(companyId, salesQuoteLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an salesQuoteLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesQuoteLineId id for salesQuoteLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteSalesQuoteLineById(companyId, salesQuoteLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteSalesQuoteLineById(companyId, salesQuoteLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteSalesQuoteLineById(companyId, salesQuoteLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified salesQuoteLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesQuoteLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.sequence] The sequence property for the salesQuoteLine
   * entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesQuoteLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the salesQuoteLine
   * entity
   *
   * @param {string} [body.lineType] The lineType property for the salesQuoteLine
   * entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesQuoteLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesQuoteLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.quantity] The quantity property for the salesQuoteLine
   * entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesQuoteLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesQuoteLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesQuoteLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesQuoteLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesQuoteLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesQuoteLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesQuoteLineId id for salesQuoteLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesQuoteLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchSalesQuoteLineByIdWithHttpOperationResponse(body, companyId, salesQuoteLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchSalesQuoteLineById(body, companyId, salesQuoteLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified salesQuoteLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesQuoteLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.sequence] The sequence property for the salesQuoteLine
   * entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesQuoteLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the salesQuoteLine
   * entity
   *
   * @param {string} [body.lineType] The lineType property for the salesQuoteLine
   * entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesQuoteLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesQuoteLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.quantity] The quantity property for the salesQuoteLine
   * entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesQuoteLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesQuoteLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesQuoteLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the salesQuoteLine
   * entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesQuoteLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesQuoteLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesQuoteLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesQuoteLineId id for salesQuoteLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesQuoteLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesQuoteLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchSalesQuoteLineById(body, companyId, salesQuoteLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchSalesQuoteLineById(body, companyId, salesQuoteLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchSalesQuoteLineById(body, companyId, salesQuoteLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of salesCreditMemos
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetSalesCreditMemosOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesCreditMemosWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesCreditMemos(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of salesCreditMemos
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetSalesCreditMemosOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetSalesCreditMemosOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesCreditMemos(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesCreditMemos(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesCreditMemos(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a salesCreditMemo in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the salesCreditMemo entity
   *
   * @param {string} [body.number] The number property for the salesCreditMemo
   * entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the salesCreditMemo entity
   *
   * @param {date} [body.creditMemoDate] The creditMemoDate property for the
   * salesCreditMemo entity
   *
   * @param {date} [body.dueDate] The dueDate property for the salesCreditMemo
   * entity
   *
   * @param {uuid} [body.customerId] The customerId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.contactId] The contactId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.customerName] The customerName property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.billToName] The billToName property for the
   * salesCreditMemo entity
   *
   * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
   * property for the salesCreditMemo entity
   *
   * @param {object} [body.sellingPostalAddress]
   *
   * @param {object} [body.billingPostalAddress]
   *
   * @param {string} [body.billingPostalAddress.street] The street property for
   * the postaladdresstype entity
   *
   * @param {string} [body.billingPostalAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.billingPostalAddress.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.billingPostalAddress.countryLetterCode] The
   * countryLetterCode property for the postaladdresstype entity
   *
   * @param {string} [body.billingPostalAddress.postalCode] The postalCode
   * property for the postaladdresstype entity
   *
   * @param {array} [body.billingPostalAddress.customerFinancialDetails]
   *
   * @param {array} [body.billingPostalAddress.picture]
   *
   * @param {array} [body.billingPostalAddress.defaultDimensions]
   *
   * @param {object} [body.billingPostalAddress.currency]
   *
   * @param {uuid} [body.billingPostalAddress.currency.id] The id property for
   * the currency entity
   *
   * @param {string} [body.billingPostalAddress.currency.code] The code property
   * for the currency entity
   *
   * @param {string} [body.billingPostalAddress.currency.displayName] The
   * displayName property for the currency entity
   *
   * @param {string} [body.billingPostalAddress.currency.symbol] The symbol
   * property for the currency entity
   *
   * @param {string} [body.billingPostalAddress.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.billingPostalAddress.currency.amountRoundingPrecision]
   * The amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.billingPostalAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.billingPostalAddress.paymentTerm]
   *
   * @param {uuid} [body.billingPostalAddress.paymentTerm.id] The id property for
   * the paymentTerm entity
   *
   * @param {string} [body.billingPostalAddress.paymentTerm.code] The code
   * property for the paymentTerm entity
   *
   * @param {string} [body.billingPostalAddress.paymentTerm.displayName] The
   * displayName property for the paymentTerm entity
   *
   * @param {string} [body.billingPostalAddress.paymentTerm.dueDateCalculation]
   * The dueDateCalculation property for the paymentTerm entity
   *
   * @param {string}
   * [body.billingPostalAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.billingPostalAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.billingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.billingPostalAddress.paymentTerm.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.billingPostalAddress.shipmentMethod]
   *
   * @param {uuid} [body.billingPostalAddress.shipmentMethod.id] The id property
   * for the shipmentMethod entity
   *
   * @param {string} [body.billingPostalAddress.shipmentMethod.code] The code
   * property for the shipmentMethod entity
   *
   * @param {string} [body.billingPostalAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date}
   * [body.billingPostalAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.billingPostalAddress.paymentMethod]
   *
   * @param {uuid} [body.billingPostalAddress.paymentMethod.id] The id property
   * for the paymentMethod entity
   *
   * @param {string} [body.billingPostalAddress.paymentMethod.code] The code
   * property for the paymentMethod entity
   *
   * @param {string} [body.billingPostalAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date} [body.billingPostalAddress.paymentMethod.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * salesCreditMemo entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.salesperson] The salesperson property for the
   * salesCreditMemo entity
   *
   * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
   * the salesCreditMemo entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesCreditMemo entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesCreditMemo entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the salesCreditMemo entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesCreditMemo entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the salesCreditMemo entity
   *
   * @param {string} [body.status] The status property for the salesCreditMemo
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the salesCreditMemo entity
   *
   * @param {uuid} [body.invoiceId] The invoiceId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.invoiceNumber] The invoiceNumber property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.email] The email property for the salesCreditMemo
   * entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesCreditMemo>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postSalesCreditMemoWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postSalesCreditMemo(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a salesCreditMemo in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the salesCreditMemo entity
   *
   * @param {string} [body.number] The number property for the salesCreditMemo
   * entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the salesCreditMemo entity
   *
   * @param {date} [body.creditMemoDate] The creditMemoDate property for the
   * salesCreditMemo entity
   *
   * @param {date} [body.dueDate] The dueDate property for the salesCreditMemo
   * entity
   *
   * @param {uuid} [body.customerId] The customerId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.contactId] The contactId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.customerName] The customerName property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.billToName] The billToName property for the
   * salesCreditMemo entity
   *
   * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
   * property for the salesCreditMemo entity
   *
   * @param {object} [body.sellingPostalAddress]
   *
   * @param {object} [body.billingPostalAddress]
   *
   * @param {string} [body.billingPostalAddress.street] The street property for
   * the postaladdresstype entity
   *
   * @param {string} [body.billingPostalAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.billingPostalAddress.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.billingPostalAddress.countryLetterCode] The
   * countryLetterCode property for the postaladdresstype entity
   *
   * @param {string} [body.billingPostalAddress.postalCode] The postalCode
   * property for the postaladdresstype entity
   *
   * @param {array} [body.billingPostalAddress.customerFinancialDetails]
   *
   * @param {array} [body.billingPostalAddress.picture]
   *
   * @param {array} [body.billingPostalAddress.defaultDimensions]
   *
   * @param {object} [body.billingPostalAddress.currency]
   *
   * @param {uuid} [body.billingPostalAddress.currency.id] The id property for
   * the currency entity
   *
   * @param {string} [body.billingPostalAddress.currency.code] The code property
   * for the currency entity
   *
   * @param {string} [body.billingPostalAddress.currency.displayName] The
   * displayName property for the currency entity
   *
   * @param {string} [body.billingPostalAddress.currency.symbol] The symbol
   * property for the currency entity
   *
   * @param {string} [body.billingPostalAddress.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.billingPostalAddress.currency.amountRoundingPrecision]
   * The amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.billingPostalAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.billingPostalAddress.paymentTerm]
   *
   * @param {uuid} [body.billingPostalAddress.paymentTerm.id] The id property for
   * the paymentTerm entity
   *
   * @param {string} [body.billingPostalAddress.paymentTerm.code] The code
   * property for the paymentTerm entity
   *
   * @param {string} [body.billingPostalAddress.paymentTerm.displayName] The
   * displayName property for the paymentTerm entity
   *
   * @param {string} [body.billingPostalAddress.paymentTerm.dueDateCalculation]
   * The dueDateCalculation property for the paymentTerm entity
   *
   * @param {string}
   * [body.billingPostalAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.billingPostalAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.billingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.billingPostalAddress.paymentTerm.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.billingPostalAddress.shipmentMethod]
   *
   * @param {uuid} [body.billingPostalAddress.shipmentMethod.id] The id property
   * for the shipmentMethod entity
   *
   * @param {string} [body.billingPostalAddress.shipmentMethod.code] The code
   * property for the shipmentMethod entity
   *
   * @param {string} [body.billingPostalAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date}
   * [body.billingPostalAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.billingPostalAddress.paymentMethod]
   *
   * @param {uuid} [body.billingPostalAddress.paymentMethod.id] The id property
   * for the paymentMethod entity
   *
   * @param {string} [body.billingPostalAddress.paymentMethod.code] The code
   * property for the paymentMethod entity
   *
   * @param {string} [body.billingPostalAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date} [body.billingPostalAddress.paymentMethod.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * salesCreditMemo entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.salesperson] The salesperson property for the
   * salesCreditMemo entity
   *
   * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
   * the salesCreditMemo entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesCreditMemo entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesCreditMemo entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the salesCreditMemo entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesCreditMemo entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the salesCreditMemo entity
   *
   * @param {string} [body.status] The status property for the salesCreditMemo
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the salesCreditMemo entity
   *
   * @param {uuid} [body.invoiceId] The invoiceId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.invoiceNumber] The invoiceNumber property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.email] The email property for the salesCreditMemo
   * entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesCreditMemo} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesCreditMemo} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postSalesCreditMemo(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postSalesCreditMemo(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postSalesCreditMemo(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an salesCreditMemo
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesCreditMemo>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesCreditMemoByIdWithHttpOperationResponse(companyId, salesCreditMemoId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesCreditMemoById(companyId, salesCreditMemoId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an salesCreditMemo
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesCreditMemo} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesCreditMemo} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesCreditMemoById(companyId, salesCreditMemoId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesCreditMemoById(companyId, salesCreditMemoId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesCreditMemoById(companyId, salesCreditMemoId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an salesCreditMemo in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteSalesCreditMemoByIdWithHttpOperationResponse(companyId, salesCreditMemoId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteSalesCreditMemoById(companyId, salesCreditMemoId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an salesCreditMemo in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteSalesCreditMemoById(companyId, salesCreditMemoId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteSalesCreditMemoById(companyId, salesCreditMemoId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteSalesCreditMemoById(companyId, salesCreditMemoId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified salesCreditMemo
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the salesCreditMemo entity
   *
   * @param {string} [body.number] The number property for the salesCreditMemo
   * entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the salesCreditMemo entity
   *
   * @param {date} [body.creditMemoDate] The creditMemoDate property for the
   * salesCreditMemo entity
   *
   * @param {date} [body.dueDate] The dueDate property for the salesCreditMemo
   * entity
   *
   * @param {uuid} [body.customerId] The customerId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.contactId] The contactId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.customerName] The customerName property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.billToName] The billToName property for the
   * salesCreditMemo entity
   *
   * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
   * property for the salesCreditMemo entity
   *
   * @param {object} [body.sellingPostalAddress]
   *
   * @param {object} [body.billingPostalAddress]
   *
   * @param {string} [body.billingPostalAddress.street] The street property for
   * the postaladdresstype entity
   *
   * @param {string} [body.billingPostalAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.billingPostalAddress.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.billingPostalAddress.countryLetterCode] The
   * countryLetterCode property for the postaladdresstype entity
   *
   * @param {string} [body.billingPostalAddress.postalCode] The postalCode
   * property for the postaladdresstype entity
   *
   * @param {array} [body.billingPostalAddress.customerFinancialDetails]
   *
   * @param {array} [body.billingPostalAddress.picture]
   *
   * @param {array} [body.billingPostalAddress.defaultDimensions]
   *
   * @param {object} [body.billingPostalAddress.currency]
   *
   * @param {uuid} [body.billingPostalAddress.currency.id] The id property for
   * the currency entity
   *
   * @param {string} [body.billingPostalAddress.currency.code] The code property
   * for the currency entity
   *
   * @param {string} [body.billingPostalAddress.currency.displayName] The
   * displayName property for the currency entity
   *
   * @param {string} [body.billingPostalAddress.currency.symbol] The symbol
   * property for the currency entity
   *
   * @param {string} [body.billingPostalAddress.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.billingPostalAddress.currency.amountRoundingPrecision]
   * The amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.billingPostalAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.billingPostalAddress.paymentTerm]
   *
   * @param {uuid} [body.billingPostalAddress.paymentTerm.id] The id property for
   * the paymentTerm entity
   *
   * @param {string} [body.billingPostalAddress.paymentTerm.code] The code
   * property for the paymentTerm entity
   *
   * @param {string} [body.billingPostalAddress.paymentTerm.displayName] The
   * displayName property for the paymentTerm entity
   *
   * @param {string} [body.billingPostalAddress.paymentTerm.dueDateCalculation]
   * The dueDateCalculation property for the paymentTerm entity
   *
   * @param {string}
   * [body.billingPostalAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.billingPostalAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.billingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.billingPostalAddress.paymentTerm.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.billingPostalAddress.shipmentMethod]
   *
   * @param {uuid} [body.billingPostalAddress.shipmentMethod.id] The id property
   * for the shipmentMethod entity
   *
   * @param {string} [body.billingPostalAddress.shipmentMethod.code] The code
   * property for the shipmentMethod entity
   *
   * @param {string} [body.billingPostalAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date}
   * [body.billingPostalAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.billingPostalAddress.paymentMethod]
   *
   * @param {uuid} [body.billingPostalAddress.paymentMethod.id] The id property
   * for the paymentMethod entity
   *
   * @param {string} [body.billingPostalAddress.paymentMethod.code] The code
   * property for the paymentMethod entity
   *
   * @param {string} [body.billingPostalAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date} [body.billingPostalAddress.paymentMethod.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * salesCreditMemo entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.salesperson] The salesperson property for the
   * salesCreditMemo entity
   *
   * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
   * the salesCreditMemo entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesCreditMemo entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesCreditMemo entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the salesCreditMemo entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesCreditMemo entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the salesCreditMemo entity
   *
   * @param {string} [body.status] The status property for the salesCreditMemo
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the salesCreditMemo entity
   *
   * @param {uuid} [body.invoiceId] The invoiceId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.invoiceNumber] The invoiceNumber property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.email] The email property for the salesCreditMemo
   * entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesCreditMemo>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchSalesCreditMemoByIdWithHttpOperationResponse(body, companyId, salesCreditMemoId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchSalesCreditMemoById(body, companyId, salesCreditMemoId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified salesCreditMemo
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the salesCreditMemo entity
   *
   * @param {string} [body.number] The number property for the salesCreditMemo
   * entity
   *
   * @param {string} [body.externalDocumentNumber] The externalDocumentNumber
   * property for the salesCreditMemo entity
   *
   * @param {date} [body.creditMemoDate] The creditMemoDate property for the
   * salesCreditMemo entity
   *
   * @param {date} [body.dueDate] The dueDate property for the salesCreditMemo
   * entity
   *
   * @param {uuid} [body.customerId] The customerId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.contactId] The contactId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.customerNumber] The customerNumber property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.customerName] The customerName property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.billToName] The billToName property for the
   * salesCreditMemo entity
   *
   * @param {uuid} [body.billToCustomerId] The billToCustomerId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.billToCustomerNumber] The billToCustomerNumber
   * property for the salesCreditMemo entity
   *
   * @param {object} [body.sellingPostalAddress]
   *
   * @param {object} [body.billingPostalAddress]
   *
   * @param {string} [body.billingPostalAddress.street] The street property for
   * the postaladdresstype entity
   *
   * @param {string} [body.billingPostalAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.billingPostalAddress.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.billingPostalAddress.countryLetterCode] The
   * countryLetterCode property for the postaladdresstype entity
   *
   * @param {string} [body.billingPostalAddress.postalCode] The postalCode
   * property for the postaladdresstype entity
   *
   * @param {array} [body.billingPostalAddress.customerFinancialDetails]
   *
   * @param {array} [body.billingPostalAddress.picture]
   *
   * @param {array} [body.billingPostalAddress.defaultDimensions]
   *
   * @param {object} [body.billingPostalAddress.currency]
   *
   * @param {uuid} [body.billingPostalAddress.currency.id] The id property for
   * the currency entity
   *
   * @param {string} [body.billingPostalAddress.currency.code] The code property
   * for the currency entity
   *
   * @param {string} [body.billingPostalAddress.currency.displayName] The
   * displayName property for the currency entity
   *
   * @param {string} [body.billingPostalAddress.currency.symbol] The symbol
   * property for the currency entity
   *
   * @param {string} [body.billingPostalAddress.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.billingPostalAddress.currency.amountRoundingPrecision]
   * The amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.billingPostalAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.billingPostalAddress.paymentTerm]
   *
   * @param {uuid} [body.billingPostalAddress.paymentTerm.id] The id property for
   * the paymentTerm entity
   *
   * @param {string} [body.billingPostalAddress.paymentTerm.code] The code
   * property for the paymentTerm entity
   *
   * @param {string} [body.billingPostalAddress.paymentTerm.displayName] The
   * displayName property for the paymentTerm entity
   *
   * @param {string} [body.billingPostalAddress.paymentTerm.dueDateCalculation]
   * The dueDateCalculation property for the paymentTerm entity
   *
   * @param {string}
   * [body.billingPostalAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.billingPostalAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.billingPostalAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.billingPostalAddress.paymentTerm.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.billingPostalAddress.shipmentMethod]
   *
   * @param {uuid} [body.billingPostalAddress.shipmentMethod.id] The id property
   * for the shipmentMethod entity
   *
   * @param {string} [body.billingPostalAddress.shipmentMethod.code] The code
   * property for the shipmentMethod entity
   *
   * @param {string} [body.billingPostalAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date}
   * [body.billingPostalAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.billingPostalAddress.paymentMethod]
   *
   * @param {uuid} [body.billingPostalAddress.paymentMethod.id] The id property
   * for the paymentMethod entity
   *
   * @param {string} [body.billingPostalAddress.paymentMethod.code] The code
   * property for the paymentMethod entity
   *
   * @param {string} [body.billingPostalAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date} [body.billingPostalAddress.paymentMethod.lastModifiedDateTime]
   * The lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * salesCreditMemo entity
   *
   * @param {uuid} [body.paymentTermsId] The paymentTermsId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.salesperson] The salesperson property for the
   * salesCreditMemo entity
   *
   * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
   * the salesCreditMemo entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesCreditMemo entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesCreditMemo entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the salesCreditMemo entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesCreditMemo entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the salesCreditMemo entity
   *
   * @param {string} [body.status] The status property for the salesCreditMemo
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the salesCreditMemo entity
   *
   * @param {uuid} [body.invoiceId] The invoiceId property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.invoiceNumber] The invoiceNumber property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.phoneNumber] The phoneNumber property for the
   * salesCreditMemo entity
   *
   * @param {string} [body.email] The email property for the salesCreditMemo
   * entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesCreditMemo} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesCreditMemo} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchSalesCreditMemoById(body, companyId, salesCreditMemoId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchSalesCreditMemoById(body, companyId, salesCreditMemoId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchSalesCreditMemoById(body, companyId, salesCreditMemoId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of salesCreditMemoLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetSalesCreditMemoLinesForSalesCreditMemoOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesCreditMemoLinesForSalesCreditMemoWithHttpOperationResponse(companyId, salesCreditMemoId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesCreditMemoLinesForSalesCreditMemo(companyId, salesCreditMemoId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of salesCreditMemoLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetSalesCreditMemoLinesForSalesCreditMemoOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      GetSalesCreditMemoLinesForSalesCreditMemoOKResponse}
   *                      for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesCreditMemoLinesForSalesCreditMemo(companyId, salesCreditMemoId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesCreditMemoLinesForSalesCreditMemo(companyId, salesCreditMemoId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesCreditMemoLinesForSalesCreditMemo(companyId, salesCreditMemoId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a salesCreditMemoLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesCreditMemoLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesCreditMemoLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * salesCreditMemoLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * salesCreditMemoLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesCreditMemoLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesCreditMemoLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesCreditMemoLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesCreditMemoLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesCreditMemoLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesCreditMemoLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesCreditMemoLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesCreditMemoLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postSalesCreditMemoLineForSalesCreditMemoWithHttpOperationResponse(body, companyId, salesCreditMemoId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postSalesCreditMemoLineForSalesCreditMemo(body, companyId, salesCreditMemoId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a salesCreditMemoLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesCreditMemoLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesCreditMemoLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * salesCreditMemoLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * salesCreditMemoLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesCreditMemoLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesCreditMemoLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesCreditMemoLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesCreditMemoLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesCreditMemoLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesCreditMemoLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesCreditMemoLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesCreditMemoLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesCreditMemoLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postSalesCreditMemoLineForSalesCreditMemo(body, companyId, salesCreditMemoId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postSalesCreditMemoLineForSalesCreditMemo(body, companyId, salesCreditMemoId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postSalesCreditMemoLineForSalesCreditMemo(body, companyId, salesCreditMemoId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an salesCreditMemoLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesCreditMemoLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesCreditMemoLineForSalesCreditMemoByIdWithHttpOperationResponse(companyId, salesCreditMemoId, salesCreditMemoLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesCreditMemoLineForSalesCreditMemoById(companyId, salesCreditMemoId, salesCreditMemoLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an salesCreditMemoLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesCreditMemoLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesCreditMemoLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesCreditMemoLineForSalesCreditMemoById(companyId, salesCreditMemoId, salesCreditMemoLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesCreditMemoLineForSalesCreditMemoById(companyId, salesCreditMemoId, salesCreditMemoLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesCreditMemoLineForSalesCreditMemoById(companyId, salesCreditMemoId, salesCreditMemoLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an salesCreditMemoLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteSalesCreditMemoLineForSalesCreditMemoByIdByIdWithHttpOperationResponse(companyId, salesCreditMemoId, salesCreditMemoLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteSalesCreditMemoLineForSalesCreditMemoByIdById(companyId, salesCreditMemoId, salesCreditMemoLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an salesCreditMemoLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteSalesCreditMemoLineForSalesCreditMemoByIdById(companyId, salesCreditMemoId, salesCreditMemoLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteSalesCreditMemoLineForSalesCreditMemoByIdById(companyId, salesCreditMemoId, salesCreditMemoLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteSalesCreditMemoLineForSalesCreditMemoByIdById(companyId, salesCreditMemoId, salesCreditMemoLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified salesCreditMemoLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesCreditMemoLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesCreditMemoLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * salesCreditMemoLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * salesCreditMemoLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesCreditMemoLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesCreditMemoLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesCreditMemoLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesCreditMemoLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesCreditMemoLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesCreditMemoLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesCreditMemoLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesCreditMemoLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchSalesCreditMemoLineForSalesCreditMemoByIdByIdWithHttpOperationResponse(body, companyId, salesCreditMemoId, salesCreditMemoLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchSalesCreditMemoLineForSalesCreditMemoByIdById(body, companyId, salesCreditMemoId, salesCreditMemoLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified salesCreditMemoLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesCreditMemoLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesCreditMemoLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * salesCreditMemoLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * salesCreditMemoLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesCreditMemoLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesCreditMemoLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesCreditMemoLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesCreditMemoLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesCreditMemoLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesCreditMemoLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesCreditMemoLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesCreditMemoLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesCreditMemoLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchSalesCreditMemoLineForSalesCreditMemoByIdById(body, companyId, salesCreditMemoId, salesCreditMemoLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchSalesCreditMemoLineForSalesCreditMemoByIdById(body, companyId, salesCreditMemoId, salesCreditMemoLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchSalesCreditMemoLineForSalesCreditMemoByIdById(body, companyId, salesCreditMemoId, salesCreditMemoLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of pdfDocument
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetPdfDocumentForSalesCreditMemoOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPdfDocumentForSalesCreditMemoWithHttpOperationResponse(companyId, salesCreditMemoId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPdfDocumentForSalesCreditMemo(companyId, salesCreditMemoId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of pdfDocument
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetPdfDocumentForSalesCreditMemoOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetPdfDocumentForSalesCreditMemoOKResponse}
   *                      for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPdfDocumentForSalesCreditMemo(companyId, salesCreditMemoId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPdfDocumentForSalesCreditMemo(companyId, salesCreditMemoId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPdfDocumentForSalesCreditMemo(companyId, salesCreditMemoId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an pdfDocument object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {uuid} pdfDocumentId id for pdfDocument
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PdfDocument>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPdfDocumentForSalesCreditMemoByIdWithHttpOperationResponse(companyId, salesCreditMemoId, pdfDocumentId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPdfDocumentForSalesCreditMemoById(companyId, salesCreditMemoId, pdfDocumentId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an pdfDocument object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} salesCreditMemoId id for salesCreditMemo
   *
   * @param {uuid} pdfDocumentId id for pdfDocument
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PdfDocument} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PdfDocument} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPdfDocumentForSalesCreditMemoById(companyId, salesCreditMemoId, pdfDocumentId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPdfDocumentForSalesCreditMemoById(companyId, salesCreditMemoId, pdfDocumentId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPdfDocumentForSalesCreditMemoById(companyId, salesCreditMemoId, pdfDocumentId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of salesCreditMemoLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetSalesCreditMemoLinesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesCreditMemoLinesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesCreditMemoLines(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of salesCreditMemoLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetSalesCreditMemoLinesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetSalesCreditMemoLinesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesCreditMemoLines(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesCreditMemoLines(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesCreditMemoLines(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a salesCreditMemoLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesCreditMemoLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesCreditMemoLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * salesCreditMemoLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * salesCreditMemoLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesCreditMemoLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesCreditMemoLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesCreditMemoLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesCreditMemoLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesCreditMemoLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesCreditMemoLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesCreditMemoLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesCreditMemoLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postSalesCreditMemoLineWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postSalesCreditMemoLine(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a salesCreditMemoLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesCreditMemoLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesCreditMemoLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * salesCreditMemoLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * salesCreditMemoLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesCreditMemoLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesCreditMemoLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesCreditMemoLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesCreditMemoLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesCreditMemoLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesCreditMemoLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesCreditMemoLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesCreditMemoLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesCreditMemoLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postSalesCreditMemoLine(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postSalesCreditMemoLine(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postSalesCreditMemoLine(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an salesCreditMemoLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesCreditMemoLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSalesCreditMemoLineByIdWithHttpOperationResponse(companyId, salesCreditMemoLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSalesCreditMemoLineById(companyId, salesCreditMemoLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an salesCreditMemoLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesCreditMemoLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesCreditMemoLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSalesCreditMemoLineById(companyId, salesCreditMemoLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSalesCreditMemoLineById(companyId, salesCreditMemoLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSalesCreditMemoLineById(companyId, salesCreditMemoLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an salesCreditMemoLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteSalesCreditMemoLineByIdWithHttpOperationResponse(companyId, salesCreditMemoLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteSalesCreditMemoLineById(companyId, salesCreditMemoLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an salesCreditMemoLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteSalesCreditMemoLineById(companyId, salesCreditMemoLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteSalesCreditMemoLineById(companyId, salesCreditMemoLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteSalesCreditMemoLineById(companyId, salesCreditMemoLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified salesCreditMemoLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesCreditMemoLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesCreditMemoLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * salesCreditMemoLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * salesCreditMemoLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesCreditMemoLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesCreditMemoLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesCreditMemoLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesCreditMemoLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesCreditMemoLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesCreditMemoLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesCreditMemoLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SalesCreditMemoLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchSalesCreditMemoLineByIdWithHttpOperationResponse(body, companyId, salesCreditMemoLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchSalesCreditMemoLineById(body, companyId, salesCreditMemoLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified salesCreditMemoLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the salesCreditMemoLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the salesCreditMemoLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * salesCreditMemoLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * salesCreditMemoLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} [body.unitOfMeasureId] The unitOfMeasureId property for the
   * salesCreditMemoLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitPrice] The unitPrice property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * salesCreditMemoLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the salesCreditMemoLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the salesCreditMemoLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the salesCreditMemoLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the salesCreditMemoLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * salesCreditMemoLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the salesCreditMemoLine entity
   *
   * @param {date} [body.shipmentDate] The shipmentDate property for the
   * salesCreditMemoLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} salesCreditMemoLineId id for salesCreditMemoLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SalesCreditMemoLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SalesCreditMemoLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchSalesCreditMemoLineById(body, companyId, salesCreditMemoLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchSalesCreditMemoLineById(body, companyId, salesCreditMemoLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchSalesCreditMemoLineById(body, companyId, salesCreditMemoLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of generalLedgerEntryAttachments
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetGeneralLedgerEntryAttachmentsOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getGeneralLedgerEntryAttachmentsWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getGeneralLedgerEntryAttachments(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of generalLedgerEntryAttachments
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetGeneralLedgerEntryAttachmentsOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetGeneralLedgerEntryAttachmentsOKResponse}
   *                      for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getGeneralLedgerEntryAttachments(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getGeneralLedgerEntryAttachments(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getGeneralLedgerEntryAttachments(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a generalLedgerEntryAttachments in Dynamics 365 Business
   * Central
   *
   * @param {object} body
   *
   * @param {number} [body.generalLedgerEntryNumber] The generalLedgerEntryNumber
   * property for the generalLedgerEntryAttachments entity
   *
   * @param {uuid} [body.id] The id property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {string} [body.fileName] The fileName property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {number} [body.byteSize] The byteSize property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {string} [body.content] The content property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {date} [body.createdDateTime] The createdDateTime property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GeneralLedgerEntryAttachments>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postGeneralLedgerEntryAttachmentsWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postGeneralLedgerEntryAttachments(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a generalLedgerEntryAttachments in Dynamics 365 Business
   * Central
   *
   * @param {object} body
   *
   * @param {number} [body.generalLedgerEntryNumber] The generalLedgerEntryNumber
   * property for the generalLedgerEntryAttachments entity
   *
   * @param {uuid} [body.id] The id property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {string} [body.fileName] The fileName property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {number} [body.byteSize] The byteSize property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {string} [body.content] The content property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {date} [body.createdDateTime] The createdDateTime property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GeneralLedgerEntryAttachments} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GeneralLedgerEntryAttachments} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postGeneralLedgerEntryAttachments(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postGeneralLedgerEntryAttachments(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postGeneralLedgerEntryAttachments(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an
   * generalLedgerEntryAttachments object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {number} generalLedgerEntryAttachmentsGeneralLedgerEntryNumber
   * generalLedgerEntryNumber for generalLedgerEntryAttachments
   *
   * @param {uuid} generalLedgerEntryAttachmentsId id for
   * generalLedgerEntryAttachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GeneralLedgerEntryAttachments>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberWithHttpOperationResponse(companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an
   * generalLedgerEntryAttachments object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {number} generalLedgerEntryAttachmentsGeneralLedgerEntryNumber
   * generalLedgerEntryNumber for generalLedgerEntryAttachments
   *
   * @param {uuid} generalLedgerEntryAttachmentsId id for
   * generalLedgerEntryAttachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GeneralLedgerEntryAttachments} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GeneralLedgerEntryAttachments} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an generalLedgerEntryAttachments in Dynamics 365 Business
   * Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {number} generalLedgerEntryAttachmentsGeneralLedgerEntryNumber
   * generalLedgerEntryNumber for generalLedgerEntryAttachments
   *
   * @param {uuid} generalLedgerEntryAttachmentsId id for
   * generalLedgerEntryAttachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberWithHttpOperationResponse(companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an generalLedgerEntryAttachments in Dynamics 365 Business
   * Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {number} generalLedgerEntryAttachmentsGeneralLedgerEntryNumber
   * generalLedgerEntryNumber for generalLedgerEntryAttachments
   *
   * @param {uuid} generalLedgerEntryAttachmentsId id for
   * generalLedgerEntryAttachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified generalLedgerEntryAttachments
   *
   * @param {object} body
   *
   * @param {number} [body.generalLedgerEntryNumber] The generalLedgerEntryNumber
   * property for the generalLedgerEntryAttachments entity
   *
   * @param {uuid} [body.id] The id property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {string} [body.fileName] The fileName property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {number} [body.byteSize] The byteSize property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {string} [body.content] The content property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {date} [body.createdDateTime] The createdDateTime property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {number} generalLedgerEntryAttachmentsGeneralLedgerEntryNumber
   * generalLedgerEntryNumber for generalLedgerEntryAttachments
   *
   * @param {uuid} generalLedgerEntryAttachmentsId id for
   * generalLedgerEntryAttachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GeneralLedgerEntryAttachments>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberWithHttpOperationResponse(body, companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(body, companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified generalLedgerEntryAttachments
   *
   * @param {object} body
   *
   * @param {number} [body.generalLedgerEntryNumber] The generalLedgerEntryNumber
   * property for the generalLedgerEntryAttachments entity
   *
   * @param {uuid} [body.id] The id property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {string} [body.fileName] The fileName property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {number} [body.byteSize] The byteSize property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {string} [body.content] The content property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {date} [body.createdDateTime] The createdDateTime property for the
   * generalLedgerEntryAttachments entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {number} generalLedgerEntryAttachmentsGeneralLedgerEntryNumber
   * generalLedgerEntryNumber for generalLedgerEntryAttachments
   *
   * @param {uuid} generalLedgerEntryAttachmentsId id for
   * generalLedgerEntryAttachments
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GeneralLedgerEntryAttachments} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GeneralLedgerEntryAttachments} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(body, companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(body, companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(body, companyId, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber, generalLedgerEntryAttachmentsId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of purchaseInvoices
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetPurchaseInvoicesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPurchaseInvoicesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPurchaseInvoices(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of purchaseInvoices
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetPurchaseInvoicesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetPurchaseInvoicesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPurchaseInvoices(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPurchaseInvoices(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPurchaseInvoices(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a purchaseInvoice in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the purchaseInvoice entity
   *
   * @param {string} [body.number] The number property for the purchaseInvoice
   * entity
   *
   * @param {date} [body.invoiceDate] The invoiceDate property for the
   * purchaseInvoice entity
   *
   * @param {date} [body.dueDate] The dueDate property for the purchaseInvoice
   * entity
   *
   * @param {string} [body.vendorInvoiceNumber] The vendorInvoiceNumber property
   * for the purchaseInvoice entity
   *
   * @param {uuid} [body.vendorId] The vendorId property for the purchaseInvoice
   * entity
   *
   * @param {string} [body.vendorNumber] The vendorNumber property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.vendorName] The vendorName property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.payToName] The payToName property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.payToContact] The payToContact property for the
   * purchaseInvoice entity
   *
   * @param {uuid} [body.payToVendorId] The payToVendorId property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.payToVendorNumber] The payToVendorNumber property for
   * the purchaseInvoice entity
   *
   * @param {string} [body.shipToName] The shipToName property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.shipToContact] The shipToContact property for the
   * purchaseInvoice entity
   *
   * @param {object} [body.buyFromAddress]
   *
   * @param {object} [body.payToAddress]
   *
   * @param {object} [body.shipToAddress]
   *
   * @param {string} [body.shipToAddress.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shipToAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shipToAddress.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shipToAddress.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.shipToAddress.postalCode] The postalCode property for
   * the postaladdresstype entity
   *
   * @param {array} [body.shipToAddress.customerFinancialDetails]
   *
   * @param {array} [body.shipToAddress.picture]
   *
   * @param {array} [body.shipToAddress.defaultDimensions]
   *
   * @param {object} [body.shipToAddress.currency]
   *
   * @param {uuid} [body.shipToAddress.currency.id] The id property for the
   * currency entity
   *
   * @param {string} [body.shipToAddress.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.shipToAddress.currency.displayName] The displayName
   * property for the currency entity
   *
   * @param {string} [body.shipToAddress.currency.symbol] The symbol property for
   * the currency entity
   *
   * @param {string} [body.shipToAddress.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.shipToAddress.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.shipToAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.shipToAddress.paymentTerm]
   *
   * @param {uuid} [body.shipToAddress.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.shipToAddress.paymentTerm.code] The code property for
   * the paymentTerm entity
   *
   * @param {string} [body.shipToAddress.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.shipToAddress.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.shipToAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.shipToAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.shipToAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.shipToAddress.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.shipToAddress.shipmentMethod]
   *
   * @param {uuid} [body.shipToAddress.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.shipToAddress.shipmentMethod.code] The code property
   * for the shipmentMethod entity
   *
   * @param {string} [body.shipToAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date} [body.shipToAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.shipToAddress.paymentMethod]
   *
   * @param {uuid} [body.shipToAddress.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.shipToAddress.paymentMethod.code] The code property
   * for the paymentMethod entity
   *
   * @param {string} [body.shipToAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date} [body.shipToAddress.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * purchaseInvoice entity
   *
   * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
   * the purchaseInvoice entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * purchaseInvoice entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the purchaseInvoice entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the purchaseInvoice entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * purchaseInvoice entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the purchaseInvoice entity
   *
   * @param {string} [body.status] The status property for the purchaseInvoice
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the purchaseInvoice entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PurchaseInvoice>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postPurchaseInvoiceWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postPurchaseInvoice(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a purchaseInvoice in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the purchaseInvoice entity
   *
   * @param {string} [body.number] The number property for the purchaseInvoice
   * entity
   *
   * @param {date} [body.invoiceDate] The invoiceDate property for the
   * purchaseInvoice entity
   *
   * @param {date} [body.dueDate] The dueDate property for the purchaseInvoice
   * entity
   *
   * @param {string} [body.vendorInvoiceNumber] The vendorInvoiceNumber property
   * for the purchaseInvoice entity
   *
   * @param {uuid} [body.vendorId] The vendorId property for the purchaseInvoice
   * entity
   *
   * @param {string} [body.vendorNumber] The vendorNumber property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.vendorName] The vendorName property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.payToName] The payToName property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.payToContact] The payToContact property for the
   * purchaseInvoice entity
   *
   * @param {uuid} [body.payToVendorId] The payToVendorId property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.payToVendorNumber] The payToVendorNumber property for
   * the purchaseInvoice entity
   *
   * @param {string} [body.shipToName] The shipToName property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.shipToContact] The shipToContact property for the
   * purchaseInvoice entity
   *
   * @param {object} [body.buyFromAddress]
   *
   * @param {object} [body.payToAddress]
   *
   * @param {object} [body.shipToAddress]
   *
   * @param {string} [body.shipToAddress.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shipToAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shipToAddress.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shipToAddress.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.shipToAddress.postalCode] The postalCode property for
   * the postaladdresstype entity
   *
   * @param {array} [body.shipToAddress.customerFinancialDetails]
   *
   * @param {array} [body.shipToAddress.picture]
   *
   * @param {array} [body.shipToAddress.defaultDimensions]
   *
   * @param {object} [body.shipToAddress.currency]
   *
   * @param {uuid} [body.shipToAddress.currency.id] The id property for the
   * currency entity
   *
   * @param {string} [body.shipToAddress.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.shipToAddress.currency.displayName] The displayName
   * property for the currency entity
   *
   * @param {string} [body.shipToAddress.currency.symbol] The symbol property for
   * the currency entity
   *
   * @param {string} [body.shipToAddress.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.shipToAddress.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.shipToAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.shipToAddress.paymentTerm]
   *
   * @param {uuid} [body.shipToAddress.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.shipToAddress.paymentTerm.code] The code property for
   * the paymentTerm entity
   *
   * @param {string} [body.shipToAddress.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.shipToAddress.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.shipToAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.shipToAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.shipToAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.shipToAddress.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.shipToAddress.shipmentMethod]
   *
   * @param {uuid} [body.shipToAddress.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.shipToAddress.shipmentMethod.code] The code property
   * for the shipmentMethod entity
   *
   * @param {string} [body.shipToAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date} [body.shipToAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.shipToAddress.paymentMethod]
   *
   * @param {uuid} [body.shipToAddress.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.shipToAddress.paymentMethod.code] The code property
   * for the paymentMethod entity
   *
   * @param {string} [body.shipToAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date} [body.shipToAddress.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * purchaseInvoice entity
   *
   * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
   * the purchaseInvoice entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * purchaseInvoice entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the purchaseInvoice entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the purchaseInvoice entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * purchaseInvoice entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the purchaseInvoice entity
   *
   * @param {string} [body.status] The status property for the purchaseInvoice
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the purchaseInvoice entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PurchaseInvoice} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PurchaseInvoice} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postPurchaseInvoice(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postPurchaseInvoice(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postPurchaseInvoice(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an purchaseInvoice
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PurchaseInvoice>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPurchaseInvoiceByIdWithHttpOperationResponse(companyId, purchaseInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPurchaseInvoiceById(companyId, purchaseInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an purchaseInvoice
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PurchaseInvoice} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PurchaseInvoice} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPurchaseInvoiceById(companyId, purchaseInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPurchaseInvoiceById(companyId, purchaseInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPurchaseInvoiceById(companyId, purchaseInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an purchaseInvoice in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deletePurchaseInvoiceByIdWithHttpOperationResponse(companyId, purchaseInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deletePurchaseInvoiceById(companyId, purchaseInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an purchaseInvoice in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deletePurchaseInvoiceById(companyId, purchaseInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deletePurchaseInvoiceById(companyId, purchaseInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deletePurchaseInvoiceById(companyId, purchaseInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified purchaseInvoice
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the purchaseInvoice entity
   *
   * @param {string} [body.number] The number property for the purchaseInvoice
   * entity
   *
   * @param {date} [body.invoiceDate] The invoiceDate property for the
   * purchaseInvoice entity
   *
   * @param {date} [body.dueDate] The dueDate property for the purchaseInvoice
   * entity
   *
   * @param {string} [body.vendorInvoiceNumber] The vendorInvoiceNumber property
   * for the purchaseInvoice entity
   *
   * @param {uuid} [body.vendorId] The vendorId property for the purchaseInvoice
   * entity
   *
   * @param {string} [body.vendorNumber] The vendorNumber property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.vendorName] The vendorName property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.payToName] The payToName property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.payToContact] The payToContact property for the
   * purchaseInvoice entity
   *
   * @param {uuid} [body.payToVendorId] The payToVendorId property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.payToVendorNumber] The payToVendorNumber property for
   * the purchaseInvoice entity
   *
   * @param {string} [body.shipToName] The shipToName property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.shipToContact] The shipToContact property for the
   * purchaseInvoice entity
   *
   * @param {object} [body.buyFromAddress]
   *
   * @param {object} [body.payToAddress]
   *
   * @param {object} [body.shipToAddress]
   *
   * @param {string} [body.shipToAddress.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shipToAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shipToAddress.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shipToAddress.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.shipToAddress.postalCode] The postalCode property for
   * the postaladdresstype entity
   *
   * @param {array} [body.shipToAddress.customerFinancialDetails]
   *
   * @param {array} [body.shipToAddress.picture]
   *
   * @param {array} [body.shipToAddress.defaultDimensions]
   *
   * @param {object} [body.shipToAddress.currency]
   *
   * @param {uuid} [body.shipToAddress.currency.id] The id property for the
   * currency entity
   *
   * @param {string} [body.shipToAddress.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.shipToAddress.currency.displayName] The displayName
   * property for the currency entity
   *
   * @param {string} [body.shipToAddress.currency.symbol] The symbol property for
   * the currency entity
   *
   * @param {string} [body.shipToAddress.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.shipToAddress.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.shipToAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.shipToAddress.paymentTerm]
   *
   * @param {uuid} [body.shipToAddress.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.shipToAddress.paymentTerm.code] The code property for
   * the paymentTerm entity
   *
   * @param {string} [body.shipToAddress.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.shipToAddress.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.shipToAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.shipToAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.shipToAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.shipToAddress.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.shipToAddress.shipmentMethod]
   *
   * @param {uuid} [body.shipToAddress.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.shipToAddress.shipmentMethod.code] The code property
   * for the shipmentMethod entity
   *
   * @param {string} [body.shipToAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date} [body.shipToAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.shipToAddress.paymentMethod]
   *
   * @param {uuid} [body.shipToAddress.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.shipToAddress.paymentMethod.code] The code property
   * for the paymentMethod entity
   *
   * @param {string} [body.shipToAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date} [body.shipToAddress.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * purchaseInvoice entity
   *
   * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
   * the purchaseInvoice entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * purchaseInvoice entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the purchaseInvoice entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the purchaseInvoice entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * purchaseInvoice entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the purchaseInvoice entity
   *
   * @param {string} [body.status] The status property for the purchaseInvoice
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the purchaseInvoice entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PurchaseInvoice>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchPurchaseInvoiceByIdWithHttpOperationResponse(body, companyId, purchaseInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchPurchaseInvoiceById(body, companyId, purchaseInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified purchaseInvoice
   *
   * @param {object} body
   *
   * @param {uuid} [body.id] The id property for the purchaseInvoice entity
   *
   * @param {string} [body.number] The number property for the purchaseInvoice
   * entity
   *
   * @param {date} [body.invoiceDate] The invoiceDate property for the
   * purchaseInvoice entity
   *
   * @param {date} [body.dueDate] The dueDate property for the purchaseInvoice
   * entity
   *
   * @param {string} [body.vendorInvoiceNumber] The vendorInvoiceNumber property
   * for the purchaseInvoice entity
   *
   * @param {uuid} [body.vendorId] The vendorId property for the purchaseInvoice
   * entity
   *
   * @param {string} [body.vendorNumber] The vendorNumber property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.vendorName] The vendorName property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.payToName] The payToName property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.payToContact] The payToContact property for the
   * purchaseInvoice entity
   *
   * @param {uuid} [body.payToVendorId] The payToVendorId property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.payToVendorNumber] The payToVendorNumber property for
   * the purchaseInvoice entity
   *
   * @param {string} [body.shipToName] The shipToName property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.shipToContact] The shipToContact property for the
   * purchaseInvoice entity
   *
   * @param {object} [body.buyFromAddress]
   *
   * @param {object} [body.payToAddress]
   *
   * @param {object} [body.shipToAddress]
   *
   * @param {string} [body.shipToAddress.street] The street property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shipToAddress.city] The city property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shipToAddress.state] The state property for the
   * postaladdresstype entity
   *
   * @param {string} [body.shipToAddress.countryLetterCode] The countryLetterCode
   * property for the postaladdresstype entity
   *
   * @param {string} [body.shipToAddress.postalCode] The postalCode property for
   * the postaladdresstype entity
   *
   * @param {array} [body.shipToAddress.customerFinancialDetails]
   *
   * @param {array} [body.shipToAddress.picture]
   *
   * @param {array} [body.shipToAddress.defaultDimensions]
   *
   * @param {object} [body.shipToAddress.currency]
   *
   * @param {uuid} [body.shipToAddress.currency.id] The id property for the
   * currency entity
   *
   * @param {string} [body.shipToAddress.currency.code] The code property for the
   * currency entity
   *
   * @param {string} [body.shipToAddress.currency.displayName] The displayName
   * property for the currency entity
   *
   * @param {string} [body.shipToAddress.currency.symbol] The symbol property for
   * the currency entity
   *
   * @param {string} [body.shipToAddress.currency.amountDecimalPlaces] The
   * amountDecimalPlaces property for the currency entity
   *
   * @param {number} [body.shipToAddress.currency.amountRoundingPrecision] The
   * amountRoundingPrecision property for the currency entity
   *
   * @param {date} [body.shipToAddress.currency.lastModifiedDateTime] The
   * lastModifiedDateTime property for the currency entity
   *
   * @param {object} [body.shipToAddress.paymentTerm]
   *
   * @param {uuid} [body.shipToAddress.paymentTerm.id] The id property for the
   * paymentTerm entity
   *
   * @param {string} [body.shipToAddress.paymentTerm.code] The code property for
   * the paymentTerm entity
   *
   * @param {string} [body.shipToAddress.paymentTerm.displayName] The displayName
   * property for the paymentTerm entity
   *
   * @param {string} [body.shipToAddress.paymentTerm.dueDateCalculation] The
   * dueDateCalculation property for the paymentTerm entity
   *
   * @param {string} [body.shipToAddress.paymentTerm.discountDateCalculation] The
   * discountDateCalculation property for the paymentTerm entity
   *
   * @param {number} [body.shipToAddress.paymentTerm.discountPercent] The
   * discountPercent property for the paymentTerm entity
   *
   * @param {boolean}
   * [body.shipToAddress.paymentTerm.calculateDiscountOnCreditMemos] The
   * calculateDiscountOnCreditMemos property for the paymentTerm entity
   *
   * @param {date} [body.shipToAddress.paymentTerm.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentTerm entity
   *
   * @param {object} [body.shipToAddress.shipmentMethod]
   *
   * @param {uuid} [body.shipToAddress.shipmentMethod.id] The id property for the
   * shipmentMethod entity
   *
   * @param {string} [body.shipToAddress.shipmentMethod.code] The code property
   * for the shipmentMethod entity
   *
   * @param {string} [body.shipToAddress.shipmentMethod.displayName] The
   * displayName property for the shipmentMethod entity
   *
   * @param {date} [body.shipToAddress.shipmentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the shipmentMethod entity
   *
   * @param {object} [body.shipToAddress.paymentMethod]
   *
   * @param {uuid} [body.shipToAddress.paymentMethod.id] The id property for the
   * paymentMethod entity
   *
   * @param {string} [body.shipToAddress.paymentMethod.code] The code property
   * for the paymentMethod entity
   *
   * @param {string} [body.shipToAddress.paymentMethod.displayName] The
   * displayName property for the paymentMethod entity
   *
   * @param {date} [body.shipToAddress.paymentMethod.lastModifiedDateTime] The
   * lastModifiedDateTime property for the paymentMethod entity
   *
   * @param {uuid} [body.currencyId] The currencyId property for the
   * purchaseInvoice entity
   *
   * @param {string} [body.currencyCode] The currencyCode property for the
   * purchaseInvoice entity
   *
   * @param {boolean} [body.pricesIncludeTax] The pricesIncludeTax property for
   * the purchaseInvoice entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * purchaseInvoice entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the purchaseInvoice entity
   *
   * @param {number} [body.totalAmountExcludingTax] The totalAmountExcludingTax
   * property for the purchaseInvoice entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * purchaseInvoice entity
   *
   * @param {number} [body.totalAmountIncludingTax] The totalAmountIncludingTax
   * property for the purchaseInvoice entity
   *
   * @param {string} [body.status] The status property for the purchaseInvoice
   * entity
   *
   * @param {date} [body.lastModifiedDateTime] The lastModifiedDateTime property
   * for the purchaseInvoice entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PurchaseInvoice} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PurchaseInvoice} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchPurchaseInvoiceById(body, companyId, purchaseInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchPurchaseInvoiceById(body, companyId, purchaseInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchPurchaseInvoiceById(body, companyId, purchaseInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Performs the post action for purchaseInvoices entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postActionPurchaseInvoicesWithHttpOperationResponse(companyId, purchaseInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postActionPurchaseInvoices(companyId, purchaseInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Performs the post action for purchaseInvoices entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postActionPurchaseInvoices(companyId, purchaseInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postActionPurchaseInvoices(companyId, purchaseInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postActionPurchaseInvoices(companyId, purchaseInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of purchaseInvoiceLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetPurchaseInvoiceLinesForPurchaseInvoiceOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPurchaseInvoiceLinesForPurchaseInvoiceWithHttpOperationResponse(companyId, purchaseInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPurchaseInvoiceLinesForPurchaseInvoice(companyId, purchaseInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of purchaseInvoiceLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetPurchaseInvoiceLinesForPurchaseInvoiceOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      GetPurchaseInvoiceLinesForPurchaseInvoiceOKResponse}
   *                      for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPurchaseInvoiceLinesForPurchaseInvoice(companyId, purchaseInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPurchaseInvoiceLinesForPurchaseInvoice(companyId, purchaseInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPurchaseInvoiceLinesForPurchaseInvoice(companyId, purchaseInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a purchaseInvoiceLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the purchaseInvoiceLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * purchaseInvoiceLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the purchaseInvoiceLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * purchaseInvoiceLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * purchaseInvoiceLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * purchaseInvoiceLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitCost] The unitCost property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * purchaseInvoiceLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the purchaseInvoiceLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the purchaseInvoiceLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the purchaseInvoiceLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the purchaseInvoiceLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the purchaseInvoiceLine entity
   *
   * @param {date} [body.expectedReceiptDate] The expectedReceiptDate property
   * for the purchaseInvoiceLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PurchaseInvoiceLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postPurchaseInvoiceLineForPurchaseInvoiceWithHttpOperationResponse(body, companyId, purchaseInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postPurchaseInvoiceLineForPurchaseInvoice(body, companyId, purchaseInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a purchaseInvoiceLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the purchaseInvoiceLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * purchaseInvoiceLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the purchaseInvoiceLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * purchaseInvoiceLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * purchaseInvoiceLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * purchaseInvoiceLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitCost] The unitCost property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * purchaseInvoiceLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the purchaseInvoiceLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the purchaseInvoiceLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the purchaseInvoiceLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the purchaseInvoiceLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the purchaseInvoiceLine entity
   *
   * @param {date} [body.expectedReceiptDate] The expectedReceiptDate property
   * for the purchaseInvoiceLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PurchaseInvoiceLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PurchaseInvoiceLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postPurchaseInvoiceLineForPurchaseInvoice(body, companyId, purchaseInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postPurchaseInvoiceLineForPurchaseInvoice(body, companyId, purchaseInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postPurchaseInvoiceLineForPurchaseInvoice(body, companyId, purchaseInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an purchaseInvoiceLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PurchaseInvoiceLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPurchaseInvoiceLineForPurchaseInvoiceByIdWithHttpOperationResponse(companyId, purchaseInvoiceId, purchaseInvoiceLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPurchaseInvoiceLineForPurchaseInvoiceById(companyId, purchaseInvoiceId, purchaseInvoiceLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an purchaseInvoiceLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PurchaseInvoiceLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PurchaseInvoiceLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPurchaseInvoiceLineForPurchaseInvoiceById(companyId, purchaseInvoiceId, purchaseInvoiceLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPurchaseInvoiceLineForPurchaseInvoiceById(companyId, purchaseInvoiceId, purchaseInvoiceLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPurchaseInvoiceLineForPurchaseInvoiceById(companyId, purchaseInvoiceId, purchaseInvoiceLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an purchaseInvoiceLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deletePurchaseInvoiceLineForPurchaseInvoiceByIdByIdWithHttpOperationResponse(companyId, purchaseInvoiceId, purchaseInvoiceLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deletePurchaseInvoiceLineForPurchaseInvoiceByIdById(companyId, purchaseInvoiceId, purchaseInvoiceLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an purchaseInvoiceLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deletePurchaseInvoiceLineForPurchaseInvoiceByIdById(companyId, purchaseInvoiceId, purchaseInvoiceLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deletePurchaseInvoiceLineForPurchaseInvoiceByIdById(companyId, purchaseInvoiceId, purchaseInvoiceLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deletePurchaseInvoiceLineForPurchaseInvoiceByIdById(companyId, purchaseInvoiceId, purchaseInvoiceLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified purchaseInvoiceLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the purchaseInvoiceLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * purchaseInvoiceLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the purchaseInvoiceLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * purchaseInvoiceLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * purchaseInvoiceLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * purchaseInvoiceLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitCost] The unitCost property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * purchaseInvoiceLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the purchaseInvoiceLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the purchaseInvoiceLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the purchaseInvoiceLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the purchaseInvoiceLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the purchaseInvoiceLine entity
   *
   * @param {date} [body.expectedReceiptDate] The expectedReceiptDate property
   * for the purchaseInvoiceLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PurchaseInvoiceLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchPurchaseInvoiceLineForPurchaseInvoiceByIdByIdWithHttpOperationResponse(body, companyId, purchaseInvoiceId, purchaseInvoiceLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchPurchaseInvoiceLineForPurchaseInvoiceByIdById(body, companyId, purchaseInvoiceId, purchaseInvoiceLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified purchaseInvoiceLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the purchaseInvoiceLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * purchaseInvoiceLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the purchaseInvoiceLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * purchaseInvoiceLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * purchaseInvoiceLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * purchaseInvoiceLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitCost] The unitCost property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * purchaseInvoiceLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the purchaseInvoiceLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the purchaseInvoiceLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the purchaseInvoiceLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the purchaseInvoiceLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the purchaseInvoiceLine entity
   *
   * @param {date} [body.expectedReceiptDate] The expectedReceiptDate property
   * for the purchaseInvoiceLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PurchaseInvoiceLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PurchaseInvoiceLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchPurchaseInvoiceLineForPurchaseInvoiceByIdById(body, companyId, purchaseInvoiceId, purchaseInvoiceLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchPurchaseInvoiceLineForPurchaseInvoiceByIdById(body, companyId, purchaseInvoiceId, purchaseInvoiceLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchPurchaseInvoiceLineForPurchaseInvoiceByIdById(body, companyId, purchaseInvoiceId, purchaseInvoiceLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of pdfDocument
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetPdfDocumentForPurchaseInvoiceOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPdfDocumentForPurchaseInvoiceWithHttpOperationResponse(companyId, purchaseInvoiceId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPdfDocumentForPurchaseInvoice(companyId, purchaseInvoiceId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of pdfDocument
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetPdfDocumentForPurchaseInvoiceOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetPdfDocumentForPurchaseInvoiceOKResponse}
   *                      for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPdfDocumentForPurchaseInvoice(companyId, purchaseInvoiceId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPdfDocumentForPurchaseInvoice(companyId, purchaseInvoiceId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPdfDocumentForPurchaseInvoice(companyId, purchaseInvoiceId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an pdfDocument object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {uuid} pdfDocumentId id for pdfDocument
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PdfDocument>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPdfDocumentForPurchaseInvoiceByIdWithHttpOperationResponse(companyId, purchaseInvoiceId, pdfDocumentId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPdfDocumentForPurchaseInvoiceById(companyId, purchaseInvoiceId, pdfDocumentId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an pdfDocument object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} purchaseInvoiceId id for purchaseInvoice
   *
   * @param {uuid} pdfDocumentId id for pdfDocument
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PdfDocument} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PdfDocument} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPdfDocumentForPurchaseInvoiceById(companyId, purchaseInvoiceId, pdfDocumentId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPdfDocumentForPurchaseInvoiceById(companyId, purchaseInvoiceId, pdfDocumentId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPdfDocumentForPurchaseInvoiceById(companyId, purchaseInvoiceId, pdfDocumentId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of purchaseInvoiceLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetPurchaseInvoiceLinesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPurchaseInvoiceLinesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPurchaseInvoiceLines(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of purchaseInvoiceLines
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetPurchaseInvoiceLinesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetPurchaseInvoiceLinesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPurchaseInvoiceLines(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPurchaseInvoiceLines(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPurchaseInvoiceLines(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Creates a purchaseInvoiceLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the purchaseInvoiceLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * purchaseInvoiceLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the purchaseInvoiceLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * purchaseInvoiceLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * purchaseInvoiceLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * purchaseInvoiceLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitCost] The unitCost property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * purchaseInvoiceLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the purchaseInvoiceLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the purchaseInvoiceLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the purchaseInvoiceLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the purchaseInvoiceLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the purchaseInvoiceLine entity
   *
   * @param {date} [body.expectedReceiptDate] The expectedReceiptDate property
   * for the purchaseInvoiceLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PurchaseInvoiceLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  postPurchaseInvoiceLineWithHttpOperationResponse(body, companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._postPurchaseInvoiceLine(body, companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Creates a purchaseInvoiceLine in Dynamics 365 Business Central
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the purchaseInvoiceLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * purchaseInvoiceLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the purchaseInvoiceLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * purchaseInvoiceLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * purchaseInvoiceLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * purchaseInvoiceLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitCost] The unitCost property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * purchaseInvoiceLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the purchaseInvoiceLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the purchaseInvoiceLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the purchaseInvoiceLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the purchaseInvoiceLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the purchaseInvoiceLine entity
   *
   * @param {date} [body.expectedReceiptDate] The expectedReceiptDate property
   * for the purchaseInvoiceLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PurchaseInvoiceLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PurchaseInvoiceLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  postPurchaseInvoiceLine(body, companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._postPurchaseInvoiceLine(body, companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._postPurchaseInvoiceLine(body, companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an purchaseInvoiceLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PurchaseInvoiceLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPurchaseInvoiceLineByIdWithHttpOperationResponse(companyId, purchaseInvoiceLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPurchaseInvoiceLineById(companyId, purchaseInvoiceLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an purchaseInvoiceLine
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.expand] Entities to expand
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PurchaseInvoiceLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PurchaseInvoiceLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPurchaseInvoiceLineById(companyId, purchaseInvoiceLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPurchaseInvoiceLineById(companyId, purchaseInvoiceLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPurchaseInvoiceLineById(companyId, purchaseInvoiceLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Delete an purchaseInvoiceLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deletePurchaseInvoiceLineByIdWithHttpOperationResponse(companyId, purchaseInvoiceLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deletePurchaseInvoiceLineById(companyId, purchaseInvoiceLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete an purchaseInvoiceLine in Dynamics 365 Business Central
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deletePurchaseInvoiceLineById(companyId, purchaseInvoiceLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deletePurchaseInvoiceLineById(companyId, purchaseInvoiceLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deletePurchaseInvoiceLineById(companyId, purchaseInvoiceLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Lets the user patch the specified purchaseInvoiceLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the purchaseInvoiceLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * purchaseInvoiceLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the purchaseInvoiceLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * purchaseInvoiceLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * purchaseInvoiceLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * purchaseInvoiceLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitCost] The unitCost property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * purchaseInvoiceLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the purchaseInvoiceLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the purchaseInvoiceLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the purchaseInvoiceLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the purchaseInvoiceLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the purchaseInvoiceLine entity
   *
   * @param {date} [body.expectedReceiptDate] The expectedReceiptDate property
   * for the purchaseInvoiceLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PurchaseInvoiceLine>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  patchPurchaseInvoiceLineByIdWithHttpOperationResponse(body, companyId, purchaseInvoiceLineId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._patchPurchaseInvoiceLineById(body, companyId, purchaseInvoiceLineId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Lets the user patch the specified purchaseInvoiceLine
   *
   * @param {object} body
   *
   * @param {string} [body.id] The id property for the purchaseInvoiceLine entity
   *
   * @param {uuid} [body.documentId] The documentId property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.sequence] The sequence property for the
   * purchaseInvoiceLine entity
   *
   * @param {uuid} [body.itemId] The itemId property for the purchaseInvoiceLine
   * entity
   *
   * @param {uuid} [body.accountId] The accountId property for the
   * purchaseInvoiceLine entity
   *
   * @param {string} [body.lineType] The lineType property for the
   * purchaseInvoiceLine entity
   *
   * @param {object} [body.lineDetails]
   *
   * @param {string} [body.lineDetails.number] The number property for the
   * documentlineobjectdetailstype entity
   *
   * @param {string} [body.lineDetails.displayName] The displayName property for
   * the documentlineobjectdetailstype entity
   *
   * @param {object} [body.lineDetails.item]
   *
   * @param {uuid} [body.lineDetails.item.id] The id property for the item entity
   *
   * @param {string} [body.lineDetails.item.number] The number property for the
   * item entity
   *
   * @param {string} [body.lineDetails.item.displayName] The displayName property
   * for the item entity
   *
   * @param {string} [body.lineDetails.item.type] The type property for the item
   * entity
   *
   * @param {uuid} [body.lineDetails.item.itemCategoryId] The itemCategoryId
   * property for the item entity
   *
   * @param {string} [body.lineDetails.item.itemCategoryCode] The
   * itemCategoryCode property for the item entity
   *
   * @param {boolean} [body.lineDetails.item.blocked] The blocked property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.baseUnitOfMeasureId] The
   * baseUnitOfMeasureId property for the item entity
   *
   * @param {object} [body.lineDetails.item.baseUnitOfMeasure]
   *
   * @param {string} [body.lineDetails.item.gtin] The gtin property for the item
   * entity
   *
   * @param {number} [body.lineDetails.item.inventory] The inventory property for
   * the item entity
   *
   * @param {number} [body.lineDetails.item.unitPrice] The unitPrice property for
   * the item entity
   *
   * @param {boolean} [body.lineDetails.item.priceIncludesTax] The
   * priceIncludesTax property for the item entity
   *
   * @param {number} [body.lineDetails.item.unitCost] The unitCost property for
   * the item entity
   *
   * @param {uuid} [body.lineDetails.item.taxGroupId] The taxGroupId property for
   * the item entity
   *
   * @param {string} [body.lineDetails.item.taxGroupCode] The taxGroupCode
   * property for the item entity
   *
   * @param {date} [body.lineDetails.item.lastModifiedDateTime] The
   * lastModifiedDateTime property for the item entity
   *
   * @param {array} [body.lineDetails.item.picture]
   *
   * @param {array} [body.lineDetails.item.defaultDimensions]
   *
   * @param {object} [body.lineDetails.item.itemCategory]
   *
   * @param {object} [body.lineDetails.account]
   *
   * @param {uuid} [body.lineDetails.account.id] The id property for the account
   * entity
   *
   * @param {string} [body.lineDetails.account.number] The number property for
   * the account entity
   *
   * @param {string} [body.lineDetails.account.displayName] The displayName
   * property for the account entity
   *
   * @param {string} [body.lineDetails.account.category] The category property
   * for the account entity
   *
   * @param {string} [body.lineDetails.account.subCategory] The subCategory
   * property for the account entity
   *
   * @param {boolean} [body.lineDetails.account.blocked] The blocked property for
   * the account entity
   *
   * @param {date} [body.lineDetails.account.lastModifiedDateTime] The
   * lastModifiedDateTime property for the account entity
   *
   * @param {string} [body.description] The description property for the
   * purchaseInvoiceLine entity
   *
   * @param {object} [body.unitOfMeasure]
   *
   * @param {string} [body.unitOfMeasure.code] The code property for the
   * unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.displayName] The displayName property
   * for the unitofmeasuretype entity
   *
   * @param {string} [body.unitOfMeasure.symbol] The symbol property for the
   * unitofmeasuretype entity
   *
   * @param {object} [body.unitOfMeasure.unitConversion]
   *
   * @param {string} [body.unitOfMeasure.unitConversion.toUnitOfMeasure] The
   * toUnitOfMeasure property for the itemunitofmeasureconversiontype entity
   *
   * @param {number} [body.unitOfMeasure.unitConversion.fromToConversionRate] The
   * fromToConversionRate property for the itemunitofmeasureconversiontype entity
   *
   * @param {array} [body.unitOfMeasure.unitConversion.picture]
   *
   * @param {array} [body.unitOfMeasure.unitConversion.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.unitConversion.itemCategory]
   *
   * @param {array} [body.unitOfMeasure.picture]
   *
   * @param {array} [body.unitOfMeasure.defaultDimensions]
   *
   * @param {object} [body.unitOfMeasure.itemCategory]
   *
   * @param {uuid} [body.unitOfMeasure.itemCategory.id] The id property for the
   * itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.code] The code property for
   * the itemCategory entity
   *
   * @param {string} [body.unitOfMeasure.itemCategory.displayName] The
   * displayName property for the itemCategory entity
   *
   * @param {date} [body.unitOfMeasure.itemCategory.lastModifiedDateTime] The
   * lastModifiedDateTime property for the itemCategory entity
   *
   * @param {number} [body.unitCost] The unitCost property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.quantity] The quantity property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.discountAmount] The discountAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.discountPercent] The discountPercent property for the
   * purchaseInvoiceLine entity
   *
   * @param {boolean} [body.discountAppliedBeforeTax] The
   * discountAppliedBeforeTax property for the purchaseInvoiceLine entity
   *
   * @param {number} [body.amountExcludingTax] The amountExcludingTax property
   * for the purchaseInvoiceLine entity
   *
   * @param {string} [body.taxCode] The taxCode property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.taxPercent] The taxPercent property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.totalTaxAmount] The totalTaxAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.amountIncludingTax] The amountIncludingTax property
   * for the purchaseInvoiceLine entity
   *
   * @param {number} [body.invoiceDiscountAllocation] The
   * invoiceDiscountAllocation property for the purchaseInvoiceLine entity
   *
   * @param {number} [body.netAmount] The netAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.netTaxAmount] The netTaxAmount property for the
   * purchaseInvoiceLine entity
   *
   * @param {number} [body.netAmountIncludingTax] The netAmountIncludingTax
   * property for the purchaseInvoiceLine entity
   *
   * @param {date} [body.expectedReceiptDate] The expectedReceiptDate property
   * for the purchaseInvoiceLine entity
   *
   * @param {uuid} companyId id for company
   *
   * @param {string} purchaseInvoiceLineId id for purchaseInvoiceLine
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PurchaseInvoiceLine} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PurchaseInvoiceLine} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  patchPurchaseInvoiceLineById(body, companyId, purchaseInvoiceLineId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._patchPurchaseInvoiceLineById(body, companyId, purchaseInvoiceLineId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._patchPurchaseInvoiceLineById(body, companyId, purchaseInvoiceLineId, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of customerSales
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetCustomerSalesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCustomerSalesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCustomerSales(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of customerSales
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetCustomerSalesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetCustomerSalesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCustomerSales(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCustomerSales(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCustomerSales(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an customerSale object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerSaleCustomerId customerId for customerSale
   *
   * @param {string} customerSaleCustomerNumber customerNumber for customerSale
   *
   * @param {string} customerSaleName name for customerSale
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CustomerSale>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCustomerSaleByNameByCustomerNumberByCustomerIdWithHttpOperationResponse(companyId, customerSaleCustomerId, customerSaleCustomerNumber, customerSaleName, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCustomerSaleByNameByCustomerNumberByCustomerId(companyId, customerSaleCustomerId, customerSaleCustomerNumber, customerSaleName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an customerSale object
   * for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} customerSaleCustomerId customerId for customerSale
   *
   * @param {string} customerSaleCustomerNumber customerNumber for customerSale
   *
   * @param {string} customerSaleName name for customerSale
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CustomerSale} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CustomerSale} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCustomerSaleByNameByCustomerNumberByCustomerId(companyId, customerSaleCustomerId, customerSaleCustomerNumber, customerSaleName, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCustomerSaleByNameByCustomerNumberByCustomerId(companyId, customerSaleCustomerId, customerSaleCustomerNumber, customerSaleName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCustomerSaleByNameByCustomerNumberByCustomerId(companyId, customerSaleCustomerId, customerSaleCustomerNumber, customerSaleName, options, optionalCallback);
    }
  }

  /**
   * @summary Returns a list of vendorPurchases
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GetVendorPurchasesOKResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getVendorPurchasesWithHttpOperationResponse(companyId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getVendorPurchases(companyId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Returns a list of vendorPurchases
   *
   * @param {uuid} companyId id for company
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GetVendorPurchasesOKResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GetVendorPurchasesOKResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getVendorPurchases(companyId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getVendorPurchases(companyId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getVendorPurchases(companyId, options, optionalCallback);
    }
  }

  /**
   * @summary Retrieve the properties and relationships of an vendorPurchase
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorPurchaseVendorId vendorId for vendorPurchase
   *
   * @param {string} vendorPurchaseVendorNumber vendorNumber for vendorPurchase
   *
   * @param {string} vendorPurchaseName name for vendorPurchase
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VendorPurchase>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getVendorPurchaseByNameByVendorNumberByVendorIdWithHttpOperationResponse(companyId, vendorPurchaseVendorId, vendorPurchaseVendorNumber, vendorPurchaseName, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getVendorPurchaseByNameByVendorNumberByVendorId(companyId, vendorPurchaseVendorId, vendorPurchaseVendorNumber, vendorPurchaseName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Retrieve the properties and relationships of an vendorPurchase
   * object for Dynamics 365 Business Central.
   *
   * @param {uuid} companyId id for company
   *
   * @param {uuid} vendorPurchaseVendorId vendorId for vendorPurchase
   *
   * @param {string} vendorPurchaseVendorNumber vendorNumber for vendorPurchase
   *
   * @param {string} vendorPurchaseName name for vendorPurchase
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.select] Selected properties to be retrieved
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {VendorPurchase} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VendorPurchase} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getVendorPurchaseByNameByVendorNumberByVendorId(companyId, vendorPurchaseVendorId, vendorPurchaseVendorNumber, vendorPurchaseName, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getVendorPurchaseByNameByVendorNumberByVendorId(companyId, vendorPurchaseVendorId, vendorPurchaseVendorNumber, vendorPurchaseName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getVendorPurchaseByNameByVendorNumberByVendorId(companyId, vendorPurchaseVendorId, vendorPurchaseVendorNumber, vendorPurchaseName, options, optionalCallback);
    }
  }

}

module.exports = Dynamics365BusinessCentral;
module.exports['default'] = Dynamics365BusinessCentral;
module.exports.Dynamics365BusinessCentral = Dynamics365BusinessCentral;
module.exports.Dynamics365BusinessCentralModels = models;
