/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * An object that represents a token for a container registry.
 *
 * @extends models['ProxyResource']
 */
class Token extends models['ProxyResource'] {
  /**
   * Create a Token.
   * @property {date} [creationDate] The creation date of scope map.
   * @property {string} [provisioningState] Provisioning state of the resource.
   * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded',
   * 'Failed', 'Canceled'
   * @property {string} [scopeMapId] The resource ID of the scope map to which
   * the token will be associated with.
   * @property {string} [objectId] The user/group/application object ID for
   * which the token has to be created.
   * @property {object} [credentials] The credentials that can be used for
   * authenticating the token.
   * @property {array} [credentials.certificates]
   * @property {array} [credentials.passwords]
   * @property {string} [status] The status of the token example enabled or
   * disabled. Possible values include: 'enabled', 'disabled'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Token
   *
   * @returns {object} metadata of Token
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Token',
      type: {
        name: 'Composite',
        className: 'Token',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          creationDate: {
            required: false,
            readOnly: true,
            serializedName: 'properties.creationDate',
            type: {
              name: 'DateTime'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          scopeMapId: {
            required: false,
            serializedName: 'properties.scopeMapId',
            type: {
              name: 'String'
            }
          },
          objectId: {
            required: false,
            serializedName: 'properties.objectId',
            type: {
              name: 'String'
            }
          },
          credentials: {
            required: false,
            serializedName: 'properties.credentials',
            type: {
              name: 'Composite',
              className: 'TokenCredentialsProperties'
            }
          },
          status: {
            required: false,
            serializedName: 'properties.status',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Token;
