/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The parameters for updating a container registry.
 *
 */
class RegistryUpdateParameters {
  /**
   * Create a RegistryUpdateParameters.
   * @property {object} [tags] The tags for the container registry.
   * @property {object} [sku] The SKU of the container registry.
   * @property {string} [sku.name] The SKU name of the container registry.
   * Required for registry creation. Possible values include: 'Classic',
   * 'Basic', 'Standard', 'Premium'
   * @property {string} [sku.tier] The SKU tier based on the SKU name. Possible
   * values include: 'Classic', 'Basic', 'Standard', 'Premium'
   * @property {boolean} [adminUserEnabled] The value that indicates whether
   * the admin user is enabled.
   * @property {object} [networkRuleSet] The network rule set for a container
   * registry.
   * @property {string} [networkRuleSet.defaultAction] The default action of
   * allow or deny when no other rules match. Possible values include: 'Allow',
   * 'Deny'
   * @property {array} [networkRuleSet.virtualNetworkRules] The virtual network
   * rules.
   * @property {array} [networkRuleSet.ipRules] The IP ACL rules.
   * @property {object} [policies] The policies for a container registry.
   * @property {object} [policies.quarantinePolicy] The quarantine policy for a
   * container registry.
   * @property {string} [policies.quarantinePolicy.status] The value that
   * indicates whether the policy is enabled or not. Possible values include:
   * 'enabled', 'disabled'
   * @property {object} [policies.trustPolicy] The content trust policy for a
   * container registry.
   * @property {string} [policies.trustPolicy.type] The type of trust policy.
   * Possible values include: 'Notary'
   * @property {string} [policies.trustPolicy.status] The value that indicates
   * whether the policy is enabled or not. Possible values include: 'enabled',
   * 'disabled'
   * @property {object} [policies.retentionPolicy] The retention policy for a
   * container registry.
   * @property {number} [policies.retentionPolicy.days] The number of days to
   * retain manifest before it expires.
   * @property {date} [policies.retentionPolicy.lastUpdatedTime] The timestamp
   * when the policy was last updated.
   * @property {string} [policies.retentionPolicy.status] The value that
   * indicates whether the policy is enabled or not. Possible values include:
   * 'enabled', 'disabled'
   */
  constructor() {
  }

  /**
   * Defines the metadata of RegistryUpdateParameters
   *
   * @returns {object} metadata of RegistryUpdateParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'RegistryUpdateParameters',
      type: {
        name: 'Composite',
        className: 'RegistryUpdateParameters',
        modelProperties: {
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          sku: {
            required: false,
            serializedName: 'sku',
            type: {
              name: 'Composite',
              className: 'Sku'
            }
          },
          adminUserEnabled: {
            required: false,
            serializedName: 'properties.adminUserEnabled',
            type: {
              name: 'Boolean'
            }
          },
          networkRuleSet: {
            required: false,
            serializedName: 'properties.networkRuleSet',
            type: {
              name: 'Composite',
              className: 'NetworkRuleSet'
            }
          },
          policies: {
            required: false,
            serializedName: 'properties.policies',
            type: {
              name: 'Composite',
              className: 'Policies'
            }
          }
        }
      }
    };
  }
}

module.exports = RegistryUpdateParameters;
