/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the OutputFile class.
 * @constructor
 * @summary A specification for uploading files from an Azure Batch node to
 * another location after the Batch service has finished executing the task
 * process.
 *
 * @member {string} filePattern A pattern indicating which file(s) to upload.
 * Both relative and absolute paths are supported. Relative paths are relative
 * to the task working directory. For wildcards, use * to match any character
 * and ** to match any directory. For example, **\*.txt matches any file ending
 * in .txt in the task working directory or any subdirectory. Note that \ and /
 * are treated interchangeably and mapped to the correct directory separator on
 * the compute node operating system.
 *
 * @member {object} destination The destination for the output file(s).
 *
 * @member {object} [destination.container]
 *
 * @member {string} [destination.container.path] If filePattern refers to a
 * specific file (i.e. contains no wildcards), then path is the name of the
 * blob to which to upload that file. If filePattern contains one or more
 * wildcards (and therefore may match multiple files), then path is the name of
 * the blob virtual directory (which is prepended to each blob name) to which
 * to upload the file(s). If omitted, file(s) are uploaded to the root of the
 * container with a blob name matching their file name.
 *
 * @member {string} [destination.container.containerUrl] The URL must include a
 * Shared Access Signature (SAS) granting write permissions to the container.
 *
 * @member {object} uploadOptions Additional options for the upload operation,
 * including under what conditions to perform the upload.
 *
 * @member {string} [uploadOptions.uploadCondition] The default is
 * taskCompletion. Possible values include: 'taskSuccess', 'taskFailure',
 * 'taskCompletion'
 *
 */
class OutputFile {
  constructor() {
  }

  /**
   * Defines the metadata of OutputFile
   *
   * @returns {object} metadata of OutputFile
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'OutputFile',
      type: {
        name: 'Composite',
        className: 'OutputFile',
        modelProperties: {
          filePattern: {
            required: true,
            serializedName: 'filePattern',
            type: {
              name: 'String'
            }
          },
          destination: {
            required: true,
            serializedName: 'destination',
            type: {
              name: 'Composite',
              className: 'OutputFileDestination'
            }
          },
          uploadOptions: {
            required: true,
            serializedName: 'uploadOptions',
            type: {
              name: 'Composite',
              className: 'OutputFileUploadOptions'
            }
          }
        }
      }
    };
  }
}

module.exports = OutputFile;
