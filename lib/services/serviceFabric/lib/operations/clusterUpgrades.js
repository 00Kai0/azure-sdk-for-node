/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');
var msRest = require('ms-rest');
var WebResource = msRest.WebResource;

/**
 * @class
 * ClusterUpgrades
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricClient.
 * Initializes a new instance of the ClusterUpgrades class.
 * @constructor
 *
 * @param {ServiceFabricClient} client Reference to the service client.
 */
function ClusterUpgrades(client) {
  this.client = client;
}

/**
 * Start cluster upgrades
 *
 * @param {object} startClusterUpgrade The upgrade of the start cluster
 * 
 * @param {string} [startClusterUpgrade.configVersion]
 * 
 * @param {string} [startClusterUpgrade.codeVersion]
 * 
 * @param {string} [startClusterUpgrade.upgradeKind]
 * 
 * @param {string} [startClusterUpgrade.rollingUpgradeMode] Possible values
 * include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual', 'Monitored'
 * 
 * @param {number}
 * [startClusterUpgrade.upgradeReplicaSetCheckTimeoutInSeconds]
 * 
 * @param {boolean} [startClusterUpgrade.forceRestart]
 * 
 * @param {boolean} [startClusterUpgrade.enableDeltaHealthEvaluation]
 * 
 * @param {object} [startClusterUpgrade.monitoringPolicy]
 * 
 * @param {object} [startClusterUpgrade.clusterUpgradeHealthPolicy]
 * 
 * @param {number}
 * [startClusterUpgrade.clusterUpgradeHealthPolicy.maxPercentDeltaUnhealthyNodes]
 * 
 * @param {number}
 * [startClusterUpgrade.clusterUpgradeHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes]
 * 
 * @param {object} [startClusterUpgrade.applicationHealthPolicyMap]
 * 
 * @param {boolean}
 * [startClusterUpgrade.applicationHealthPolicyMap.considerWarningAsError]
 * 
 * @param {number}
 * [startClusterUpgrade.applicationHealthPolicyMap.maxPercentUnhealthyDeployedApplications]
 * 
 * @param {number}
 * [startClusterUpgrade.applicationHealthPolicyMap.defaultServiceTypeHealthPolicy]
 * 
 * @param {number}
 * [startClusterUpgrade.applicationHealthPolicyMap.maxPercentUnhealthyServices]
 * 
 * @param {number}
 * [startClusterUpgrade.applicationHealthPolicyMap.maxPercentUnhealthyPartitionsPerService]
 * 
 * @param {number}
 * [startClusterUpgrade.applicationHealthPolicyMap.maxPercentUnhealthyReplicasPerPartition]
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {string} [result]   - The deserialized result object.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
ClusterUpgrades.prototype.start = function (startClusterUpgrade, options, callback) {
  var client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (startClusterUpgrade === null || startClusterUpgrade === undefined) {
      throw new Error('startClusterUpgrade cannot be null or undefined.');
    }
    if (this.client.timeout !== null && this.client.timeout !== undefined && typeof this.client.timeout !== 'number') {
      throw new Error('this.client.timeout must be of type number.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  var requestUrl = this.client.baseUri +
                   '//$/Upgrade';
  var queryParameters = [];
  if (this.client.timeout !== null && this.client.timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(this.client.timeout.toString()));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }
  // trim all duplicate forward slashes in the url
  var regex = /([^:]\/)\/+/gi;
  requestUrl = requestUrl.replace(regex, '$1');

  // Create HTTP transport objects
  var httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(var headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  var requestContent = null;
  var requestModel = null;
  try {
    if (startClusterUpgrade !== null && startClusterUpgrade !== undefined) {
      var requestModelMapper = new client.models['StartClusterUpgrade']().mapper();
      requestModel = client.serialize(requestModelMapper, startClusterUpgrade, 'startClusterUpgrade');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    var serializationError = new Error(util.format('Error "%s" occurred in serializing the ' + 
        'payload - "%s"', error.message, util.inspect(startClusterUpgrade, {depth: null})));
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, function (err, response, responseBody) {
    if (err) {
      return callback(err);
    }
    var statusCode = response.statusCode;
    if (statusCode !== 200) {
      var error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      var parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          var resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = util.format('Error "%s" occurred in deserializing the responseBody ' + 
                         '- "%s" for the default response.', defaultError.message, responseBody);
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    var result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      var parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          var resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'String'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        var deserializationError = new Error(util.format('Error "%s" occurred in deserializing the responseBody - "%s"', error, responseBody));
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
};

/**
 * Update cluster upgrades
 *
 * @param {object} updateClusterUpgrade The description of the update cluster
 * upgrade
 * 
 * @param {string} [updateClusterUpgrade.upgradeKind]
 * 
 * @param {object} [updateClusterUpgrade.updateDescription]
 * 
 * @param {string} [updateClusterUpgrade.updateDescription.rollingUpgradeMode]
 * Possible values include: 'Invalid', 'UnmonitoredAuto',
 * 'UnmonitoredManual', 'Monitored'
 * 
 * @param {boolean} [updateClusterUpgrade.updateDescription.forceRestart]
 * 
 * @param {string} [updateClusterUpgrade.updateDescription.failureAction]
 * 
 * @param {number}
 * [updateClusterUpgrade.updateDescription.upgradeReplicaSetCheckTimeoutInSeconds]
 * 
 * @param {string}
 * [updateClusterUpgrade.updateDescription.healthCheckWaitDurationInMilliseconds]
 * 
 * @param {string}
 * [updateClusterUpgrade.updateDescription.healthCheckStableDurationInMilliseconds]
 * 
 * @param {string}
 * [updateClusterUpgrade.updateDescription.healthCheckRetryTimeoutInMilliseconds]
 * 
 * @param {string}
 * [updateClusterUpgrade.updateDescription.upgradeTimeoutInMilliseconds]
 * 
 * @param {string}
 * [updateClusterUpgrade.updateDescription.upgradeDomainTimeoutInMilliseconds]
 * 
 * @param {object} [updateClusterUpgrade.clusterHealthPolicy]
 * 
 * @param {string}
 * [updateClusterUpgrade.clusterHealthPolicy.rollingUpgradeMode] Possible
 * values include: 'Invalid', 'UnmonitoredAuto', 'UnmonitoredManual',
 * 'Monitored'
 * 
 * @param {boolean} [updateClusterUpgrade.clusterHealthPolicy.forceRestart]
 * 
 * @param {string} [updateClusterUpgrade.clusterHealthPolicy.failureAction]
 * 
 * @param {number}
 * [updateClusterUpgrade.clusterHealthPolicy.upgradeReplicaSetCheckTimeoutInSeconds]
 * 
 * @param {string}
 * [updateClusterUpgrade.clusterHealthPolicy.healthCheckWaitDurationInMilliseconds]
 * 
 * @param {string}
 * [updateClusterUpgrade.clusterHealthPolicy.healthCheckStableDurationInMilliseconds]
 * 
 * @param {string}
 * [updateClusterUpgrade.clusterHealthPolicy.healthCheckRetryTimeoutInMilliseconds]
 * 
 * @param {string}
 * [updateClusterUpgrade.clusterHealthPolicy.upgradeTimeoutInMilliseconds]
 * 
 * @param {string}
 * [updateClusterUpgrade.clusterHealthPolicy.upgradeDomainTimeoutInMilliseconds]
 * 
 * @param {boolean} [updateClusterUpgrade.enableDeltaHealthEvaluations]
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {string} [result]   - The deserialized result object.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
ClusterUpgrades.prototype.update = function (updateClusterUpgrade, options, callback) {
  var client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (updateClusterUpgrade === null || updateClusterUpgrade === undefined) {
      throw new Error('updateClusterUpgrade cannot be null or undefined.');
    }
    if (this.client.timeout !== null && this.client.timeout !== undefined && typeof this.client.timeout !== 'number') {
      throw new Error('this.client.timeout must be of type number.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  var requestUrl = this.client.baseUri +
                   '//$/UpdateUpgrade';
  var queryParameters = [];
  if (this.client.timeout !== null && this.client.timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(this.client.timeout.toString()));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }
  // trim all duplicate forward slashes in the url
  var regex = /([^:]\/)\/+/gi;
  requestUrl = requestUrl.replace(regex, '$1');

  // Create HTTP transport objects
  var httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(var headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  var requestContent = null;
  var requestModel = null;
  try {
    if (updateClusterUpgrade !== null && updateClusterUpgrade !== undefined) {
      var requestModelMapper = new client.models['UpdateClusterUpgrade']().mapper();
      requestModel = client.serialize(requestModelMapper, updateClusterUpgrade, 'updateClusterUpgrade');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    var serializationError = new Error(util.format('Error "%s" occurred in serializing the ' + 
        'payload - "%s"', error.message, util.inspect(updateClusterUpgrade, {depth: null})));
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, function (err, response, responseBody) {
    if (err) {
      return callback(err);
    }
    var statusCode = response.statusCode;
    if (statusCode !== 200) {
      var error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      var parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          var resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = util.format('Error "%s" occurred in deserializing the responseBody ' + 
                         '- "%s" for the default response.', defaultError.message, responseBody);
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    var result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      var parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          var resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'String'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        var deserializationError = new Error(util.format('Error "%s" occurred in deserializing the responseBody - "%s"', error, responseBody));
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
};

/**
 * Resume cluster upgrades
 *
 * @param {object} resumeClusterUpgrade The upgrade of the cluster
 * 
 * @param {string} [resumeClusterUpgrade.upgradeDomain]
 * 
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {string} [result]   - The deserialized result object.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
ClusterUpgrades.prototype.resume = function (resumeClusterUpgrade, options, callback) {
  var client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resumeClusterUpgrade === null || resumeClusterUpgrade === undefined) {
      throw new Error('resumeClusterUpgrade cannot be null or undefined.');
    }
    if (this.client.timeout !== null && this.client.timeout !== undefined && typeof this.client.timeout !== 'number') {
      throw new Error('this.client.timeout must be of type number.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  var requestUrl = this.client.baseUri +
                   '//$/MoveToNextUpgradeDomain';
  var queryParameters = [];
  if (this.client.timeout !== null && this.client.timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(this.client.timeout.toString()));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }
  // trim all duplicate forward slashes in the url
  var regex = /([^:]\/)\/+/gi;
  requestUrl = requestUrl.replace(regex, '$1');

  // Create HTTP transport objects
  var httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(var headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  var requestContent = null;
  var requestModel = null;
  try {
    if (resumeClusterUpgrade !== null && resumeClusterUpgrade !== undefined) {
      var requestModelMapper = new client.models['ResumeClusterUpgrade']().mapper();
      requestModel = client.serialize(requestModelMapper, resumeClusterUpgrade, 'resumeClusterUpgrade');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    var serializationError = new Error(util.format('Error "%s" occurred in serializing the ' + 
        'payload - "%s"', error.message, util.inspect(resumeClusterUpgrade, {depth: null})));
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, function (err, response, responseBody) {
    if (err) {
      return callback(err);
    }
    var statusCode = response.statusCode;
    if (statusCode !== 200) {
      var error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      var parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          var resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = util.format('Error "%s" occurred in deserializing the responseBody ' + 
                         '- "%s" for the default response.', defaultError.message, responseBody);
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    var result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      var parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          var resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'String'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        var deserializationError = new Error(util.format('Error "%s" occurred in deserializing the responseBody - "%s"', error, responseBody));
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
};

/**
 * Rollback cluster upgrades
 *
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {string} [result]   - The deserialized result object.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
ClusterUpgrades.prototype.rollback = function (options, callback) {
  var client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.timeout !== null && this.client.timeout !== undefined && typeof this.client.timeout !== 'number') {
      throw new Error('this.client.timeout must be of type number.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  var requestUrl = this.client.baseUri +
                   '//$/RollbackUpgrade';
  var queryParameters = [];
  if (this.client.timeout !== null && this.client.timeout !== undefined) {
    queryParameters.push('timeout=' + encodeURIComponent(this.client.timeout.toString()));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }
  // trim all duplicate forward slashes in the url
  var regex = /([^:]\/)\/+/gi;
  requestUrl = requestUrl.replace(regex, '$1');

  // Create HTTP transport objects
  var httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(var headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, function (err, response, responseBody) {
    if (err) {
      return callback(err);
    }
    var statusCode = response.statusCode;
    if (statusCode !== 200) {
      var error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      var parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          var resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = util.format('Error "%s" occurred in deserializing the responseBody ' + 
                         '- "%s" for the default response.', defaultError.message, responseBody);
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    var result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      var parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          var resultMapper = {
            required: false,
            serializedName: 'parsedResponse',
            type: {
              name: 'String'
            }
          };
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        var deserializationError = new Error(util.format('Error "%s" occurred in deserializing the responseBody - "%s"', error, responseBody));
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
};


module.exports = ClusterUpgrades;
