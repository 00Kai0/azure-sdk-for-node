/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Permissions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AuthorizationManagementClient.
 */
export interface Permissions {


    /**
     * Gets all permissions the caller has for a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group to get the
     * permissions for. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PermissionGetResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PermissionGetResult>>;

    /**
     * Gets all permissions the caller has for a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group to get the
     * permissions for. The name is case insensitive.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PermissionGetResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PermissionGetResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PermissionGetResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PermissionGetResult>;
    listForResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.PermissionGetResult>): void;
    listForResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PermissionGetResult>): void;


    /**
     * Gets all permissions the caller has for a resource.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the resource. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the resource.
     *
     * @param {string} resourceName The name of the resource to get the permissions
     * for.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PermissionGetResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForResourceWithHttpOperationResponse(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PermissionGetResult>>;

    /**
     * Gets all permissions the caller has for a resource.
     *
     * @param {string} resourceGroupName The name of the resource group containing
     * the resource. The name is case insensitive.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} parentResourcePath The parent resource identity.
     *
     * @param {string} resourceType The resource type of the resource.
     *
     * @param {string} resourceName The name of the resource to get the permissions
     * for.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PermissionGetResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PermissionGetResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PermissionGetResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PermissionGetResult>;
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, callback: ServiceCallback<models.PermissionGetResult>): void;
    listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PermissionGetResult>): void;


    /**
     * Gets all permissions the caller has for a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PermissionGetResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PermissionGetResult>>;

    /**
     * Gets all permissions the caller has for a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PermissionGetResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PermissionGetResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PermissionGetResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PermissionGetResult>;
    listForResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.PermissionGetResult>): void;
    listForResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PermissionGetResult>): void;


    /**
     * Gets all permissions the caller has for a resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PermissionGetResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listForResourceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PermissionGetResult>>;

    /**
     * Gets all permissions the caller has for a resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PermissionGetResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PermissionGetResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PermissionGetResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listForResourceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PermissionGetResult>;
    listForResourceNext(nextPageLink: string, callback: ServiceCallback<models.PermissionGetResult>): void;
    listForResourceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PermissionGetResult>): void;
}

/**
 * @class
 * ProviderOperationsMetadataOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AuthorizationManagementClient.
 */
export interface ProviderOperationsMetadataOperations {


    /**
     * Gets provider operations metadata for the specified resource provider.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specifies whether to expand the values.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProviderOperationsMetadata>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceProviderNamespace: string, apiVersion: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProviderOperationsMetadata>>;

    /**
     * Gets provider operations metadata for the specified resource provider.
     *
     * @param {string} resourceProviderNamespace The namespace of the resource
     * provider.
     *
     * @param {string} apiVersion The API version to use for the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specifies whether to expand the values.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProviderOperationsMetadata} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProviderOperationsMetadata} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProviderOperationsMetadata} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceProviderNamespace: string, apiVersion: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProviderOperationsMetadata>;
    get(resourceProviderNamespace: string, apiVersion: string, callback: ServiceCallback<models.ProviderOperationsMetadata>): void;
    get(resourceProviderNamespace: string, apiVersion: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProviderOperationsMetadata>): void;


    /**
     * Gets provider operations metadata for all resource providers.
     *
     * @param {string} apiVersion The API version to use for this operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specifies whether to expand the values.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProviderOperationsMetadataListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(apiVersion: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProviderOperationsMetadataListResult>>;

    /**
     * Gets provider operations metadata for all resource providers.
     *
     * @param {string} apiVersion The API version to use for this operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specifies whether to expand the values.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProviderOperationsMetadataListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProviderOperationsMetadataListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProviderOperationsMetadataListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(apiVersion: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProviderOperationsMetadataListResult>;
    list(apiVersion: string, callback: ServiceCallback<models.ProviderOperationsMetadataListResult>): void;
    list(apiVersion: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProviderOperationsMetadataListResult>): void;


    /**
     * Gets provider operations metadata for all resource providers.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProviderOperationsMetadataListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProviderOperationsMetadataListResult>>;

    /**
     * Gets provider operations metadata for all resource providers.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProviderOperationsMetadataListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProviderOperationsMetadataListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProviderOperationsMetadataListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProviderOperationsMetadataListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ProviderOperationsMetadataListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProviderOperationsMetadataListResult>): void;
}

/**
 * @class
 * RoleDefinitions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AuthorizationManagementClient.
 */
export interface RoleDefinitions {


    /**
     * Deletes a role definition.
     *
     * @param {string} scope The scope of the role definition.
     *
     * @param {string} roleDefinitionId The ID of the role definition to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RoleDefinition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(scope: string, roleDefinitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RoleDefinition>>;

    /**
     * Deletes a role definition.
     *
     * @param {string} scope The scope of the role definition.
     *
     * @param {string} roleDefinitionId The ID of the role definition to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RoleDefinition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RoleDefinition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RoleDefinition} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(scope: string, roleDefinitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RoleDefinition>;
    deleteMethod(scope: string, roleDefinitionId: string, callback: ServiceCallback<models.RoleDefinition>): void;
    deleteMethod(scope: string, roleDefinitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinition>): void;


    /**
     * Get role definition by name (GUID).
     *
     * @param {string} scope The scope of the role definition.
     *
     * @param {string} roleDefinitionId The ID of the role definition.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RoleDefinition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(scope: string, roleDefinitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RoleDefinition>>;

    /**
     * Get role definition by name (GUID).
     *
     * @param {string} scope The scope of the role definition.
     *
     * @param {string} roleDefinitionId The ID of the role definition.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RoleDefinition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RoleDefinition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RoleDefinition} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(scope: string, roleDefinitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RoleDefinition>;
    get(scope: string, roleDefinitionId: string, callback: ServiceCallback<models.RoleDefinition>): void;
    get(scope: string, roleDefinitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinition>): void;


    /**
     * Creates or updates a role definition.
     *
     * @param {string} scope The scope of the role definition.
     *
     * @param {string} roleDefinitionId The ID of the role definition.
     *
     * @param {object} roleDefinition The values for the role definition.
     *
     * @param {string} [roleDefinition.roleName] The role name.
     *
     * @param {string} [roleDefinition.description] The role definition
     * description.
     *
     * @param {string} [roleDefinition.roleType] The role type.
     *
     * @param {array} [roleDefinition.permissions] Role definition permissions.
     *
     * @param {array} [roleDefinition.assignableScopes] Role definition assignable
     * scopes.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RoleDefinition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(scope: string, roleDefinitionId: string, roleDefinition: models.RoleDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RoleDefinition>>;

    /**
     * Creates or updates a role definition.
     *
     * @param {string} scope The scope of the role definition.
     *
     * @param {string} roleDefinitionId The ID of the role definition.
     *
     * @param {object} roleDefinition The values for the role definition.
     *
     * @param {string} [roleDefinition.roleName] The role name.
     *
     * @param {string} [roleDefinition.description] The role definition
     * description.
     *
     * @param {string} [roleDefinition.roleType] The role type.
     *
     * @param {array} [roleDefinition.permissions] Role definition permissions.
     *
     * @param {array} [roleDefinition.assignableScopes] Role definition assignable
     * scopes.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RoleDefinition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RoleDefinition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RoleDefinition} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(scope: string, roleDefinitionId: string, roleDefinition: models.RoleDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RoleDefinition>;
    createOrUpdate(scope: string, roleDefinitionId: string, roleDefinition: models.RoleDefinition, callback: ServiceCallback<models.RoleDefinition>): void;
    createOrUpdate(scope: string, roleDefinitionId: string, roleDefinition: models.RoleDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinition>): void;


    /**
     * Gets a role definition by ID.
     *
     * @param {string} roleDefinitionId The fully qualified role definition ID. Use
     * the format,
     * /subscriptions/{guid}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}
     * for subscription level role definitions, or
     * /providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for
     * tenant level role definitions.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RoleDefinition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByIdWithHttpOperationResponse(roleDefinitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RoleDefinition>>;

    /**
     * Gets a role definition by ID.
     *
     * @param {string} roleDefinitionId The fully qualified role definition ID. Use
     * the format,
     * /subscriptions/{guid}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}
     * for subscription level role definitions, or
     * /providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for
     * tenant level role definitions.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RoleDefinition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RoleDefinition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RoleDefinition} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getById(roleDefinitionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RoleDefinition>;
    getById(roleDefinitionId: string, callback: ServiceCallback<models.RoleDefinition>): void;
    getById(roleDefinitionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinition>): void;


    /**
     * Get all role definitions that are applicable at scope and above.
     *
     * @param {string} scope The scope of the role definition.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation. Use
     * atScopeAndBelow filter to search below the given scope as well.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RoleDefinitionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(scope: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RoleDefinitionListResult>>;

    /**
     * Get all role definitions that are applicable at scope and above.
     *
     * @param {string} scope The scope of the role definition.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the operation. Use
     * atScopeAndBelow filter to search below the given scope as well.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RoleDefinitionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RoleDefinitionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RoleDefinitionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(scope: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.RoleDefinitionListResult>;
    list(scope: string, callback: ServiceCallback<models.RoleDefinitionListResult>): void;
    list(scope: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinitionListResult>): void;


    /**
     * Get all role definitions that are applicable at scope and above.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RoleDefinitionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RoleDefinitionListResult>>;

    /**
     * Get all role definitions that are applicable at scope and above.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RoleDefinitionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RoleDefinitionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RoleDefinitionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RoleDefinitionListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.RoleDefinitionListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleDefinitionListResult>): void;
}
