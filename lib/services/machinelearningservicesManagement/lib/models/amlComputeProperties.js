/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * AML Compute properties
 *
 */
class AmlComputeProperties {
  /**
   * Create a AmlComputeProperties.
   * @property {string} [vmSize] Virtual Machine Size
   * @property {string} [vmPriority] Virtual Machine priority. Possible values
   * include: 'Dedicated', 'LowPriority'
   * @property {object} [scaleSettings] Scale settings for AML Compute
   * @property {number} [scaleSettings.maxNodeCount] Max number of nodes to use
   * @property {number} [scaleSettings.minNodeCount] Min number of nodes to use
   * @property {moment.duration} [scaleSettings.nodeIdleTimeBeforeScaleDown]
   * Node Idle Time before scaling down amlCompute
   * @property {object} [userAccountCredentials] User account credentials.
   * Credentials for an administrator user account that will be created on each
   * compute node.
   * @property {string} [userAccountCredentials.adminUserName] Name of the
   * administrator user account which can be used to SSH to nodes.
   * @property {string} [userAccountCredentials.adminUserSshPublicKey] SSH
   * public key of the administrator user account.
   * @property {string} [userAccountCredentials.adminUserPassword] Password of
   * the administrator user account.
   * @property {object} [subnet] Subnet. Virtual network subnet resource ID the
   * compute nodes belong to.
   * @property {string} [subnet.id] The ID of the resource
   * @property {string} [allocationState] Allocation state. Allocation state of
   * the compute. Possible values are: steady - Indicates that the compute is
   * not resizing. There are no changes to the number of compute nodes in the
   * compute in progress. A compute enters this state when it is created and
   * when no operations are being performed on the compute to change the number
   * of compute nodes. resizing - Indicates that the compute is resizing; that
   * is, compute nodes are being added to or removed from the compute. Possible
   * values include: 'Steady', 'Resizing'
   * @property {date} [allocationStateTransitionTime] Allocation state
   * transition time. The time at which the compute entered its current
   * allocation state.
   * @property {array} [errors] Errors. Collection of errors encountered by
   * various compute nodes during node setup.
   * @property {number} [currentNodeCount] Current node count. The number of
   * compute nodes currently assigned to the compute.
   * @property {number} [targetNodeCount] Target node count. The target number
   * of compute nodes for the compute. If the allocationState is resizing, this
   * property denotes the target node count for the ongoing resize operation.
   * If the allocationState is steady, this property denotes the target node
   * count for the previous resize operation.
   * @property {object} [nodeStateCounts] Node state counts. Counts of various
   * node states on the compute.
   * @property {number} [nodeStateCounts.idleNodeCount] Number of compute nodes
   * in idle state.
   * @property {number} [nodeStateCounts.runningNodeCount] Number of compute
   * nodes which are running jobs.
   * @property {number} [nodeStateCounts.preparingNodeCount] Number of compute
   * nodes which are being prepared.
   * @property {number} [nodeStateCounts.unusableNodeCount] Number of compute
   * nodes which are in unusable state.
   * @property {number} [nodeStateCounts.leavingNodeCount] Number of compute
   * nodes which are leaving the amlCompute.
   * @property {number} [nodeStateCounts.preemptedNodeCount] Number of compute
   * nodes which are in preempted state.
   */
  constructor() {
  }

  /**
   * Defines the metadata of AmlComputeProperties
   *
   * @returns {object} metadata of AmlComputeProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'AmlCompute_properties',
      type: {
        name: 'Composite',
        className: 'AmlComputeProperties',
        modelProperties: {
          vmSize: {
            required: false,
            serializedName: 'vmSize',
            type: {
              name: 'String'
            }
          },
          vmPriority: {
            required: false,
            serializedName: 'vmPriority',
            type: {
              name: 'String'
            }
          },
          scaleSettings: {
            required: false,
            serializedName: 'scaleSettings',
            type: {
              name: 'Composite',
              className: 'ScaleSettings'
            }
          },
          userAccountCredentials: {
            required: false,
            serializedName: 'userAccountCredentials',
            type: {
              name: 'Composite',
              className: 'UserAccountCredentials'
            }
          },
          subnet: {
            required: false,
            serializedName: 'subnet',
            type: {
              name: 'Composite',
              className: 'ResourceId'
            }
          },
          allocationState: {
            required: false,
            readOnly: true,
            serializedName: 'allocationState',
            type: {
              name: 'String'
            }
          },
          allocationStateTransitionTime: {
            required: false,
            readOnly: true,
            serializedName: 'allocationStateTransitionTime',
            type: {
              name: 'DateTime'
            }
          },
          errors: {
            required: false,
            readOnly: true,
            serializedName: 'errors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MachineLearningServiceErrorElementType',
                  type: {
                    name: 'Composite',
                    className: 'MachineLearningServiceError'
                  }
              }
            }
          },
          currentNodeCount: {
            required: false,
            readOnly: true,
            serializedName: 'currentNodeCount',
            type: {
              name: 'Number'
            }
          },
          targetNodeCount: {
            required: false,
            readOnly: true,
            serializedName: 'targetNodeCount',
            type: {
              name: 'Number'
            }
          },
          nodeStateCounts: {
            required: false,
            readOnly: true,
            serializedName: 'nodeStateCounts',
            type: {
              name: 'Composite',
              className: 'NodeStateCounts'
            }
          }
        }
      }
    };
  }
}

module.exports = AmlComputeProperties;
