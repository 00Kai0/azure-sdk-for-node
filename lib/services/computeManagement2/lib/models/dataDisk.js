/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.12.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the DataDisk class.
 * @constructor
 * Describes a data disk.
 * @member {number} [lun] Gets or sets the logical unit number.
 * 
 * @member {number} [diskSizeGB] Gets or sets the disk size in GB for a blank
 * data disk to be created.
 * 
 * @member {string} [name] Gets or sets the disk name.
 * 
 * @member {object} [vhd] Gets or sets the Virtual Hard Disk.
 * 
 * @member {string} [vhd.uri] Gets or sets the virtual hard disk's uri. It
 * should be a valid Uri to a virtual hard disk.
 * 
 * @member {object} [image] Gets or sets the Source User Image
 * VirtualHardDisk. This VirtualHardDisk will be copied before using it to
 * attach to the Virtual Machine.If SourceImage is provided, the destination
 * VirtualHardDisk should not exist.
 * 
 * @member {string} [image.uri] Gets or sets the virtual hard disk's uri. It
 * should be a valid Uri to a virtual hard disk.
 * 
 * @member {string} [caching] Gets or sets the caching type. Possible values
 * for this property include: 'None', 'ReadOnly', 'ReadWrite'.
 * 
 * @member {string} [createOption] Gets or sets the create option. Possible
 * values for this property include: 'fromImage', 'empty', 'attach'.
 * 
 */
function DataDisk(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.lun !== undefined) {
      this.lun = parameters.lun;
    }
    if (parameters.diskSizeGB !== undefined) {
      this.diskSizeGB = parameters.diskSizeGB;
    }
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.vhd) {
      this.vhd = new models['VirtualHardDisk'](parameters.vhd);
    }
    if (parameters.image) {
      this.image = new models['VirtualHardDisk'](parameters.image);
    }
    if (parameters.caching !== undefined) {
      this.caching = parameters.caching;
    }
    if (parameters.createOption !== undefined) {
      this.createOption = parameters.createOption;
    }
  }    
}


/**
 * Validate the payload against the DataDisk schema
 *
 * @param {JSON} payload
 *
 */
DataDisk.prototype.serialize = function () {
  var payload = {};
  if (this['lun'] !== null && this['lun'] !== undefined) {
    if (typeof this['lun'] !== 'number') {
      throw new Error('this[\'lun\'] must be of type number.');
    }
    payload['lun'] = this['lun'];
  }

  if (this['diskSizeGB'] !== null && this['diskSizeGB'] !== undefined) {
    if (typeof this['diskSizeGB'] !== 'number') {
      throw new Error('this[\'diskSizeGB\'] must be of type number.');
    }
    payload['diskSizeGB'] = this['diskSizeGB'];
  }

  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['vhd']) {
    payload['vhd'] = this['vhd'].serialize();
  }

  if (this['image']) {
    payload['image'] = this['image'].serialize();
  }

  if (this['caching'] !== null && this['caching'] !== undefined) {
    if (typeof this['caching'].valueOf() !== 'string') {
      throw new Error('this[\'caching\'] must be of type string.');
    }
    payload['caching'] = this['caching'];
  }

  if (this['createOption'] !== null && this['createOption'] !== undefined) {
    if (typeof this['createOption'].valueOf() !== 'string') {
      throw new Error('this[\'createOption\'] must be of type string.');
    }
    payload['createOption'] = this['createOption'];
  }

  return payload;
};

/**
 * Deserialize the instance to DataDisk schema
 *
 * @param {JSON} instance
 *
 */
DataDisk.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['lun'] !== undefined) {
      this['lun'] = instance['lun'];
    }

    if (instance['diskSizeGB'] !== undefined) {
      this['diskSizeGB'] = instance['diskSizeGB'];
    }

    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['vhd']) {
      this['vhd'] = new models['VirtualHardDisk']().deserialize(instance['vhd']);
    }

    if (instance['image']) {
      this['image'] = new models['VirtualHardDisk']().deserialize(instance['image']);
    }

    if (instance['caching'] !== undefined) {
      this['caching'] = instance['caching'];
    }

    if (instance['createOption'] !== undefined) {
      this['createOption'] = instance['createOption'];
    }
  }

  return this;
};

module.exports = DataDisk;
