/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the HardwareProfile class.
 * @constructor
 * Describes a hardware profile.
 * @member {string} [vmSize] The virtual machine size name. Possible values
 * for this property include: 'Basic_A0', 'Basic_A1', 'Basic_A2', 'Basic_A3',
 * 'Basic_A4', 'Standard_A0', 'Standard_A1', 'Standard_A2', 'Standard_A3',
 * 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
 * 'Standard_A9', 'Standard_G1', 'Standard_G2', 'Standard_G3', 'Standard_G4',
 * 'Standard_G5'.
 * 
 */
function HardwareProfile(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.vmSize !== undefined) {
      this.vmSize = parameters.vmSize;
    }
  }    
}


/**
 * Validate the payload against the HardwareProfile schema
 *
 * @param {JSON} payload
 *
 */
HardwareProfile.prototype.serialize = function () {
  var payload = {};
  if (this['vmSize'] !== null && this['vmSize'] !== undefined) {
    if (typeof this['vmSize'].valueOf() !== 'string') {
      throw new Error('this[\'vmSize\'] must be of type string.');
    }
    payload['vmSize'] = this['vmSize'];
  }

  return payload;
};

/**
 * Deserialize the instance to HardwareProfile schema
 *
 * @param {JSON} instance
 *
 */
HardwareProfile.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['vmSize'] !== undefined) {
      this['vmSize'] = instance['vmSize'];
    }
  }

  return this;
};

module.exports = HardwareProfile;
