/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');

/**
 * @class
 * Initializes a new instance of the JobDataPath class.
 * @constructor
 * A Data Lake Analytics U-SQL job data path item.
 * @member {string} [jobId] Gets or sets the id of the job this data is for.
 * 
 * @member {string} [command] Gets or sets the command that this job data
 * relates to.
 * 
 * @member {array} [paths] Gets or sets the list of paths to all of the job
 * data.
 * 
 */
function JobDataPath(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.jobId !== undefined) {
      this.jobId = parameters.jobId;
    }
    if (parameters.command !== undefined) {
      this.command = parameters.command;
    }
    if (parameters.paths) {
      var tempParameterspaths = [];
      parameters.paths.forEach(function(element) {
        if (element !== undefined) {
          element = element;
        }
        tempParameterspaths.push(element);
      });
      this.paths = tempParameterspaths;
    }
  }    
}


/**
 * Validate the payload against the JobDataPath schema
 *
 * @param {JSON} payload
 *
 */
JobDataPath.prototype.serialize = function () {
  var payload = {};
  if (this['jobId'] !== null && this['jobId'] !== undefined) {
    if (typeof this['jobId'].valueOf() !== 'string') {
      throw new Error('this[\'jobId\'] must be of type string.');
    }
    payload['jobId'] = this['jobId'];
  }

  if (this['command'] !== null && this['command'] !== undefined) {
    if (typeof this['command'].valueOf() !== 'string') {
      throw new Error('this[\'command\'] must be of type string.');
    }
    payload['command'] = this['command'];
  }

  if (util.isArray(this['paths'])) {
    payload['paths'] = [];
    for (var i = 0; i < this['paths'].length; i++) {
      if (this['paths'][i] !== null && this['paths'][i] !== undefined) {
        if (typeof this['paths'][i].valueOf() !== 'string') {
          throw new Error('this[\'paths\'][i] must be of type string.');
        }
        if (payload['paths'] === null || payload['paths'] === undefined) {
          payload['paths'] = {};
        }
        payload['paths'][i] = this['paths'][i];
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to JobDataPath schema
 *
 * @param {JSON} instance
 *
 */
JobDataPath.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['jobId'] !== undefined) {
      this['jobId'] = instance['jobId'];
    }

    if (instance['command'] !== undefined) {
      this['command'] = instance['command'];
    }

    if (instance['paths']) {
      var tempInstancepaths = [];
      instance['paths'].forEach(function(element1) {
        if (element1 !== undefined) {
          element1 = element1;
        }
        tempInstancepaths.push(element1);
      });
      this['paths'] = tempInstancepaths;
    }
  }

  return this;
};

module.exports = JobDataPath;
