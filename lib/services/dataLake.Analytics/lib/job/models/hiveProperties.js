/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the HiveProperties class.
 * @constructor
 * @member {array} [statementInfo] Gets or sets the statement information for
 * each statement in the script
 * 
 * @member {string} [logsLocation] Gets or sets the Hive logs location
 * 
 * @member {string} [warehouseLocation] Gets or sets the runtime version of
 * the U-SQL engine to use
 * 
 * @member {number} [statementCount] Gets or sets the number of statements
 * that will be run based on the script
 * 
 * @member {number} [executedStatementCount] Gets or sets the number of
 * statements that have been run based on the script
 * 
 */
function HiveProperties(parameters) {
  HiveProperties['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.statementInfo) {
      var tempParametersstatementInfo = [];
      parameters.statementInfo.forEach(function(element) {
        if (element) {
          element = new models['HiveJobStatementInfo'](element);
        }
        tempParametersstatementInfo.push(element);
      });
      this.statementInfo = tempParametersstatementInfo;
    }
    if (parameters.logsLocation !== undefined) {
      this.logsLocation = parameters.logsLocation;
    }
    if (parameters.warehouseLocation !== undefined) {
      this.warehouseLocation = parameters.warehouseLocation;
    }
    if (parameters.statementCount !== undefined) {
      this.statementCount = parameters.statementCount;
    }
    if (parameters.executedStatementCount !== undefined) {
      this.executedStatementCount = parameters.executedStatementCount;
    }
  }    
}

util.inherits(HiveProperties, models['JobProperties']);

/**
 * Validate the payload against the HiveProperties schema
 *
 * @param {JSON} payload
 *
 */
HiveProperties.prototype.serialize = function () {
  var payload = HiveProperties['super_'].prototype.serialize.call(this);
  if (util.isArray(this['statementInfo'])) {
    payload['statementInfo'] = [];
    for (var i = 0; i < this['statementInfo'].length; i++) {
      if (this['statementInfo'][i]) {
        if (payload['statementInfo'] === null || payload['statementInfo'] === undefined) {
          payload['statementInfo'] = {};
        }
        payload['statementInfo'][i] = this['statementInfo'][i].serialize();
      }
    }
  }

  if (this['logsLocation'] !== null && this['logsLocation'] !== undefined) {
    if (typeof this['logsLocation'].valueOf() !== 'string') {
      throw new Error('this[\'logsLocation\'] must be of type string.');
    }
    payload['logsLocation'] = this['logsLocation'];
  }

  if (this['warehouseLocation'] !== null && this['warehouseLocation'] !== undefined) {
    if (typeof this['warehouseLocation'].valueOf() !== 'string') {
      throw new Error('this[\'warehouseLocation\'] must be of type string.');
    }
    payload['warehouseLocation'] = this['warehouseLocation'];
  }

  if (this['statementCount'] !== null && this['statementCount'] !== undefined) {
    if (typeof this['statementCount'] !== 'number') {
      throw new Error('this[\'statementCount\'] must be of type number.');
    }
    payload['statementCount'] = this['statementCount'];
  }

  if (this['executedStatementCount'] !== null && this['executedStatementCount'] !== undefined) {
    if (typeof this['executedStatementCount'] !== 'number') {
      throw new Error('this[\'executedStatementCount\'] must be of type number.');
    }
    payload['executedStatementCount'] = this['executedStatementCount'];
  }

  return payload;
};

/**
 * Deserialize the instance to HiveProperties schema
 *
 * @param {JSON} instance
 *
 */
HiveProperties.prototype.deserialize = function (instance) {
  HiveProperties['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['statementInfo']) {
      var tempInstancestatementInfo = [];
      instance['statementInfo'].forEach(function(element1) {
        if (element1) {
          element1 = new models['HiveJobStatementInfo']().deserialize(element1);
        }
        tempInstancestatementInfo.push(element1);
      });
      this['statementInfo'] = tempInstancestatementInfo;
    }

    if (instance['logsLocation'] !== undefined) {
      this['logsLocation'] = instance['logsLocation'];
    }

    if (instance['warehouseLocation'] !== undefined) {
      this['warehouseLocation'] = instance['warehouseLocation'];
    }

    if (instance['statementCount'] !== undefined) {
      this['statementCount'] = instance['statementCount'];
    }

    if (instance['executedStatementCount'] !== undefined) {
      this['executedStatementCount'] = instance['executedStatementCount'];
    }
  }

  return this;
};

module.exports = HiveProperties;
