/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the JobStatisticsVertexStage class.
 * @constructor
 * The Data Lake Analytics U-SQL job statistics vertex stage information.
 * @member {number} [dataRead] Gets or sets the amount of data read, in bytes.
 * 
 * @member {number} [dataReadCrossPod] Gets or sets the amount of data read
 * across multiple pods, in bytes.
 * 
 * @member {number} [dataReadIntraPod] Gets or sets the amount of data read in
 * one pod, in bytes.
 * 
 * @member {number} [dataToRead] Gets or sets the amount of data remaining to
 * be read, in bytes.
 * 
 * @member {number} [dataWritten] Gets or sets the amount of data written, in
 * bytes.
 * 
 * @member {number} [duplicateDiscardCount] Gets or sets the number of
 * duplicates that were discarded.
 * 
 * @member {number} [failedCount] Gets or sets the number of failures that
 * occured in this stage.
 * 
 * @member {number} [maxVertexDataRead] Gets or sets the maximum amount of
 * data read in a single vertex, in bytes.
 * 
 * @member {number} [minVertexDataRead] Gets or sets the minimum amount of
 * data read in a single vertex, in bytes.
 * 
 * @member {number} [readFailureCount] Gets or sets the number of read
 * failures in this stage.
 * 
 * @member {number} [revocationCount] Gets or sets the number of vertices that
 * were revoked during this stage.
 * 
 * @member {number} [runningCount] Gets or sets the number of currently
 * running vertices in this stage.
 * 
 * @member {number} [scheduledCount] Gets or sets the number of currently
 * scheduled vertices in this stage
 * 
 * @member {string} [stageName] Gets or sets the name of this stage in job
 * execution.
 * 
 * @member {number} [succeededCount] Gets or sets the number of vertices that
 * succeeded in this stage.
 * 
 * @member {number} [tempDataWritten] Gets or sets the amount of temporary
 * data written, in bytes.
 * 
 * @member {number} [totalCount] Gets or sets the total vertex count for this
 * stage.
 * 
 * @member {number} [totalFailedTime] Gets or sets the amount of time that
 * failed vertices took up in this stage.
 * 
 * @member {number} [totalProgress] Gets or sets the current progress of this
 * stage, as a percentage.
 * 
 * @member {number} [totalSucceededTime] Gets or sets the amount of time all
 * successful vertices took in this stage.
 * 
 */
function JobStatisticsVertexStage(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.dataRead !== undefined) {
      this.dataRead = parameters.dataRead;
    }
    if (parameters.dataReadCrossPod !== undefined) {
      this.dataReadCrossPod = parameters.dataReadCrossPod;
    }
    if (parameters.dataReadIntraPod !== undefined) {
      this.dataReadIntraPod = parameters.dataReadIntraPod;
    }
    if (parameters.dataToRead !== undefined) {
      this.dataToRead = parameters.dataToRead;
    }
    if (parameters.dataWritten !== undefined) {
      this.dataWritten = parameters.dataWritten;
    }
    if (parameters.duplicateDiscardCount !== undefined) {
      this.duplicateDiscardCount = parameters.duplicateDiscardCount;
    }
    if (parameters.failedCount !== undefined) {
      this.failedCount = parameters.failedCount;
    }
    if (parameters.maxVertexDataRead !== undefined) {
      this.maxVertexDataRead = parameters.maxVertexDataRead;
    }
    if (parameters.minVertexDataRead !== undefined) {
      this.minVertexDataRead = parameters.minVertexDataRead;
    }
    if (parameters.readFailureCount !== undefined) {
      this.readFailureCount = parameters.readFailureCount;
    }
    if (parameters.revocationCount !== undefined) {
      this.revocationCount = parameters.revocationCount;
    }
    if (parameters.runningCount !== undefined) {
      this.runningCount = parameters.runningCount;
    }
    if (parameters.scheduledCount !== undefined) {
      this.scheduledCount = parameters.scheduledCount;
    }
    if (parameters.stageName !== undefined) {
      this.stageName = parameters.stageName;
    }
    if (parameters.succeededCount !== undefined) {
      this.succeededCount = parameters.succeededCount;
    }
    if (parameters.tempDataWritten !== undefined) {
      this.tempDataWritten = parameters.tempDataWritten;
    }
    if (parameters.totalCount !== undefined) {
      this.totalCount = parameters.totalCount;
    }
    if (parameters.totalFailedTime !== undefined) {
      this.totalFailedTime = parameters.totalFailedTime;
    }
    if (parameters.totalProgress !== undefined) {
      this.totalProgress = parameters.totalProgress;
    }
    if (parameters.totalSucceededTime !== undefined) {
      this.totalSucceededTime = parameters.totalSucceededTime;
    }
  }    
}


/**
 * Validate the payload against the JobStatisticsVertexStage schema
 *
 * @param {JSON} payload
 *
 */
JobStatisticsVertexStage.prototype.serialize = function () {
  var payload = {};
  if (this['dataRead'] !== null && this['dataRead'] !== undefined) {
    if (typeof this['dataRead'] !== 'number') {
      throw new Error('this[\'dataRead\'] must be of type number.');
    }
    payload['dataRead'] = this['dataRead'];
  }

  if (this['dataReadCrossPod'] !== null && this['dataReadCrossPod'] !== undefined) {
    if (typeof this['dataReadCrossPod'] !== 'number') {
      throw new Error('this[\'dataReadCrossPod\'] must be of type number.');
    }
    payload['dataReadCrossPod'] = this['dataReadCrossPod'];
  }

  if (this['dataReadIntraPod'] !== null && this['dataReadIntraPod'] !== undefined) {
    if (typeof this['dataReadIntraPod'] !== 'number') {
      throw new Error('this[\'dataReadIntraPod\'] must be of type number.');
    }
    payload['dataReadIntraPod'] = this['dataReadIntraPod'];
  }

  if (this['dataToRead'] !== null && this['dataToRead'] !== undefined) {
    if (typeof this['dataToRead'] !== 'number') {
      throw new Error('this[\'dataToRead\'] must be of type number.');
    }
    payload['dataToRead'] = this['dataToRead'];
  }

  if (this['dataWritten'] !== null && this['dataWritten'] !== undefined) {
    if (typeof this['dataWritten'] !== 'number') {
      throw new Error('this[\'dataWritten\'] must be of type number.');
    }
    payload['dataWritten'] = this['dataWritten'];
  }

  if (this['duplicateDiscardCount'] !== null && this['duplicateDiscardCount'] !== undefined) {
    if (typeof this['duplicateDiscardCount'] !== 'number') {
      throw new Error('this[\'duplicateDiscardCount\'] must be of type number.');
    }
    payload['duplicateDiscardCount'] = this['duplicateDiscardCount'];
  }

  if (this['failedCount'] !== null && this['failedCount'] !== undefined) {
    if (typeof this['failedCount'] !== 'number') {
      throw new Error('this[\'failedCount\'] must be of type number.');
    }
    payload['failedCount'] = this['failedCount'];
  }

  if (this['maxVertexDataRead'] !== null && this['maxVertexDataRead'] !== undefined) {
    if (typeof this['maxVertexDataRead'] !== 'number') {
      throw new Error('this[\'maxVertexDataRead\'] must be of type number.');
    }
    payload['maxVertexDataRead'] = this['maxVertexDataRead'];
  }

  if (this['minVertexDataRead'] !== null && this['minVertexDataRead'] !== undefined) {
    if (typeof this['minVertexDataRead'] !== 'number') {
      throw new Error('this[\'minVertexDataRead\'] must be of type number.');
    }
    payload['minVertexDataRead'] = this['minVertexDataRead'];
  }

  if (this['readFailureCount'] !== null && this['readFailureCount'] !== undefined) {
    if (typeof this['readFailureCount'] !== 'number') {
      throw new Error('this[\'readFailureCount\'] must be of type number.');
    }
    payload['readFailureCount'] = this['readFailureCount'];
  }

  if (this['revocationCount'] !== null && this['revocationCount'] !== undefined) {
    if (typeof this['revocationCount'] !== 'number') {
      throw new Error('this[\'revocationCount\'] must be of type number.');
    }
    payload['revocationCount'] = this['revocationCount'];
  }

  if (this['runningCount'] !== null && this['runningCount'] !== undefined) {
    if (typeof this['runningCount'] !== 'number') {
      throw new Error('this[\'runningCount\'] must be of type number.');
    }
    payload['runningCount'] = this['runningCount'];
  }

  if (this['scheduledCount'] !== null && this['scheduledCount'] !== undefined) {
    if (typeof this['scheduledCount'] !== 'number') {
      throw new Error('this[\'scheduledCount\'] must be of type number.');
    }
    payload['scheduledCount'] = this['scheduledCount'];
  }

  if (this['stageName'] !== null && this['stageName'] !== undefined) {
    if (typeof this['stageName'].valueOf() !== 'string') {
      throw new Error('this[\'stageName\'] must be of type string.');
    }
    payload['stageName'] = this['stageName'];
  }

  if (this['succeededCount'] !== null && this['succeededCount'] !== undefined) {
    if (typeof this['succeededCount'] !== 'number') {
      throw new Error('this[\'succeededCount\'] must be of type number.');
    }
    payload['succeededCount'] = this['succeededCount'];
  }

  if (this['tempDataWritten'] !== null && this['tempDataWritten'] !== undefined) {
    if (typeof this['tempDataWritten'] !== 'number') {
      throw new Error('this[\'tempDataWritten\'] must be of type number.');
    }
    payload['tempDataWritten'] = this['tempDataWritten'];
  }

  if (this['totalCount'] !== null && this['totalCount'] !== undefined) {
    if (typeof this['totalCount'] !== 'number') {
      throw new Error('this[\'totalCount\'] must be of type number.');
    }
    payload['totalCount'] = this['totalCount'];
  }

  if (this['totalFailedTime'] !== null && this['totalFailedTime'] !== undefined) {
    if (typeof this['totalFailedTime'] !== 'number') {
      throw new Error('this[\'totalFailedTime\'] must be of type number.');
    }
    payload['totalFailedTime'] = this['totalFailedTime'];
  }

  if (this['totalProgress'] !== null && this['totalProgress'] !== undefined) {
    if (typeof this['totalProgress'] !== 'number') {
      throw new Error('this[\'totalProgress\'] must be of type number.');
    }
    payload['totalProgress'] = this['totalProgress'];
  }

  if (this['totalSucceededTime'] !== null && this['totalSucceededTime'] !== undefined) {
    if (typeof this['totalSucceededTime'] !== 'number') {
      throw new Error('this[\'totalSucceededTime\'] must be of type number.');
    }
    payload['totalSucceededTime'] = this['totalSucceededTime'];
  }

  return payload;
};

/**
 * Deserialize the instance to JobStatisticsVertexStage schema
 *
 * @param {JSON} instance
 *
 */
JobStatisticsVertexStage.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['dataRead'] !== undefined) {
      this['dataRead'] = instance['dataRead'];
    }

    if (instance['dataReadCrossPod'] !== undefined) {
      this['dataReadCrossPod'] = instance['dataReadCrossPod'];
    }

    if (instance['dataReadIntraPod'] !== undefined) {
      this['dataReadIntraPod'] = instance['dataReadIntraPod'];
    }

    if (instance['dataToRead'] !== undefined) {
      this['dataToRead'] = instance['dataToRead'];
    }

    if (instance['dataWritten'] !== undefined) {
      this['dataWritten'] = instance['dataWritten'];
    }

    if (instance['duplicateDiscardCount'] !== undefined) {
      this['duplicateDiscardCount'] = instance['duplicateDiscardCount'];
    }

    if (instance['failedCount'] !== undefined) {
      this['failedCount'] = instance['failedCount'];
    }

    if (instance['maxVertexDataRead'] !== undefined) {
      this['maxVertexDataRead'] = instance['maxVertexDataRead'];
    }

    if (instance['minVertexDataRead'] !== undefined) {
      this['minVertexDataRead'] = instance['minVertexDataRead'];
    }

    if (instance['readFailureCount'] !== undefined) {
      this['readFailureCount'] = instance['readFailureCount'];
    }

    if (instance['revocationCount'] !== undefined) {
      this['revocationCount'] = instance['revocationCount'];
    }

    if (instance['runningCount'] !== undefined) {
      this['runningCount'] = instance['runningCount'];
    }

    if (instance['scheduledCount'] !== undefined) {
      this['scheduledCount'] = instance['scheduledCount'];
    }

    if (instance['stageName'] !== undefined) {
      this['stageName'] = instance['stageName'];
    }

    if (instance['succeededCount'] !== undefined) {
      this['succeededCount'] = instance['succeededCount'];
    }

    if (instance['tempDataWritten'] !== undefined) {
      this['tempDataWritten'] = instance['tempDataWritten'];
    }

    if (instance['totalCount'] !== undefined) {
      this['totalCount'] = instance['totalCount'];
    }

    if (instance['totalFailedTime'] !== undefined) {
      this['totalFailedTime'] = instance['totalFailedTime'];
    }

    if (instance['totalProgress'] !== undefined) {
      this['totalProgress'] = instance['totalProgress'];
    }

    if (instance['totalSucceededTime'] !== undefined) {
      this['totalSucceededTime'] = instance['totalSucceededTime'];
    }
  }

  return this;
};

module.exports = JobStatisticsVertexStage;
