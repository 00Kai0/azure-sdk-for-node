/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the JobInformation class.
 * @constructor
 * The common Data Lake Analytics job information properties.
 * @member {string} jobId Gets or sets the job's unique identifier.
 * 
 * @member {string} name Gets or sets the friendly name of the job.
 * 
 * @member {string} type Gets or sets the job type of the current job (i.e.
 * Hive or U-SQL). Possible values for this property include: 'USql', 'Hive'.
 * 
 * @member {string} [submitter] Gets or sets the user or account that
 * submitted the job.
 * 
 * @member {array} [errorMessage] Gets or sets the error message details for
 * the job, if it failed.
 * 
 * @member {number} [degreeOfParallelism] Gets or sets the degree of
 * parallelism used for this job. This must have a minimum value of 2
 * 
 * @member {number} [priority] Gets or sets the priority value for the current
 * job which must be greater than 1.
 * 
 * @member {date} [submitTime] Gets or sets the time the job was submitted to
 * the service.
 * 
 * @member {date} [startTime] Gets or sets the start time of the job.
 * 
 * @member {date} [endTime] Gets or sets the completion time of the job
 * 
 * @member {string} [state] Gets or sets a more detailed state of the job than
 * the result. Especially used for intermediate states and errors. Possible
 * values for this property include: 'Accepted', 'Compiling', 'Ended', 'New',
 * 'Queued', 'Running', 'Scheduling', 'Starting', 'Paused',
 * 'WaitingForCapacity'.
 * 
 * @member {string} [result] Gets or sets the result of job execution or the
 * current result of the running job. Possible values for this property
 * include: 'None', 'Succeeded', 'Cancelled', 'Failed'.
 * 
 * @member {array} [stateAuditRecords] Gets or sets the job state audit
 * records, indicating when various operations have been performed on this
 * job.
 * 
 * @member {object} properties Gets or sets the job specific properties.
 * 
 * @member {string} [properties.runtimeVersion] Gets or sets the runtime
 * version of the U-SQL engine to use
 * 
 * @member {string} [properties.script] Gets or sets the U-SQL script to run
 * 
 * @member {string} [properties.type] Polymorhpic Discriminator
 * 
 */
function JobInformation(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.jobId !== undefined) {
      this.jobId = parameters.jobId;
    }
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.type !== undefined) {
      this.type = parameters.type;
    }
    if (parameters.submitter !== undefined) {
      this.submitter = parameters.submitter;
    }
    if (parameters.errorMessage) {
      var tempParameterserrorMessage = [];
      parameters.errorMessage.forEach(function(element) {
        if (element) {
          element = new models['JobErrorDetails'](element);
        }
        tempParameterserrorMessage.push(element);
      });
      this.errorMessage = tempParameterserrorMessage;
    }
    if (parameters.degreeOfParallelism !== undefined) {
      this.degreeOfParallelism = parameters.degreeOfParallelism;
    }
    if (parameters.priority !== undefined) {
      this.priority = parameters.priority;
    }
    if (parameters.submitTime !== undefined) {
      this.submitTime = parameters.submitTime;
    }
    if (parameters.startTime !== undefined) {
      this.startTime = parameters.startTime;
    }
    if (parameters.endTime !== undefined) {
      this.endTime = parameters.endTime;
    }
    if (parameters.state !== undefined) {
      this.state = parameters.state;
    }
    if (parameters.result !== undefined) {
      this.result = parameters.result;
    }
    if (parameters.stateAuditRecords) {
      var tempParametersstateAuditRecords = [];
      parameters.stateAuditRecords.forEach(function(element1) {
        if (element1) {
          element1 = new models['JobStateAuditRecord'](element1);
        }
        tempParametersstateAuditRecords.push(element1);
      });
      this.stateAuditRecords = tempParametersstateAuditRecords;
    }
    if (parameters.properties) {
      this.properties = new models.discriminators[parameters.properties['type']](parameters.properties);
    }
  }    
}


/**
 * Validate the payload against the JobInformation schema
 *
 * @param {JSON} payload
 *
 */
JobInformation.prototype.serialize = function () {
  var payload = {};
  if (this['jobId'] === null || this['jobId'] === undefined || typeof this['jobId'].valueOf() !== 'string') {
    throw new Error('this[\'jobId\'] cannot be null or undefined and it must be of type string.');
  }
  payload['jobId'] = this['jobId'];

  if (this['name'] === null || this['name'] === undefined || typeof this['name'].valueOf() !== 'string') {
    throw new Error('this[\'name\'] cannot be null or undefined and it must be of type string.');
  }
  payload['name'] = this['name'];

  if (this['type'] !== null && this['type'] !== undefined) {
    var allowedValues = [ 'USql', 'Hive' ];
    var thistype = this['type'];
    if (!allowedValues.some( function(item) { return item === thistype; })) {
      throw new Error(this['type'] + ' is not a valid value. The valid values are: ' + allowedValues);
    }
    payload['type'] = this['type'];
  } else {
    throw new Error('this[\'type\'] cannot be null or undefined.');
  }

  if (this['submitter'] !== null && this['submitter'] !== undefined) {
    if (typeof this['submitter'].valueOf() !== 'string') {
      throw new Error('this[\'submitter\'] must be of type string.');
    }
    payload['submitter'] = this['submitter'];
  }

  if (util.isArray(this['errorMessage'])) {
    payload['errorMessage'] = [];
    for (var i = 0; i < this['errorMessage'].length; i++) {
      if (this['errorMessage'][i]) {
        if (payload['errorMessage'] === null || payload['errorMessage'] === undefined) {
          payload['errorMessage'] = {};
        }
        payload['errorMessage'][i] = this['errorMessage'][i].serialize();
      }
    }
  }

  if (this['degreeOfParallelism'] !== null && this['degreeOfParallelism'] !== undefined) {
    if (typeof this['degreeOfParallelism'] !== 'number') {
      throw new Error('this[\'degreeOfParallelism\'] must be of type number.');
    }
    payload['degreeOfParallelism'] = this['degreeOfParallelism'];
  }

  if (this['priority'] !== null && this['priority'] !== undefined) {
    if (typeof this['priority'] !== 'number') {
      throw new Error('this[\'priority\'] must be of type number.');
    }
    payload['priority'] = this['priority'];
  }

  if (this['submitTime']) {
    if (!(this['submitTime'] instanceof Date || typeof this['submitTime'].valueOf() === 'string' && !isNaN(Date.parse(this['submitTime'])))) {
      throw new Error('this[\'submitTime\'] must be of type date.');
    }
    payload['submitTime'] = (this['submitTime'] instanceof Date) ? this['submitTime'].toISOString() : this['submitTime'];
  }

  if (this['startTime']) {
    if (!(this['startTime'] instanceof Date || typeof this['startTime'].valueOf() === 'string' && !isNaN(Date.parse(this['startTime'])))) {
      throw new Error('this[\'startTime\'] must be of type date.');
    }
    payload['startTime'] = (this['startTime'] instanceof Date) ? this['startTime'].toISOString() : this['startTime'];
  }

  if (this['endTime']) {
    if (!(this['endTime'] instanceof Date || typeof this['endTime'].valueOf() === 'string' && !isNaN(Date.parse(this['endTime'])))) {
      throw new Error('this[\'endTime\'] must be of type date.');
    }
    payload['endTime'] = (this['endTime'] instanceof Date) ? this['endTime'].toISOString() : this['endTime'];
  }

  if (this['state'] !== null && this['state'] !== undefined) {
    var allowedValues1 = [ 'Accepted', 'Compiling', 'Ended', 'New', 'Queued', 'Running', 'Scheduling', 'Starting', 'Paused', 'WaitingForCapacity' ];
    var thisstate = this['state'];
    if (!allowedValues1.some( function(item) { return item === thisstate; })) {
      throw new Error(this['state'] + ' is not a valid value. The valid values are: ' + allowedValues1);
    }
    payload['state'] = this['state'];
  }

  if (this['result'] !== null && this['result'] !== undefined) {
    var allowedValues2 = [ 'None', 'Succeeded', 'Cancelled', 'Failed' ];
    var thisresult = this['result'];
    if (!allowedValues2.some( function(item) { return item === thisresult; })) {
      throw new Error(this['result'] + ' is not a valid value. The valid values are: ' + allowedValues2);
    }
    payload['result'] = this['result'];
  }

  if (util.isArray(this['stateAuditRecords'])) {
    payload['stateAuditRecords'] = [];
    for (var i1 = 0; i1 < this['stateAuditRecords'].length; i1++) {
      if (this['stateAuditRecords'][i1]) {
        if (payload['stateAuditRecords'] === null || payload['stateAuditRecords'] === undefined) {
          payload['stateAuditRecords'] = {};
        }
        payload['stateAuditRecords'][i1] = this['stateAuditRecords'][i1].serialize();
      }
    }
  }

  if (this['properties']) {
    if(this['properties']['type'] !== null && this['properties']['type'] !== undefined && models.discriminators[this['properties']['type']]) {
      payload['properties'] = this['properties'].serialize();
    } else {
      throw new Error('No discriminator field "type" was found in parameter "this[\'properties\']".');
    }
  }
   else {  throw new Error('this[\'properties\'] cannot be null or undefined.');
  }

  return payload;
};

/**
 * Deserialize the instance to JobInformation schema
 *
 * @param {JSON} instance
 *
 */
JobInformation.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['jobId'] !== undefined) {
      this['jobId'] = instance['jobId'];
    }

    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['type'] !== undefined) {
      this['type'] = instance['type'];
    }

    if (instance['submitter'] !== undefined) {
      this['submitter'] = instance['submitter'];
    }

    if (instance['errorMessage']) {
      var tempInstanceerrorMessage = [];
      instance['errorMessage'].forEach(function(element2) {
        if (element2) {
          element2 = new models['JobErrorDetails']().deserialize(element2);
        }
        tempInstanceerrorMessage.push(element2);
      });
      this['errorMessage'] = tempInstanceerrorMessage;
    }

    if (instance['degreeOfParallelism'] !== undefined) {
      this['degreeOfParallelism'] = instance['degreeOfParallelism'];
    }

    if (instance['priority'] !== undefined) {
      this['priority'] = instance['priority'];
    }

    if (instance['submitTime']) {
      this['submitTime'] = new Date(instance['submitTime']);
    }
    else if (instance['submitTime'] !== undefined) {
      this['submitTime'] = instance['submitTime'];
    }

    if (instance['startTime']) {
      this['startTime'] = new Date(instance['startTime']);
    }
    else if (instance['startTime'] !== undefined) {
      this['startTime'] = instance['startTime'];
    }

    if (instance['endTime']) {
      this['endTime'] = new Date(instance['endTime']);
    }
    else if (instance['endTime'] !== undefined) {
      this['endTime'] = instance['endTime'];
    }

    if (instance['state'] !== undefined) {
      this['state'] = instance['state'];
    }

    if (instance['result'] !== undefined) {
      this['result'] = instance['result'];
    }

    if (instance['stateAuditRecords']) {
      var tempInstancestateAuditRecords = [];
      instance['stateAuditRecords'].forEach(function(element3) {
        if (element3) {
          element3 = new models['JobStateAuditRecord']().deserialize(element3);
        }
        tempInstancestateAuditRecords.push(element3);
      });
      this['stateAuditRecords'] = tempInstancestateAuditRecords;
    }

    if (instance['properties']) {
      this['properties'] = new models.discriminators[instance['properties']['type']]().deserialize(instance['properties']);
    }
  }

  return this;
};

module.exports = JobInformation;
