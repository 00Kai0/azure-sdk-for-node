/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the USqlProperties class.
 * @constructor
 * @member {array} [resources] Gets or sets the list of resources that are
 * required by the job
 * 
 * @member {object} [statistics] Gets or sets the job specific statistics.
 * 
 * @member {date} [statistics.lastUpdateTimeUtc] Gets or sets the last update
 * time for the statistics.
 * 
 * @member {array} [statistics.stages] Gets or sets the list of stages for the
 * job.
 * 
 * @member {object} [debugData] Gets or sets the job specific debug data
 * locations.
 * 
 * @member {string} [debugData.jobId] Gets or sets the id of the job this data
 * is for.
 * 
 * @member {string} [debugData.command] Gets or sets the command that this job
 * data relates to.
 * 
 * @member {array} [debugData.paths] Gets or sets the list of paths to all of
 * the job data.
 * 
 * @member {string} [algebraFilePath] Gets or sets the U-SQL algebra file path
 * after the job has completed
 * 
 * @member {string} [totalCompilationTime] Gets or sets the total time this
 * job spent compiling. This value should not be set by the user and will be
 * ignored if it is.
 * 
 * @member {string} [totalPauseTime] Gets or sets the total time this job
 * spent paused. This value should not be set by the user and will be ignored
 * if it is.
 * 
 * @member {string} [totalQueuedTime] Gets or sets the total time this job
 * spent queued. This value should not be set by the user and will be ignored
 * if it is.
 * 
 * @member {string} [totalRunningTime] Gets or sets the total time this job
 * spent executing. This value should not be set by the user and will be
 * ignored if it is.
 * 
 * @member {string} [rootProcessNodeId] Gets or sets the ID used to identify
 * the job manager coordinating job execution. This value should not be set
 * by the user and will be ignored if it is.
 * 
 * @member {string} [yarnApplicationId] Gets or sets the ID used to identify
 * the yarn application executing the job. This value should not be set by
 * the user and will be ignored if it is.
 * 
 * @member {number} [yarnApplicationTimeStamp] Gets or sets the timestamp (in
 * ticks) for the yarn application executing the job. This value should not
 * be set by the user and will be ignored if it is.
 * 
 * @member {string} [compileMode] Gets or sets the compile mode for the job.
 * Possible values for this property include: 'Semantic', 'Full', 'SingleBox'.
 * 
 */
function USqlProperties(parameters) {
  USqlProperties['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.resources) {
      var tempParametersresources = [];
      parameters.resources.forEach(function(element) {
        if (element) {
          element = new models['JobResource'](element);
        }
        tempParametersresources.push(element);
      });
      this.resources = tempParametersresources;
    }
    if (parameters.statistics) {
      this.statistics = new models['JobStatistics'](parameters.statistics);
    }
    if (parameters.debugData) {
      this.debugData = new models['JobDataPath'](parameters.debugData);
    }
    if (parameters.algebraFilePath !== undefined) {
      this.algebraFilePath = parameters.algebraFilePath;
    }
    if (parameters.totalCompilationTime !== undefined) {
      this.totalCompilationTime = parameters.totalCompilationTime;
    }
    if (parameters.totalPauseTime !== undefined) {
      this.totalPauseTime = parameters.totalPauseTime;
    }
    if (parameters.totalQueuedTime !== undefined) {
      this.totalQueuedTime = parameters.totalQueuedTime;
    }
    if (parameters.totalRunningTime !== undefined) {
      this.totalRunningTime = parameters.totalRunningTime;
    }
    if (parameters.rootProcessNodeId !== undefined) {
      this.rootProcessNodeId = parameters.rootProcessNodeId;
    }
    if (parameters.yarnApplicationId !== undefined) {
      this.yarnApplicationId = parameters.yarnApplicationId;
    }
    if (parameters.yarnApplicationTimeStamp !== undefined) {
      this.yarnApplicationTimeStamp = parameters.yarnApplicationTimeStamp;
    }
    if (parameters.compileMode !== undefined) {
      this.compileMode = parameters.compileMode;
    }
  }    
}

util.inherits(USqlProperties, models['JobProperties']);

/**
 * Validate the payload against the USqlProperties schema
 *
 * @param {JSON} payload
 *
 */
USqlProperties.prototype.serialize = function () {
  var payload = USqlProperties['super_'].prototype.serialize.call(this);
  if (util.isArray(this['resources'])) {
    payload['resources'] = [];
    for (var i = 0; i < this['resources'].length; i++) {
      if (this['resources'][i]) {
        if (payload['resources'] === null || payload['resources'] === undefined) {
          payload['resources'] = {};
        }
        payload['resources'][i] = this['resources'][i].serialize();
      }
    }
  }

  if (this['statistics']) {
    payload['statistics'] = this['statistics'].serialize();
  }

  if (this['debugData']) {
    payload['debugData'] = this['debugData'].serialize();
  }

  if (this['algebraFilePath'] !== null && this['algebraFilePath'] !== undefined) {
    if (typeof this['algebraFilePath'].valueOf() !== 'string') {
      throw new Error('this[\'algebraFilePath\'] must be of type string.');
    }
    payload['algebraFilePath'] = this['algebraFilePath'];
  }

  if (this['totalCompilationTime'] !== null && this['totalCompilationTime'] !== undefined) {
    if (typeof this['totalCompilationTime'].valueOf() !== 'string') {
      throw new Error('this[\'totalCompilationTime\'] must be of type string.');
    }
    payload['totalCompilationTime'] = this['totalCompilationTime'];
  }

  if (this['totalPauseTime'] !== null && this['totalPauseTime'] !== undefined) {
    if (typeof this['totalPauseTime'].valueOf() !== 'string') {
      throw new Error('this[\'totalPauseTime\'] must be of type string.');
    }
    payload['totalPauseTime'] = this['totalPauseTime'];
  }

  if (this['totalQueuedTime'] !== null && this['totalQueuedTime'] !== undefined) {
    if (typeof this['totalQueuedTime'].valueOf() !== 'string') {
      throw new Error('this[\'totalQueuedTime\'] must be of type string.');
    }
    payload['totalQueuedTime'] = this['totalQueuedTime'];
  }

  if (this['totalRunningTime'] !== null && this['totalRunningTime'] !== undefined) {
    if (typeof this['totalRunningTime'].valueOf() !== 'string') {
      throw new Error('this[\'totalRunningTime\'] must be of type string.');
    }
    payload['totalRunningTime'] = this['totalRunningTime'];
  }

  if (this['rootProcessNodeId'] !== null && this['rootProcessNodeId'] !== undefined) {
    if (typeof this['rootProcessNodeId'].valueOf() !== 'string') {
      throw new Error('this[\'rootProcessNodeId\'] must be of type string.');
    }
    payload['rootProcessNodeId'] = this['rootProcessNodeId'];
  }

  if (this['yarnApplicationId'] !== null && this['yarnApplicationId'] !== undefined) {
    if (typeof this['yarnApplicationId'].valueOf() !== 'string') {
      throw new Error('this[\'yarnApplicationId\'] must be of type string.');
    }
    payload['yarnApplicationId'] = this['yarnApplicationId'];
  }

  if (this['yarnApplicationTimeStamp'] !== null && this['yarnApplicationTimeStamp'] !== undefined) {
    if (typeof this['yarnApplicationTimeStamp'] !== 'number') {
      throw new Error('this[\'yarnApplicationTimeStamp\'] must be of type number.');
    }
    payload['yarnApplicationTimeStamp'] = this['yarnApplicationTimeStamp'];
  }

  if (this['compileMode'] !== null && this['compileMode'] !== undefined) {
    if (typeof this['compileMode'].valueOf() !== 'string') {
      throw new Error('this[\'compileMode\'] must be of type string.');
    }
    payload['compileMode'] = this['compileMode'];
  }

  return payload;
};

/**
 * Deserialize the instance to USqlProperties schema
 *
 * @param {JSON} instance
 *
 */
USqlProperties.prototype.deserialize = function (instance) {
  USqlProperties['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['resources']) {
      var tempInstanceresources = [];
      instance['resources'].forEach(function(element1) {
        if (element1) {
          element1 = new models['JobResource']().deserialize(element1);
        }
        tempInstanceresources.push(element1);
      });
      this['resources'] = tempInstanceresources;
    }

    if (instance['statistics']) {
      this['statistics'] = new models['JobStatistics']().deserialize(instance['statistics']);
    }

    if (instance['debugData']) {
      this['debugData'] = new models['JobDataPath']().deserialize(instance['debugData']);
    }

    if (instance['algebraFilePath'] !== undefined) {
      this['algebraFilePath'] = instance['algebraFilePath'];
    }

    if (instance['totalCompilationTime'] !== undefined) {
      this['totalCompilationTime'] = instance['totalCompilationTime'];
    }

    if (instance['totalPauseTime'] !== undefined) {
      this['totalPauseTime'] = instance['totalPauseTime'];
    }

    if (instance['totalQueuedTime'] !== undefined) {
      this['totalQueuedTime'] = instance['totalQueuedTime'];
    }

    if (instance['totalRunningTime'] !== undefined) {
      this['totalRunningTime'] = instance['totalRunningTime'];
    }

    if (instance['rootProcessNodeId'] !== undefined) {
      this['rootProcessNodeId'] = instance['rootProcessNodeId'];
    }

    if (instance['yarnApplicationId'] !== undefined) {
      this['yarnApplicationId'] = instance['yarnApplicationId'];
    }

    if (instance['yarnApplicationTimeStamp'] !== undefined) {
      this['yarnApplicationTimeStamp'] = instance['yarnApplicationTimeStamp'];
    }

    if (instance['compileMode'] !== undefined) {
      this['compileMode'] = instance['compileMode'];
    }
  }

  return this;
};

module.exports = USqlProperties;
