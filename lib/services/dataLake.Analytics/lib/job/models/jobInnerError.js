/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the JobInnerError class.
 * @constructor
 * The Data Lake Analytics job error details.
 * @member {number} [diagnosticCode] Gets or sets the diagnostic error code.
 * 
 * @member {string} [severity] Gets or sets the severity level of the failure.
 * Possible values for this property include: 'Warning', 'Error'.
 * 
 * @member {string} [details] Gets or sets the details of the error message.
 * 
 * @member {string} [component] Gets or sets the component that failed.
 * 
 * @member {string} [errorId] Gets or sets the specific identifier for the
 * type of error encountered in the job.
 * 
 * @member {string} [helpLink] Gets or sets the link to MSDN or Azure help for
 * this type of error, if any.
 * 
 * @member {string} [internalDiagnostics] Gets or sets the internal diagnostic
 * stack trace if the user requesting the job error details has sufficient
 * permissions it will be retrieved, otherwise it will be empty.
 * 
 * @member {string} [message] Gets or sets the user friendly error message for
 * the failure.
 * 
 * @member {string} [resolution] Gets or sets the recommended resolution for
 * the failure, if any.
 * 
 * @member {string} [source] Gets or sets the ultimate source of the failure
 * (usually either SYSTEM or USER).
 * 
 * @member {string} [description] Gets or sets the error message description
 * 
 */
function JobInnerError(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.diagnosticCode !== undefined) {
      this.diagnosticCode = parameters.diagnosticCode;
    }
    if (parameters.severity !== undefined) {
      this.severity = parameters.severity;
    }
    if (parameters.details !== undefined) {
      this.details = parameters.details;
    }
    if (parameters.component !== undefined) {
      this.component = parameters.component;
    }
    if (parameters.errorId !== undefined) {
      this.errorId = parameters.errorId;
    }
    if (parameters.helpLink !== undefined) {
      this.helpLink = parameters.helpLink;
    }
    if (parameters.internalDiagnostics !== undefined) {
      this.internalDiagnostics = parameters.internalDiagnostics;
    }
    if (parameters.message !== undefined) {
      this.message = parameters.message;
    }
    if (parameters.resolution !== undefined) {
      this.resolution = parameters.resolution;
    }
    if (parameters.source !== undefined) {
      this.source = parameters.source;
    }
    if (parameters.description !== undefined) {
      this.description = parameters.description;
    }
  }    
}


/**
 * Validate the payload against the JobInnerError schema
 *
 * @param {JSON} payload
 *
 */
JobInnerError.prototype.serialize = function () {
  var payload = {};
  if (this['diagnosticCode'] !== null && this['diagnosticCode'] !== undefined) {
    if (typeof this['diagnosticCode'] !== 'number') {
      throw new Error('this[\'diagnosticCode\'] must be of type number.');
    }
    payload['diagnosticCode'] = this['diagnosticCode'];
  }

  if (this['severity'] !== null && this['severity'] !== undefined) {
    if (typeof this['severity'].valueOf() !== 'string') {
      throw new Error('this[\'severity\'] must be of type string.');
    }
    payload['severity'] = this['severity'];
  }

  if (this['details'] !== null && this['details'] !== undefined) {
    if (typeof this['details'].valueOf() !== 'string') {
      throw new Error('this[\'details\'] must be of type string.');
    }
    payload['details'] = this['details'];
  }

  if (this['component'] !== null && this['component'] !== undefined) {
    if (typeof this['component'].valueOf() !== 'string') {
      throw new Error('this[\'component\'] must be of type string.');
    }
    payload['component'] = this['component'];
  }

  if (this['errorId'] !== null && this['errorId'] !== undefined) {
    if (typeof this['errorId'].valueOf() !== 'string') {
      throw new Error('this[\'errorId\'] must be of type string.');
    }
    payload['errorId'] = this['errorId'];
  }

  if (this['helpLink'] !== null && this['helpLink'] !== undefined) {
    if (typeof this['helpLink'].valueOf() !== 'string') {
      throw new Error('this[\'helpLink\'] must be of type string.');
    }
    payload['helpLink'] = this['helpLink'];
  }

  if (this['internalDiagnostics'] !== null && this['internalDiagnostics'] !== undefined) {
    if (typeof this['internalDiagnostics'].valueOf() !== 'string') {
      throw new Error('this[\'internalDiagnostics\'] must be of type string.');
    }
    payload['internalDiagnostics'] = this['internalDiagnostics'];
  }

  if (this['message'] !== null && this['message'] !== undefined) {
    if (typeof this['message'].valueOf() !== 'string') {
      throw new Error('this[\'message\'] must be of type string.');
    }
    payload['message'] = this['message'];
  }

  if (this['resolution'] !== null && this['resolution'] !== undefined) {
    if (typeof this['resolution'].valueOf() !== 'string') {
      throw new Error('this[\'resolution\'] must be of type string.');
    }
    payload['resolution'] = this['resolution'];
  }

  if (this['source'] !== null && this['source'] !== undefined) {
    if (typeof this['source'].valueOf() !== 'string') {
      throw new Error('this[\'source\'] must be of type string.');
    }
    payload['source'] = this['source'];
  }

  if (this['description'] !== null && this['description'] !== undefined) {
    if (typeof this['description'].valueOf() !== 'string') {
      throw new Error('this[\'description\'] must be of type string.');
    }
    payload['description'] = this['description'];
  }

  return payload;
};

/**
 * Deserialize the instance to JobInnerError schema
 *
 * @param {JSON} instance
 *
 */
JobInnerError.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['diagnosticCode'] !== undefined) {
      this['diagnosticCode'] = instance['diagnosticCode'];
    }

    if (instance['severity'] !== undefined) {
      this['severity'] = instance['severity'];
    }

    if (instance['details'] !== undefined) {
      this['details'] = instance['details'];
    }

    if (instance['component'] !== undefined) {
      this['component'] = instance['component'];
    }

    if (instance['errorId'] !== undefined) {
      this['errorId'] = instance['errorId'];
    }

    if (instance['helpLink'] !== undefined) {
      this['helpLink'] = instance['helpLink'];
    }

    if (instance['internalDiagnostics'] !== undefined) {
      this['internalDiagnostics'] = instance['internalDiagnostics'];
    }

    if (instance['message'] !== undefined) {
      this['message'] = instance['message'];
    }

    if (instance['resolution'] !== undefined) {
      this['resolution'] = instance['resolution'];
    }

    if (instance['source'] !== undefined) {
      this['source'] = instance['source'];
    }

    if (instance['description'] !== undefined) {
      this['description'] = instance['description'];
    }
  }

  return this;
};

module.exports = JobInnerError;
