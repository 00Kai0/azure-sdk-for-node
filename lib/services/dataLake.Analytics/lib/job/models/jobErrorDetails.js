/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the JobErrorDetails class.
 * @constructor
 * The Data Lake Analytics job error details.
 * @member {string} [description] Gets or sets the error message description
 * 
 * @member {string} [details] Gets or sets the details of the error message.
 * 
 * @member {number} [endOffset] Gets or sets the end offset in the job where
 * the error was found.
 * 
 * @member {string} [errorId] Gets or sets the specific identifier for the
 * type of error encountered in the job.
 * 
 * @member {string} [filePath] Gets or sets the path to any supplemental error
 * files, if any.
 * 
 * @member {string} [helpLink] Gets or sets the link to MSDN or Azure help for
 * this type of error, if any.
 * 
 * @member {string} [internalDiagnostics] Gets or sets the internal diagnostic
 * stack trace if the user requesting the job error details has sufficient
 * permissions it will be retrieved, otherwise it will be empty.
 * 
 * @member {number} [lineNumber] Gets or sets the specific line number in the
 * job where the error occured.
 * 
 * @member {string} [message] Gets or sets the user friendly error message for
 * the failure.
 * 
 * @member {string} [resolution] Gets or sets the recommended resolution for
 * the failure, if any.
 * 
 * @member {object} [innerError] Gets or sets the inner error of this specific
 * job error message, if any.
 * 
 * @member {number} [innerError.diagnosticCode] Gets or sets the diagnostic
 * error code.
 * 
 * @member {string} [innerError.severity] Gets or sets the severity level of
 * the failure. Possible values for this property include: 'Warning', 'Error'.
 * 
 * @member {string} [innerError.details] Gets or sets the details of the error
 * message.
 * 
 * @member {string} [innerError.component] Gets or sets the component that
 * failed.
 * 
 * @member {string} [innerError.errorId] Gets or sets the specific identifier
 * for the type of error encountered in the job.
 * 
 * @member {string} [innerError.helpLink] Gets or sets the link to MSDN or
 * Azure help for this type of error, if any.
 * 
 * @member {string} [innerError.internalDiagnostics] Gets or sets the internal
 * diagnostic stack trace if the user requesting the job error details has
 * sufficient permissions it will be retrieved, otherwise it will be empty.
 * 
 * @member {string} [innerError.message] Gets or sets the user friendly error
 * message for the failure.
 * 
 * @member {string} [innerError.resolution] Gets or sets the recommended
 * resolution for the failure, if any.
 * 
 * @member {string} [innerError.source] Gets or sets the ultimate source of
 * the failure (usually either SYSTEM or USER).
 * 
 * @member {string} [innerError.description] Gets or sets the error message
 * description
 * 
 * @member {string} [severity] Gets or sets the severity level of the failure.
 * Possible values for this property include: 'Warning', 'Error'.
 * 
 * @member {string} [source] Gets or sets the ultimate source of the failure
 * (usually either SYSTEM or USER).
 * 
 * @member {string} [startOffset] Gets or sets the end offset in the job where
 * the error was found
 * 
 */
function JobErrorDetails(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.description !== undefined) {
      this.description = parameters.description;
    }
    if (parameters.details !== undefined) {
      this.details = parameters.details;
    }
    if (parameters.endOffset !== undefined) {
      this.endOffset = parameters.endOffset;
    }
    if (parameters.errorId !== undefined) {
      this.errorId = parameters.errorId;
    }
    if (parameters.filePath !== undefined) {
      this.filePath = parameters.filePath;
    }
    if (parameters.helpLink !== undefined) {
      this.helpLink = parameters.helpLink;
    }
    if (parameters.internalDiagnostics !== undefined) {
      this.internalDiagnostics = parameters.internalDiagnostics;
    }
    if (parameters.lineNumber !== undefined) {
      this.lineNumber = parameters.lineNumber;
    }
    if (parameters.message !== undefined) {
      this.message = parameters.message;
    }
    if (parameters.resolution !== undefined) {
      this.resolution = parameters.resolution;
    }
    if (parameters.innerError) {
      this.innerError = new models['JobInnerError'](parameters.innerError);
    }
    if (parameters.severity !== undefined) {
      this.severity = parameters.severity;
    }
    if (parameters.source !== undefined) {
      this.source = parameters.source;
    }
    if (parameters.startOffset !== undefined) {
      this.startOffset = parameters.startOffset;
    }
  }    
}


/**
 * Validate the payload against the JobErrorDetails schema
 *
 * @param {JSON} payload
 *
 */
JobErrorDetails.prototype.serialize = function () {
  var payload = {};
  if (this['description'] !== null && this['description'] !== undefined) {
    if (typeof this['description'].valueOf() !== 'string') {
      throw new Error('this[\'description\'] must be of type string.');
    }
    payload['description'] = this['description'];
  }

  if (this['details'] !== null && this['details'] !== undefined) {
    if (typeof this['details'].valueOf() !== 'string') {
      throw new Error('this[\'details\'] must be of type string.');
    }
    payload['details'] = this['details'];
  }

  if (this['endOffset'] !== null && this['endOffset'] !== undefined) {
    if (typeof this['endOffset'] !== 'number') {
      throw new Error('this[\'endOffset\'] must be of type number.');
    }
    payload['endOffset'] = this['endOffset'];
  }

  if (this['errorId'] !== null && this['errorId'] !== undefined) {
    if (typeof this['errorId'].valueOf() !== 'string') {
      throw new Error('this[\'errorId\'] must be of type string.');
    }
    payload['errorId'] = this['errorId'];
  }

  if (this['filePath'] !== null && this['filePath'] !== undefined) {
    if (typeof this['filePath'].valueOf() !== 'string') {
      throw new Error('this[\'filePath\'] must be of type string.');
    }
    payload['filePath'] = this['filePath'];
  }

  if (this['helpLink'] !== null && this['helpLink'] !== undefined) {
    if (typeof this['helpLink'].valueOf() !== 'string') {
      throw new Error('this[\'helpLink\'] must be of type string.');
    }
    payload['helpLink'] = this['helpLink'];
  }

  if (this['internalDiagnostics'] !== null && this['internalDiagnostics'] !== undefined) {
    if (typeof this['internalDiagnostics'].valueOf() !== 'string') {
      throw new Error('this[\'internalDiagnostics\'] must be of type string.');
    }
    payload['internalDiagnostics'] = this['internalDiagnostics'];
  }

  if (this['lineNumber'] !== null && this['lineNumber'] !== undefined) {
    if (typeof this['lineNumber'] !== 'number') {
      throw new Error('this[\'lineNumber\'] must be of type number.');
    }
    payload['lineNumber'] = this['lineNumber'];
  }

  if (this['message'] !== null && this['message'] !== undefined) {
    if (typeof this['message'].valueOf() !== 'string') {
      throw new Error('this[\'message\'] must be of type string.');
    }
    payload['message'] = this['message'];
  }

  if (this['resolution'] !== null && this['resolution'] !== undefined) {
    if (typeof this['resolution'].valueOf() !== 'string') {
      throw new Error('this[\'resolution\'] must be of type string.');
    }
    payload['resolution'] = this['resolution'];
  }

  if (this['innerError']) {
    payload['InnerError'] = this['innerError'].serialize();
  }

  if (this['severity'] !== null && this['severity'] !== undefined) {
    if (typeof this['severity'].valueOf() !== 'string') {
      throw new Error('this[\'severity\'] must be of type string.');
    }
    payload['severity'] = this['severity'];
  }

  if (this['source'] !== null && this['source'] !== undefined) {
    if (typeof this['source'].valueOf() !== 'string') {
      throw new Error('this[\'source\'] must be of type string.');
    }
    payload['source'] = this['source'];
  }

  if (this['startOffset'] !== null && this['startOffset'] !== undefined) {
    if (typeof this['startOffset'].valueOf() !== 'string') {
      throw new Error('this[\'startOffset\'] must be of type string.');
    }
    payload['startOffset'] = this['startOffset'];
  }

  return payload;
};

/**
 * Deserialize the instance to JobErrorDetails schema
 *
 * @param {JSON} instance
 *
 */
JobErrorDetails.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['description'] !== undefined) {
      this['description'] = instance['description'];
    }

    if (instance['details'] !== undefined) {
      this['details'] = instance['details'];
    }

    if (instance['endOffset'] !== undefined) {
      this['endOffset'] = instance['endOffset'];
    }

    if (instance['errorId'] !== undefined) {
      this['errorId'] = instance['errorId'];
    }

    if (instance['filePath'] !== undefined) {
      this['filePath'] = instance['filePath'];
    }

    if (instance['helpLink'] !== undefined) {
      this['helpLink'] = instance['helpLink'];
    }

    if (instance['internalDiagnostics'] !== undefined) {
      this['internalDiagnostics'] = instance['internalDiagnostics'];
    }

    if (instance['lineNumber'] !== undefined) {
      this['lineNumber'] = instance['lineNumber'];
    }

    if (instance['message'] !== undefined) {
      this['message'] = instance['message'];
    }

    if (instance['resolution'] !== undefined) {
      this['resolution'] = instance['resolution'];
    }

    if (instance['InnerError']) {
      this['innerError'] = new models['JobInnerError']().deserialize(instance['InnerError']);
    }

    if (instance['severity'] !== undefined) {
      this['severity'] = instance['severity'];
    }

    if (instance['source'] !== undefined) {
      this['source'] = instance['source'];
    }

    if (instance['startOffset'] !== undefined) {
      this['startOffset'] = instance['startOffset'];
    }
  }

  return this;
};

module.exports = JobErrorDetails;
