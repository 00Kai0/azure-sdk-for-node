/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the DataLakeAnalyticsAccountProperties class.
 * @constructor
 * The account specific properties that are associated with an underlying Data
 * Lake Analytics account.
 * @member {string} [provisioningState] Gets the provisioning status of the
 * Data Lake Analytics account. Possible values for this property include:
 * 'Failed', 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending',
 * 'Resuming', 'Deleting', 'Deleted'.
 * 
 * @member {string} [state] Gets the state of the Data Lake Analytics account.
 * Possible values for this property include: 'active', 'suspended'.
 * 
 * @member {string} [defaultDataLakeStoreAccount] Gets or sets the default
 * data lake storage account associated with this Data Lake Analytics account.
 * 
 * @member {number} [maxDegreeOfParallelism] Gets or sets the maximum
 * supported degree of parallelism for this acocunt.
 * 
 * @member {number} [maxJobCount] Gets or sets the maximum supported jobs
 * running under the account at the same time.
 * 
 * @member {array} [dataLakeStoreAccounts] Gets or sets the list of Data Lake
 * storage accounts associated with this account.
 * 
 * @member {array} [storageAccounts] Gets or sets the list of Azure Blob
 * storage accounts associated with this account.
 * 
 * @member {date} [creationTime] Gets or sets the account creation time.
 * 
 * @member {date} [lastModifiedTime] Gets or sets the account last modified
 * time.
 * 
 * @member {string} [endpoint] Gets or sets the full CName endpoint for this
 * account.
 * 
 */
function DataLakeAnalyticsAccountProperties(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
    if (parameters.state !== undefined) {
      this.state = parameters.state;
    }
    if (parameters.defaultDataLakeStoreAccount !== undefined) {
      this.defaultDataLakeStoreAccount = parameters.defaultDataLakeStoreAccount;
    }
    if (parameters.maxDegreeOfParallelism !== undefined) {
      this.maxDegreeOfParallelism = parameters.maxDegreeOfParallelism;
    }
    if (parameters.maxJobCount !== undefined) {
      this.maxJobCount = parameters.maxJobCount;
    }
    if (parameters.dataLakeStoreAccounts) {
      var tempParametersdataLakeStoreAccounts = [];
      parameters.dataLakeStoreAccounts.forEach(function(element) {
        if (element) {
          element = new models['DataLakeStoreAccountInfo'](element);
        }
        tempParametersdataLakeStoreAccounts.push(element);
      });
      this.dataLakeStoreAccounts = tempParametersdataLakeStoreAccounts;
    }
    if (parameters.storageAccounts) {
      var tempParametersstorageAccounts = [];
      parameters.storageAccounts.forEach(function(element1) {
        if (element1) {
          element1 = new models['StorageAccountInfo'](element1);
        }
        tempParametersstorageAccounts.push(element1);
      });
      this.storageAccounts = tempParametersstorageAccounts;
    }
    if (parameters.creationTime !== undefined) {
      this.creationTime = parameters.creationTime;
    }
    if (parameters.lastModifiedTime !== undefined) {
      this.lastModifiedTime = parameters.lastModifiedTime;
    }
    if (parameters.endpoint !== undefined) {
      this.endpoint = parameters.endpoint;
    }
  }    
}


/**
 * Validate the payload against the DataLakeAnalyticsAccountProperties schema
 *
 * @param {JSON} payload
 *
 */
DataLakeAnalyticsAccountProperties.prototype.serialize = function () {
  var payload = {};
  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    var allowedValues = [ 'Failed', 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted' ];
    var thisprovisioningState = this['provisioningState'];
    if (!allowedValues.some( function(item) { return item === thisprovisioningState; })) {
      throw new Error(this['provisioningState'] + ' is not a valid value. The valid values are: ' + allowedValues);
    }
    payload['provisioningState'] = this['provisioningState'];
  }

  if (this['state'] !== null && this['state'] !== undefined) {
    var allowedValues1 = [ 'active', 'suspended' ];
    var thisstate = this['state'];
    if (!allowedValues1.some( function(item) { return item === thisstate; })) {
      throw new Error(this['state'] + ' is not a valid value. The valid values are: ' + allowedValues1);
    }
    payload['state'] = this['state'];
  }

  if (this['defaultDataLakeStoreAccount'] !== null && this['defaultDataLakeStoreAccount'] !== undefined) {
    if (typeof this['defaultDataLakeStoreAccount'].valueOf() !== 'string') {
      throw new Error('this[\'defaultDataLakeStoreAccount\'] must be of type string.');
    }
    payload['defaultDataLakeStoreAccount'] = this['defaultDataLakeStoreAccount'];
  }

  if (this['maxDegreeOfParallelism'] !== null && this['maxDegreeOfParallelism'] !== undefined) {
    if (typeof this['maxDegreeOfParallelism'] !== 'number') {
      throw new Error('this[\'maxDegreeOfParallelism\'] must be of type number.');
    }
    payload['maxDegreeOfParallelism'] = this['maxDegreeOfParallelism'];
  }

  if (this['maxJobCount'] !== null && this['maxJobCount'] !== undefined) {
    if (typeof this['maxJobCount'] !== 'number') {
      throw new Error('this[\'maxJobCount\'] must be of type number.');
    }
    payload['maxJobCount'] = this['maxJobCount'];
  }

  if (util.isArray(this['dataLakeStoreAccounts'])) {
    payload['dataLakeStoreAccounts'] = [];
    for (var i = 0; i < this['dataLakeStoreAccounts'].length; i++) {
      if (this['dataLakeStoreAccounts'][i]) {
        if (payload['dataLakeStoreAccounts'] === null || payload['dataLakeStoreAccounts'] === undefined) {
          payload['dataLakeStoreAccounts'] = {};
        }
        payload['dataLakeStoreAccounts'][i] = this['dataLakeStoreAccounts'][i].serialize();
      }
    }
  }

  if (util.isArray(this['storageAccounts'])) {
    payload['storageAccounts'] = [];
    for (var i1 = 0; i1 < this['storageAccounts'].length; i1++) {
      if (this['storageAccounts'][i1]) {
        if (payload['storageAccounts'] === null || payload['storageAccounts'] === undefined) {
          payload['storageAccounts'] = {};
        }
        payload['storageAccounts'][i1] = this['storageAccounts'][i1].serialize();
      }
    }
  }

  if (this['creationTime']) {
    if (!(this['creationTime'] instanceof Date || typeof this['creationTime'].valueOf() === 'string' && !isNaN(Date.parse(this['creationTime'])))) {
      throw new Error('this[\'creationTime\'] must be of type date.');
    }
    payload['creationTime'] = (this['creationTime'] instanceof Date) ? this['creationTime'].toISOString() : this['creationTime'];
  }

  if (this['lastModifiedTime']) {
    if (!(this['lastModifiedTime'] instanceof Date || typeof this['lastModifiedTime'].valueOf() === 'string' && !isNaN(Date.parse(this['lastModifiedTime'])))) {
      throw new Error('this[\'lastModifiedTime\'] must be of type date.');
    }
    payload['lastModifiedTime'] = (this['lastModifiedTime'] instanceof Date) ? this['lastModifiedTime'].toISOString() : this['lastModifiedTime'];
  }

  if (this['endpoint'] !== null && this['endpoint'] !== undefined) {
    if (typeof this['endpoint'].valueOf() !== 'string') {
      throw new Error('this[\'endpoint\'] must be of type string.');
    }
    payload['endpoint'] = this['endpoint'];
  }

  return payload;
};

/**
 * Deserialize the instance to DataLakeAnalyticsAccountProperties schema
 *
 * @param {JSON} instance
 *
 */
DataLakeAnalyticsAccountProperties.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['provisioningState'] !== undefined) {
      this['provisioningState'] = instance['provisioningState'];
    }

    if (instance['state'] !== undefined) {
      this['state'] = instance['state'];
    }

    if (instance['defaultDataLakeStoreAccount'] !== undefined) {
      this['defaultDataLakeStoreAccount'] = instance['defaultDataLakeStoreAccount'];
    }

    if (instance['maxDegreeOfParallelism'] !== undefined) {
      this['maxDegreeOfParallelism'] = instance['maxDegreeOfParallelism'];
    }

    if (instance['maxJobCount'] !== undefined) {
      this['maxJobCount'] = instance['maxJobCount'];
    }

    if (instance['dataLakeStoreAccounts']) {
      var tempInstancedataLakeStoreAccounts = [];
      instance['dataLakeStoreAccounts'].forEach(function(element2) {
        if (element2) {
          element2 = new models['DataLakeStoreAccountInfo']().deserialize(element2);
        }
        tempInstancedataLakeStoreAccounts.push(element2);
      });
      this['dataLakeStoreAccounts'] = tempInstancedataLakeStoreAccounts;
    }

    if (instance['storageAccounts']) {
      var tempInstancestorageAccounts = [];
      instance['storageAccounts'].forEach(function(element3) {
        if (element3) {
          element3 = new models['StorageAccountInfo']().deserialize(element3);
        }
        tempInstancestorageAccounts.push(element3);
      });
      this['storageAccounts'] = tempInstancestorageAccounts;
    }

    if (instance['creationTime']) {
      this['creationTime'] = new Date(instance['creationTime']);
    }
    else if (instance['creationTime'] !== undefined) {
      this['creationTime'] = instance['creationTime'];
    }

    if (instance['lastModifiedTime']) {
      this['lastModifiedTime'] = new Date(instance['lastModifiedTime']);
    }
    else if (instance['lastModifiedTime'] !== undefined) {
      this['lastModifiedTime'] = instance['lastModifiedTime'];
    }

    if (instance['endpoint'] !== undefined) {
      this['endpoint'] = instance['endpoint'];
    }
  }

  return this;
};

module.exports = DataLakeAnalyticsAccountProperties;
