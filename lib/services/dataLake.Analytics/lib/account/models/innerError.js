/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the InnerError class.
 * @constructor
 * Generic resource inner error information.
 * @member {string} [trace] Gets or sets the stack trace for the error
 * 
 * @member {string} [context] Gets or sets the context for the error message
 * 
 */
function InnerError(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.trace !== undefined) {
      this.trace = parameters.trace;
    }
    if (parameters.context !== undefined) {
      this.context = parameters.context;
    }
  }    
}


/**
 * Validate the payload against the InnerError schema
 *
 * @param {JSON} payload
 *
 */
InnerError.prototype.serialize = function () {
  var payload = {};
  if (this['trace'] !== null && this['trace'] !== undefined) {
    if (typeof this['trace'].valueOf() !== 'string') {
      throw new Error('this[\'trace\'] must be of type string.');
    }
    payload['trace'] = this['trace'];
  }

  if (this['context'] !== null && this['context'] !== undefined) {
    if (typeof this['context'].valueOf() !== 'string') {
      throw new Error('this[\'context\'] must be of type string.');
    }
    payload['context'] = this['context'];
  }

  return payload;
};

/**
 * Deserialize the instance to InnerError schema
 *
 * @param {JSON} instance
 *
 */
InnerError.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['trace'] !== undefined) {
      this['trace'] = instance['trace'];
    }

    if (instance['context'] !== undefined) {
      this['context'] = instance['context'];
    }
  }

  return this;
};

module.exports = InnerError;
