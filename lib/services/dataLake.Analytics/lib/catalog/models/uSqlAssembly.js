/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the USqlAssembly class.
 * @constructor
 * A Data Lake Analytics catalog U-SQL Assembly.
 * @member {string} [databaseName] Gets or sets the name of the database.
 * 
 * @member {string} [assemblyName] Gets or sets the name of the assembly.
 * 
 * @member {string} [clrName] Gets or sets the name of the CLR.
 * 
 * @member {boolean} [isVisible] Gets or sets the switch indicating if this
 * assembly is visible or not.
 * 
 * @member {boolean} [isUserDefined] Gets or sets the switch indicating if
 * this assembly is user defined or not.
 * 
 * @member {array} [files] Gets or sets the list of files associated with the
 * assembly
 * 
 * @member {array} [dependencies] Gets or sets the list of dependencies
 * associated with the assembly
 * 
 * @member {string} [computeAccountName] Gets or sets the name of the Data
 * Lake Analytics account.
 * 
 * @member {string} [version] Gets or sets the version of the catalog item.
 * 
 */
function USqlAssembly(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.databaseName !== undefined) {
      this.databaseName = parameters.databaseName;
    }
    if (parameters.assemblyName !== undefined) {
      this.assemblyName = parameters.assemblyName;
    }
    if (parameters.clrName !== undefined) {
      this.clrName = parameters.clrName;
    }
    if (parameters.isVisible !== undefined) {
      this.isVisible = parameters.isVisible;
    }
    if (parameters.isUserDefined !== undefined) {
      this.isUserDefined = parameters.isUserDefined;
    }
    if (parameters.files) {
      var tempParametersfiles = [];
      parameters.files.forEach(function(element) {
        if (element) {
          element = new models['USqlAssemblyFileInfo'](element);
        }
        tempParametersfiles.push(element);
      });
      this.files = tempParametersfiles;
    }
    if (parameters.dependencies) {
      var tempParametersdependencies = [];
      parameters.dependencies.forEach(function(element1) {
        if (element1) {
          element1 = new models['USqlAssemblyDependencyInfo'](element1);
        }
        tempParametersdependencies.push(element1);
      });
      this.dependencies = tempParametersdependencies;
    }
    if (parameters.computeAccountName !== undefined) {
      this.computeAccountName = parameters.computeAccountName;
    }
    if (parameters.version !== undefined) {
      this.version = parameters.version;
    }
  }    
}


/**
 * Validate the payload against the USqlAssembly schema
 *
 * @param {JSON} payload
 *
 */
USqlAssembly.prototype.serialize = function () {
  var payload = {};
  if (this['databaseName'] !== null && this['databaseName'] !== undefined) {
    if (typeof this['databaseName'].valueOf() !== 'string') {
      throw new Error('this[\'databaseName\'] must be of type string.');
    }
    payload['databaseName'] = this['databaseName'];
  }

  if (this['assemblyName'] !== null && this['assemblyName'] !== undefined) {
    if (typeof this['assemblyName'].valueOf() !== 'string') {
      throw new Error('this[\'assemblyName\'] must be of type string.');
    }
    payload['assemblyName'] = this['assemblyName'];
  }

  if (this['clrName'] !== null && this['clrName'] !== undefined) {
    if (typeof this['clrName'].valueOf() !== 'string') {
      throw new Error('this[\'clrName\'] must be of type string.');
    }
    payload['clrName'] = this['clrName'];
  }

  if (this['isVisible'] !== null && this['isVisible'] !== undefined) {
    if (typeof this['isVisible'] !== 'boolean') {
      throw new Error('this[\'isVisible\'] must be of type boolean.');
    }
    payload['isVisible'] = this['isVisible'];
  }

  if (this['isUserDefined'] !== null && this['isUserDefined'] !== undefined) {
    if (typeof this['isUserDefined'] !== 'boolean') {
      throw new Error('this[\'isUserDefined\'] must be of type boolean.');
    }
    payload['isUserDefined'] = this['isUserDefined'];
  }

  if (util.isArray(this['files'])) {
    payload['files'] = [];
    for (var i = 0; i < this['files'].length; i++) {
      if (this['files'][i]) {
        if (payload['files'] === null || payload['files'] === undefined) {
          payload['files'] = {};
        }
        payload['files'][i] = this['files'][i].serialize();
      }
    }
  }

  if (util.isArray(this['dependencies'])) {
    payload['dependencies'] = [];
    for (var i1 = 0; i1 < this['dependencies'].length; i1++) {
      if (this['dependencies'][i1]) {
        if (payload['dependencies'] === null || payload['dependencies'] === undefined) {
          payload['dependencies'] = {};
        }
        payload['dependencies'][i1] = this['dependencies'][i1].serialize();
      }
    }
  }

  if (this['computeAccountName'] !== null && this['computeAccountName'] !== undefined) {
    if (typeof this['computeAccountName'].valueOf() !== 'string') {
      throw new Error('this[\'computeAccountName\'] must be of type string.');
    }
    payload['computeAccountName'] = this['computeAccountName'];
  }

  if (this['version'] !== null && this['version'] !== undefined) {
    if (typeof this['version'].valueOf() !== 'string') {
      throw new Error('this[\'version\'] must be of type string.');
    }
    payload['version'] = this['version'];
  }

  return payload;
};

/**
 * Deserialize the instance to USqlAssembly schema
 *
 * @param {JSON} instance
 *
 */
USqlAssembly.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['databaseName'] !== undefined) {
      this['databaseName'] = instance['databaseName'];
    }

    if (instance['assemblyName'] !== undefined) {
      this['assemblyName'] = instance['assemblyName'];
    }

    if (instance['clrName'] !== undefined) {
      this['clrName'] = instance['clrName'];
    }

    if (instance['isVisible'] !== undefined) {
      this['isVisible'] = instance['isVisible'];
    }

    if (instance['isUserDefined'] !== undefined) {
      this['isUserDefined'] = instance['isUserDefined'];
    }

    if (instance['files']) {
      var tempInstancefiles = [];
      instance['files'].forEach(function(element2) {
        if (element2) {
          element2 = new models['USqlAssemblyFileInfo']().deserialize(element2);
        }
        tempInstancefiles.push(element2);
      });
      this['files'] = tempInstancefiles;
    }

    if (instance['dependencies']) {
      var tempInstancedependencies = [];
      instance['dependencies'].forEach(function(element3) {
        if (element3) {
          element3 = new models['USqlAssemblyDependencyInfo']().deserialize(element3);
        }
        tempInstancedependencies.push(element3);
      });
      this['dependencies'] = tempInstancedependencies;
    }

    if (instance['computeAccountName'] !== undefined) {
      this['computeAccountName'] = instance['computeAccountName'];
    }

    if (instance['version'] !== undefined) {
      this['version'] = instance['version'];
    }
  }

  return this;
};

module.exports = USqlAssembly;
