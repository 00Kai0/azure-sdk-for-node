/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');

/**
 * @class
 * Initializes a new instance of the USqlExternalDataSource class.
 * @constructor
 * A Data Lake Analytics catalog U-SQL external datasource item.
 * @member {string} [databaseName] Gets or sets the name of the database.
 * 
 * @member {string} [externalDataSourceName] Gets or sets the name of the
 * external data source.
 * 
 * @member {string} [provider] Gets or sets the name of the provider for the
 * external data source.
 * 
 * @member {string} [providerString] Gets or sets the name of the provider
 * string for the external data source.
 * 
 * @member {array} [pushdownTypes] Gets or sets the list of types to push down
 * from the external data source.
 * 
 * @member {string} [computeAccountName] Gets or sets the name of the Data
 * Lake Analytics account.
 * 
 * @member {string} [version] Gets or sets the version of the catalog item.
 * 
 */
function USqlExternalDataSource(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.databaseName !== undefined) {
      this.databaseName = parameters.databaseName;
    }
    if (parameters.externalDataSourceName !== undefined) {
      this.externalDataSourceName = parameters.externalDataSourceName;
    }
    if (parameters.provider !== undefined) {
      this.provider = parameters.provider;
    }
    if (parameters.providerString !== undefined) {
      this.providerString = parameters.providerString;
    }
    if (parameters.pushdownTypes) {
      var tempParameterspushdownTypes = [];
      parameters.pushdownTypes.forEach(function(element) {
        if (element !== undefined) {
          element = element;
        }
        tempParameterspushdownTypes.push(element);
      });
      this.pushdownTypes = tempParameterspushdownTypes;
    }
    if (parameters.computeAccountName !== undefined) {
      this.computeAccountName = parameters.computeAccountName;
    }
    if (parameters.version !== undefined) {
      this.version = parameters.version;
    }
  }    
}


/**
 * Validate the payload against the USqlExternalDataSource schema
 *
 * @param {JSON} payload
 *
 */
USqlExternalDataSource.prototype.serialize = function () {
  var payload = {};
  if (this['databaseName'] !== null && this['databaseName'] !== undefined) {
    if (typeof this['databaseName'].valueOf() !== 'string') {
      throw new Error('this[\'databaseName\'] must be of type string.');
    }
    payload['databaseName'] = this['databaseName'];
  }

  if (this['externalDataSourceName'] !== null && this['externalDataSourceName'] !== undefined) {
    if (typeof this['externalDataSourceName'].valueOf() !== 'string') {
      throw new Error('this[\'externalDataSourceName\'] must be of type string.');
    }
    payload['externalDataSourceName'] = this['externalDataSourceName'];
  }

  if (this['provider'] !== null && this['provider'] !== undefined) {
    if (typeof this['provider'].valueOf() !== 'string') {
      throw new Error('this[\'provider\'] must be of type string.');
    }
    payload['provider'] = this['provider'];
  }

  if (this['providerString'] !== null && this['providerString'] !== undefined) {
    if (typeof this['providerString'].valueOf() !== 'string') {
      throw new Error('this[\'providerString\'] must be of type string.');
    }
    payload['providerString'] = this['providerString'];
  }

  if (util.isArray(this['pushdownTypes'])) {
    payload['pushdownTypes'] = [];
    for (var i = 0; i < this['pushdownTypes'].length; i++) {
      if (this['pushdownTypes'][i] !== null && this['pushdownTypes'][i] !== undefined) {
        if (typeof this['pushdownTypes'][i].valueOf() !== 'string') {
          throw new Error('this[\'pushdownTypes\'][i] must be of type string.');
        }
        if (payload['pushdownTypes'] === null || payload['pushdownTypes'] === undefined) {
          payload['pushdownTypes'] = {};
        }
        payload['pushdownTypes'][i] = this['pushdownTypes'][i];
      }
    }
  }

  if (this['computeAccountName'] !== null && this['computeAccountName'] !== undefined) {
    if (typeof this['computeAccountName'].valueOf() !== 'string') {
      throw new Error('this[\'computeAccountName\'] must be of type string.');
    }
    payload['computeAccountName'] = this['computeAccountName'];
  }

  if (this['version'] !== null && this['version'] !== undefined) {
    if (typeof this['version'].valueOf() !== 'string') {
      throw new Error('this[\'version\'] must be of type string.');
    }
    payload['version'] = this['version'];
  }

  return payload;
};

/**
 * Deserialize the instance to USqlExternalDataSource schema
 *
 * @param {JSON} instance
 *
 */
USqlExternalDataSource.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['databaseName'] !== undefined) {
      this['databaseName'] = instance['databaseName'];
    }

    if (instance['externalDataSourceName'] !== undefined) {
      this['externalDataSourceName'] = instance['externalDataSourceName'];
    }

    if (instance['provider'] !== undefined) {
      this['provider'] = instance['provider'];
    }

    if (instance['providerString'] !== undefined) {
      this['providerString'] = instance['providerString'];
    }

    if (instance['pushdownTypes']) {
      var tempInstancepushdownTypes = [];
      instance['pushdownTypes'].forEach(function(element1) {
        if (element1 !== undefined) {
          element1 = element1;
        }
        tempInstancepushdownTypes.push(element1);
      });
      this['pushdownTypes'] = tempInstancepushdownTypes;
    }

    if (instance['computeAccountName'] !== undefined) {
      this['computeAccountName'] = instance['computeAccountName'];
    }

    if (instance['version'] !== undefined) {
      this['version'] = instance['version'];
    }
  }

  return this;
};

module.exports = USqlExternalDataSource;
