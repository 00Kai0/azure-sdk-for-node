/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the EntityId class.
 * @constructor
 * A Data Lake Analytics catalog entity identifier object.
 * @member {object} [name] Gets or sets the name of the external table
 * associated with this database, schema and table.
 * 
 * @member {string} [name.firstPart] Gets or sets the name of the table
 * associated with this database and schema.
 * 
 * @member {string} [name.secondPart] Gets or sets the name of the table
 * associated with this database and schema.
 * 
 * @member {string} [name.thirdPart] Gets or sets the name of the table
 * associated with this database and schema.
 * 
 * @member {string} [name.server] Gets or sets the name of the table
 * associated with this database and schema.
 * 
 * @member {string} [version] Gets or sets the version of the external data
 * source.
 * 
 */
function EntityId(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name) {
      this.name = new models['DdlName'](parameters.name);
    }
    if (parameters.version !== undefined) {
      this.version = parameters.version;
    }
  }    
}


/**
 * Validate the payload against the EntityId schema
 *
 * @param {JSON} payload
 *
 */
EntityId.prototype.serialize = function () {
  var payload = {};
  if (this['name']) {
    payload['name'] = this['name'].serialize();
  }

  if (this['version'] !== null && this['version'] !== undefined) {
    if (typeof this['version'].valueOf() !== 'string') {
      throw new Error('this[\'version\'] must be of type string.');
    }
    payload['version'] = this['version'];
  }

  return payload;
};

/**
 * Deserialize the instance to EntityId schema
 *
 * @param {JSON} instance
 *
 */
EntityId.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['name']) {
      this['name'] = new models['DdlName']().deserialize(instance['name']);
    }

    if (instance['version'] !== undefined) {
      this['version'] = instance['version'];
    }
  }

  return this;
};

module.exports = EntityId;
