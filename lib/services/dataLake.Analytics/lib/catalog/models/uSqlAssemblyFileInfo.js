/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the USqlAssemblyFileInfo class.
 * @constructor
 * A Data Lake Analytics catalog U-SQL assembly file information item.
 * @member {string} [type] Gets or sets the assembly file type. Possible
 * values for this property include: 'Assembly', 'Resource'.
 * 
 * @member {string} [originalPath] Gets or sets the the original path to the
 * assembly file.
 * 
 * @member {string} [contentPath] Gets or sets the the content path to the
 * assembly file.
 * 
 */
function USqlAssemblyFileInfo(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.type !== undefined) {
      this.type = parameters.type;
    }
    if (parameters.originalPath !== undefined) {
      this.originalPath = parameters.originalPath;
    }
    if (parameters.contentPath !== undefined) {
      this.contentPath = parameters.contentPath;
    }
  }    
}


/**
 * Validate the payload against the USqlAssemblyFileInfo schema
 *
 * @param {JSON} payload
 *
 */
USqlAssemblyFileInfo.prototype.serialize = function () {
  var payload = {};
  if (this['type'] !== null && this['type'] !== undefined) {
    var allowedValues = [ 'Assembly', 'Resource' ];
    var thistype = this['type'];
    if (!allowedValues.some( function(item) { return item === thistype; })) {
      throw new Error(this['type'] + ' is not a valid value. The valid values are: ' + allowedValues);
    }
    payload['type'] = this['type'];
  }

  if (this['originalPath'] !== null && this['originalPath'] !== undefined) {
    if (typeof this['originalPath'].valueOf() !== 'string') {
      throw new Error('this[\'originalPath\'] must be of type string.');
    }
    payload['originalPath'] = this['originalPath'];
  }

  if (this['contentPath'] !== null && this['contentPath'] !== undefined) {
    if (typeof this['contentPath'].valueOf() !== 'string') {
      throw new Error('this[\'contentPath\'] must be of type string.');
    }
    payload['contentPath'] = this['contentPath'];
  }

  return payload;
};

/**
 * Deserialize the instance to USqlAssemblyFileInfo schema
 *
 * @param {JSON} instance
 *
 */
USqlAssemblyFileInfo.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['type'] !== undefined) {
      this['type'] = instance['type'];
    }

    if (instance['originalPath'] !== undefined) {
      this['originalPath'] = instance['originalPath'];
    }

    if (instance['contentPath'] !== undefined) {
      this['contentPath'] = instance['contentPath'];
    }
  }

  return this;
};

module.exports = USqlAssemblyFileInfo;
