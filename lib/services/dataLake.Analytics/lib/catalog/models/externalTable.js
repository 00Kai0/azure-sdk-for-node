/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the ExternalTable class.
 * @constructor
 * A Data Lake Analytics catalog external table item.
 * @member {string} [tableName] Gets or sets the name of the table associated
 * with this database and schema.
 * 
 * @member {object} [dataSource] Gets or sets the data source associated with
 * this external table.
 * 
 * @member {object} [dataSource.name] Gets or sets the name of the external
 * table associated with this database, schema and table.
 * 
 * @member {string} [dataSource.name.firstPart] Gets or sets the name of the
 * table associated with this database and schema.
 * 
 * @member {string} [dataSource.name.secondPart] Gets or sets the name of the
 * table associated with this database and schema.
 * 
 * @member {string} [dataSource.name.thirdPart] Gets or sets the name of the
 * table associated with this database and schema.
 * 
 * @member {string} [dataSource.name.server] Gets or sets the name of the
 * table associated with this database and schema.
 * 
 * @member {string} [dataSource.version] Gets or sets the version of the
 * external data source.
 * 
 */
function ExternalTable(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.tableName !== undefined) {
      this.tableName = parameters.tableName;
    }
    if (parameters.dataSource) {
      this.dataSource = new models['EntityId'](parameters.dataSource);
    }
  }    
}


/**
 * Validate the payload against the ExternalTable schema
 *
 * @param {JSON} payload
 *
 */
ExternalTable.prototype.serialize = function () {
  var payload = {};
  if (this['tableName'] !== null && this['tableName'] !== undefined) {
    if (typeof this['tableName'].valueOf() !== 'string') {
      throw new Error('this[\'tableName\'] must be of type string.');
    }
    payload['tableName'] = this['tableName'];
  }

  if (this['dataSource']) {
    payload['dataSource'] = this['dataSource'].serialize();
  }

  return payload;
};

/**
 * Deserialize the instance to ExternalTable schema
 *
 * @param {JSON} instance
 *
 */
ExternalTable.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['tableName'] !== undefined) {
      this['tableName'] = instance['tableName'];
    }

    if (instance['dataSource']) {
      this['dataSource'] = new models['EntityId']().deserialize(instance['dataSource']);
    }
  }

  return this;
};

module.exports = ExternalTable;
