/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the USqlType class.
 * @constructor
 * A Data Lake Analytics catalog U-SQL type item.
 * @member {string} [databaseName] Gets or sets the name of the database.
 * 
 * @member {string} [schemaName] Gets or sets the name of the schema
 * associated with this table and database.
 * 
 * @member {string} [typeName] Gets or sets the name of type for this type.
 * 
 * @member {string} [typeFamily] Gets or sets the type family for this type.
 * 
 * @member {string} [cSharpName] Gets or sets the C# name for this type.
 * 
 * @member {string} [fullCSharpName] Gets or sets the fully qualified C# name
 * for this type.
 * 
 * @member {number} [systemTypeId] Gets or sets the system type ID for this
 * type.
 * 
 * @member {number} [userTypeId] Gets or sets the user type ID for this type.
 * 
 * @member {number} [schemaId] Gets or sets the schema ID for this type.
 * 
 * @member {number} [principalId] Gets or sets the principal ID for this type.
 * 
 * @member {boolean} [isNullable] Gets or sets the the switch indicating if
 * this type is nullable.
 * 
 * @member {boolean} [isUserDefined] Gets or sets the the switch indicating if
 * this type is user defined.
 * 
 * @member {boolean} [isAssemblyType] Gets or sets the the switch indicating
 * if this type is an assembly type.
 * 
 * @member {boolean} [isTableType] Gets or sets the the switch indicating if
 * this type is a table type.
 * 
 * @member {boolean} [isComplexType] Gets or sets the the switch indicating if
 * this type is a complex type.
 * 
 */
function USqlType(parameters) {
  USqlType['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.databaseName !== undefined) {
      this.databaseName = parameters.databaseName;
    }
    if (parameters.schemaName !== undefined) {
      this.schemaName = parameters.schemaName;
    }
    if (parameters.typeName !== undefined) {
      this.typeName = parameters.typeName;
    }
    if (parameters.typeFamily !== undefined) {
      this.typeFamily = parameters.typeFamily;
    }
    if (parameters.cSharpName !== undefined) {
      this.cSharpName = parameters.cSharpName;
    }
    if (parameters.fullCSharpName !== undefined) {
      this.fullCSharpName = parameters.fullCSharpName;
    }
    if (parameters.systemTypeId !== undefined) {
      this.systemTypeId = parameters.systemTypeId;
    }
    if (parameters.userTypeId !== undefined) {
      this.userTypeId = parameters.userTypeId;
    }
    if (parameters.schemaId !== undefined) {
      this.schemaId = parameters.schemaId;
    }
    if (parameters.principalId !== undefined) {
      this.principalId = parameters.principalId;
    }
    if (parameters.isNullable !== undefined) {
      this.isNullable = parameters.isNullable;
    }
    if (parameters.isUserDefined !== undefined) {
      this.isUserDefined = parameters.isUserDefined;
    }
    if (parameters.isAssemblyType !== undefined) {
      this.isAssemblyType = parameters.isAssemblyType;
    }
    if (parameters.isTableType !== undefined) {
      this.isTableType = parameters.isTableType;
    }
    if (parameters.isComplexType !== undefined) {
      this.isComplexType = parameters.isComplexType;
    }
  }    
}

util.inherits(USqlType, models['CatalogItem']);

/**
 * Validate the payload against the USqlType schema
 *
 * @param {JSON} payload
 *
 */
USqlType.prototype.serialize = function () {
  var payload = USqlType['super_'].prototype.serialize.call(this);
  if (this['databaseName'] !== null && this['databaseName'] !== undefined) {
    if (typeof this['databaseName'].valueOf() !== 'string') {
      throw new Error('this[\'databaseName\'] must be of type string.');
    }
    payload['databaseName'] = this['databaseName'];
  }

  if (this['schemaName'] !== null && this['schemaName'] !== undefined) {
    if (typeof this['schemaName'].valueOf() !== 'string') {
      throw new Error('this[\'schemaName\'] must be of type string.');
    }
    payload['schemaName'] = this['schemaName'];
  }

  if (this['typeName'] !== null && this['typeName'] !== undefined) {
    if (typeof this['typeName'].valueOf() !== 'string') {
      throw new Error('this[\'typeName\'] must be of type string.');
    }
    payload['typeName'] = this['typeName'];
  }

  if (this['typeFamily'] !== null && this['typeFamily'] !== undefined) {
    if (typeof this['typeFamily'].valueOf() !== 'string') {
      throw new Error('this[\'typeFamily\'] must be of type string.');
    }
    payload['typeFamily'] = this['typeFamily'];
  }

  if (this['cSharpName'] !== null && this['cSharpName'] !== undefined) {
    if (typeof this['cSharpName'].valueOf() !== 'string') {
      throw new Error('this[\'cSharpName\'] must be of type string.');
    }
    payload['cSharpName'] = this['cSharpName'];
  }

  if (this['fullCSharpName'] !== null && this['fullCSharpName'] !== undefined) {
    if (typeof this['fullCSharpName'].valueOf() !== 'string') {
      throw new Error('this[\'fullCSharpName\'] must be of type string.');
    }
    payload['fullCSharpName'] = this['fullCSharpName'];
  }

  if (this['systemTypeId'] !== null && this['systemTypeId'] !== undefined) {
    if (typeof this['systemTypeId'] !== 'number') {
      throw new Error('this[\'systemTypeId\'] must be of type number.');
    }
    payload['systemTypeId'] = this['systemTypeId'];
  }

  if (this['userTypeId'] !== null && this['userTypeId'] !== undefined) {
    if (typeof this['userTypeId'] !== 'number') {
      throw new Error('this[\'userTypeId\'] must be of type number.');
    }
    payload['userTypeId'] = this['userTypeId'];
  }

  if (this['schemaId'] !== null && this['schemaId'] !== undefined) {
    if (typeof this['schemaId'] !== 'number') {
      throw new Error('this[\'schemaId\'] must be of type number.');
    }
    payload['schemaId'] = this['schemaId'];
  }

  if (this['principalId'] !== null && this['principalId'] !== undefined) {
    if (typeof this['principalId'] !== 'number') {
      throw new Error('this[\'principalId\'] must be of type number.');
    }
    payload['principalId'] = this['principalId'];
  }

  if (this['isNullable'] !== null && this['isNullable'] !== undefined) {
    if (typeof this['isNullable'] !== 'boolean') {
      throw new Error('this[\'isNullable\'] must be of type boolean.');
    }
    payload['isNullable'] = this['isNullable'];
  }

  if (this['isUserDefined'] !== null && this['isUserDefined'] !== undefined) {
    if (typeof this['isUserDefined'] !== 'boolean') {
      throw new Error('this[\'isUserDefined\'] must be of type boolean.');
    }
    payload['isUserDefined'] = this['isUserDefined'];
  }

  if (this['isAssemblyType'] !== null && this['isAssemblyType'] !== undefined) {
    if (typeof this['isAssemblyType'] !== 'boolean') {
      throw new Error('this[\'isAssemblyType\'] must be of type boolean.');
    }
    payload['isAssemblyType'] = this['isAssemblyType'];
  }

  if (this['isTableType'] !== null && this['isTableType'] !== undefined) {
    if (typeof this['isTableType'] !== 'boolean') {
      throw new Error('this[\'isTableType\'] must be of type boolean.');
    }
    payload['isTableType'] = this['isTableType'];
  }

  if (this['isComplexType'] !== null && this['isComplexType'] !== undefined) {
    if (typeof this['isComplexType'] !== 'boolean') {
      throw new Error('this[\'isComplexType\'] must be of type boolean.');
    }
    payload['isComplexType'] = this['isComplexType'];
  }

  return payload;
};

/**
 * Deserialize the instance to USqlType schema
 *
 * @param {JSON} instance
 *
 */
USqlType.prototype.deserialize = function (instance) {
  USqlType['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['databaseName'] !== undefined) {
      this['databaseName'] = instance['databaseName'];
    }

    if (instance['schemaName'] !== undefined) {
      this['schemaName'] = instance['schemaName'];
    }

    if (instance['typeName'] !== undefined) {
      this['typeName'] = instance['typeName'];
    }

    if (instance['typeFamily'] !== undefined) {
      this['typeFamily'] = instance['typeFamily'];
    }

    if (instance['cSharpName'] !== undefined) {
      this['cSharpName'] = instance['cSharpName'];
    }

    if (instance['fullCSharpName'] !== undefined) {
      this['fullCSharpName'] = instance['fullCSharpName'];
    }

    if (instance['systemTypeId'] !== undefined) {
      this['systemTypeId'] = instance['systemTypeId'];
    }

    if (instance['userTypeId'] !== undefined) {
      this['userTypeId'] = instance['userTypeId'];
    }

    if (instance['schemaId'] !== undefined) {
      this['schemaId'] = instance['schemaId'];
    }

    if (instance['principalId'] !== undefined) {
      this['principalId'] = instance['principalId'];
    }

    if (instance['isNullable'] !== undefined) {
      this['isNullable'] = instance['isNullable'];
    }

    if (instance['isUserDefined'] !== undefined) {
      this['isUserDefined'] = instance['isUserDefined'];
    }

    if (instance['isAssemblyType'] !== undefined) {
      this['isAssemblyType'] = instance['isAssemblyType'];
    }

    if (instance['isTableType'] !== undefined) {
      this['isTableType'] = instance['isTableType'];
    }

    if (instance['isComplexType'] !== undefined) {
      this['isComplexType'] = instance['isComplexType'];
    }
  }

  return this;
};

module.exports = USqlType;
