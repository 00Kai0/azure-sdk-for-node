/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the USqlCredential class.
 * @constructor
 * A Data Lake Analytics catalog U-SQL credential item.
 * @member {string} [databaseName] Gets or sets the name of the database the
 * credential is in.
 * 
 * @member {string} [identity] Gets or sets the name of the secret associated
 * with the credential.
 * 
 * @member {string} [credentialName] Gets or sets the name of the credential.
 * 
 * @member {string} [userName] Gets or sets the user name associated with the
 * credential.
 * 
 * @member {string} [computeAccountName] Gets or sets the name of the Data
 * Lake Analytics account.
 * 
 * @member {string} [version] Gets or sets the version of the catalog item.
 * 
 */
function USqlCredential(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.databaseName !== undefined) {
      this.databaseName = parameters.databaseName;
    }
    if (parameters.identity !== undefined) {
      this.identity = parameters.identity;
    }
    if (parameters.credentialName !== undefined) {
      this.credentialName = parameters.credentialName;
    }
    if (parameters.userName !== undefined) {
      this.userName = parameters.userName;
    }
    if (parameters.computeAccountName !== undefined) {
      this.computeAccountName = parameters.computeAccountName;
    }
    if (parameters.version !== undefined) {
      this.version = parameters.version;
    }
  }    
}


/**
 * Validate the payload against the USqlCredential schema
 *
 * @param {JSON} payload
 *
 */
USqlCredential.prototype.serialize = function () {
  var payload = {};
  if (this['databaseName'] !== null && this['databaseName'] !== undefined) {
    if (typeof this['databaseName'].valueOf() !== 'string') {
      throw new Error('this[\'databaseName\'] must be of type string.');
    }
    payload['databaseName'] = this['databaseName'];
  }

  if (this['identity'] !== null && this['identity'] !== undefined) {
    if (typeof this['identity'].valueOf() !== 'string') {
      throw new Error('this[\'identity\'] must be of type string.');
    }
    payload['identity'] = this['identity'];
  }

  if (this['credentialName'] !== null && this['credentialName'] !== undefined) {
    if (typeof this['credentialName'].valueOf() !== 'string') {
      throw new Error('this[\'credentialName\'] must be of type string.');
    }
    payload['credentialName'] = this['credentialName'];
  }

  if (this['userName'] !== null && this['userName'] !== undefined) {
    if (typeof this['userName'].valueOf() !== 'string') {
      throw new Error('this[\'userName\'] must be of type string.');
    }
    payload['userName'] = this['userName'];
  }

  if (this['computeAccountName'] !== null && this['computeAccountName'] !== undefined) {
    if (typeof this['computeAccountName'].valueOf() !== 'string') {
      throw new Error('this[\'computeAccountName\'] must be of type string.');
    }
    payload['computeAccountName'] = this['computeAccountName'];
  }

  if (this['version'] !== null && this['version'] !== undefined) {
    if (typeof this['version'].valueOf() !== 'string') {
      throw new Error('this[\'version\'] must be of type string.');
    }
    payload['version'] = this['version'];
  }

  return payload;
};

/**
 * Deserialize the instance to USqlCredential schema
 *
 * @param {JSON} instance
 *
 */
USqlCredential.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['databaseName'] !== undefined) {
      this['databaseName'] = instance['databaseName'];
    }

    if (instance['identity'] !== undefined) {
      this['identity'] = instance['identity'];
    }

    if (instance['credentialName'] !== undefined) {
      this['credentialName'] = instance['credentialName'];
    }

    if (instance['userName'] !== undefined) {
      this['userName'] = instance['userName'];
    }

    if (instance['computeAccountName'] !== undefined) {
      this['computeAccountName'] = instance['computeAccountName'];
    }

    if (instance['version'] !== undefined) {
      this['version'] = instance['version'];
    }
  }

  return this;
};

module.exports = USqlCredential;
