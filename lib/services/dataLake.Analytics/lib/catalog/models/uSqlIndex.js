/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the USqlIndex class.
 * @constructor
 * A Data Lake Analytics catalog U-SQL table index item.
 * @member {string} [name] Gets or sets the name of the index in the table.
 * 
 * @member {array} [indexKeys] Gets or sets the list of directed columns in
 * the index
 * 
 * @member {array} [columns] Gets or sets the list of columns in the index
 * 
 * @member {object} [distributionInfo] Gets or sets the distributions info of
 * the index
 * 
 * @member {number} [distributionInfo.type] Gets or sets the type of this
 * distribution.
 * 
 * @member {array} [distributionInfo.keys] Gets or sets the list of directed
 * columns in the distribution
 * 
 * @member {number} [distributionInfo.count] Gets or sets the count of indices
 * using this distribution.
 * 
 * @member {number} [distributionInfo.dynamicCount] Gets or sets the dynamic
 * count of indices using this distribution.
 * 
 * @member {string} [partitionFunction] Gets or sets partition function ID for
 * the index.
 * 
 * @member {array} [partitionKeyList] Gets or sets the list of partion keys in
 * the index
 * 
 * @member {array} [streamNames] Gets or sets the list of full paths to the
 * streams that contain this index in the DataLake account.
 * 
 * @member {boolean} [isColumnstore] Gets or sets the switch indicating if
 * this index is a columnstore index.
 * 
 * @member {number} [indexId] Gets or sets the ID of this index within the
 * table.
 * 
 * @member {boolean} [isUnique] Gets or sets the switch indicating if this
 * index is a unique index.
 * 
 */
function USqlIndex(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.indexKeys) {
      var tempParametersindexKeys = [];
      parameters.indexKeys.forEach(function(element) {
        if (element) {
          element = new models['USqlDirectedColumn'](element);
        }
        tempParametersindexKeys.push(element);
      });
      this.indexKeys = tempParametersindexKeys;
    }
    if (parameters.columns) {
      var tempParameterscolumns = [];
      parameters.columns.forEach(function(element1) {
        if (element1 !== undefined) {
          element1 = element1;
        }
        tempParameterscolumns.push(element1);
      });
      this.columns = tempParameterscolumns;
    }
    if (parameters.distributionInfo) {
      this.distributionInfo = new models['USqlDistributionInfo'](parameters.distributionInfo);
    }
    if (parameters.partitionFunction !== undefined) {
      this.partitionFunction = parameters.partitionFunction;
    }
    if (parameters.partitionKeyList) {
      var tempParameterspartitionKeyList = [];
      parameters.partitionKeyList.forEach(function(element2) {
        if (element2 !== undefined) {
          element2 = element2;
        }
        tempParameterspartitionKeyList.push(element2);
      });
      this.partitionKeyList = tempParameterspartitionKeyList;
    }
    if (parameters.streamNames) {
      var tempParametersstreamNames = [];
      parameters.streamNames.forEach(function(element3) {
        if (element3 !== undefined) {
          element3 = element3;
        }
        tempParametersstreamNames.push(element3);
      });
      this.streamNames = tempParametersstreamNames;
    }
    if (parameters.isColumnstore !== undefined) {
      this.isColumnstore = parameters.isColumnstore;
    }
    if (parameters.indexId !== undefined) {
      this.indexId = parameters.indexId;
    }
    if (parameters.isUnique !== undefined) {
      this.isUnique = parameters.isUnique;
    }
  }    
}


/**
 * Validate the payload against the USqlIndex schema
 *
 * @param {JSON} payload
 *
 */
USqlIndex.prototype.serialize = function () {
  var payload = {};
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (util.isArray(this['indexKeys'])) {
    payload['indexKeys'] = [];
    for (var i = 0; i < this['indexKeys'].length; i++) {
      if (this['indexKeys'][i]) {
        if (payload['indexKeys'] === null || payload['indexKeys'] === undefined) {
          payload['indexKeys'] = {};
        }
        payload['indexKeys'][i] = this['indexKeys'][i].serialize();
      }
    }
  }

  if (util.isArray(this['columns'])) {
    payload['columns'] = [];
    for (var i1 = 0; i1 < this['columns'].length; i1++) {
      if (this['columns'][i1] !== null && this['columns'][i1] !== undefined) {
        if (typeof this['columns'][i1].valueOf() !== 'string') {
          throw new Error('this[\'columns\'][i1] must be of type string.');
        }
        if (payload['columns'] === null || payload['columns'] === undefined) {
          payload['columns'] = {};
        }
        payload['columns'][i1] = this['columns'][i1];
      }
    }
  }

  if (this['distributionInfo']) {
    payload['distributionInfo'] = this['distributionInfo'].serialize();
  }

  if (this['partitionFunction'] !== null && this['partitionFunction'] !== undefined) {
    if (typeof this['partitionFunction'].valueOf() !== 'string') {
      throw new Error('this[\'partitionFunction\'] must be of type string.');
    }
    payload['partitionFunction'] = this['partitionFunction'];
  }

  if (util.isArray(this['partitionKeyList'])) {
    payload['partitionKeyList'] = [];
    for (var i2 = 0; i2 < this['partitionKeyList'].length; i2++) {
      if (this['partitionKeyList'][i2] !== null && this['partitionKeyList'][i2] !== undefined) {
        if (typeof this['partitionKeyList'][i2].valueOf() !== 'string') {
          throw new Error('this[\'partitionKeyList\'][i2] must be of type string.');
        }
        if (payload['partitionKeyList'] === null || payload['partitionKeyList'] === undefined) {
          payload['partitionKeyList'] = {};
        }
        payload['partitionKeyList'][i2] = this['partitionKeyList'][i2];
      }
    }
  }

  if (util.isArray(this['streamNames'])) {
    payload['streamNames'] = [];
    for (var i3 = 0; i3 < this['streamNames'].length; i3++) {
      if (this['streamNames'][i3] !== null && this['streamNames'][i3] !== undefined) {
        if (typeof this['streamNames'][i3].valueOf() !== 'string') {
          throw new Error('this[\'streamNames\'][i3] must be of type string.');
        }
        if (payload['streamNames'] === null || payload['streamNames'] === undefined) {
          payload['streamNames'] = {};
        }
        payload['streamNames'][i3] = this['streamNames'][i3];
      }
    }
  }

  if (this['isColumnstore'] !== null && this['isColumnstore'] !== undefined) {
    if (typeof this['isColumnstore'] !== 'boolean') {
      throw new Error('this[\'isColumnstore\'] must be of type boolean.');
    }
    payload['isColumnstore'] = this['isColumnstore'];
  }

  if (this['indexId'] !== null && this['indexId'] !== undefined) {
    if (typeof this['indexId'] !== 'number') {
      throw new Error('this[\'indexId\'] must be of type number.');
    }
    payload['indexId'] = this['indexId'];
  }

  if (this['isUnique'] !== null && this['isUnique'] !== undefined) {
    if (typeof this['isUnique'] !== 'boolean') {
      throw new Error('this[\'isUnique\'] must be of type boolean.');
    }
    payload['isUnique'] = this['isUnique'];
  }

  return payload;
};

/**
 * Deserialize the instance to USqlIndex schema
 *
 * @param {JSON} instance
 *
 */
USqlIndex.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['indexKeys']) {
      var tempInstanceindexKeys = [];
      instance['indexKeys'].forEach(function(element4) {
        if (element4) {
          element4 = new models['USqlDirectedColumn']().deserialize(element4);
        }
        tempInstanceindexKeys.push(element4);
      });
      this['indexKeys'] = tempInstanceindexKeys;
    }

    if (instance['columns']) {
      var tempInstancecolumns = [];
      instance['columns'].forEach(function(element5) {
        if (element5 !== undefined) {
          element5 = element5;
        }
        tempInstancecolumns.push(element5);
      });
      this['columns'] = tempInstancecolumns;
    }

    if (instance['distributionInfo']) {
      this['distributionInfo'] = new models['USqlDistributionInfo']().deserialize(instance['distributionInfo']);
    }

    if (instance['partitionFunction'] !== undefined) {
      this['partitionFunction'] = instance['partitionFunction'];
    }

    if (instance['partitionKeyList']) {
      var tempInstancepartitionKeyList = [];
      instance['partitionKeyList'].forEach(function(element6) {
        if (element6 !== undefined) {
          element6 = element6;
        }
        tempInstancepartitionKeyList.push(element6);
      });
      this['partitionKeyList'] = tempInstancepartitionKeyList;
    }

    if (instance['streamNames']) {
      var tempInstancestreamNames = [];
      instance['streamNames'].forEach(function(element7) {
        if (element7 !== undefined) {
          element7 = element7;
        }
        tempInstancestreamNames.push(element7);
      });
      this['streamNames'] = tempInstancestreamNames;
    }

    if (instance['isColumnstore'] !== undefined) {
      this['isColumnstore'] = instance['isColumnstore'];
    }

    if (instance['indexId'] !== undefined) {
      this['indexId'] = instance['indexId'];
    }

    if (instance['isUnique'] !== undefined) {
      this['isUnique'] = instance['isUnique'];
    }
  }

  return this;
};

module.exports = USqlIndex;
