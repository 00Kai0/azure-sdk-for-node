/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the USqlSecret class.
 * @constructor
 * A Data Lake Analytics catalog U-SQL secret item.
 * @member {string} [databaseName] Gets or sets the name of the database.
 * 
 * @member {string} [secretName] Gets or sets the name of the secret.
 * 
 * @member {date} [creationTime] Gets or sets the creation time of the
 * credential object. This is the only information returned about a secret
 * from a GET.
 * 
 * @member {string} [uri] Gets or sets the URI identifier for the secret in
 * the format <hostname>:<port>
 * 
 * @member {string} [password] Gets or sets the password for the secret to
 * pass in
 * 
 * @member {string} [computeAccountName] Gets or sets the name of the Data
 * Lake Analytics account.
 * 
 * @member {string} [version] Gets or sets the version of the catalog item.
 * 
 */
function USqlSecret(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.databaseName !== undefined) {
      this.databaseName = parameters.databaseName;
    }
    if (parameters.secretName !== undefined) {
      this.secretName = parameters.secretName;
    }
    if (parameters.creationTime !== undefined) {
      this.creationTime = parameters.creationTime;
    }
    if (parameters.uri !== undefined) {
      this.uri = parameters.uri;
    }
    if (parameters.password !== undefined) {
      this.password = parameters.password;
    }
    if (parameters.computeAccountName !== undefined) {
      this.computeAccountName = parameters.computeAccountName;
    }
    if (parameters.version !== undefined) {
      this.version = parameters.version;
    }
  }    
}


/**
 * Validate the payload against the USqlSecret schema
 *
 * @param {JSON} payload
 *
 */
USqlSecret.prototype.serialize = function () {
  var payload = {};
  if (this['databaseName'] !== null && this['databaseName'] !== undefined) {
    if (typeof this['databaseName'].valueOf() !== 'string') {
      throw new Error('this[\'databaseName\'] must be of type string.');
    }
    payload['databaseName'] = this['databaseName'];
  }

  if (this['secretName'] !== null && this['secretName'] !== undefined) {
    if (typeof this['secretName'].valueOf() !== 'string') {
      throw new Error('this[\'secretName\'] must be of type string.');
    }
    payload['secretName'] = this['secretName'];
  }

  if (this['creationTime']) {
    if (!(this['creationTime'] instanceof Date || typeof this['creationTime'].valueOf() === 'string' && !isNaN(Date.parse(this['creationTime'])))) {
      throw new Error('this[\'creationTime\'] must be of type date.');
    }
    payload['creationTime'] = (this['creationTime'] instanceof Date) ? this['creationTime'].toISOString() : this['creationTime'];
  }

  if (this['uri'] !== null && this['uri'] !== undefined) {
    if (typeof this['uri'].valueOf() !== 'string') {
      throw new Error('this[\'uri\'] must be of type string.');
    }
    payload['uri'] = this['uri'];
  }

  if (this['password'] !== null && this['password'] !== undefined) {
    if (typeof this['password'].valueOf() !== 'string') {
      throw new Error('this[\'password\'] must be of type string.');
    }
    payload['password'] = this['password'];
  }

  if (this['computeAccountName'] !== null && this['computeAccountName'] !== undefined) {
    if (typeof this['computeAccountName'].valueOf() !== 'string') {
      throw new Error('this[\'computeAccountName\'] must be of type string.');
    }
    payload['computeAccountName'] = this['computeAccountName'];
  }

  if (this['version'] !== null && this['version'] !== undefined) {
    if (typeof this['version'].valueOf() !== 'string') {
      throw new Error('this[\'version\'] must be of type string.');
    }
    payload['version'] = this['version'];
  }

  return payload;
};

/**
 * Deserialize the instance to USqlSecret schema
 *
 * @param {JSON} instance
 *
 */
USqlSecret.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['databaseName'] !== undefined) {
      this['databaseName'] = instance['databaseName'];
    }

    if (instance['secretName'] !== undefined) {
      this['secretName'] = instance['secretName'];
    }

    if (instance['creationTime']) {
      this['creationTime'] = new Date(instance['creationTime']);
    }
    else if (instance['creationTime'] !== undefined) {
      this['creationTime'] = instance['creationTime'];
    }

    if (instance['uri'] !== undefined) {
      this['uri'] = instance['uri'];
    }

    if (instance['password'] !== undefined) {
      this['password'] = instance['password'];
    }

    if (instance['computeAccountName'] !== undefined) {
      this['computeAccountName'] = instance['computeAccountName'];
    }

    if (instance['version'] !== undefined) {
      this['version'] = instance['version'];
    }
  }

  return this;
};

module.exports = USqlSecret;
