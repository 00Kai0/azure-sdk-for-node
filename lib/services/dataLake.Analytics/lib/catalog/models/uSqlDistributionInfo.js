/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the USqlDistributionInfo class.
 * @constructor
 * A Data Lake Analytics catalog U-SQL distribution information object.
 * @member {number} [type] Gets or sets the type of this distribution.
 * 
 * @member {array} [keys] Gets or sets the list of directed columns in the
 * distribution
 * 
 * @member {number} [count] Gets or sets the count of indices using this
 * distribution.
 * 
 * @member {number} [dynamicCount] Gets or sets the dynamic count of indices
 * using this distribution.
 * 
 */
function USqlDistributionInfo(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.type !== undefined) {
      this.type = parameters.type;
    }
    if (parameters.keys) {
      var tempParameterskeys = [];
      parameters.keys.forEach(function(element) {
        if (element) {
          element = new models['USqlDirectedColumn'](element);
        }
        tempParameterskeys.push(element);
      });
      this.keys = tempParameterskeys;
    }
    if (parameters.count !== undefined) {
      this.count = parameters.count;
    }
    if (parameters.dynamicCount !== undefined) {
      this.dynamicCount = parameters.dynamicCount;
    }
  }    
}


/**
 * Validate the payload against the USqlDistributionInfo schema
 *
 * @param {JSON} payload
 *
 */
USqlDistributionInfo.prototype.serialize = function () {
  var payload = {};
  if (this['type'] !== null && this['type'] !== undefined) {
    if (typeof this['type'] !== 'number') {
      throw new Error('this[\'type\'] must be of type number.');
    }
    payload['type'] = this['type'];
  }

  if (util.isArray(this['keys'])) {
    payload['keys'] = [];
    for (var i = 0; i < this['keys'].length; i++) {
      if (this['keys'][i]) {
        if (payload['keys'] === null || payload['keys'] === undefined) {
          payload['keys'] = {};
        }
        payload['keys'][i] = this['keys'][i].serialize();
      }
    }
  }

  if (this['count'] !== null && this['count'] !== undefined) {
    if (typeof this['count'] !== 'number') {
      throw new Error('this[\'count\'] must be of type number.');
    }
    payload['count'] = this['count'];
  }

  if (this['dynamicCount'] !== null && this['dynamicCount'] !== undefined) {
    if (typeof this['dynamicCount'] !== 'number') {
      throw new Error('this[\'dynamicCount\'] must be of type number.');
    }
    payload['dynamicCount'] = this['dynamicCount'];
  }

  return payload;
};

/**
 * Deserialize the instance to USqlDistributionInfo schema
 *
 * @param {JSON} instance
 *
 */
USqlDistributionInfo.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['type'] !== undefined) {
      this['type'] = instance['type'];
    }

    if (instance['keys']) {
      var tempInstancekeys = [];
      instance['keys'].forEach(function(element1) {
        if (element1) {
          element1 = new models['USqlDirectedColumn']().deserialize(element1);
        }
        tempInstancekeys.push(element1);
      });
      this['keys'] = tempInstancekeys;
    }

    if (instance['count'] !== undefined) {
      this['count'] = instance['count'];
    }

    if (instance['dynamicCount'] !== undefined) {
      this['dynamicCount'] = instance['dynamicCount'];
    }
  }

  return this;
};

module.exports = USqlDistributionInfo;
