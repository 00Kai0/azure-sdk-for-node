/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the USqlTableValuedFunction class.
 * @constructor
 * A Data Lake Analytics catalog U-SQL table valued function item.
 * @member {string} [databaseName] Gets or sets the name of the database.
 * 
 * @member {string} [schemaName] Gets or sets the name of the schema
 * associated with this database.
 * 
 * @member {string} [tvfName] Gets or sets the name of the table valued
 * function.
 * 
 * @member {string} [definition] Gets or sets the definition of the table
 * valued function.
 * 
 */
function USqlTableValuedFunction(parameters) {
  USqlTableValuedFunction['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.databaseName !== undefined) {
      this.databaseName = parameters.databaseName;
    }
    if (parameters.schemaName !== undefined) {
      this.schemaName = parameters.schemaName;
    }
    if (parameters.tvfName !== undefined) {
      this.tvfName = parameters.tvfName;
    }
    if (parameters.definition !== undefined) {
      this.definition = parameters.definition;
    }
  }    
}

util.inherits(USqlTableValuedFunction, models['CatalogItem']);

/**
 * Validate the payload against the USqlTableValuedFunction schema
 *
 * @param {JSON} payload
 *
 */
USqlTableValuedFunction.prototype.serialize = function () {
  var payload = USqlTableValuedFunction['super_'].prototype.serialize.call(this);
  if (this['databaseName'] !== null && this['databaseName'] !== undefined) {
    if (typeof this['databaseName'].valueOf() !== 'string') {
      throw new Error('this[\'databaseName\'] must be of type string.');
    }
    payload['databaseName'] = this['databaseName'];
  }

  if (this['schemaName'] !== null && this['schemaName'] !== undefined) {
    if (typeof this['schemaName'].valueOf() !== 'string') {
      throw new Error('this[\'schemaName\'] must be of type string.');
    }
    payload['schemaName'] = this['schemaName'];
  }

  if (this['tvfName'] !== null && this['tvfName'] !== undefined) {
    if (typeof this['tvfName'].valueOf() !== 'string') {
      throw new Error('this[\'tvfName\'] must be of type string.');
    }
    payload['tvfName'] = this['tvfName'];
  }

  if (this['definition'] !== null && this['definition'] !== undefined) {
    if (typeof this['definition'].valueOf() !== 'string') {
      throw new Error('this[\'definition\'] must be of type string.');
    }
    payload['definition'] = this['definition'];
  }

  return payload;
};

/**
 * Deserialize the instance to USqlTableValuedFunction schema
 *
 * @param {JSON} instance
 *
 */
USqlTableValuedFunction.prototype.deserialize = function (instance) {
  USqlTableValuedFunction['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['databaseName'] !== undefined) {
      this['databaseName'] = instance['databaseName'];
    }

    if (instance['schemaName'] !== undefined) {
      this['schemaName'] = instance['schemaName'];
    }

    if (instance['tvfName'] !== undefined) {
      this['tvfName'] = instance['tvfName'];
    }

    if (instance['definition'] !== undefined) {
      this['definition'] = instance['definition'];
    }
  }

  return this;
};

module.exports = USqlTableValuedFunction;
