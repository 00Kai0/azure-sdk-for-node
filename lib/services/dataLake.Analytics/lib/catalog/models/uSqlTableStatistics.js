/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the USqlTableStatistics class.
 * @constructor
 * A Data Lake Analytics catalog U-SQL table statistics item.
 * @member {string} [databaseName] Gets or sets the name of the database.
 * 
 * @member {string} [schemaName] Gets or sets the name of the schema
 * associated with this table and database.
 * 
 * @member {string} [tableName] Gets or sets the name of the table.
 * 
 * @member {string} [statisticsName] Gets or sets the name of the table
 * statistics.
 * 
 * @member {string} [userStatName] Gets or sets the name of the user
 * statistics.
 * 
 * @member {string} [statDataPath] Gets or sets the path to the statistics
 * data.
 * 
 * @member {date} [createTime] Gets or sets the creation time of the
 * statistics.
 * 
 * @member {date} [updateTime] Gets or sets the last time the statistics were
 * updated.
 * 
 * @member {boolean} [isUserCreated] Gets or sets the switch indicating if
 * these statistics are user created.
 * 
 * @member {boolean} [isAutoCreated] Gets or sets the switch indicating if
 * these statistics are automatically created.
 * 
 * @member {boolean} [hasFilter] Gets or sets the switch indicating if these
 * statistics have a filter.
 * 
 * @member {string} [filterDefinition] Gets or sets the filter definition for
 * the statistics.
 * 
 * @member {array} [colNames] Gets or sets the list of column names associated
 * with these statistics.
 * 
 */
function USqlTableStatistics(parameters) {
  USqlTableStatistics['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.databaseName !== undefined) {
      this.databaseName = parameters.databaseName;
    }
    if (parameters.schemaName !== undefined) {
      this.schemaName = parameters.schemaName;
    }
    if (parameters.tableName !== undefined) {
      this.tableName = parameters.tableName;
    }
    if (parameters.statisticsName !== undefined) {
      this.statisticsName = parameters.statisticsName;
    }
    if (parameters.userStatName !== undefined) {
      this.userStatName = parameters.userStatName;
    }
    if (parameters.statDataPath !== undefined) {
      this.statDataPath = parameters.statDataPath;
    }
    if (parameters.createTime !== undefined) {
      this.createTime = parameters.createTime;
    }
    if (parameters.updateTime !== undefined) {
      this.updateTime = parameters.updateTime;
    }
    if (parameters.isUserCreated !== undefined) {
      this.isUserCreated = parameters.isUserCreated;
    }
    if (parameters.isAutoCreated !== undefined) {
      this.isAutoCreated = parameters.isAutoCreated;
    }
    if (parameters.hasFilter !== undefined) {
      this.hasFilter = parameters.hasFilter;
    }
    if (parameters.filterDefinition !== undefined) {
      this.filterDefinition = parameters.filterDefinition;
    }
    if (parameters.colNames) {
      var tempParameterscolNames = [];
      parameters.colNames.forEach(function(element) {
        if (element !== undefined) {
          element = element;
        }
        tempParameterscolNames.push(element);
      });
      this.colNames = tempParameterscolNames;
    }
  }    
}

util.inherits(USqlTableStatistics, models['CatalogItem']);

/**
 * Validate the payload against the USqlTableStatistics schema
 *
 * @param {JSON} payload
 *
 */
USqlTableStatistics.prototype.serialize = function () {
  var payload = USqlTableStatistics['super_'].prototype.serialize.call(this);
  if (this['databaseName'] !== null && this['databaseName'] !== undefined) {
    if (typeof this['databaseName'].valueOf() !== 'string') {
      throw new Error('this[\'databaseName\'] must be of type string.');
    }
    payload['databaseName'] = this['databaseName'];
  }

  if (this['schemaName'] !== null && this['schemaName'] !== undefined) {
    if (typeof this['schemaName'].valueOf() !== 'string') {
      throw new Error('this[\'schemaName\'] must be of type string.');
    }
    payload['schemaName'] = this['schemaName'];
  }

  if (this['tableName'] !== null && this['tableName'] !== undefined) {
    if (typeof this['tableName'].valueOf() !== 'string') {
      throw new Error('this[\'tableName\'] must be of type string.');
    }
    payload['tableName'] = this['tableName'];
  }

  if (this['statisticsName'] !== null && this['statisticsName'] !== undefined) {
    if (typeof this['statisticsName'].valueOf() !== 'string') {
      throw new Error('this[\'statisticsName\'] must be of type string.');
    }
    payload['statisticsName'] = this['statisticsName'];
  }

  if (this['userStatName'] !== null && this['userStatName'] !== undefined) {
    if (typeof this['userStatName'].valueOf() !== 'string') {
      throw new Error('this[\'userStatName\'] must be of type string.');
    }
    payload['userStatName'] = this['userStatName'];
  }

  if (this['statDataPath'] !== null && this['statDataPath'] !== undefined) {
    if (typeof this['statDataPath'].valueOf() !== 'string') {
      throw new Error('this[\'statDataPath\'] must be of type string.');
    }
    payload['statDataPath'] = this['statDataPath'];
  }

  if (this['createTime']) {
    if (!(this['createTime'] instanceof Date || typeof this['createTime'].valueOf() === 'string' && !isNaN(Date.parse(this['createTime'])))) {
      throw new Error('this[\'createTime\'] must be of type date.');
    }
    payload['createTime'] = (this['createTime'] instanceof Date) ? this['createTime'].toISOString() : this['createTime'];
  }

  if (this['updateTime']) {
    if (!(this['updateTime'] instanceof Date || typeof this['updateTime'].valueOf() === 'string' && !isNaN(Date.parse(this['updateTime'])))) {
      throw new Error('this[\'updateTime\'] must be of type date.');
    }
    payload['updateTime'] = (this['updateTime'] instanceof Date) ? this['updateTime'].toISOString() : this['updateTime'];
  }

  if (this['isUserCreated'] !== null && this['isUserCreated'] !== undefined) {
    if (typeof this['isUserCreated'] !== 'boolean') {
      throw new Error('this[\'isUserCreated\'] must be of type boolean.');
    }
    payload['isUserCreated'] = this['isUserCreated'];
  }

  if (this['isAutoCreated'] !== null && this['isAutoCreated'] !== undefined) {
    if (typeof this['isAutoCreated'] !== 'boolean') {
      throw new Error('this[\'isAutoCreated\'] must be of type boolean.');
    }
    payload['isAutoCreated'] = this['isAutoCreated'];
  }

  if (this['hasFilter'] !== null && this['hasFilter'] !== undefined) {
    if (typeof this['hasFilter'] !== 'boolean') {
      throw new Error('this[\'hasFilter\'] must be of type boolean.');
    }
    payload['hasFilter'] = this['hasFilter'];
  }

  if (this['filterDefinition'] !== null && this['filterDefinition'] !== undefined) {
    if (typeof this['filterDefinition'].valueOf() !== 'string') {
      throw new Error('this[\'filterDefinition\'] must be of type string.');
    }
    payload['filterDefinition'] = this['filterDefinition'];
  }

  if (util.isArray(this['colNames'])) {
    payload['colNames'] = [];
    for (var i = 0; i < this['colNames'].length; i++) {
      if (this['colNames'][i] !== null && this['colNames'][i] !== undefined) {
        if (typeof this['colNames'][i].valueOf() !== 'string') {
          throw new Error('this[\'colNames\'][i] must be of type string.');
        }
        if (payload['colNames'] === null || payload['colNames'] === undefined) {
          payload['colNames'] = {};
        }
        payload['colNames'][i] = this['colNames'][i];
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to USqlTableStatistics schema
 *
 * @param {JSON} instance
 *
 */
USqlTableStatistics.prototype.deserialize = function (instance) {
  USqlTableStatistics['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['databaseName'] !== undefined) {
      this['databaseName'] = instance['databaseName'];
    }

    if (instance['schemaName'] !== undefined) {
      this['schemaName'] = instance['schemaName'];
    }

    if (instance['tableName'] !== undefined) {
      this['tableName'] = instance['tableName'];
    }

    if (instance['statisticsName'] !== undefined) {
      this['statisticsName'] = instance['statisticsName'];
    }

    if (instance['userStatName'] !== undefined) {
      this['userStatName'] = instance['userStatName'];
    }

    if (instance['statDataPath'] !== undefined) {
      this['statDataPath'] = instance['statDataPath'];
    }

    if (instance['createTime']) {
      this['createTime'] = new Date(instance['createTime']);
    }
    else if (instance['createTime'] !== undefined) {
      this['createTime'] = instance['createTime'];
    }

    if (instance['updateTime']) {
      this['updateTime'] = new Date(instance['updateTime']);
    }
    else if (instance['updateTime'] !== undefined) {
      this['updateTime'] = instance['updateTime'];
    }

    if (instance['isUserCreated'] !== undefined) {
      this['isUserCreated'] = instance['isUserCreated'];
    }

    if (instance['isAutoCreated'] !== undefined) {
      this['isAutoCreated'] = instance['isAutoCreated'];
    }

    if (instance['hasFilter'] !== undefined) {
      this['hasFilter'] = instance['hasFilter'];
    }

    if (instance['filterDefinition'] !== undefined) {
      this['filterDefinition'] = instance['filterDefinition'];
    }

    if (instance['colNames']) {
      var tempInstancecolNames = [];
      instance['colNames'].forEach(function(element1) {
        if (element1 !== undefined) {
          element1 = element1;
        }
        tempInstancecolNames.push(element1);
      });
      this['colNames'] = tempInstancecolNames;
    }
  }

  return this;
};

module.exports = USqlTableStatistics;
