/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the USqlTable class.
 * @constructor
 * A Data Lake Analytics catalog U-SQL table item.
 * @member {string} [databaseName] Gets or sets the name of the database.
 * 
 * @member {string} [schemaName] Gets or sets the name of the schema
 * associated with this table and database.
 * 
 * @member {string} [tableName] Gets or sets the name of the table.
 * 
 * @member {array} [columnList] Gets or sets the list of columns in this table
 * 
 * @member {array} [indexList] Gets or sets the list of indices in this table
 * 
 * @member {array} [partitionKeyList] Gets or sets the list of partition keys
 * in the table
 * 
 * @member {object} [externalTable] Gets or sets the external table associated
 * with the table.
 * 
 * @member {string} [externalTable.tableName] Gets or sets the name of the
 * table associated with this database and schema.
 * 
 * @member {object} [externalTable.dataSource] Gets or sets the data source
 * associated with this external table.
 * 
 * @member {object} [externalTable.dataSource.name] Gets or sets the name of
 * the external table associated with this database, schema and table.
 * 
 * @member {string} [externalTable.dataSource.name.firstPart] Gets or sets the
 * name of the table associated with this database and schema.
 * 
 * @member {string} [externalTable.dataSource.name.secondPart] Gets or sets
 * the name of the table associated with this database and schema.
 * 
 * @member {string} [externalTable.dataSource.name.thirdPart] Gets or sets the
 * name of the table associated with this database and schema.
 * 
 * @member {string} [externalTable.dataSource.name.server] Gets or sets the
 * name of the table associated with this database and schema.
 * 
 * @member {string} [externalTable.dataSource.version] Gets or sets the
 * version of the external data source.
 * 
 * @member {string} [computeAccountName] Gets or sets the name of the Data
 * Lake Analytics account.
 * 
 * @member {string} [version] Gets or sets the version of the catalog item.
 * 
 */
function USqlTable(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.databaseName !== undefined) {
      this.databaseName = parameters.databaseName;
    }
    if (parameters.schemaName !== undefined) {
      this.schemaName = parameters.schemaName;
    }
    if (parameters.tableName !== undefined) {
      this.tableName = parameters.tableName;
    }
    if (parameters.columnList) {
      var tempParameterscolumnList = [];
      parameters.columnList.forEach(function(element) {
        if (element) {
          element = new models['USqlTableColumn'](element);
        }
        tempParameterscolumnList.push(element);
      });
      this.columnList = tempParameterscolumnList;
    }
    if (parameters.indexList) {
      var tempParametersindexList = [];
      parameters.indexList.forEach(function(element1) {
        if (element1) {
          element1 = new models['USqlIndex'](element1);
        }
        tempParametersindexList.push(element1);
      });
      this.indexList = tempParametersindexList;
    }
    if (parameters.partitionKeyList) {
      var tempParameterspartitionKeyList = [];
      parameters.partitionKeyList.forEach(function(element2) {
        if (element2 !== undefined) {
          element2 = element2;
        }
        tempParameterspartitionKeyList.push(element2);
      });
      this.partitionKeyList = tempParameterspartitionKeyList;
    }
    if (parameters.externalTable) {
      this.externalTable = new models['ExternalTable'](parameters.externalTable);
    }
    if (parameters.computeAccountName !== undefined) {
      this.computeAccountName = parameters.computeAccountName;
    }
    if (parameters.version !== undefined) {
      this.version = parameters.version;
    }
  }    
}


/**
 * Validate the payload against the USqlTable schema
 *
 * @param {JSON} payload
 *
 */
USqlTable.prototype.serialize = function () {
  var payload = {};
  if (this['databaseName'] !== null && this['databaseName'] !== undefined) {
    if (typeof this['databaseName'].valueOf() !== 'string') {
      throw new Error('this[\'databaseName\'] must be of type string.');
    }
    payload['databaseName'] = this['databaseName'];
  }

  if (this['schemaName'] !== null && this['schemaName'] !== undefined) {
    if (typeof this['schemaName'].valueOf() !== 'string') {
      throw new Error('this[\'schemaName\'] must be of type string.');
    }
    payload['schemaName'] = this['schemaName'];
  }

  if (this['tableName'] !== null && this['tableName'] !== undefined) {
    if (typeof this['tableName'].valueOf() !== 'string') {
      throw new Error('this[\'tableName\'] must be of type string.');
    }
    payload['tableName'] = this['tableName'];
  }

  if (util.isArray(this['columnList'])) {
    payload['columnList'] = [];
    for (var i = 0; i < this['columnList'].length; i++) {
      if (this['columnList'][i]) {
        if (payload['columnList'] === null || payload['columnList'] === undefined) {
          payload['columnList'] = {};
        }
        payload['columnList'][i] = this['columnList'][i].serialize();
      }
    }
  }

  if (util.isArray(this['indexList'])) {
    payload['indexList'] = [];
    for (var i1 = 0; i1 < this['indexList'].length; i1++) {
      if (this['indexList'][i1]) {
        if (payload['indexList'] === null || payload['indexList'] === undefined) {
          payload['indexList'] = {};
        }
        payload['indexList'][i1] = this['indexList'][i1].serialize();
      }
    }
  }

  if (util.isArray(this['partitionKeyList'])) {
    payload['partitionKeyList'] = [];
    for (var i2 = 0; i2 < this['partitionKeyList'].length; i2++) {
      if (this['partitionKeyList'][i2] !== null && this['partitionKeyList'][i2] !== undefined) {
        if (typeof this['partitionKeyList'][i2].valueOf() !== 'string') {
          throw new Error('this[\'partitionKeyList\'][i2] must be of type string.');
        }
        if (payload['partitionKeyList'] === null || payload['partitionKeyList'] === undefined) {
          payload['partitionKeyList'] = {};
        }
        payload['partitionKeyList'][i2] = this['partitionKeyList'][i2];
      }
    }
  }

  if (this['externalTable']) {
    payload['externalTable'] = this['externalTable'].serialize();
  }

  if (this['computeAccountName'] !== null && this['computeAccountName'] !== undefined) {
    if (typeof this['computeAccountName'].valueOf() !== 'string') {
      throw new Error('this[\'computeAccountName\'] must be of type string.');
    }
    payload['computeAccountName'] = this['computeAccountName'];
  }

  if (this['version'] !== null && this['version'] !== undefined) {
    if (typeof this['version'].valueOf() !== 'string') {
      throw new Error('this[\'version\'] must be of type string.');
    }
    payload['version'] = this['version'];
  }

  return payload;
};

/**
 * Deserialize the instance to USqlTable schema
 *
 * @param {JSON} instance
 *
 */
USqlTable.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['databaseName'] !== undefined) {
      this['databaseName'] = instance['databaseName'];
    }

    if (instance['schemaName'] !== undefined) {
      this['schemaName'] = instance['schemaName'];
    }

    if (instance['tableName'] !== undefined) {
      this['tableName'] = instance['tableName'];
    }

    if (instance['columnList']) {
      var tempInstancecolumnList = [];
      instance['columnList'].forEach(function(element3) {
        if (element3) {
          element3 = new models['USqlTableColumn']().deserialize(element3);
        }
        tempInstancecolumnList.push(element3);
      });
      this['columnList'] = tempInstancecolumnList;
    }

    if (instance['indexList']) {
      var tempInstanceindexList = [];
      instance['indexList'].forEach(function(element4) {
        if (element4) {
          element4 = new models['USqlIndex']().deserialize(element4);
        }
        tempInstanceindexList.push(element4);
      });
      this['indexList'] = tempInstanceindexList;
    }

    if (instance['partitionKeyList']) {
      var tempInstancepartitionKeyList = [];
      instance['partitionKeyList'].forEach(function(element5) {
        if (element5 !== undefined) {
          element5 = element5;
        }
        tempInstancepartitionKeyList.push(element5);
      });
      this['partitionKeyList'] = tempInstancepartitionKeyList;
    }

    if (instance['externalTable']) {
      this['externalTable'] = new models['ExternalTable']().deserialize(instance['externalTable']);
    }

    if (instance['computeAccountName'] !== undefined) {
      this['computeAccountName'] = instance['computeAccountName'];
    }

    if (instance['version'] !== undefined) {
      this['version'] = instance['version'];
    }
  }

  return this;
};

module.exports = USqlTable;
