/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Clusters
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricManagementClient.
 */
export interface Clusters {


    /**
     * @summary Create a ServiceFabric cluster
     *
     * Create cluster resource
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * @summary Create a ServiceFabric cluster
     *
     * Create cluster resource
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    create(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.Cluster>): void;
    create(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * @summary Delete cluster resource
     *
     * Delete cluster resource
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete cluster resource
     *
     * Delete cluster resource
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, clusterName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get cluster resource
     *
     * Get cluster resource
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * @summary Get cluster resource
     *
     * Get cluster resource
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    get(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.Cluster>): void;
    get(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * @summary Update cluster configuration
     *
     * Update cluster configuration
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * @summary Update cluster configuration
     *
     * Update cluster configuration
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    update(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.Cluster>): void;
    update(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * @summary List cluster resource by resource group
     *
     * List cluster resource by resource group
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * @summary List cluster resource by resource group
     *
     * List cluster resource by resource group
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ClusterListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;


    /**
     * @summary List cluster resource
     *
     * List cluster resource
     *
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * @summary List cluster resource
     *
     * List cluster resource
     *
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    list(callback: ServiceCallback<models.ClusterListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;


    /**
     * @summary Create a ServiceFabric cluster
     *
     * Create cluster resource
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * @summary Create a ServiceFabric cluster
     *
     * Create cluster resource
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    beginCreate(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.Cluster>): void;
    beginCreate(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * @summary Update cluster configuration
     *
     * Update cluster configuration
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * @summary Update cluster configuration
     *
     * Update cluster configuration
     *
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    beginUpdate(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.Cluster>): void;
    beginUpdate(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;
}

/**
 * @class
 * ClusterVersions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricManagementClient.
 */
export interface ClusterVersions {


    /**
     * @summary Get cluster code versions
     *
     * Get cluster code versions by location
     *
     *
     * @param {string} location The location for the cluster code versions, this is
     * different from cluster location
     *
     * @param {string} clusterVersion The cluster code version
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterCodeVersionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(location: string, clusterVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterCodeVersionsListResult>>;

    /**
     * @summary Get cluster code versions
     *
     * Get cluster code versions by location
     *
     *
     * @param {string} location The location for the cluster code versions, this is
     * different from cluster location
     *
     * @param {string} clusterVersion The cluster code version
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterCodeVersionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterCodeVersionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterCodeVersionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(location: string, clusterVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterCodeVersionsListResult>;
    get(location: string, clusterVersion: string, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;
    get(location: string, clusterVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;


    /**
     * @summary Get cluster code versions by environment
     *
     * Get cluster code versions by environment
     *
     *
     * @param {string} location The location for the cluster code versions, this is
     * different from cluster location
     *
     * @param {string} environment Cluster operating system, the default means all.
     * Possible values include: 'Windows', 'Linux'
     *
     * @param {string} clusterVersion The cluster code version
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterCodeVersionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByEnvironmentWithHttpOperationResponse(location: string, environment: string, clusterVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterCodeVersionsListResult>>;

    /**
     * @summary Get cluster code versions by environment
     *
     * Get cluster code versions by environment
     *
     *
     * @param {string} location The location for the cluster code versions, this is
     * different from cluster location
     *
     * @param {string} environment Cluster operating system, the default means all.
     * Possible values include: 'Windows', 'Linux'
     *
     * @param {string} clusterVersion The cluster code version
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterCodeVersionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterCodeVersionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterCodeVersionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByEnvironment(location: string, environment: string, clusterVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterCodeVersionsListResult>;
    getByEnvironment(location: string, environment: string, clusterVersion: string, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;
    getByEnvironment(location: string, environment: string, clusterVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;


    /**
     * @summary List cluster code versions by location
     *
     * List cluster code versions by location
     *
     *
     * @param {string} location The location for the cluster code versions, this is
     * different from cluster location
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterCodeVersionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterCodeVersionsListResult>>;

    /**
     * @summary List cluster code versions by location
     *
     * List cluster code versions by location
     *
     *
     * @param {string} location The location for the cluster code versions, this is
     * different from cluster location
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterCodeVersionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterCodeVersionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterCodeVersionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterCodeVersionsListResult>;
    list(location: string, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;
    list(location: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;


    /**
     * @summary List cluster code versions by environment
     *
     * List cluster code versions by environment
     *
     *
     * @param {string} location The location for the cluster code versions, this is
     * different from cluster location
     *
     * @param {string} environment Cluster operating system, the default means all.
     * Possible values include: 'Windows', 'Linux'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterCodeVersionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByEnvironmentWithHttpOperationResponse(location: string, environment: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterCodeVersionsListResult>>;

    /**
     * @summary List cluster code versions by environment
     *
     * List cluster code versions by environment
     *
     *
     * @param {string} location The location for the cluster code versions, this is
     * different from cluster location
     *
     * @param {string} environment Cluster operating system, the default means all.
     * Possible values include: 'Windows', 'Linux'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterCodeVersionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterCodeVersionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterCodeVersionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByEnvironment(location: string, environment: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterCodeVersionsListResult>;
    listByEnvironment(location: string, environment: string, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;
    listByEnvironment(location: string, environment: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricManagementClient.
 */
export interface Operations {


    /**
     * @summary Lists all of the available ServiceFabric Resource Manager REST API
     * operations.
     *
     * @param {string} apiVersion The version of the ServiceFabric resouce provider
     * api
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * @summary Lists all of the available ServiceFabric Resource Manager REST API
     * operations.
     *
     * @param {string} apiVersion The version of the ServiceFabric resouce provider
     * api
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(apiVersion: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(apiVersion: string, callback: ServiceCallback<models.OperationListResult>): void;
    list(apiVersion: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * @summary Lists all of the available ServiceFabric Resource Manager REST API
     * operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * @summary Lists all of the available ServiceFabric Resource Manager REST API
     * operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * ApplicationType
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricManagementClient.
 */
export interface ApplicationType {


    /**
     * Returns an application type name resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationTypeResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationTypeResource>>;

    /**
     * Returns an application type name resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationTypeResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationTypeResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationTypeResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationTypeResource>;
    get(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.ApplicationTypeResource>): void;
    get(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationTypeResource>): void;


    /**
     * Creates the application type name resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The application type name resource.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationTypeResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    putWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ApplicationTypeResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationTypeResource>>;

    /**
     * Creates the application type name resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The application type name resource.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationTypeResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationTypeResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationTypeResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    put(resourceGroupName: string, clusterName: string, parameters: models.ApplicationTypeResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationTypeResource>;
    put(resourceGroupName: string, clusterName: string, parameters: models.ApplicationTypeResource, callback: ServiceCallback<models.ApplicationTypeResource>): void;
    put(resourceGroupName: string, clusterName: string, parameters: models.ApplicationTypeResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationTypeResource>): void;


    /**
     * Updates the application type name resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The application type name resource for patch
     * operations.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationTypeResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    patchWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ApplicationTypeResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationTypeResource>>;

    /**
     * Updates the application type name resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The application type name resource for patch
     * operations.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationTypeResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationTypeResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationTypeResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    patch(resourceGroupName: string, clusterName: string, parameters: models.ApplicationTypeResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationTypeResource>;
    patch(resourceGroupName: string, clusterName: string, parameters: models.ApplicationTypeResource, callback: ServiceCallback<models.ApplicationTypeResource>): void;
    patch(resourceGroupName: string, clusterName: string, parameters: models.ApplicationTypeResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationTypeResource>): void;


    /**
     * Deletes the application type name resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the application type name resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, clusterName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns all application type names in the specified cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationTypeResourceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationTypeResourceList>>;

    /**
     * Returns all application type names in the specified cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationTypeResourceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationTypeResourceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationTypeResourceList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationTypeResourceList>;
    list(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.ApplicationTypeResourceList>): void;
    list(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationTypeResourceList>): void;
}

/**
 * @class
 * Version
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricManagementClient.
 */
export interface Version {


    /**
     * Returns an application type version resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VersionResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VersionResource>>;

    /**
     * Returns an application type version resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VersionResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VersionResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VersionResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VersionResource>;
    get(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.VersionResource>): void;
    get(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VersionResource>): void;


    /**
     * Provisions an application type version resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The application type version resource.
     *
     * @param {string} [parameters.appPackageUrl] The URL to the application
     * package
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VersionResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    putWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.VersionResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VersionResource>>;

    /**
     * Provisions an application type version resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The application type version resource.
     *
     * @param {string} [parameters.appPackageUrl] The URL to the application
     * package
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VersionResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VersionResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VersionResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    put(resourceGroupName: string, clusterName: string, parameters: models.VersionResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VersionResource>;
    put(resourceGroupName: string, clusterName: string, parameters: models.VersionResource, callback: ServiceCallback<models.VersionResource>): void;
    put(resourceGroupName: string, clusterName: string, parameters: models.VersionResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VersionResource>): void;


    /**
     * Updates an application type version resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The application type version resource for patch
     * operations.
     *
     * @param {string} [parameters.appPackageUrl] The URL to the application
     * package
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VersionResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    patchWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.VersionResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VersionResource>>;

    /**
     * Updates an application type version resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The application type version resource for patch
     * operations.
     *
     * @param {string} [parameters.appPackageUrl] The URL to the application
     * package
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VersionResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VersionResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VersionResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    patch(resourceGroupName: string, clusterName: string, parameters: models.VersionResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VersionResource>;
    patch(resourceGroupName: string, clusterName: string, parameters: models.VersionResource, callback: ServiceCallback<models.VersionResource>): void;
    patch(resourceGroupName: string, clusterName: string, parameters: models.VersionResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VersionResource>): void;


    /**
     * Unprovisions an application type version resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Unprovisions an application type version resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, clusterName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns all versions for the specified application type.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VersionResourceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VersionResourceList>>;

    /**
     * Returns all versions for the specified application type.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VersionResourceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VersionResourceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VersionResourceList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VersionResourceList>;
    list(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.VersionResourceList>): void;
    list(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VersionResourceList>): void;
}

/**
 * @class
 * Application
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricManagementClient.
 */
export interface Application {


    /**
     * Returns an application resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationResource>>;

    /**
     * Returns an application resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationResource>;
    get(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.ApplicationResource>): void;
    get(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationResource>): void;


    /**
     * Creates or updates an application resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The application resource.
     *
     * @param {string} [parameters.typeVersion]
     *
     * @param {array} [parameters.parameters]
     *
     * @param {object} [parameters.upgradePolicy]
     *
     * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout]
     *
     * @param {boolean} [parameters.upgradePolicy.forceRestart]
     *
     * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
     *
     * @param {object} [parameters.upgradePolicy.applicationHealthPolicy]
     *
     * @param {boolean}
     * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
     * Indicates whether warnings are treated with the same severity as errors.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     * The maximum allowed percentage of unhealthy deployed applications. Allowed
     * values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed
     * applications that can be unhealthy before the application is considered in
     * error.
     * This is calculated by dividing the number of unhealthy deployed applications
     * over the number of nodes where the application is currently deployed on in
     * the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
     * The maximum allowed percentage of unhealthy partitions per service. Allowed
     * values are Byte values from zero to 100
     *
     * The percentage represents the maximum tolerated percentage of partitions
     * that can be unhealthy before the service is considered in error.
     * If the percentage is respected but there is at least one unhealthy
     * partition, the health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy partitions
     * over the total number of partitions in the service.
     * The computation rounds up to tolerate one failure on small numbers of
     * partitions. Default percentage is zero.
     *
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
     * The maximum allowed percentage of unhealthy replicas per partition. Allowed
     * values are Byte values from zero to 100.
     *
     * The percentage represents the maximum tolerated percentage of replicas that
     * can be unhealthy before the partition is considered in error.
     * If the percentage is respected but there is at least one unhealthy replica,
     * the health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy replicas
     * over the total number of replicas in the partition.
     * The computation rounds up to tolerate one failure on small numbers of
     * replicas. Default percentage is zero.
     *
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
     * The maximum maximum allowed percentage of unhealthy services. Allowed values
     * are Byte values from zero to 100.
     *
     * The percentage represents the maximum tolerated percentage of services that
     * can be unhealthy before the application is considered in error.
     * If the percentage is respected but there is at least one unhealthy service,
     * the health is evaluated as Warning.
     * This is calculated by dividing the number of unhealthy services of the
     * specific service type over the total number of services of the specific
     * service type.
     * The computation rounds up to tolerate one failure on small numbers of
     * services. Default percentage is zero.
     *
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
     *
     * @param {number} [parameters.minimumNodes] The minimum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. If this property is set to zero, no capacity will be reserved.
     * The value of this property cannot be more than the value of the MaximumNodes
     * property.
     *
     * @param {number} [parameters.maximumNodes] The maximum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. By default, the value of this property is zero and it means
     * that the services can be placed on any node.
     *
     * @param {boolean} [parameters.removeApplicationCapacity] The version of the
     * application type
     *
     * @param {array} [parameters.metrics]
     *
     * @param {string} [parameters.typeName]
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    putWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ApplicationResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationResource>>;

    /**
     * Creates or updates an application resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The application resource.
     *
     * @param {string} [parameters.typeVersion]
     *
     * @param {array} [parameters.parameters]
     *
     * @param {object} [parameters.upgradePolicy]
     *
     * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout]
     *
     * @param {boolean} [parameters.upgradePolicy.forceRestart]
     *
     * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
     *
     * @param {object} [parameters.upgradePolicy.applicationHealthPolicy]
     *
     * @param {boolean}
     * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
     * Indicates whether warnings are treated with the same severity as errors.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     * The maximum allowed percentage of unhealthy deployed applications. Allowed
     * values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed
     * applications that can be unhealthy before the application is considered in
     * error.
     * This is calculated by dividing the number of unhealthy deployed applications
     * over the number of nodes where the application is currently deployed on in
     * the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
     * The maximum allowed percentage of unhealthy partitions per service. Allowed
     * values are Byte values from zero to 100
     *
     * The percentage represents the maximum tolerated percentage of partitions
     * that can be unhealthy before the service is considered in error.
     * If the percentage is respected but there is at least one unhealthy
     * partition, the health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy partitions
     * over the total number of partitions in the service.
     * The computation rounds up to tolerate one failure on small numbers of
     * partitions. Default percentage is zero.
     *
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
     * The maximum allowed percentage of unhealthy replicas per partition. Allowed
     * values are Byte values from zero to 100.
     *
     * The percentage represents the maximum tolerated percentage of replicas that
     * can be unhealthy before the partition is considered in error.
     * If the percentage is respected but there is at least one unhealthy replica,
     * the health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy replicas
     * over the total number of replicas in the partition.
     * The computation rounds up to tolerate one failure on small numbers of
     * replicas. Default percentage is zero.
     *
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
     * The maximum maximum allowed percentage of unhealthy services. Allowed values
     * are Byte values from zero to 100.
     *
     * The percentage represents the maximum tolerated percentage of services that
     * can be unhealthy before the application is considered in error.
     * If the percentage is respected but there is at least one unhealthy service,
     * the health is evaluated as Warning.
     * This is calculated by dividing the number of unhealthy services of the
     * specific service type over the total number of services of the specific
     * service type.
     * The computation rounds up to tolerate one failure on small numbers of
     * services. Default percentage is zero.
     *
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
     *
     * @param {number} [parameters.minimumNodes] The minimum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. If this property is set to zero, no capacity will be reserved.
     * The value of this property cannot be more than the value of the MaximumNodes
     * property.
     *
     * @param {number} [parameters.maximumNodes] The maximum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. By default, the value of this property is zero and it means
     * that the services can be placed on any node.
     *
     * @param {boolean} [parameters.removeApplicationCapacity] The version of the
     * application type
     *
     * @param {array} [parameters.metrics]
     *
     * @param {string} [parameters.typeName]
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    put(resourceGroupName: string, clusterName: string, parameters: models.ApplicationResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationResource>;
    put(resourceGroupName: string, clusterName: string, parameters: models.ApplicationResource, callback: ServiceCallback<models.ApplicationResource>): void;
    put(resourceGroupName: string, clusterName: string, parameters: models.ApplicationResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationResource>): void;


    /**
     * Updates an application resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The application resource for patch operations.
     *
     * @param {string} [parameters.typeVersion]
     *
     * @param {array} [parameters.parameters]
     *
     * @param {object} [parameters.upgradePolicy]
     *
     * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout]
     *
     * @param {boolean} [parameters.upgradePolicy.forceRestart]
     *
     * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
     *
     * @param {object} [parameters.upgradePolicy.applicationHealthPolicy]
     *
     * @param {boolean}
     * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
     * Indicates whether warnings are treated with the same severity as errors.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     * The maximum allowed percentage of unhealthy deployed applications. Allowed
     * values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed
     * applications that can be unhealthy before the application is considered in
     * error.
     * This is calculated by dividing the number of unhealthy deployed applications
     * over the number of nodes where the application is currently deployed on in
     * the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
     * The maximum allowed percentage of unhealthy partitions per service. Allowed
     * values are Byte values from zero to 100
     *
     * The percentage represents the maximum tolerated percentage of partitions
     * that can be unhealthy before the service is considered in error.
     * If the percentage is respected but there is at least one unhealthy
     * partition, the health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy partitions
     * over the total number of partitions in the service.
     * The computation rounds up to tolerate one failure on small numbers of
     * partitions. Default percentage is zero.
     *
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
     * The maximum allowed percentage of unhealthy replicas per partition. Allowed
     * values are Byte values from zero to 100.
     *
     * The percentage represents the maximum tolerated percentage of replicas that
     * can be unhealthy before the partition is considered in error.
     * If the percentage is respected but there is at least one unhealthy replica,
     * the health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy replicas
     * over the total number of replicas in the partition.
     * The computation rounds up to tolerate one failure on small numbers of
     * replicas. Default percentage is zero.
     *
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
     * The maximum maximum allowed percentage of unhealthy services. Allowed values
     * are Byte values from zero to 100.
     *
     * The percentage represents the maximum tolerated percentage of services that
     * can be unhealthy before the application is considered in error.
     * If the percentage is respected but there is at least one unhealthy service,
     * the health is evaluated as Warning.
     * This is calculated by dividing the number of unhealthy services of the
     * specific service type over the total number of services of the specific
     * service type.
     * The computation rounds up to tolerate one failure on small numbers of
     * services. Default percentage is zero.
     *
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
     *
     * @param {number} [parameters.minimumNodes] The minimum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. If this property is set to zero, no capacity will be reserved.
     * The value of this property cannot be more than the value of the MaximumNodes
     * property.
     *
     * @param {number} [parameters.maximumNodes] The maximum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. By default, the value of this property is zero and it means
     * that the services can be placed on any node.
     *
     * @param {boolean} [parameters.removeApplicationCapacity] The version of the
     * application type
     *
     * @param {array} [parameters.metrics]
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationResourceUpdate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    patchWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ApplicationResourceUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationResourceUpdate>>;

    /**
     * Updates an application resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The application resource for patch operations.
     *
     * @param {string} [parameters.typeVersion]
     *
     * @param {array} [parameters.parameters]
     *
     * @param {object} [parameters.upgradePolicy]
     *
     * @param {number} [parameters.upgradePolicy.upgradeReplicaSetCheckTimeout]
     *
     * @param {boolean} [parameters.upgradePolicy.forceRestart]
     *
     * @param {object} [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckWaitDuration]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckStableDuration]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeTimeout]
     *
     * @param {string}
     * [parameters.upgradePolicy.rollingUpgradeMonitoringPolicy.upgradeDomainTimeout]
     *
     * @param {object} [parameters.upgradePolicy.applicationHealthPolicy]
     *
     * @param {boolean}
     * [parameters.upgradePolicy.applicationHealthPolicy.considerWarningAsError]
     * Indicates whether warnings are treated with the same severity as errors.
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.maxPercentUnhealthyDeployedApplications]
     * The maximum allowed percentage of unhealthy deployed applications. Allowed
     * values are Byte values from zero to 100.
     * The percentage represents the maximum tolerated percentage of deployed
     * applications that can be unhealthy before the application is considered in
     * error.
     * This is calculated by dividing the number of unhealthy deployed applications
     * over the number of nodes where the application is currently deployed on in
     * the cluster.
     * The computation rounds up to tolerate one failure on small numbers of nodes.
     * Default percentage is zero.
     *
     *
     * @param {object}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy]
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService]
     * The maximum allowed percentage of unhealthy partitions per service. Allowed
     * values are Byte values from zero to 100
     *
     * The percentage represents the maximum tolerated percentage of partitions
     * that can be unhealthy before the service is considered in error.
     * If the percentage is respected but there is at least one unhealthy
     * partition, the health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy partitions
     * over the total number of partitions in the service.
     * The computation rounds up to tolerate one failure on small numbers of
     * partitions. Default percentage is zero.
     *
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition]
     * The maximum allowed percentage of unhealthy replicas per partition. Allowed
     * values are Byte values from zero to 100.
     *
     * The percentage represents the maximum tolerated percentage of replicas that
     * can be unhealthy before the partition is considered in error.
     * If the percentage is respected but there is at least one unhealthy replica,
     * the health is evaluated as Warning.
     * The percentage is calculated by dividing the number of unhealthy replicas
     * over the total number of replicas in the partition.
     * The computation rounds up to tolerate one failure on small numbers of
     * replicas. Default percentage is zero.
     *
     *
     * @param {number}
     * [parameters.upgradePolicy.applicationHealthPolicy.defaultServiceTypeHealthPolicy.maxPercentUnhealthyServices]
     * The maximum maximum allowed percentage of unhealthy services. Allowed values
     * are Byte values from zero to 100.
     *
     * The percentage represents the maximum tolerated percentage of services that
     * can be unhealthy before the application is considered in error.
     * If the percentage is respected but there is at least one unhealthy service,
     * the health is evaluated as Warning.
     * This is calculated by dividing the number of unhealthy services of the
     * specific service type over the total number of services of the specific
     * service type.
     * The computation rounds up to tolerate one failure on small numbers of
     * services. Default percentage is zero.
     *
     *
     * @param {array}
     * [parameters.upgradePolicy.applicationHealthPolicy.serviceTypeHealthPolicyMap]
     *
     * @param {number} [parameters.minimumNodes] The minimum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. If this property is set to zero, no capacity will be reserved.
     * The value of this property cannot be more than the value of the MaximumNodes
     * property.
     *
     * @param {number} [parameters.maximumNodes] The maximum number of nodes where
     * Service Fabric will reserve capacity for this application. Note that this
     * does not mean that the services of this application will be placed on all of
     * those nodes. By default, the value of this property is zero and it means
     * that the services can be placed on any node.
     *
     * @param {boolean} [parameters.removeApplicationCapacity] The version of the
     * application type
     *
     * @param {array} [parameters.metrics]
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationResourceUpdate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationResourceUpdate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationResourceUpdate} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    patch(resourceGroupName: string, clusterName: string, parameters: models.ApplicationResourceUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationResourceUpdate>;
    patch(resourceGroupName: string, clusterName: string, parameters: models.ApplicationResourceUpdate, callback: ServiceCallback<models.ApplicationResourceUpdate>): void;
    patch(resourceGroupName: string, clusterName: string, parameters: models.ApplicationResourceUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationResourceUpdate>): void;


    /**
     * Deletes an application resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an application resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, clusterName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns all application resources in the specified cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationResourceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationResourceList>>;

    /**
     * Returns all application resources in the specified cluster.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationResourceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationResourceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationResourceList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationResourceList>;
    list(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.ApplicationResourceList>): void;
    list(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationResourceList>): void;
}

/**
 * @class
 * Service
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricManagementClient.
 */
export interface Service {


    /**
     * Returns a service resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceResource>>;

    /**
     * Returns a service resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceResource>;
    get(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.ServiceResource>): void;
    get(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceResource>): void;


    /**
     * Creates or updates a service resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The service resource.
     *
     * @param {string} [parameters.placementConstraints] The placement constraints
     * as a string. Placement constraints are boolean expressions on node
     * properties and allow for restricting a service to particular nodes based on
     * the service requirements. For example, to place a service on nodes where
     * NodeType is blue specify the following: "NodeColor == blue)".
     *
     * @param {array} [parameters.correlationScheme]
     *
     * @param {array} [parameters.serviceLoadMetrics]
     *
     * @param {array} [parameters.servicePlacementPolicies]
     *
     * @param {string} [parameters.defaultMoveCost] Possible values include:
     * 'Zero', 'Low', 'Medium', 'High'
     *
     * @param {string} [parameters.serviceKind] Possible values include: 'Invalid',
     * 'Stateless', 'Stateful'
     *
     * @param {string} [parameters.serviceTypeName] The name of the service type
     *
     * @param {object} [parameters.partitionDescription]
     *
     * @param {string} parameters.partitionDescription.partitionScheme Polymorphic
     * Discriminator
     *
     * @param {string} parameters.serviceResourceType Polymorphic Discriminator
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    putWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ServiceResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceResource>>;

    /**
     * Creates or updates a service resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The service resource.
     *
     * @param {string} [parameters.placementConstraints] The placement constraints
     * as a string. Placement constraints are boolean expressions on node
     * properties and allow for restricting a service to particular nodes based on
     * the service requirements. For example, to place a service on nodes where
     * NodeType is blue specify the following: "NodeColor == blue)".
     *
     * @param {array} [parameters.correlationScheme]
     *
     * @param {array} [parameters.serviceLoadMetrics]
     *
     * @param {array} [parameters.servicePlacementPolicies]
     *
     * @param {string} [parameters.defaultMoveCost] Possible values include:
     * 'Zero', 'Low', 'Medium', 'High'
     *
     * @param {string} [parameters.serviceKind] Possible values include: 'Invalid',
     * 'Stateless', 'Stateful'
     *
     * @param {string} [parameters.serviceTypeName] The name of the service type
     *
     * @param {object} [parameters.partitionDescription]
     *
     * @param {string} parameters.partitionDescription.partitionScheme Polymorphic
     * Discriminator
     *
     * @param {string} parameters.serviceResourceType Polymorphic Discriminator
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    put(resourceGroupName: string, clusterName: string, parameters: models.ServiceResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceResource>;
    put(resourceGroupName: string, clusterName: string, parameters: models.ServiceResource, callback: ServiceCallback<models.ServiceResource>): void;
    put(resourceGroupName: string, clusterName: string, parameters: models.ServiceResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceResource>): void;


    /**
     * Updates a service resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The service resource for patch operations.
     *
     * @param {string} [parameters.placementConstraints] The placement constraints
     * as a string. Placement constraints are boolean expressions on node
     * properties and allow for restricting a service to particular nodes based on
     * the service requirements. For example, to place a service on nodes where
     * NodeType is blue specify the following: "NodeColor == blue)".
     *
     * @param {array} [parameters.correlationScheme]
     *
     * @param {array} [parameters.serviceLoadMetrics]
     *
     * @param {array} [parameters.servicePlacementPolicies]
     *
     * @param {string} [parameters.defaultMoveCost] Possible values include:
     * 'Zero', 'Low', 'Medium', 'High'
     *
     * @param {string} parameters.serviceResourceType Polymorphic Discriminator
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceResourceUpdate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    patchWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ServiceResourceUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceResourceUpdate>>;

    /**
     * Updates a service resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The service resource for patch operations.
     *
     * @param {string} [parameters.placementConstraints] The placement constraints
     * as a string. Placement constraints are boolean expressions on node
     * properties and allow for restricting a service to particular nodes based on
     * the service requirements. For example, to place a service on nodes where
     * NodeType is blue specify the following: "NodeColor == blue)".
     *
     * @param {array} [parameters.correlationScheme]
     *
     * @param {array} [parameters.serviceLoadMetrics]
     *
     * @param {array} [parameters.servicePlacementPolicies]
     *
     * @param {string} [parameters.defaultMoveCost] Possible values include:
     * 'Zero', 'Low', 'Medium', 'High'
     *
     * @param {string} parameters.serviceResourceType Polymorphic Discriminator
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceResourceUpdate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceResourceUpdate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceResourceUpdate} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    patch(resourceGroupName: string, clusterName: string, parameters: models.ServiceResourceUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceResourceUpdate>;
    patch(resourceGroupName: string, clusterName: string, parameters: models.ServiceResourceUpdate, callback: ServiceCallback<models.ServiceResourceUpdate>): void;
    patch(resourceGroupName: string, clusterName: string, parameters: models.ServiceResourceUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceResourceUpdate>): void;


    /**
     * Deletes a service resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a service resource with the specified name.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, clusterName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns all service resources in the specified application.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceResourceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceResourceList>>;

    /**
     * Returns all service resources in the specified application.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceResourceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceResourceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceResourceList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceResourceList>;
    list(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.ServiceResourceList>): void;
    list(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceResourceList>): void;
}
