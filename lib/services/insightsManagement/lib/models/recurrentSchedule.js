/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');

/**
 * @class
 * Initializes a new instance of the RecurrentSchedule class.
 * @constructor
 * The scheduling constraints for when the profile begins.
 *
 * @member {string} [timeZone] the time zone for the hours of the profile. See
 * examples of valid timezone ids over here:
 * https://msdn.microsoft.com/en-us/library/azure/dn931928.aspx
 * 
 * @member {array} [days] the collection of days that the profile takes effect
 * on. Possible values are Sunday through Saturday.
 * 
 * @member {array} [hours] A collection of hours that the profile takes effect
 * on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not
 * supported).
 * 
 * @member {array} [minutes] A collection of minutes at which the profile
 * takes effect at.
 * 
 */
function RecurrentSchedule() {
}

/**
 * Defines the metadata of RecurrentSchedule
 *
 * @returns {object} metadata of RecurrentSchedule
 *
 */
RecurrentSchedule.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'RecurrentSchedule',
    type: {
      name: 'Composite',
      className: 'RecurrentSchedule',
      modelProperties: {
        timeZone: {
          required: false,
          serializedName: 'timeZone',
          type: {
            name: 'String'
          }
        },
        days: {
          required: false,
          serializedName: 'days',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        hours: {
          required: false,
          serializedName: 'hours',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'NumberElementType',
                type: {
                  name: 'Number'
                }
            }
          }
        },
        minutes: {
          required: false,
          serializedName: 'minutes',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'NumberElementType',
                type: {
                  name: 'Number'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = RecurrentSchedule;
